<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WinterLeaf.Engine.Omni</name>
    </assembly>
    <members>
        <member name="T:WinterLeaf.Engine.Classes.Helpers.arrayObject`1">
            <summary>
            Used to display member properties of SimObjects which store data in Arrays.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Helpers.arrayObject`1.#ctor(System.Int32,System.String,System.String,System.Boolean,WinterLeaf.Engine.Classes.ModelBase)">
            <summary>
            Creates a new Array Object handler
            </summary>
            <param name="upperbound">Number of elements</param>
            <param name="name">Name of Parameter</param>
            <param name="structuretype">Not Used</param>
            <param name="isscript">Not Used</param>
            <param name="parent">Parent Proxy Object.</param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Helpers.arrayObject`1.getUpperbound">
            <summary>
            Gets the upperbound defined for the array.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Helpers.arrayObject`1.Item(System.Int32)">
            <summary>
            Gets the element at this position in the array.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.LiveScripts.csFactory">
            <summary>
            This class is implemented as a Threaded Singleton.
            Its primary purpose is to Monitor the location set in the
            game folder for XML and CS files and recompile them 
            whenever they change.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.LiveScripts.csFactory.#ctor">
            <summary>
            In the singleton design the you do not create the object using a constructor.
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Classes.LiveScripts.csFactory._instance">
            <summary>
            Used for the Singleton Implementation
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Classes.LiveScripts.csFactory.syncRoot">
            <summary>
            Used for the Singleton Implementation
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Classes.LiveScripts.csFactory._fswatcher">
            <summary>
            The file System Watcher object that watches the Location specified for CS Scripts in the
            Game folder.
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Classes.LiveScripts.csFactory.Events">
            <summary>
            This is a Concurrent Queue which handles logging the file system events.
            This is because if the event the file system watcher raises is not handled in
            a timely fashion the file system watcher will time out and stop reporting changes.
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Classes.LiveScripts.csFactory._isRunning">
            <summary>
            Flag used to stop the thread watching the folders.
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Classes.LiveScripts.csFactory._thread">
            <summary>
            The thread that watches the events in the Events Queue.
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Classes.LiveScripts.csFactory._overrideData">
            <summary>
            Dictionary to track the index and instance 
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Classes.LiveScripts.csFactory._overrideXmlFilenameIndex">
            <summary>
            Dictionary for filename/index
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Classes.LiveScripts.csFactory._location">
            <summary>
            The folder location to monitor.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.LiveScripts.csFactory.ProcessXML(System.String)">
            <summary>
            Reads the specified XML file and creates the Override Definition
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.LiveScripts.csFactory.StartWatchers">
            <summary>
            Creates the FileSystemWatcher and wires up the events.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.LiveScripts.csFactory.evntTimer_Elapsed">
            <summary>
            Thread body that monitors the event Queue.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.LiveScripts.csFactory.GetFileType(System.IO.FileSystemEventArgs)">
            <summary>
            Utility function that determines if the Script file is a C# or XML File.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.LiveScripts.csFactory.onDelete(System.IO.FileSystemEventArgs)">
            <summary>
            What to do when a file is deleted.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.LiveScripts.csFactory.onChanged(System.IO.FileSystemEventArgs)">
            <summary>
            What to do when a file changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.LiveScripts.csFactory.onCreated(System.IO.FileSystemEventArgs)">
            <summary>
            What to do when a file is changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.LiveScripts.csFactory.RegisterScriptXml(System.String,WinterLeaf.Engine.Classes.LiveScripts.xmlOverrideData)">
            <summary>
            Registers an Override with the engine.
            </summary>
            <param name="xmlfilename"></param>
            <param name="dta"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.LiveScripts.csFactory.UnRegisterScriptXml(System.String)">
            <summary>
            Unregisters an override with the engine.
            </summary>
            <param name="xmlfilename"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.LiveScripts.csFactory.StartMonitoring(System.String)">
            <summary>
            Starts the folder monitoring for CS and XML file Changes
            To the GameFolder specified.  The Folder is
            Relational to the Game Folder.
            </summary>
            <param name="GameFolder">Location off the Game Folder to monitor.</param>
            <returns>True/False if it was able to start the monitor.</returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.LiveScripts.csFactory.StopMonitoring">
            <summary>
            Stops the monitoring of the folder system for CS and XML Changes.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.LiveScripts.csFactory.GetMemberOverrides(System.String)">
            <summary>
            Returns the member overrides for a specific namespace.
            </summary>
            <param name="namespc">Namespace to search for.</param>
            <returns></returns>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.LiveScripts.csFactory.Instance">
            <summary>
            This is how you access the instance of the singleton.
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Decorations.MemberFunctionConsoleInteraction">
            <summary>
            Internal use, Decorator used to inform the OMNI Framework that if this function is called by the engine to pass it back to the engine.  Avoid C++ calling C# to call c++
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Decorations.MemberFunctionConsoleInteraction.#ctor(System.Boolean)">
            <summary>
            This decoration is used to flag a function for exposure in the console by the autogenerator, not intended to be used by developer.
            </summary>
            <param name="exposeToConsole">Allow the function to be called from the game console.</param>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Decorations.MemberFunctionConsoleInteraction.ExposeToConsole">
            <summary>
            Flag which determines if the function is exposed to the game console.
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Decorations.MemberGroup">
            <summary>
            Used by the code generator to group Model properties by type defined in the T3D engine.
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Helpers.Dialogs">
            <summary>
            Class used to handle Dialog Prompts.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Helpers.Dialogs.FileDialog(System.Windows.Forms.FileDialog@,WinterLeaf.Engine.Classes.Helpers.Dialogs.onDialogFinished)">
            <summary>
            Opens a "FileDialog" prompt window and returns the Dialog Result if blocking, otherwise DialogResult.OK.
            Call will block if a delegate isn't passed.
            </summary>
            <param name="fd">Reference of a FileDialog </param>
            <param name="onfinish">If a delegate is passed, then it doesn't block.</param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Helpers.Dialogs.FolderBrowserDialog(System.Windows.Forms.FolderBrowserDialog@,WinterLeaf.Engine.Classes.Helpers.Dialogs.onDialogFinished)">
            <summary>
            Opens a FolderBrowserDialog and returns a Dialog Result if blocking, otherwise a Dialog.OK
            </summary>
            <param name="fbd">Reference fo a FolderBrowserDialog</param>
            <param name="onfinish">If a delegate is passed, then it doesn't block.</param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Helpers.Dialogs.OpenFileDialog(System.Windows.Forms.OpenFileDialog@,WinterLeaf.Engine.Classes.Helpers.Dialogs.onDialogFinished)">
            <summary>
            Opens a OpenFileDialog window and returns a DialogResult if blocking otherwise dialog.ok
            </summary>
            <param name="fbd">Reference to a OpenFileDialog</param>
            <param name="onfinish">If a delegate is passed, then it doesn't block.</param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Helpers.Dialogs.SaveFileDialog(System.Windows.Forms.SaveFileDialog@,WinterLeaf.Engine.Classes.Helpers.Dialogs.onDialogFinished)">
            <summary>
            Opens a SaveFileDialog and returns a Dialogresult if blocking otherwise a dialog.ok
            </summary>
            <param name="fbd">Reference to a SaveFileDialog</param>
            <param name="onfinish">If a delegate is passed, then it doesn't block.</param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Helpers.Dialogs.onDialogFinished">
            <summary>
            
            </summary>
            <param name="dialog"></param>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Helpers.IndexingResult">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Helpers.LibraryManager">
            <summary>
            Internal Use.
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Decorations.ConsoleInteraction">
            <summary>
            This class is Method Decorator to expose a function in an assembly to the T3D engine.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Decorations.ConsoleInteraction.#ctor(System.Boolean)">
            <summary>
            This decoration is used to flag a function for exposure in the console.
            </summary>
            <param name="exposeToConsole">Allow the function to be called from the game console.</param>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Decorations.ConsoleInteraction.ExposeToConsole">
            <summary>
            Flag which determines if the function is exposed to the game console.
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Helpers.CustomClassDef">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Helpers.CustomQueue">
            <summary>
            Internal Use.
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.SafeNativeMethods">
            <summary>
            Contains all of the externs available from T3D dll.
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Extensions.MyExtensions">
            <summary>
              This class is used to extend primary data types for ease with the Torque Engine.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.isObject(System.String)">
            <summary>
            Checks if the string is an object in the engine.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.delete(System.String)">
            <summary>
            If it is a simobject, it will call delete.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.getName(System.String)">
            <summary>
            If it is a simobject, it will call delete.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.getID(System.String)">
            <summary>
            If it is a simobject, it will getname.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.getUID(System.String)">
            <summary>
            Returns the simobject id as a uint
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.call(System.String,System.String,System.String[])">
            <summary>
            Calls a member function on the simobject
            </summary>
            <param name="value"></param>
            <param name="function"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.call(System.String,System.String)">
            <summary>
            Calls a member function on a simobject.
            </summary>
            <param name="value"></param>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsSbyte(System.String)">
            <summary>
            Converts string to a sByte
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsString(System.String)">
            <summary>
              Converts a string to a string, done for consistency.
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsTsObject(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsTsObject(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsString(System.Int32)">
            <summary>
              Returns the int as a string
            </summary>
            <param name="value"> int </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsString(System.SByte)">
            <summary>
            Converts sByte to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsString(System.UInt32)">
            <summary>
              Returns the uint as a string
            </summary>
            <param name="value"> uint </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsString(System.Double)">
            <summary>
              Returns the double as a string
            </summary>
            <param name="value"> double </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsString(System.Int64)">
            <summary>
            Returns the long as a string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsString(System.UInt64)">
            <summary>
            Returns the long as a string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsString(System.Int16)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsString(System.UInt16)">
            <summary>
              Returns the float as a string
            </summary>
            <param name="value"> </param>
            <returns> float </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsString(System.Single)">
            <summary>
              Returns the float as a string
            </summary>
            <param name="value"> </param>
            <returns> float </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsString(System.Boolean)">
            <summary>
            Converts a bool to a string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsBool(System.Single)">
            <summary>
              if the value is >=1 returns true.
            </summary>
            <param name="value"> </param>
            <returns> float </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsBool(System.Double)">
            <summary>
              if the value is >=1 returns true.
            </summary>
            <param name="value"> </param>
            <returns> double </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsBool(System.Int32)">
            <summary>
              if the value is >=1 returns true.
            </summary>
            <param name="value"> </param>
            <returns> int </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsBool(System.UInt32)">
            <summary>
              if the value is >=1 returns true.
            </summary>
            <param name="value"> </param>
            <returns> uint </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsBool(System.String)">
            <summary>
              if the string is numerical and the value is >1 it returns true If the string = "true" it returns true.
            </summary>
            <param name="value"> </param>
            <returns> string </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsInt(System.String)">
            <summary>
              returns the string as a int.
            </summary>
            <param name="value"> </param>
            <returns> int </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsUInt(System.String)">
            <summary>
              returns the string as a int.
            </summary>
            <param name="value"> </param>
            <returns> int </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsByte(System.String)">
            <summary>
            Converts a string of one character to a byte.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsUint(System.String)">
            <summary>
              returns the string as a unint
            </summary>
            <param name="value"> uint </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsFloat(System.String)">
            <summary>
              Returns the string as a float.
            </summary>
            <param name="value"> float </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsDouble(System.String)">
            <summary>
              Returns the string as a double.
            </summary>
            <param name="value"> double </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.AsLong(System.String)">
            <summary>
              Converts a string to a long.
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Extensions.MyExtensions.IsNumeric(System.String)">
            <summary>
              Checks the string to ensure it is a valid numeric string.
            </summary>
            <param name="numberString"> </param>
            <returns> </returns>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Helpers.myReflections">
            <summary>
            Static class used for casting T3D objects to different types.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Helpers.myReflections.ChangeType(System.Object,System.Type)">
            <summary>
              The Microsoft ChangeType method doesn't always work, especially when your dealling with constructor base object types. or, when your trying to deal with enumerations. This function overrides the buggy ones Microsoft wrote with work arounds, and leaves the functioning Microsoft ones in tack.
            </summary>
            <param name="value"> The value to be converted </param>
            <param name="type"> The target type </param>
            <returns>The passed object as the target type. </returns>
            
            
        </member>
        <member name="T:WinterLeaf.Engine.Classes.View.Creators.Creator">
            <summary>
            Abstract class that all creators share.
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Classes.View.Creators.Creator._mParams">
            <summary>
            Object Properties.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.View.Creators.Creator.ToString">
            <summary>
              This will return the TorqueScript code that will be executed when Create is called.
            </summary>
            <returns> </returns>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.View.Creators.Creator.mModel">
            <summary>
            The C# proxy class to use for this singleton(Optional)
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.View.Creators.Creator.mDatablockName">
            <summary>
            The name of the instance of the object
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.View.Creators.Creator.mClassName">
            <summary>
            The name of the TorqueScript class.
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.View.Creators.Creator.mInstanceName">
            <summary>
              The name of the instance of the object
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.View.Creators.Creator.Item(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.View.Creators.DatablockCreator">
            <summary>
            Class used to create Datablock objects in the T3D engine.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.View.Creators.DatablockCreator.#ctor(System.String,System.String,System.Type)">
            <summary>
              Creates an object to template a torquescript class with.
            </summary>
            <param name="className"> The name of the object type </param>
            <param name="instanceName"> The name of this instance of the object </param>
            <param name="proxyclass">The C# proxy class to use for this singleton(Optional)</param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.View.Creators.DatablockCreator.ToString">
            <summary>
              This will return the TorqueScript code that will be executed when Create is called.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.View.Creators.DatablockCreator.Create">
            <summary>
              Passes the ToString() TorqueScript to the Eval statement capturing the id of the object created
            </summary>
            <returns> </returns>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.View.Creators.SingletonCreator">
            <summary>
            A helper class to streamline creation of Singletons.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.View.Creators.SingletonCreator.#ctor(System.String,System.String,System.Type)">
            <summary>
            Creates a new Singleton with the specified classname, datablock and C# proxy class optional
            </summary>
            <param name="className"></param>
            <param name="datablockName"></param>
            <param name="proxyclass">The C# proxy class to use for this singleton(Optional)</param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.View.Creators.SingletonCreator.ToString">
            <summary>
            This will return the TorqueScript code that will be executed when Create is called.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.View.Creators.SingletonCreator.Create">
            <summary>
            Passes the ToString() TorqueScript to the Eval statement capturing the id of the object created
            </summary>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.ModelBase">
            <summary>
            This class provides the base functionality that all C# Models have in the OMNI Framework.
            This is the BASE class of all models.
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes">
            <summary>
            This class is a function organizer for the externs.  All calls to Torque from C# go through this helper class.
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Classes.Interopt.pInvokes.m_ts">
            <summary>
            A reference to the dnTorque Object, this must be set at construction time.
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Classes.Interopt.pInvokes._mConsoleobject">
            <summary>
            A property exposing Custom dnTorque Console Functions.
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Classes.Interopt.pInvokes._mMathobject">
            <summary>
            A property exposing Custom Math console functions.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ClientGroup__GetCount">
            <summary>
            The count of connection ID's
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ClientGroup__GetItem(System.UInt32)">
            <summary>
            Gets the object id at the index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.removeTaggedString(System.String)">
            <summary>
            Removes the tagged string from Torque.
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            Container Class for all the properties for organization.
            </summary>
            <param name="c"></param>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.uGlobal">
            <summary>
            used to set/get bool globals
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.isGlobal">
            <summary>
            Used to grab string globals
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.sGlobal">
            <summary>
            Used to grab string globals
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.iGlobal">
            <summary>
            used to set/get int globals
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.bGlobal">
            <summary>
            used to set/get bool globals
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.fGlobal">
            <summary>
            used to set/get bool globals
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.dGlobal">
            <summary>
            used to set/get bool globals
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.console">
            <summary>
            A property exposing Custom dnTorque Console Functions.
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.math">
            <summary>
            A property exposing Custom Math console functions.
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.ClientGroup">
            <summary>
            A list of all the Connection Object ID's active in Torque at the moment of request.
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.Util">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIClient">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIConnection">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayer">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.CompoundUndoAction">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleLogger">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.CreatorTree">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.DbgFileView">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.EditManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.EventManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.FieldBrushObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.FileObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.Forest">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestBrush">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestBrushTool">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestEditorCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestSelectionTool">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiBitmapCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvas">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiColorPickerCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlProfile">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiConvexEditorCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDecalEditorCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFileTreeCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFilterCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGradientCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiIdleCamFadeBitmapCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspector">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorDynamicField">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorDynamicGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorField">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMaterialCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMeshRoadEditorCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMissionAreaEditorCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiNavEditorCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlEx">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRiverEditorCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRoadEditorCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTerrPreviewCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextEditCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTickCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiToolboxButtonCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiVariableInspector">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.LangTable">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.LightBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.Material">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.MECreateUndoAction">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.MEDeleteUndoAction">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.MenuBar">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.Message">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.MessageVector">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.PersistenceManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.PhysicsDebrisData">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.PopupMenu">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.ReadXML">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSource">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimComponent">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimDataBlock">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimPersistSet">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimResponseCurve">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimSet">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocument">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.SkyBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.SpawnSphere">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.StaticShape">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.Sun">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainBlock">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditor">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainSmoothAction">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainSolderEdgesAction">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.TheoraTextureObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.UndoAction">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.UndoManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditor">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.ActionMap">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.AITurretShape">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.Camera">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.CoverPoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.CubemapData">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.Debris">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.DebugDrawer">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.DecalData">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.DecalRoad">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.DynamicConsoleMethodComponent">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.EditTSCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.FileDialog">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.FileStreamObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.FlyingVehicle">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestWindEmitter">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnection">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GroundPlane">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoCompleteCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoScrollCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiBitmapButtonCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiButtonBaseCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCheckBoxCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiChunkedBitmapCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiClockHud">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDirectoryFileListCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDragAndDropControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDynamicCtrlArrayControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFormCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFrameSetCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGameListMenuCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGameListOptionsCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGraphCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiIconButtonCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiImageList">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorTypeBitMask32">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorTypeFileName">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMaterialPreview">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMenuBar">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMessageVectorCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMissionAreaCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMLTextCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiObjectView">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPaneControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiProgressBitmapCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRolloutCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiScrollCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreview">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiSliderCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiStackControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiSwatchButtonCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTabBookCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTableControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTabPageCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTheoraCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTSCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiWindowCtrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.HTTPObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.Item">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.LevelInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.LightDescription">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.LightFlareData">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.Lightning">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.MeshRoad">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.MissionArea">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavMesh">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavPath">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetConnection">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.ParticleData">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.ParticleEmitterData">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.ParticleEmitterNode">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.PathCamera">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.PhysicalZone">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.PhysicsForce">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.PhysicsShape">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.Player">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.Portal">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.PostEffect">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.Precipitation">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.Projectile">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.ProximityMine">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.RenderBinManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.RenderMeshExample">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.RenderPassManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.RenderPassStateToken">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.RigidShape">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.River">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.ScatterSky">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.ScriptTickObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXController">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXEmitter">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXParameter">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXProfile">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSound">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXState">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShaderData">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseData">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.StreamObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.TCPObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.TimeOfDay">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.Trigger">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSAttachable">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSDynamic">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSPathShape">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructor">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSStatic">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.TurretShape">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.VolumetricFog">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.WalkableShape">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.WheeledVehicle">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorSelection">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.ZipObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.Zone">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.muglobals">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.muglobals.Item(System.String)">
            <summary>
            /
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.mglobalsIsDefined">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.mglobalsIsDefined.Item(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.msglobals">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.msglobals.Item(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.miglobals">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.miglobals.Item(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.mbglobals">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.mbglobals.Item(System.String)">
            <summary>
            /
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.mfglobals">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.mfglobals.Item(System.String)">
            <summary>
            /
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.mdglobals">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.mdglobals.Item(System.String)">
            <summary>
            /
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject">
            <summary>
            Custom console commands.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.torque_gethwnd">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.isMethodInNamespace(System.String,System.String)">
            <summary>
            Determines if the method is defined in the namespace.
            </summary>
            <param name="NameSpace"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.removeTaggedString(System.String)">
            <summary>
            Removes the tagged string from Torque.
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.ParentExecute(System.String,System.String,System.Int32,System.String[],System.Boolean)">
            <summary>
            
            Executes the function on the simobject but a previous version of it.
            For example in TorqueScript you have:
            
            function AIPlayer::Somefunction(%this)
            {
            Parent::SomeFunction(%this);
            }
            
            Would translate to:
            
            ParentExecute(thisobj,"SomeFunction",1,new string[]{thisobj});
            
            </summary>
            <param name="simobject">This can be a simple type like "Player", or a complex type like "Client.Player"</param>
            <param name="function">Function to call</param>
            <param name="namespacedepth">how many generations up to go from the LAST generation.</param>
            <param name="parameters">Parameters to pass</param>
            <param name="DoNotPassDepth">By default, this will append a parameter to the end, telling the called function what depth it is currently at, setting this will turn that off.</param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.ParentExecute(System.String,System.Int32,System.String[],System.Boolean)">
            <summary>
            Executes the global function  but a previous version of it.
            For example in TorqueScript you have:
            
            function Somefunction(%Version1)
            {
            }
            
            function Somefunction(%this)
            {
            Parent::SomeFunction(%this);
            }
            
            Would translate to:
            
            ParentExecute("SomeFunction",1,new string[]{thisobj});
            
            </summary>
            <param name="function">Function to call</param>
            <param name="namespacedepth">how many generations up to go from the LAST generation.</param>
            <param name="parameters">Parameters to pass</param>
            <param name="DoNotPassDepth">By default, this will append a parameter to the end, telling the called function what depth it is currently at, setting this will turn that off.</param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.ParentExecute(System.String,System.String,System.Int32,System.String[])">
            <summary>
            Executes the global function  but a previous version of it.
            For example in TorqueScript you have:
            
            function Somefunction(%Version1)
            {
            }
            
            function Somefunction(%this)
            {
            Parent::SomeFunction(%this);
            }
            
            Would translate to:
            
            ParentExecute("SomeFunction",1,new string[]{thisobj});
            
            </summary>
            <param name="simobject">This can be a simple type like "Player", or a complex type like "Client.Player"</param>
            <param name="function"></param>
            <param name="namespacedepth">how many generations up to go from the LAST generation.</param>
            <param name="parameters">Parameters to pass</param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.Call_Classname(System.String,System.String)">
            <summary>
            The name is a slight misnormer, the classname can be:
            -A Simobject
            -A Class
            -A Package
             </summary>
            <param name="classname">Simobject,Class or Package</param>
            <param name="function">Function to call</param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.Call_Classname(System.String,System.String,System.String[])">
            <summary>
            The name is a slight misnormer, the classname can be:
            -A Simobject
            -A Class
            -A Package
             </summary>
            <param name="classname">Simobject,Class or Package</param>
            <param name="function">Function to call</param>
            <param name="parameters">Parameters to pass.</param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.Call(System.String,System.String[])">
            <summary>
            Calls the function inside the Torque Dll.
            </summary>
            <param name="function">Global function to call</param>
            <param name="parameters">Parameters to pass.</param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.Call(System.String)">
            <summary>
            Calls a function with no parameters.
            </summary>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.Call(System.String,System.String,System.String[])">
            <summary>
            Calls the member function on the object with parameters.
            </summary>
            <param name="simobject">Torque object, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <param name="function"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.Call(System.String,System.String)">
            <summary>
            Calls the member function on the object without parameters.
            </summary>
            <param name="simobject">Torque object, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            Constructor.
            </summary>
            <param name="ts"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.getTaggedString(System.String)">
            <summary>
            Returns the string for the passed tag.
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.getSimTime">
            <summary>
            Returns the current sim time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.SpawnObject(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Deprecated: Should probally use the Util class version
            Spawns a object in the world.
            </summary>
            <param name="spawnClass"></param>
            <param name="spawnDataBlock"></param>
            <param name="spawnName"></param>
            <param name="spawnProperties"></param>
            <param name="spawnScript"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.isInNamespaceHierarchy(System.String,System.String)">
            <summary>
            Determines if function is in the namespace Hierarchy.
            </summary>
            <param name="simobject_id"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.getTypeMask(System.String)">
            <summary>
            Returns the mask type for the passed simobject name or id.
            </summary>
            <param name="SceneObject"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.initContainerRadiusSearch(WinterLeaf.Engine.Containers.Point3F,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Returns a dictionary of the objects around the a point with their id and distance.
            </summary>
            <param name="pos"></param>
            <param name="raidus"></param>
            <param name="mask"></param>
            <param name="useclientcontainer"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.ColorEncode(System.String)">
            <summary>
            This function will take a normal string with torque color
            encoding commands and convert it to the correct format for color encoding
            inside of torque.
            </summary>
            <param name="mystring"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.commandToClient(System.String,System.String)">
            <summary>
            Send a command to the client to execute the function
            </summary>
            <param name="client">Client connection ID, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <param name="function">Function to execute.</param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.commandToClient(System.String,System.String,System.String[])">
            <summary>
            Send a command to the client to execute the function
            </summary>
            <param name="client">Client connection ID, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <param name="function">Function to execute.</param>
            <param name="parameters">Parameters to pass</param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.SetVar(System.String,System.Single)">
            <summary>
            Sets the passed torque variable to the value
            </summary>
            <param name="variable">Torque Variable to change, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <param name="value"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.SetVar(System.String,System.Double)">
            <summary>
            Sets the passed torque variable to the value
            </summary>
            <param name="variable">Torque Variable to change, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <param name="value"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.SetVar(System.UInt32,System.String)">
            <summary>
            Sets the passed torque variable to the value
            </summary>
            <param name="variable">Torque Variable to change, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <param name="value"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.SetVar(System.UInt32,System.Int16)">
            <summary>
            Sets the passed torque variable to the value
            </summary>
            <param name="variable">Torque Variable to change, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <param name="value"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.SetVar(System.UInt32,System.Int32)">
            <summary>
            Sets the passed torque variable to the value
            </summary>
            <param name="variable">Torque Variable to change, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <param name="value"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.SetVar(System.UInt32,System.Int64)">
            <summary>
            Sets the passed torque variable to the value
            </summary>
            <param name="variable">Torque Variable to change, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <param name="value"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.SetVar(System.UInt32,System.UInt16)">
            <summary>
            Sets the passed torque variable to the value
            </summary>
            <param name="variable">Torque Variable to change, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <param name="value"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.SetVar(System.UInt32,System.UInt32)">
            <summary>
            Sets the passed torque variable to the value
            </summary>
            <param name="variable">Torque Variable to change, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <param name="value"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.SetVar(System.UInt32,System.UInt64)">
            <summary>
            Sets the passed torque variable to the value
            </summary>
            <param name="variable">Torque Variable to change, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <param name="value"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.SetVar(System.UInt32,System.Boolean)">
            <summary>
            Sets the passed torque variable to the value
            </summary>
            <param name="variable">Torque Variable to change, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <param name="value"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.SetVar(System.String,System.String)">
            <summary>
            Sets the passed torque variable to the value
            </summary>
            <param name="variable">Torque Variable to change, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <param name="value"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.SetVar(System.String,System.Int16)">
            <summary>
            Sets the passed torque variable to the value
            </summary>
            <param name="variable">Torque Variable to change, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <param name="value"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.SetVar(System.String,System.Int32)">
            <summary>
            Sets the passed torque variable to the value
            </summary>
            <param name="variable">Torque Variable to change, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <param name="value"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.SetVar(System.String,System.Int64)">
            <summary>
            Sets the passed torque variable to the value
            </summary>
            <param name="variable">Torque Variable to change, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <param name="value"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.SetVar(System.String,System.UInt16)">
            <summary>
            Sets the passed torque variable to the value
            </summary>
            <param name="variable">Torque Variable to change, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <param name="value"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.SetVar(System.String,System.UInt32)">
            <summary>
            Sets the passed torque variable to the value
            </summary>
            <param name="variable">Torque Variable to change, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <param name="value"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.SetVar(System.String,System.UInt64)">
            <summary>
            Sets the passed torque variable to the value
            </summary>
            <param name="variable">Torque Variable to change, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <param name="value"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.SetVar(System.String,System.Boolean)">
            <summary>
            Sets the passed torque variable to the value
            </summary>
            <param name="variable">Torque Variable to change, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <param name="value"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.commandToServer(System.String)">
            <summary>
            Sends a command to the server to call the function
            </summary>
            <param name="function"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.commandToServer(System.String,System.String[])">
            <summary>
            Sends a command to the server to call the function with passed parameters.
            </summary>
            <param name="function"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.GetVarString(System.String)">
            <summary>
            Gets the passed variable from torque
            Can be object.property.
            </summary>
            <param name="variable">Torque Variable to retrieve, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.GetVarBool(System.String)">
            <summary>
            Gets the passed variable from torque
            Can be object.property.
            </summary>
            <param name="variable">Torque Variable to retrieve, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.GetVarInt(System.String)">
            <summary>
            Gets the passed variable from torque
            Can be object.property.
            </summary>
            <param name="variable">Torque Variable to retrieve, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.GetVarFloat(System.String)">
            <summary>
            Gets the passed variable from torque
            Can be object.property.
            </summary>
            <param name="variable">Torque Variable to retrieve, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.GetVarUint(System.String)">
            <summary>
            Gets the passed variable from torque
            Can be object.property.
            </summary>
            <param name="variable">Torque Variable to retrieve, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.GetVarLong(System.String)">
            <summary>
            Gets the passed variable from torque
            Can be object.property.
            </summary>
            <param name="variable">Torque Variable to retrieve, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.GetVarDouble(System.String)">
            <summary>
            Gets the passed variable from torque
            Can be object.property.
            </summary>
            <param name="variable">Torque Variable to retrieve, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.warn(System.String)">
            <summary>
            Posts a warning inside of Torque.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.debug(System.String)">
            <summary>
            Posts a debug message inside of Torque.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.print(System.String)">
            <summary>
            Posts a Print message inside of Torque.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.error(System.String)">
            <summary>
            Posts an Error  message inside of Torque.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.isObject(System.String)">
            <summary>
            Determines if the number or string is a object.
            </summary>
            <param name="simobject">Torque Variable to check, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.clearServerPaths">
            <summary>
            Calls clearServerPaths on the console.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.deleteVariables(System.String)">
            <summary>
            Deletes the variable inside of torque.
            </summary>
            <param name="var_name"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.isMemberOfClass(System.String,System.String)">
            <summary>
            Determines if the class is a member of the superclass.
            </summary>
            <param name="classname"></param>
            <param name="superclassname"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.objectHasMethod(System.String,System.String)">
            <summary>
            Determines if the object has the passed method.
            </summary>
            <param name="simobject">Torque Variable to check, can be a simple or complex type.  i.e. "Client" or "Player.client"</param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.addTaggedString(System.String)">
            <summary>
            Adds a tagged string into the dictionary and returns it's tag id.
            </summary>
            <param name="mystring"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.GetClassName(System.String)">
            <summary>
            Returns the classname for the simobject.
            </summary>
            <param name="simobject"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.GetObjectID(System.String)">
            <summary>
            Returns the simobjectid for the simobject name.
            </summary>
            <param name="simobj_id"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.nameToID(System.String)">
            <summary>
            Returns the name of the object (passed by id)
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.getName(System.String)">
            <summary>
            Gets the name of the id.
            </summary>
            <param name="simobject"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.Eval(System.String,System.Boolean)">
            <summary>
            Evaluates the passed script and returns the resultant.
            </summary>
            <param name="script"></param>
            <param name="retval"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.Eval(System.String)">
            <summary>
            Executes the passed script.
            </summary>
            <param name="script"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.isFunction(System.String)">
            <summary>
            Determines if the function is in the global name space.
            </summary>
            <param name="function_name"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.getEulerRotation(System.String)">
            <summary>
            Returns the Euler Rotation to the object.
            </summary>
            <param name="simobject"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.ContainerRadiusSearch(WinterLeaf.Engine.Containers.Point3F,System.Double,System.UInt32,System.Boolean)">
            <summary>
            Returns a list of simobject id's in the radius of the search.
            </summary>
            <param name="p"></param>
            <param name="searchradius"></param>
            <param name="searchmask"></param>
            <param name="useclientcontainer"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.pathOnMissionLoadDone">
            <summary>
            Calls pathOnMissionLoadDone inside of Torque.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.getDatablock(System.String)">
            <summary>
            Returns the datablock associated with the simobject.
            </summary>
            <param name="simobject"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleObject.isField(System.String,System.String)">
            <summary>
            Determines if the field is a member of the object.
            </summary>
            <param name="simobject_id"></param>
            <param name="fieldname"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.tMath">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Classes.Interopt.pInvokes.tMath.m_ts">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.tMath.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.tMath.MatrixMulVector(WinterLeaf.Engine.Containers.TransformF,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            
            </summary>
            <param name="transform"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.tMath.mDegToRad(System.Double)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.tMath.mRadToDeg(System.Double)">
            <summary>
            
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.tMath.MatrixCreateFromEuler(WinterLeaf.Engine.Containers.TransformF)">
            <summary>
            
            </summary>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.Interopt.pInvokes.tMath.M_2PI_F">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject._aiConnect(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            (aiConnect, S32 , 2, 20, (...)
               @brief Creates a new AIConnection, and passes arguments to its onConnect script callback.
               @returns The newly created AIConnection
               @see GameConnection for parameter information
               @ingroup AI)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject._buildTaggedString(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( buildTaggedString, const char*, 2, 11, (string format, ...)
               @brief Build a string using the specified tagged string format.
            
               This function takes an already tagged string (passed in as a tagged string ID) and one 
               or more additional strings.  If the tagged string contains argument tags that range from 
               %%1 through %%9, then each additional string will be substituted into the tagged string.  
               The final (non-tagged) combined string will be returned.  The maximum length of the tagged 
               string plus any inserted additional strings is 511 characters.
            
               @param format A tagged string ID that contains zero or more argument tags, in the form of 
               %%1 through %%9.
               @param ... A variable number of arguments that are insterted into the tagged string 
               based on the argument tags within the format string.
            
               @returns An ordinary string that is a combination of the original tagged string with any additional 
               strings passed in inserted in place of each argument tag.
            
               @tsexample
                  // Create a tagged string with argument tags
                  %taggedStringID = addTaggedString(\"Welcome %1 to the game!\");
            
                  // Some point later, combine the tagged string with some other string
                  %string = buildTaggedString(%taggedStringID, %playerName);
                  echo(%string);
            	@endtsexample
            
               @see \\ref syntaxDataTypes under Tagged %Strings
               @see addTaggedString()
               @see getTaggedString()
               @ingroup Networking)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject._call(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( call, const char *, 2, 0, ( string functionName, string args... ) 
               Apply the given arguments to the specified global function and return the result of the call.
               @param functionName The name of the function to call.  This function must be in the global namespace, i.e. 
                  you cannot call a function in a namespace through #call.  Use eval() for that.
               @return The result of the function call.
               @tsexample
                  function myFunction( %arg )
                  {
                    return ( %arg SPC \"World!\" );
                  }
                  
                  echo( call( \"myFunction\", \"Hello\" ) ); // Prints \"Hello World!\" to the console.
               @endtsexample
               @ingroup Scripting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject._commandToClient(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( commandToClient, void, 3, 22, (NetConnection client, string func, ...)
               @brief Send a command from the server to the client
            
               @param client The numeric ID of a client GameConnection
               @param func Name of the client function being called
               @param ... Various parameters being passed to client command
            
               @tsexample
                  // Set up the client command.  Needs to be executed on the client, such as
                  // within scripts/client/client.cs
                  // Update the Ammo Counter with current ammo, if not any then hide the counter.
                  function clientCmdSetAmmoAmountHud(%amount)
                  {
                     if (!%amount)
                  	  AmmoAmount.setVisible(false);
                     else
                     {
                  	  AmmoAmount.setVisible(true);
                  	  AmmoAmount.setText(\"Ammo: \"@%amount);
                     }
                  }
                  // Call it from a server function.  Needs to be executed on the server, 
                  //such as within scripts/server/game.cs
                  function GameConnection::setAmmoAmountHud(%client, %amount)
                  {
                     commandToClient(%client, 'SetAmmoAmountHud', %amount);
                  }
               @endtsexample
            
               @ingroup Networking)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject._commandToServer(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( commandToServer, void, 2, 21, (string func, ...)
            	@brief Send a command to the server.
            
               @param func Name of the server command being called
               @param ... Various parameters being passed to server command
            
               @tsexample
                  // Create a standard function.  Needs to be executed on the client, such 
                  // as within scripts/client/default.bind.cs
                  function toggleCamera(%val)
                  {
                  	// If key was down, call a server command named 'ToggleCamera'
                  	if (%val)
                  		commandToServer('ToggleCamera');
                  }
                  // Server command being called from above.  Needs to be executed on the 
                  // server, such as within scripts/server/commands.cs
                  function serverCmdToggleCamera(%client)
                  {
                     if (%client.getControlObject() == %client.player)
                     {
                  	  %client.camera.setVelocity(\"0 0 0\");
                  	  %control = %client.camera;
                     }
                     else
                     {
                  	  %client.player.setVelocity(\"0 0 0\");
                  	  %control = %client.player;
                    }
                     %client.setControlObject(%control);
                     clientCmdSyncEditorGui();
                  }
               @endtsexample
            
               @ingroup Networking)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject._echo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( echo, void, 2, 0, ( string message... ) 
               @brief Logs a message to the console.
               Concatenates all given arguments to a single string and prints the string to the console. 
               A newline is added automatically after the text.
               @param message Any number of string arguments.
               @ingroup Logging )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject._error(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( error, void, 2, 0, ( string message... ) 
               @brief Logs an error message to the console.
               Concatenates all given arguments to a single string and prints the string to the console as an error 
               message (in the in-game console, these will show up using a red font by default). 
               A newline is added automatically after the text.
               @param message Any number of string arguments.
               @ingroup Logging )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject._execPrefs(System.String,System.String,System.String)">
            <summary>
            ( execPrefs, bool, 2, 4, ( string relativeFileName, bool noCalls=false, bool journalScript=false )
            				@brief Manually execute a special script file that contains game or editor preferences
            				@param relativeFileName Name and path to file from project folder
            				@param noCalls Deprecated
            				@param journalScript Deprecated
            				@return True if script was successfully executed
            				@note Appears to be useless in Torque 3D, should be deprecated
            				@ingroup Scripting)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject._expandFilename(System.String)">
            <summary>
            (expandFilename, const char*, 2, 2, (string filename)
            				@brief Grabs the full path of a specified file
            				@param filename Name of the local file to locate
            				@return String containing the full filepath on disk
            				@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject._expandOldFilename(System.String)">
            <summary>
            (expandOldFilename, const char*, 2, 2, (string filename)
            				@brief Retrofits a filepath that uses old Torque style
            				@return String containing filepath with new formatting
            				@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject._getStockColorCount">
            <summary>
            ( getStockColorCount, S32, 1, 1, () - Gets a count of available stock colors.
               @return A count of available stock colors. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject._getStockColorF(System.String)">
            <summary>
            ( getStockColorF, const char*, 2, 2, (stockColorName) - Gets a floating-point-based stock color by name.
               @param stockColorName - The stock color name to retrieve.
               @return The stock color that matches the specified color name.  Returns nothing if the color name is not found. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject._getStockColorI(System.String)">
            <summary>
            ( getStockColorI, const char*, 2, 2, (stockColorName) - Gets a byte-based stock color by name.
               @param stockColorName - The stock color name to retrieve.
               @return The stock color that matches the specified color name.  Returns nothing if the color name is not found. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject._getStockColorName(System.String)">
            <summary>
            ( getStockColorName, const char*, 2, 2,  (stockColorIndex) - Gets the stock color name at the specified index.
               @param stockColorIndex The zero-based index of the stock color name to retrieve.
               @return The stock color name at the specified index or nothing if the string is invalid. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject._isStockColor(System.String)">
            <summary>
            ( isStockColor, bool, 2, 2,  (stockColorName) - Gets whether the specified name is a stock color or not.
               @param stockColorName - The stock color name to test for.
               @return Whether the specified name is a stock color or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject._mathInit(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( mathInit, void, 1, 10, ( ... )
                            @brief Install the math library with specified extensions.
                            Possible parameters are:
                                - 'DETECT' Autodetect math lib settings.
                                - 'C' Enable the C math routines. C routines are always enabled.
                                - 'FPU' Enable floating point unit routines.
                                - 'MMX' Enable MMX math routines.
                                - '3DNOW' Enable 3dNow! math routines.
                                - 'SSE' Enable SSE math routines.
            				@ingroup Math)
            
            
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject._resourceDump">
            <summary>
            (resourceDump, void, 1, 1, ()
            				@brief List the currently managed resources
            				Currently used by editors only, internal
            				@ingroup Editors
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject._schedule(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            (schedule, S32, 4, 0, schedule(time, refobject|0, command, arg1...argN>))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject._TestFunction2Args(System.String,System.String)">
            <summary>
            (TestFunction2Args, const char *, 3, 3, testFunction(arg1, arg2))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject._warn(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( warn, void, 2, 0, ( string message... ) 
               @brief Logs a warning message to the console.
               Concatenates all given arguments to a single string and prints the string to the console as a warning 
               message (in the in-game console, these will show up using a turquoise font by default). 
               A newline is added automatically after the text.
               @param message Any number of string arguments.
               @ingroup Logging )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.activateDirectInput">
            <summary>
            ()
                        @brief Activates DirectInput.
                        Also activates any connected joysticks.
            			@ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.activatePackage(System.String)">
            <summary>
            @brief Activates an existing package.
               The activation occurs by updating the namespace linkage of existing functions and methods. 
               If the package is already activated the function does nothing.
               @ingroup Packages)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.addBadWord(System.String)">
            <summary>
            @brief Add a string to the bad word filter
            
               The bad word filter is a table containing words which will not be 
               displayed in chat windows. Instead, a designated replacement string will be displayed.  
               There are already a number of bad words automatically defined.
            
               @param badWord Exact text of the word to restrict.
               @return True if word was successfully added, false if the word or a subset of it already exists in the table
            
               @see filterString()
            
               @tsexample
                  // In this game, \"Foobar\" is banned
                  %badWord = \"Foobar\";
                  // Returns true, word was successfully added
                  addBadWord(%badWord);
                  // Returns false, word has already been added
                  addBadWord(\"Foobar\");
               @endtsexample
            
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.addGlobalShaderMacro(System.String,System.String)">
            <summary>
            Adds a global shader macro which will be merged with the script defined 
               macros on every shader.  The macro will replace the value of an existing 
               macro of the same name.  For the new macro to take effect all the shaders 
               in the system need to be reloaded.
               @see resetLightManager, removeGlobalShaderMacro
               @ingroup Rendering )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.addMaterialMapping(System.String,System.String)">
            <summary>
            (string texName, string matName)
               @brief Maps the given texture to the given material.
               Generates a console warning before overwriting.
               Material maps are used by terrain and interiors for triggering 
               effects when an object moves onto a terrain 
               block or interior surface using the associated texture.
               @ingroup Materials)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.addTaggedString(System.String)">
            <summary>
            ),
               @brief Use the addTaggedString function to tag a new string and add it to the NetStringTable
            
               @param str The string to be tagged and placed in the NetStringTable. Tagging ignores case, 
               so tagging the same string (excluding case differences) will be ignored as a duplicated tag.
            
               @return Returns a string( containing a numeric value) equivalent to the string ID for the newly tagged string
            
               @see \\ref syntaxDataTypes under Tagged %Strings
               @see removeTaggedString()
               @see getTaggedString()
               @ingroup Networking)
            	
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.aiAddPlayer(System.String,System.String)">
            <summary>
            ), 'playerName'[, 'AIClassType'] );)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.allowConnections(System.Boolean)">
            <summary>
            allowConnections(bool allow)
               @brief Sets whether or not the global NetInterface allows connections from remote hosts.
            
               @param allow Set to true to allow remote connections.
            
               @ingroup Networking)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.backtrace">
            <summary>
            @brief Prints the scripting call stack to the console log.
               Used to trace functions called from within functions. Can help discover what functions were called 
               (and not yet exited) before the current point in scripts.
               @ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.beginSampling(System.String,System.String)">
            <summary>
            CSV), (location, [backend]) -
            				@brief Takes a string informing the backend where to store 
            				sample data and optionally a name of the specific logging 
            				backend to use.  The default is the CSV backend. In most 
            				cases, the logging store will be a file name.
            				@tsexample
            				beginSampling( \"mysamples.csv\" );
            				@endtsexample
            				@ingroup Rendering)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.calcExplosionCoverage(WinterLeaf.Engine.Containers.Point3F,System.Int32,System.UInt32)">
            <summary>
            @brief Calculates how much an explosion effects a specific object.
               Use this to determine how much damage to apply to objects based on their 
               distance from the explosion's center point, and whether the explosion is 
               blocked by other objects.
               @param pos Center position of the explosion.
               @param id Id of the object of which to check coverage.
               @param covMask Mask of object types that may block the explosion.
               @return Coverage value from 0 (not affected by the explosion) to 1 (fully affected)
               @tsexample
               // Get the position of the explosion.
               %position = %explosion.getPosition();
               // Set a list of TypeMasks (defined in gameFunctioncs.cpp), seperated by the | character.
               %TypeMasks = $TypeMasks::StaticObjectType | $TypeMasks::ItemObjectType
               // Acquire the damage value from 0.0f - 1.0f.
               %coverage = calcExplosionCoverage( %position, %sceneObject, %TypeMasks );
               // Apply damage to object 
               %sceneObject.applyDamage( %coverage * 20 );
               @endtsexample
               @ingroup FX)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.cancel(System.Int32)">
            <summary>
            cancel(eventId))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.cancelAll(System.String)">
            <summary>
            cancelAll(objectId): cancel pending events on the specified object.  Events will be automatically cancelled if object is deleted.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.cancelServerQuery">
            <summary>
            cancelServerQuery(...); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.cleanupTexturePool">
            <summary>
            Release the unused pooled textures in texture manager freeing up video memory.
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.clearClientPaths">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.clearGFXResourceFlags">
            <summary>
            Clears the flagged state on all allocated GFX resources. 
               See flagCurrentGFXResources for usage details.
               @ingroup GFX
               @see flagCurrentGFXResources, listGFXResources, describeGFXResources )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.clearServerPaths">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.CloseAllPopOuts">
            <summary>
            ()
            	Returns all pop'd out windows to the main canvas.
            	)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.closeNetPort">
            <summary>
            () 
               @brief Closes the current network port
               @ingroup Networking)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.closeSplashWindow">
            <summary>
            Close our startup splash window.
               @note This is currently only implemented on Windows.
               @ingroup Platform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.collapseEscape(System.String)">
            <summary>
            Replace all escape sequences in @a text with their respective character codes.
               This function replaces all escape sequences (\\\, \\\\t, etc) in the given string 
               with the respective characters they represent.
               The primary use of this function is for converting strings from their literal form into 
               their compiled/translated form, as is normally done by the TorqueScript compiler.
               @param text A string.
               @return A duplicate of @a text with all escape sequences replaced by their respective character codes.
               @tsexample
                  // Print:
                  //
                  //    str
                  //    ing
                  //
                  // to the console.  Note how the backslash in the string must be escaped here
                  // in order to prevent the TorqueScript compiler from collapsing the escape
                  // sequence in the resulting string.
                  echo( collapseEscape( \"str\ing\" ) );
               @endtsexample
               @see expandEscape
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.compile(System.String,System.Boolean)">
            <summary>
            Compile a file to bytecode.
               This function will read the TorqueScript code in the specified file, compile it to internal bytecode, and, 
               if DSO generation is enabled or @a overrideNoDDSO is true, will store the compiled code in a .dso file 
               in the current DSO path mirrorring the path of @a fileName.
               @param fileName Path to the file to compile to bytecode.
               @param overrideNoDSO If true, force generation of DSOs even if the engine is compiled to not 
                  generate write compiled code to DSO files.
               @return True if the file was successfully compiled, false if not.
               @note The definitions contained in the given file will not be made available and no code will actually 
                  be executed.  Use exec() for that.
               @see getDSOPath
               @see exec
               @ingroup Scripting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.consoleExportXML">
            <summary>
            Exports console definition XML representation )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.containerBoxEmpty(System.UInt32,WinterLeaf.Engine.Containers.Point3F,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            @brief See if any objects of the given types are present in box of given extent.
               @note Extent parameter is last since only one radius is often needed.  If 
               one radius is provided, the yRadius and zRadius are assumed to be the same.  Unfortunately, 
               if you need to use the client container, you'll need to set all of the radius parameters.  
               Fortunately, this function is mostly used on the server.
               @param  mask   Indicates the type of objects we are checking against.
               @param  center Center of box.
               @param  xRadius Search radius in the x-axis. See note above.
               @param  yRadius Search radius in the y-axis. See note above.
               @param  zRadius Search radius in the z-axis. See note above.
               @param useClientContainer Optionally indicates the search should be within the 
               client container.
               @return true if the box is empty, false if any object is found.
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.containerFindFirst(System.UInt32,WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            (int mask, Point3F point, float x, float y, float z)
               @brief Find objects matching the bitmask type within a box centered at point, with extents x, y, z.
               @returns The first object found, or an empty string if nothing was found.  Thereafter, you can get more 
               results using containerFindNext().
               @see containerFindNext
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.containerFindNext">
            <summary>
            ()
               @brief Get more results from a previous call to containerFindFirst().
               @note You must call containerFindFirst() to begin the search.
               @returns The next object found, or an empty string if nothing else was found.
               @see containerFindFirst()
            	@ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.containerRayCast(WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F,System.UInt32,System.String,System.Boolean)">
            <summary>
            @brief Cast a ray from start to end, checking for collision against items matching mask.
            
               If pExempt is specified, then it is temporarily excluded from collision checks (For 
               instance, you might want to exclude the player if said player was firing a weapon.)
            
               @param start An XYZ vector containing the tail position of the ray.
               @param end An XYZ vector containing the head position of the ray
               @param mask A bitmask corresponding to the type of objects to check for
               @param pExempt An optional ID for a single object that ignored for this raycast
               @param useClientContainer Optionally indicates the search should be within the 
               client container.
            
               @returns A string containing either null, if nothing was struck, or these fields:
               ul>li>The ID of the object that was struck./li>
               li>The x, y, z position that it was struck./li>
               li>The x, y, z of the normal of the face that was struck./li>
               li>The distance between the start point and the position we hit./li>/ul> 
            
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.containerSearchCurrDist(System.Boolean)">
            <summary>
            @brief Get distance of the center of the current item from the center of the 
               current initContainerRadiusSearch.
            
               @param useClientContainer Optionally indicates the search should be within the 
               client container.
               @return distance from the center of the current object to the center of 
               the search
            
               @see containerSearchNext
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.containerSearchCurrRadiusDist(System.Boolean)">
            <summary>
            @brief Get the distance of the closest point of the current item from the center 
               of the current initContainerRadiusSearch.
            
               @param useClientContainer Optionally indicates the search should be within the 
               client container.
               @return distance from the closest point of the current object to the 
               center of the search
            
               @see containerSearchNext 
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.containerSearchNext(System.Boolean)">
            <summary>
            @brief Get next item from a search started with initContainerRadiusSearch() or 
               initContainerTypeSearch().
            
               @param useClientContainer Optionally indicates the search should be within the 
               client container.
               @return the next object found in the search, or null if no more
            
               @tsexample
               // print the names of all nearby ShapeBase derived objects
               %position = %obj.getPosition;
               %radius = 20;
               %mask = $TypeMasks::ShapeBaseObjectType;
               initContainerRadiusSearch( %position, %radius, %mask );
               while ( (%targetObject = containerSearchNext()) != 0 )
               {
                  echo( \"Found: \" @ %targetObject.getName() );
               }
               @endtsexample
            
               @see initContainerRadiusSearch()
               @see initContainerTypeSearch()
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.containsBadWords(System.String)">
            <summary>
            @brief Checks to see if text is a bad word
            
               The text is considered to be a bad word if it has been added to the bad word filter.
            
               @param text Text to scan for bad words
               @return True if the text has bad word(s), false if it is clean
            
               @see addBadWord()
               @see filterString()
            
               @tsexample
                  // In this game, \"Foobar\" is banned
                  %badWord = \"Foobar\";
                  // Add a banned word to the bad word filter
                  addBadWord(%badWord);
                  // Create the base string, can come from anywhere like user chat
                  %userText = \"Foobar\";
                  // Create a string of random letters
                  %replacementChars = \"knqwrtlzs\";
                  // If the text contains a bad word, filter it before printing
                  // Otherwise print the original text
                  if(containsBadWords(%userText))
                  {
                  	// Filter the string
                  	%filteredText = filterString(%userText, %replacementChars);
                  	// Print filtered text
                  	echo(%filteredText);
                  }
                  else
                  	echo(%userText);
               @endtsexample
            
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.countBits(System.Int32)">
            <summary>
            Count the number of bits that are set in the given 32 bit integer.
               @param v An integer value.
               @return The number of bits that are set in @a v.
               @ingroup Utilities )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.createPath(System.String)">
            <summary>
            @brief Create the given directory or the path leading to the given filename.
               If @a path ends in a trailing slash, then all components in the given path will be created as directories (if not already in place).  If @a path, 
               does @b not end in a trailing slash, then the last component of the path is taken to be a file name and only the directory components 
               of the path will be created.
               @param path The path to create.
               @note Only present in a Tools build of Torque.
               @ingroup FileSystem )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dbgDisconnect">
            <summary>
            ()
                            Forcibly disconnects any attached script debugging client.
            				@internal Primarily used for Torsion and other debugging tools)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dbgIsConnected">
            <summary>
            ()
                            Returns true if a script debugging client is connected else return false.
            				@internal Primarily used for Torsion and other debugging tools)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dbgSetParameters(System.Int32,System.String,System.Boolean)">
            <summary>
            ( int port, string password, bool waitForClient )
                            Open a debug server port on the specified port, requiring the specified password, 
            				and optionally waiting for the debug client to connect.
            				@internal Primarily used for Torsion and other debugging tools)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.deactivateDirectInput">
            <summary>
            ()
                        @brief Disables DirectInput.
                        Also deactivates any connected joysticks.
            			@ingroup Input )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.deactivatePackage(System.String)">
            <summary>
            @brief Deactivates a previously activated package.
               The package is deactivated by removing its namespace linkages to any function or method. 
               If there are any packages above this one in the stack they are deactivated as well. 
               If the package is not on the stack this function does nothing.
               @ingroup Packages)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.debug">
            <summary>
            Drops the engine into the native C++ debugger.
               This function triggers a debug break and drops the process into the IDE's debugger.  If the process is not 
               running with a debugger attached it will generate a runtime error on most platforms.
               @note This function is not available in shipping builds.
               @ingroup Debugging )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.debugDumpAllObjects">
            <summary>
            @brief Dumps all current EngineObject instances to the console.
               @note This function is only available in debug builds.
               @ingroup Debugging )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.debugEnumInstances(System.String,System.String)">
            <summary>
            Call the given function for each instance of the given class.
               @param className Name of the class for which to enumerate instances.
               @param functionName Name of function to call and pass each instance of the given class.
               @note This function is only available in debug builds and primarily meant as an aid in debugging.
               @ingroup Console)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.debugv(System.String)">
            <summary>
            @brief Logs the value of the given variable to the console.
               Prints a string of the form \"variableName> = variable value>\" to the console.
               @param variableName Name of the local or global variable to print.
               @tsexample
                  %var = 1;
                  debugv( \"%var\" ); // Prints \"%var = 1\"
               @endtsexample
               @ingroup Debugging )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.decalManagerAddDecal(WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F,System.Single,System.Single,System.String,System.Boolean)">
            <summary>
            Adds a new decal to the decal manager.
               @param position World position for the decal.
               @param normal Decal normal vector (if the decal was a tire lying flat on a 
               surface, this is the vector pointing in the direction of the axle).
               @param rot Angle (in radians) to rotate this decal around its normal vector.
               @param scale Scale factor applied to the decal.
               @param decalData DecalData datablock to use for the new decal.
               @param isImmortal Whether or not this decal is immortal. If immortal, it 
               does not expire automatically and must be removed explicitly.
               @return Returns the ID of the new Decal object or -1 on failure.
               @tsexample
               // Specify the decal position
               %position = \"1.0 1.0 1.0\";
               // Specify the up vector
               %normal = \"0.0 0.0 1.0\";
               // Add the new decal.
               %decalObj = decalManagerAddDecal( %position, %normal, 0.5, 0.35, ScorchBigDecal, false );
               @endtsexample
               @ingroup Decals )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.decalManagerClear">
            <summary>
            Removes all decals currently loaded in the decal manager.
               @tsexample
               // Tell the decal manager to remove all existing decals.
               decalManagerClear();
               @endtsexample
               @ingroup Decals )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.decalManagerDirty">
            <summary>
            Returns whether the decal manager has unsaved modifications.
               @return True if the decal manager has unsaved modifications, false if 
               everything has been saved.
               @tsexample
               // Ask the decal manager if it has unsaved modifications.
               %hasUnsavedModifications = decalManagerDirty();
               @endtsexample
               @ingroup Decals )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.decalManagerLoad(System.String)">
            <summary>
            Clears existing decals and replaces them with decals loaded from the specified file.
               @param fileName Filename to load the decals from.
               @return True if the decal manager was able to load the requested file, 
               false if it could not.
               @tsexample
               // Set the filename to load the decals from.
               %fileName = \"./missionDecals.mis.decals\";
               // Inform the decal manager to load the decals from the entered filename.
               decalManagerLoad( %fileName );
               @endtsexample
               @ingroup Decals )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.decalManagerRemoveDecal(System.Int32)">
            <summary>
            Remove specified decal from the scene.
               @param decalID ID of the decal to remove.
               @return Returns true if successful, false if decal ID not found.
               @tsexample
               // Specify a decal ID to be removed
               %decalID = 1;
               // Tell the decal manager to remove the specified decal ID.
               decalManagerRemoveDecal( %decalId )
               @endtsexample
               @ingroup Decals )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.decalManagerSave(System.String)">
            <summary>
             ),
               Saves the decals for the active mission in the entered filename.
               @param decalSaveFile Filename to save the decals to.
               @tsexample
               // Set the filename to save the decals in. If no filename is set, then the
               // decals will default to activeMissionName>.mis.decals
               %fileName = \"./missionDecals.mis.decals\";
               // Inform the decal manager to save the decals for the active mission.
               decalManagerSave( %fileName );
               @endtsexample
               @ingroup Decals )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.deleteDataBlocks">
            <summary>
            Delete all the datablocks we've downloaded.
               This is usually done in preparation of downloading a new set of datablocks, 
               such as occurs on a mission change, but it's also good post-mission cleanup. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.deleteFile(System.String)">
            <summary>
            @brief Deletes the given @a file.
               @param file %Path of the file to delete.
               @note Only present in a Tools build of Torque.
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.deleteVariables(System.String)">
            <summary>
            Undefine all global variables matching the given name @a pattern.
               @param pattern A global variable name pattern.  Must begin with '$'.
               @tsexample
                  // Define a global variable in the \"My\" namespace.
                  $My::Variable = \"value\";
                  // Undefine all variable in the \"My\" namespace.
                  deleteVariables( \"$My::*\" );
               @endtsexample
               @see strIsMatchExpr
               @ingroup Scripting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.describeGFXResources(System.String,System.String,System.Boolean)">
            <summary>
            @brief Dumps a description of GFX resources to a file or the console.
               @param resourceTypes A space seperated list of resource types or an empty string for all resources.
               @param filePath A file to dump the list to or an empty string to write to the console.
               @param unflaggedOnly If true only unflagged resources are dumped. See flagCurrentGFXResources.
               @note The resource types can be one or more of the following:
                 - texture
                 - texture target
                 - window target
                 - vertex buffers
                 - primitive buffers
                 - fences
                 - cubemaps
                 - shaders
                 - stateblocks
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.describeGFXStateBlocks(System.String)">
            <summary>
            Dumps a description of all state blocks.     
               @param filePath A file to dump the state blocks to or an empty string to write to the console.
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.detag(System.String)">
            <summary>
            @brief Returns the string from a tag string.
            
               Should only be used within the context of a function that receives a tagged 
               string, and is not meant to be used outside of this context.  Use getTaggedString() 
               to convert a tagged string ID back into a regular string at any time.
            
               @tsexample
                  // From scripts/client/message.cs
                  function clientCmdChatMessage(%sender, %voice, %pitch, %msgString, %a1, %a2, %a3, %a4, %a5, %a6, %a7, %a8, %a9, %a10)
                  {
                     onChatMessage(detag(%msgString), %voice, %pitch);
                  }
            	@endtsexample
            
               @see \\ref syntaxDataTypes under Tagged %Strings
               @see getTag()
               @see getTaggedString()
            
               @ingroup Networking)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.disableJoystick">
            <summary>
            ()
                         @brief Disables use of the joystick.
                         @note DirectInput must be enabled and active to use this function.
                         @ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.disableXInput">
            <summary>
            ()
                        @brief Disables XInput for Xbox 360 controllers.
                        @ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dispatchMessage(System.String,System.String,System.String)">
            <summary>
            ), (string queueName, string message, string data)
            				@brief Dispatch a message to a queue
            				@param queueName Queue to dispatch the message to
            				@param message Message to dispatch
            				@param data Data for message
            				@return True for success, false for failure
            				@see dispatchMessageObject
            				@ingroup Messaging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dispatchMessageObject(System.String,System.String)">
            <summary>
            , ), (string queueName, string message)
            				@brief Dispatch a message object to a queue
            				@param queueName Queue to dispatch the message to
            				@param message Message to dispatch
            				@return true for success, false for failure
            				@see dispatchMessage
            				@ingroup Messaging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.displaySplashWindow(System.String)">
            <summary>
            art/gui/splash.bmp),
               Display a startup splash window suitable for showing while the engine still starts up.
               @note This is currently only implemented on Windows.
               @return True if the splash window could be successfully initialized.
               @ingroup Platform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.DNetSetLogging(System.Boolean)">
            <summary>
            (bool enabled)
               @brief Enables logging of the connection protocols
               When enabled a lot of network debugging information is sent to the console.
               @param enabled True to enable, false to disable
               @ingroup Networking)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dnt_testcase_1(System.String)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dnt_testcase_10(WinterLeaf.Engine.Containers.Point4F)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dnt_testcase_12(WinterLeaf.Engine.Containers.RectF)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dnt_testcase_13(WinterLeaf.Engine.Containers.RectI)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dnt_testcase_14(WinterLeaf.Engine.Containers.RectSpacingI)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dnt_testcase_15(WinterLeaf.Engine.Containers.TransformF)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dnt_testcase_2(WinterLeaf.Engine.Containers.AngAxisF)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dnt_testcase_3(WinterLeaf.Engine.Containers.Box3F)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dnt_testcase_4(WinterLeaf.Engine.Containers.ColorF)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dnt_testcase_5(WinterLeaf.Engine.Containers.ColorI)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dnt_testcase_6(WinterLeaf.Engine.Containers.EaseF)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dnt_testcase_7(WinterLeaf.Engine.Containers.Point2F)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dnt_testcase_8(WinterLeaf.Engine.Containers.Point2I)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dnt_testcase_9(WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dumpConsoleClasses(System.Boolean,System.Boolean)">
            <summary>
            @brief Dumps all declared console classes to the console.
                        @param dumpScript Optional parameter specifying whether or not classes defined in script should be dumped.
                        @param dumpEngine Optional parameter specifying whether or not classes defined in the engine should be dumped.
            			@ingroup Logging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dumpConsoleFunctions(System.Boolean,System.Boolean)">
            <summary>
            @brief Dumps all declared console functions to the console.
                        @param dumpScript Optional parameter specifying whether or not functions defined in script should be dumped.
                        @param dumpEngine Optional parameter specitying whether or not functions defined in the engine should be dumped.
            			@ingroup Logging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dumpEngineDocs(System.String)">
            <summary>
            Dumps the engine scripting documentation to the specified file overwriting any existing content.
                                 @param outputFile The relative or absolute output file path and name.
                                 @return Returns true if successful.
                                 @ingroup Console)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dumpFontCacheStatus">
            <summary>
            Dumps to the console a full description of all cached fonts, along with 
               info on the codepoints each contains.
               @ingroup Font )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dumpMaterialInstances">
            <summary>
            @brief Dumps a formatted list of currently allocated material instances to the console.
               @ingroup Materials)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dumpNetStats">
            <summary>
            @brief Dumps network statistics for each class to the console.
            
               The returned i>avg/i>, i>min/i> and i>max/i> values are in bits sent per update.  
               The i>num/i> value is the total number of events collected.
            
               @note This method only works when TORQUE_NET_STATS is defined in torqueConfig.h.
               @ingroup Networking )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dumpNetStringTable">
            <summary>
            @brief Dump the current contents of the networked string table to the console.
               The results are returned in three columns.  The first column is the network string ID.  
               The second column is the string itself.  The third column is the reference count to the 
               network string.
               @note This function is available only in debug builds.
               @ingroup Networking )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dumpProcessList(System.Boolean)">
            <summary>
            Dumps all ProcessObjects in ServerProcessList and ClientProcessList to the console. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dumpRandomNormalMap">
            <summary>
            Creates a 64x64 normal map texture filled with noise. The texture is saved 
               to randNormTex.png in the location of the game executable.
               @ingroup GFX)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dumpSoCount">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dumpStringMemStats">
            <summary>
            ()
            				@brief Dumps information about String memory usage
            				@ingroup Debugging
            				@ingroup Strings)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.dumpTextureObjects">
            <summary>
            Dumps a list of all active texture objects to the console.
               @note This function is only available in debug builds.
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.duplicateCachedFont(System.String,System.Int32,System.String)">
            <summary>
            Copy the specified old font to a new name. The new copy will not have a 
               platform font backing it, and so will never have characters added to it. 
               But this is useful for making copies of fonts to add postprocessing effects 
               to via exportCachedFont.
               @param oldFontName The name of the font face to copy.
               @param oldFontSize The size of the font to copy.
               @param newFontName The name of the new font face.
               @ingroup Font )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.echoInputState">
            <summary>
            ()
                        @brief Prints information to the console stating if DirectInput and a Joystick are enabled and active.
                        @ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.enableJoystick">
            <summary>
            ()
                         @brief Enables use of the joystick.
                         @note DirectInput must be enabled and active to use this function.
                         @ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.enableSamples(System.String,System.Boolean)">
            <summary>
            (pattern, [state]) -
            				@brief Enable sampling for all keys that match the given name 
            				pattern. Slashes are treated as separators.
            				@ingroup Rendering)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.enableWinConsole(System.Boolean)">
            <summary>
            enableWinConsole(bool);)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.enableXInput">
            <summary>
            ()
                        @brief Enables XInput for Xbox 360 controllers.
                        @note XInput is enabled by default. Disable to use an Xbox 360 
                        Controller as a joystick device.
            				@ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.endsWith(System.String,System.String,System.Boolean)">
            <summary>
            @brief Test whether the given string ends with the given suffix.
               @param str The string to test.
               @param suffix The potential suffix of @a str.
               @param caseSensitive If true, the comparison will be case-sensitive; if false, differences in casing will 
                  not be taken into account.
               @return True if the last characters in @a str match the complete contents of @a suffix; false otherwise.
               @tsexample
               startsWith( \"TEST123\", \"123\" ) // Returns true.
               @endtsexample
               @see startsWith
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.enumColladaForImport(System.String,System.String)">
            <summary>
            (string shapePath, GuiTreeViewCtrl ctrl) Collect scene information from 
               a COLLADA file and store it in a GuiTreeView control. This function is 
               used by the COLLADA import gui to show a preview of the scene contents 
               prior to import, and is probably not much use for anything else.
               @param shapePath COLLADA filename
               @param ctrl GuiTreeView control to add elements to
               @return true if successful, false otherwise
               @ingroup Editors
               @internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.enumerateConsoleClasses(System.String)">
            <summary>
             ),
            				@brief Returns a list of classes that derive from the named class.
                        If the named class is omitted this dumps all the classes.
                        @param className The optional base class name.
            				@return A tab delimited list of classes.
                        @ingroup Editors
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.enumerateConsoleClassesByCategory(System.String)">
            <summary>
            @brief Provide a list of classes that belong to the given category.
            				@param category The category name.
            				@return A tab delimited list of classes.
            				@ingroup Editors
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.eval(System.String)">
            <summary>
            eval(consoleString) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.excludeOtherInstance(System.String)">
            <summary>
            @brief Used to exclude/prevent all other instances using the same identifier specified
            
            					 @note Not used on OSX, Xbox, or in Win debug builds
            
            					 @param appIdentifier Name of the app set up for exclusive use.
            
            					 @return False if another app is running that specified the same appIdentifier
            
            					 @ingroup Platform
            					 @ingroup GuiCore)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.exec(System.String,System.Boolean,System.Boolean)">
            <summary>
            Execute the given script file.
               @param fileName Path to the file to execute
               @param noCalls Deprecated
               @param journalScript Deprecated
               @return True if the script was successfully executed, false if not.
               @tsexample
                  // Execute the init.cs script file found in the same directory as the current script file.
                  exec( \"./init.cs\" );
               @endtsexample
               @see compile
               @see eval
               @ingroup Scripting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.expandEscape(System.String)">
            <summary>
            @brief Replace all characters in @a text that need to be escaped for the string to be a valid string literal with their 
               respective escape sequences.
               All characters in @a text that cannot appear in a string literal will be replaced by an escape sequence (\\\, \\\\t, etc).
               The primary use of this function is for converting strings suitable for being passed as string literals 
               to the TorqueScript compiler.
               @param text A string
               @return A duplicate of the text parameter with all unescaped characters that cannot appear in string literals replaced by their respective 
               escape sequences.
               @tsxample
               expandEscape( \"str\" NL \"ing\" ) // Returns \"str\ing\".
               @endtsxample
               @see collapseEscape
               @ingroup Strings)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.export(System.String,System.String,System.Boolean)">
            <summary>
            , false ),
               Write out the definitions of all global variables matching the given name @a pattern.
               If @a fileName is not \"\", the variable definitions are written to the specified file.  Otherwise the 
               definitions will be printed to the console.
               The output are valid TorqueScript statements that can be executed to restore the global variable 
               values.
               @param pattern A global variable name pattern.  Must begin with '$'.
               @param filename %Path of the file to which to write the definitions or \"\" to write the definitions 
                  to the console.
               @param append If true and @a fileName is not \"\", then the definitions are appended to the specified file. 
                  Otherwise existing contents of the file (if any) will be overwritten.
               @tsexample
                  // Write out all preference variables to a prefs.cs file.
                  export( \"$prefs::*\", \"prefs.cs\" );
               @endtsexample
               @ingroup Scripting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.exportCachedFont(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Export specified font to the specified filename as a PNG. The 
               image can then be processed in Photoshop or another tool and 
               reimported using importCachedFont. Characters in the font are 
               exported as one long strip.
               @param faceName The name of the font face.
               @param fontSize The size of the font in pixels.
               @param fileName The file name and path for the output PNG.
               @param padding The padding between characters.   
               @param kerning The kerning between characters.   
               @ingroup Font )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.exportEngineAPIToXML">
            <summary>
            Create a XML document containing a dump of the entire exported engine API.
               @return A SimXMLDocument containing a dump of the engine's export information or NULL if the operation failed.
               @ingroup Console )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.exportToSettings(System.String,System.String,System.Boolean)">
            <summary>
            , false ),
               Write out the definitions of all global variables matching the given name @a pattern.
               If @a fileName is not \"\", the variable definitions are written to the specified file.  Otherwise the 
               definitions will be printed to the console.
               The output are valid TorqueScript statements that can be executed to restore the global variable 
               values.
               @param pattern A global variable name pattern.  Must begin with '$'.
               @param filename %Path of the file to which to write the definitions or \"\" to write the definitions 
                  to the console.
               @param append If true and @a fileName is not \"\", then the definitions are appended to the specified file. 
                  Otherwise existing contents of the file (if any) will be overwritten.
               @tsexample
                  // Write out all preference variables to a prefs.cs file.
                  export( \"$prefs::*\", \"prefs.cs\" );
               @endtsexample
               @ingroup Scripting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.fileBase(System.String)">
            <summary>
            @brief Get the base of a file name (removes extension and path)
            
               @param fileName Name and path of file to check
               @return String containing the file name, minus extension and path
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.fileCreatedTime(System.String)">
            <summary>
            @brief Returns a platform specific formatted string with the creation time for the file.
            
               @param fileName Name and path of file to check
               @return Formatted string (OS specific) containing created time, \"9/3/2010 12:33:47 PM\" for example
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.fileDelete(System.String)">
            <summary>
            @brief Delete a file from the hard drive
            
            	@param path Name and path of the file to delete
            	@note THERE IS NO RECOVERY FROM THIS. Deleted file is gone for good.
            	@return True if file was successfully deleted
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.fileExt(System.String)">
            <summary>
            @brief Get the extension of a file
            
            	@param fileName Name and path of file
            	@return String containing the extension, such as \".exe\" or \".cs\"
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.fileModifiedTime(System.String)">
            <summary>
            @brief Returns a platform specific formatted string with the last modified time for the file.
            
            	@param fileName Name and path of file to check
            	@return Formatted string (OS specific) containing modified time, \"9/3/2010 12:33:47 PM\" for example
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.fileName(System.String)">
            <summary>
            @brief Get only the file name of a path and file name string (removes path)
            
            	@param fileName Name and path of file to check
            	@return String containing the file name, minus the path
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.filePath(System.String)">
            <summary>
            @brief Get the path of a file (removes name and extension)
            
            	@param fileName Name and path of file to check
            	@return String containing the path, minus name and extension
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.fileSize(System.String)">
            <summary>
            @brief Determines the size of a file on disk
            
            	@param fileName Name and path of the file to check
            	@return Returns filesize in KB, or -1 if no file
            
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.filterString(System.String,System.String)">
            <summary>
            @brief Replaces the characters in a string with designated text
            
               Uses the bad word filter to determine which characters within the string will be replaced.
            
               @param baseString  The original string to filter.
               @param replacementChars A string containing letters you wish to swap in the baseString.
               @return The new scrambled string 
            
               @see addBadWord()
               @see containsBadWords()
            
               @tsexample
                  // Create the base string, can come from anywhere
                  %baseString = \"Foobar\";
                  // Create a string of random letters
                  %replacementChars = \"knqwrtlzs\";
                  // Filter the string
                  %newString = filterString(%baseString, %replacementChars);
                  // Print the new string to console
                  echo(%newString);
               @endtsexample
            
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.findFirstFile(System.String,System.Boolean)">
            <summary>
            @brief Returns the first file in the directory system matching the given pattern.
            
               Use the corresponding findNextFile() to step through 
               the results.  If you're only interested in the number of files returned by the 
               pattern match, use getFileCount().
            
               This function differs from findFirstFileMultiExpr() in that it supports a single search 
               pattern being passed in.
            
               @note You cannot run multiple simultaneous file system searches with these functions.  Each 
               call to findFirstFile() and findFirstFileMultiExpr() initiates a new search and renders 
               a previous search invalid.
            
               @param pattern The path and file name pattern to match against.
               @param recurse If true, the search will exhaustively recurse into subdirectories of the given path and match the given filename pattern.
               @return The path of the first file matched by the search or an empty string if no matching file could be found.
            
               @tsexample
                  // Execute all .cs files in a subdirectory and its subdirectories.
                  for( %file = findFirstFile( \"subdirectory/*.cs\" ); %file !$= \"\"; %file = findNextFile() )
                     exec( %file );
               @endtsexample
            
               @see findNextFile()
               @see getFileCount()
               @see findFirstFileMultiExpr()
               @ingroup FileSearches )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.findFirstFileMultiExpr(System.String,System.Boolean)">
            <summary>
            @brief Returns the first file in the directory system matching the given patterns.
            
               Use the corresponding findNextFileMultiExpr() to step through 
               the results.  If you're only interested in the number of files returned by the 
               pattern match, use getFileCountMultiExpr().
            
               This function differs from findFirstFile() in that it supports multiple search patterns 
               to be passed in.
            
               @note You cannot run multiple simultaneous file system searches with these functions.  Each 
               call to findFirstFile() and findFirstFileMultiExpr() initiates a new search and renders 
               a previous search invalid.
            
            	@param pattern The path and file name pattern to match against, such as *.cs.  Separate 
               multiple patterns with TABs.  For example: \"*.cs\" TAB \"*.dso\"
            	@param recurse If true, the search will exhaustively recurse into subdirectories 
            	of the given path and match the given filename patterns.
               @return String of the first matching file path, or an empty string if no matching 
               files were found.
            
               @tsexample
                  // Find all DTS or Collada models
                  %filePatterns = \"*.dts\" TAB \"*.dae\";
                  %fullPath = findFirstFileMultiExpr( %filePatterns );
                  while ( %fullPath !$= \"\" )
                  {
                     echo( %fullPath );
                     %fullPath = findNextFileMultiExpr( %filePatterns );
                  }
               @endtsexample
            
               @see findNextFileMultiExpr()
               @see getFileCountMultiExpr()
               @see findFirstFile()
            	@ingroup FileSearches)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.findNextFile(System.String)">
            <summary>
             ),
               @brief Returns the next file matching a search begun in findFirstFile().
            
               @param pattern The path and file name pattern to match against.  This is optional 
               and may be left out as it is not used by the code.  It is here for legacy reasons.
               @return The path of the next filename matched by the search or an empty string if no more files match.
            
               @tsexample
                  // Execute all .cs files in a subdirectory and its subdirectories.
                  for( %file = findFirstFile( \"subdirectory/*.cs\" ); %file !$= \"\"; %file = findNextFile() )
                     exec( %file );
               @endtsexample
            
               @see findFirstFile()
               @ingroup FileSearches )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.findNextFileMultiExpr(System.String)">
            <summary>
            ),
               @brief Returns the next file matching a search begun in findFirstFileMultiExpr().
            
            	@param pattern The path and file name pattern to match against.  This is optional 
               and may be left out as it is not used by the code.  It is here for legacy reasons.
               @return String of the next matching file path, or an empty string if no matching 
               files were found.
            
               @tsexample
                  // Find all DTS or Collada models
                  %filePatterns = \"*.dts\" TAB \"*.dae\";
                  %fullPath = findFirstFileMultiExpr( %filePatterns );
                  while ( %fullPath !$= \"\" )
                  {
                     echo( %fullPath );
                     %fullPath = findNextFileMultiExpr( %filePatterns );
                  }
               @endtsexample
            
               @see findFirstFileMultiExpr()
            	@ingroup FileSearches)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.firstWord(System.String)">
            <summary>
            Return the first word in @a text.
               @param text A list of words separated by newlines, spaces, and/or tabs.
               @return The word at index 0 in @a text or \"\" if @a text is empty.
               @note This is equal to 
               @tsexample_nopar
                  getWord( text, 0 )
               @endtsexample
               @see getWord
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.flagCurrentGFXResources">
            <summary>
            @brief Flags all currently allocated GFX resources.
               Used for resource allocation and leak tracking by flagging 
               current resources then dumping a list of unflagged resources 
               at some later point in execution.
               @ingroup GFX
               @see listGFXResources, clearGFXResourceFlags, describeGFXResources )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.flushTextureCache">
            <summary>
            Releases all textures and resurrects the texture manager.
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getActiveDDSFiles">
            <summary>
            Returns the count of active DDSs files in memory.
               @ingroup Rendering )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getActiveLightManager">
            <summary>
            Returns the active light manager name.
               @ingroup Lighting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getAppVersionNumber">
            <summary>
            Get the version of the application build, as a string. 
                        @ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getAppVersionString">
            <summary>
            Get the version of the aplication build, as a human readable string. 
                        @ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getBestHDRFormat">
            <summary>
            Returns the best texture format for storage of HDR data for the active device.
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getBitmapInfo(System.String)">
            <summary>
            Returns image info in the following format: width TAB height TAB bytesPerPixel. 
               It will return an empty string if the file is not found.
               @ingroup Rendering )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getBoxCenter(WinterLeaf.Engine.Containers.Box3F)">
            <summary>
            Get the center point of an axis-aligned box.
               @param b A Box3F, in string format using \"minExtentX minExtentY minExtentZ maxExtentX maxExtentY maxExtentZ\"
               @return Center of the box.
               @ingroup Math)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getBuildString">
            <summary>
            Get the type of build, \"Debug\" or \"Release\".
            				@ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getCategoryOfClass(System.String)">
            <summary>
            @brief Returns the category of the given class.
            				@param className The name of the class.
            				@ingroup Console)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getClipboard">
            <summary>
            ()
            				@brief Get text from the clipboard.
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getCompileTimeString">
            <summary>
            Get the time of compilation. 
            				@ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getCoreLangTable">
            <summary>
            ()
            				@brief Gets the primary LangTable used by the game
            				@return ID of the core LangTable
            				@ingroup Localization)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getCurrentActionMap">
            <summary>
            @brief Returns the current %ActionMap.
               @see ActionMap
            	@ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getCurrentDirectory">
            <summary>
            @brief Return the current working directory.
               @return The absolute path of the current working directory.
               @note Only present in a Tools build of Torque.
               @see getWorkingDirectory()
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getDescriptionOfClass(System.String)">
            <summary>
            @brief Returns the description string for the named class.
            				@param className The name of the class.
            				@return The class description in string format.
            				@ingroup Console)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getDesktopResolution">
            <summary>
            Returns the width, height, and bitdepth of the screen/desktop.@ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getDirectoryList(System.String,System.Int32)">
            <summary>
            @brief Gathers a list of directories starting at the given path.
            
            	@param path String containing the path of the directory
            	@param depth Depth of search, as in how many subdirectories to parse through
            	@return Tab delimited string containing list of directories found during search, \"\" if no files were found
            
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getDisplayDeviceInformation">
            <summary>
            Get the string describing the active GFX device.
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getDisplayDeviceList">
            <summary>
            Returns a tab-seperated string of the detected devices across all adapters.
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getDSOPath(System.String)">
            <summary>
            Get the absolute path to the file in which the compiled code for the given script file will be stored.
               @param scriptFileName %Path to the .cs script file.
               @return The absolute path to the .dso file for the given script file.
               @note The compiler will store newly compiled DSOs in the prefs path but pre-existing DSOs will be loaded 
                  from the current paths.
               @see compile
               @see getPrefsPath
               @ingroup Scripting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getEngineName">
            <summary>
            Get the name of the engine product that this is running from, as a string. 
            				@ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getEventTimeLeft(System.Int32)">
            <summary>
            getEventTimeLeft(scheduleId) Get the time left in ms until this event will trigger.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getExecutableName">
            <summary>
            @brief Gets the name of the game's executable
            
            	@return String containing this game's executable name
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getFarClippingDistance">
            <summary>
            Gets the clients far clipping.
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getField(System.String,System.Int32)">
            <summary>
            Extract the field at the given @a index in the newline and/or tab separated list in @a text.
               Fields in @a text must be separated by newlines and/or tabs.
               @param text A list of fields separated by newlines and/or tabs.
               @param index The zero-based index of the field to extract.
               @return The field at the given index or \"\" if the index is out of range.
               @tsexample
                  getField( \"a b\" TAB \"c d\" TAB \"e f\", 1 ) // Returns \"c d\"
               @endtsexample
               @see getFields
               @see getFieldCount
               @see getWord
               @see getRecord
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getFieldCount(System.String)">
            <summary>
            Return the number of newline and/or tab separated fields in @a text.
               @param text A list of fields separated by newlines and/or tabs.
               @return The number of newline and/or tab sepearated elements in @a text.
               @tsexample
                  getFieldCount( \"a b\" TAB \"c d\" TAB \"e f\" ) // Returns 3
               @endtsexample
               @see getWordCount
               @see getRecordCount
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getFields(System.String,System.Int32,System.Int32)">
            <summary>
            Extract a range of fields from the given @a startIndex onwards thru @a endIndex.
               Fields in @a text must be separated by newlines and/or tabs.
               @param text A list of fields separated by newlines and/or tabs.
               @param startIndex The zero-based index of the first field to extract from @a text.
               @param endIndex The zero-based index of the last field to extract from @a text.  If this is -1, all fields beginning 
                  with @a startIndex are extracted from @a text.
               @return A string containing the specified range of fields from @a text or \"\" if @a startIndex 
                  is out of range or greater than @a endIndex.
               @tsexample
                  getFields( \"a b\" TAB \"c d\" TAB \"e f\", 1 ) // Returns \"c d\" TAB \"e f\"
               @endtsexample
               @see getField
               @see getFieldCount
               @see getWords
               @see getRecords
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getFileCount(System.String,System.Boolean)">
            <summary>
            @brief Returns the number of files in the directory tree that match the given patterns
            
               This function differs from getFileCountMultiExpr() in that it supports a single search 
               pattern being passed in.
            
               If you're interested in a list of files that match the given pattern and not just 
               the number of files, use findFirstFile() and findNextFile().
            
               @param pattern The path and file name pattern to match against.
               @param recurse If true, the search will exhaustively recurse into subdirectories of the given path and match the given filename pattern 
                  counting files in subdirectories.
               @return Number of files located using the pattern
            
               @tsexample
                  // Count the number of .cs files in a subdirectory and its subdirectories.
                  getFileCount( \"subdirectory/*.cs\" );
               @endtsexample
            
               @see findFirstFile()
               @see findNextFile()
               @see getFileCountMultiExpr()
               @ingroup FileSearches )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getFileCountMultiExpr(System.String,System.Boolean)">
            <summary>
            @brief Returns the number of files in the directory tree that match the given patterns
            
               If you're interested in a list of files that match the given patterns and not just 
               the number of files, use findFirstFileMultiExpr() and findNextFileMultiExpr().
            
            	@param pattern The path and file name pattern to match against, such as *.cs.  Separate 
               multiple patterns with TABs.  For example: \"*.cs\" TAB \"*.dso\"
            	@param recurse If true, the search will exhaustively recurse into subdirectories 
            	of the given path and match the given filename pattern.
            	@return Number of files located using the patterns
            
               @tsexample
                  // Count all DTS or Collada models
                  %filePatterns = \"*.dts\" TAB \"*.dae\";
                  echo( \"Nunmer of shape files:\" SPC getFileCountMultiExpr( %filePatterns ) );
               @endtsexample
            
               @see findFirstFileMultiExpr()
               @see findNextFileMultiExpr()
            	@ingroup FileSearches)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getFileCRC(System.String)">
            <summary>
            @brief Provides the CRC checksum of the given file.
               
               @param fileName The path to the file.
               @return The calculated CRC checksum of the file, or -1 if the file 
               could not be found.
               
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getFormatExtensions">
            <summary>
            Returns a list of supported shape format extensions separated by tabs.
              Example output: *.dsq TAB *.dae TAB)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getFormatFilters">
            <summary>
            Returns a list of supported shape formats in filter form.
              Example output: DSQ Files|*.dsq|COLLADA Files|*.dae|)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getFrustumOffset">
            <summary>
            @brief .)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getFunctionPackage(System.String)">
            <summary>
            (string funcName) 
            	@brief Provides the name of the package the function belongs to
            	@param funcName String containing name of the function
            	@return The name of the function's package
            	@ingroup Packages)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getJoystickAxes(System.UInt32)">
            <summary>
            getJoystickAxes( instance ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getLightManagerNames">
            <summary>
            Returns a tab seperated list of light manager names.
               @ingroup Lighting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getMainDotCsDir">
            <summary>
            @brief Get the absolute path to the directory that contains the main.cs script from which the engine was started.
            
               This directory will usually contain all the game assets and, in a user-side game installation, will usually be 
               read-only.
               @return The path to the main game assets.
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getMapEntry(System.String)">
            <summary>
            @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getMaterialMapping(System.String)">
            <summary>
            (string texName)
               @brief Returns the name of the material mapped to this texture.
               If no materials are found, an empty string is returned.
               @param texName Name of the texture
               @ingroup Materials)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getMax(System.Single,System.Single)">
            <summary>
            Calculate the greater of two specified numbers.
                @param v1 Input value.
                @param v2 Input value.
                @returns The greater value of the two specified values.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getMaxFrameAllocation">
            <summary>
            getMaxFrameAllocation(); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getMethodPackage(System.String,System.String)">
            <summary>
            (string namespace, string method) 
            	@brief Provides the name of the package the method belongs to
            	@param namespace Class or namespace, such as Player
            	@param method Name of the funciton to search for
            	@return The name of the method's package
            	@ingroup Packages)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getMin(System.Single,System.Single)">
            <summary>
            Calculate the lesser of two specified numbers.
                @param v1 Input value.
                @param v2 Input value.
                @returns The lesser value of the two specified values.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getMissionAreaServerObject">
            <summary>
            Get the MissionArea object, if any.
            					 @ingroup enviroMisc)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getModNameFromPath(System.String)">
            <summary>
            (string path) 
            				@brief Attempts to extract a mod directory from path. Returns empty string on failure.
            				@param File path of mod folder
            				@note This is no longer relevant in Torque 3D (which does not use mod folders), should be deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getNavMeshEventManager">
            <summary>
            @brief Get the EventManager object for all NavMesh updates.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getPackageList">
            <summary>
            @brief Returns a space delimited list of the active packages in stack order.
               @ingroup Packages)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getPixelShaderVersion">
            <summary>
            Returns the pixel shader version for the active device.
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getPrefsPath(System.String)">
            <summary>
            ([relativeFileName]) 
            				@note Appears to be useless in Torque 3D, should be deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getRandom(System.Int32,System.Int32)">
            <summary>
            ( int a, int b ) 
               @brief Returns a random number based on parameters passed in..
               If no parameters are passed in, getRandom() will return a float between 0.0 and 1.0. If one 
               parameter is passed an integer between 0 and the passed in value will be returned. Two parameters will 
               return an integer between the specified numbers.
               @param a If this is the only parameter, a number between 0 and a is returned. Elsewise represents the lower bound.
               @param b Upper bound on the random number.  The random number will be = @a b.
               @return A pseudo-random integer between @a a and @a b, between 0 and a, or a 
               float between 0.0 and 1.1 depending on usage.
               @note All parameters are optional.
               @see setRandomSeed
               @ingroup Random )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getRandomSeed">
            <summary>
            Get the current seed used by the random number generator.
               @return The current random number generator seed value.
               @ingroup Random )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getRealTime">
            <summary>
            () 
            				@brief Return the current real time in milliseconds.
                            Real time is platform defined; typically time since the computer booted.
            				@ingroup Platform)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getRecord(System.String,System.Int32)">
            <summary>
            Extract the record at the given @a index in the newline-separated list in @a text.
               Records in @a text must be separated by newlines.
               @param text A list of records separated by newlines.
               @param index The zero-based index of the record to extract.
               @return The record at the given index or \"\" if @a index is out of range.
               @tsexample
                  getRecord( \"a b\" NL \"c d\" NL \"e f\", 1 ) // Returns \"c d\"
               @endtsexample
               @see getRecords
               @see getRecordCount
               @see getWord
               @see getField
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getRecordCount(System.String)">
            <summary>
            Return the number of newline-separated records in @a text.
               @param text A list of records separated by newlines.
               @return The number of newline-sepearated elements in @a text.
               @tsexample
                  getRecordCount( \"a b\" NL \"c d\" NL \"e f\" ) // Returns 3
               @endtsexample
               @see getWordCount
               @see getFieldCount
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getRecords(System.String,System.Int32,System.Int32)">
            <summary>
            Extract a range of records from the given @a startIndex onwards thru @a endIndex.
               Records in @a text must be separated by newlines.
               @param text A list of records separated by newlines.
               @param startIndex The zero-based index of the first record to extract from @a text.
               @param endIndex The zero-based index of the last record to extract from @a text.  If this is -1, all records beginning 
                  with @a startIndex are extracted from @a text.
               @return A string containing the specified range of records from @a text or \"\" if @a startIndex 
                  is out of range or greater than @a endIndex.
               @tsexample
                  getRecords( \"a b\" NL \"c d\" NL \"e f\", 1 ) // Returns \"c d\" NL \"e f\"
               @endtsexample
               @see getRecord
               @see getRecordCount
               @see getWords
               @see getFields
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getScheduleDuration(System.Int32)">
            <summary>
            getScheduleDuration(%scheduleId); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getServerCount">
            <summary>
            getServerCount(...); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getSimTime">
            <summary>
            () 
            				Return the current sim time in milliseconds.
                            @brief Sim time is time since the game started.
            				@ingroup Platform)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getSubStr(System.String,System.Int32,System.Int32)">
            <summary>
            @brief Return a substring of @a str starting at @a start and continuing either through to the end of @a str 
               (if @a numChars is -1) or for @a numChars characters (except if this would exceed the actual source 
               string length).
               @param str The string from which to extract a substring.
               @param start The offset at which to start copying out characters.
               @param numChars Optional argument to specify the number of characters to copy.  If this is -1, all characters up the end 
                  of the input string are copied.
               @return A string that contains the given portion of the input string.
               @tsexample
               getSubStr( \"foobar\", 1, 2 ) // Returns \"oo\".
               @endtsexample
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getTag(System.String)">
            <summary>
            ( string textTagString ) 
               @brief Extracts the tag from a tagged string
            
               Should only be used within the context of a function that receives a tagged 
               string, and is not meant to be used outside of this context.
            
               @param textTagString The tagged string to extract.
            
               @returns The tag ID of the string.
            
               @see \\ref syntaxDataTypes under Tagged %Strings
               @see detag()
               @ingroup Networking)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getTaggedString(System.String)">
            <summary>
            ),
               @brief Use the getTaggedString function to convert a tag to a string.
            
               This is not the same as detag() which can only be used within the context 
               of a function that receives a tag. This function can be used any time and 
               anywhere to convert a tag to a string.
            
               @param tag A numeric tag ID.
            
               @returns The string as found in the Net String table.
            
               @see \\ref syntaxDataTypes under Tagged %Strings
               @see addTaggedString()
               @see removeTaggedString()
               @ingroup Networking)
            	
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getTemporaryDirectory">
            <summary>
            @brief Returns the OS temporary directory, \"C:/Users/Mich/AppData/Local/Temp\" for example
            				@note This can be useful to adhering to OS standards and practices, 
            				but not really used in Torque 3D right now.
            				@note Be very careful when getting into OS level File I/O.
            				@return String containing path to OS temp directory
            				@note This is legacy function brought over from TGB, and does not appear 
            				to have much use. Possibly deprecate?
            				@ingroup FileSystem
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getTemporaryFileName">
            <summary>
            @brief Creates a name and extension for a potential temporary file
            				This does not create the actual file. It simply creates a random name 
            				for a file that does not exist.
            				@note This is legacy function brought over from TGB, and does not appear 
            				to have much use. Possibly deprecate?
            				@ingroup FileSystem
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getTerrainHeight(WinterLeaf.Engine.Containers.Point2F)">
            <summary>
            (Point2 pos) - gets the terrain height at the specified position.
            				@param pos The world space point, minus the z (height) value Can be formatted as either (\"x y\") or (x,y)
            				@return Returns the terrain height at the given point as an F32 value.
            				@hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getTerrainHeightBelowPosition(WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            (Point3F pos) - gets the terrain height at the specified position.
            				@param pos The world space point. Can be formatted as either (\"x y z\") or (x,y,z)
            				@note This function is useful if you simply want to grab the terrain height underneath an object.
            				@return Returns the terrain height at the given point as an F32 value.
            				@hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getTerrainUnderWorldPoint(WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            (Point3F x/y/z) Gets the terrain block that is located under the given world point.
                                                                  @param x/y/z The world coordinates (floating point values) you wish to query at.  
                                                                  These can be formatted as either a string (\"x y z\") or separately as (x, y, z)
                                                                  @return Returns the ID of the requested terrain block (0 if not found).
            													  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getTextureProfileStats">
            <summary>
            Returns a list of texture profiles in the format: ProfileName TextureCount TextureMB
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getTimeSinceStart(System.Int32)">
            <summary>
            getTimeSinceStart(%scheduleId); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getTrailingNumber(System.String)">
            <summary>
            Get the numeric suffix of the given input string.
               @param str The string from which to read out the numeric suffix.
               @return The numeric value of the number suffix of @a str or -1 if @a str has no such suffix.
               @tsexample
               getTrailingNumber( \"test123\" ) // Returns '123'.
               @endtsexample
               @see stripTrailingNumber
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getUniqueInternalName(System.String,System.String,System.Boolean)">
            <summary>
            ( String baseName, SimSet set, bool searchChildren )
               @brief Returns a unique unused internal name within the SimSet/Group based on a given base name.
               @note Currently only used by editors
               @ingroup Editors
               @internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getUniqueName(System.String)">
            <summary>
            ( String baseName )
            	@brief Returns a unique unused SimObject name based on a given base name.
            	@baseName Name to conver to a unique string if another instance exists
            	@note Currently only used by editors
            	@ingroup Editors
            	@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getUserDataDirectory">
            <summary>
            getUserDataDirectory())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getUserHomeDirectory">
            <summary>
            getUserHomeDirectory())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getVariable(System.String)">
            <summary>
            (string varName) 
               @brief Returns the value of the named variable or an empty string if not found.
               @varName Name of the variable to search for
               @return Value contained by varName, \"\" if the variable does not exist
               @ingroup Scripting)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getVersionNumber">
            <summary>
            Get the version of the engine build, as a string. 
            				@ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getVersionString">
            <summary>
            Get the version of the engine build, as a human readable string. 
            				@ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getWebDeployment">
            <summary>
            Test whether Torque is running in web-deployment mode.
               In this mode, Torque will usually run within a browser and certain restrictions apply (e.g. Torque will not 
               be able to enter fullscreen exclusive mode).
               @return True if Torque is running in web-deployment mode.
               @ingroup Platform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getWord(System.String,System.Int32)">
            <summary>
            Extract the word at the given @a index in the whitespace-separated list in @a text.
               Words in @a text must be separated by newlines, spaces, and/or tabs.
               @param text A whitespace-separated list of words.
               @param index The zero-based index of the word to extract.
               @return The word at the given index or \"\" if the index is out of range.
               @tsexample
                  getWord( \"a b c\", 1 ) // Returns \"b\"
               @endtsexample
               @see getWords
               @see getWordCount
               @see getField
               @see getRecord
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getWordCount(System.String)">
            <summary>
            Return the number of whitespace-separated words in @a text.
               Words in @a text must be separated by newlines, spaces, and/or tabs.
               @param text A whitespace-separated list of words.
               @return The number of whitespace-separated words in @a text.
               @tsexample
                  getWordCount( \"a b c d e\" ) // Returns 5
               @endtsexample
               @see getFieldCount
               @see getRecordCount
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getWords(System.String,System.Int32,System.Int32)">
            <summary>
            Extract a range of words from the given @a startIndex onwards thru @a endIndex.
               Words in @a text must be separated by newlines, spaces, and/or tabs.
               @param text A whitespace-separated list of words.
               @param startIndex The zero-based index of the first word to extract from @a text.
               @param endIndex The zero-based index of the last word to extract from @a text.  If this is -1, all words beginning 
                  with @a startIndex are extracted from @a text.
               @return A string containing the specified range of words from @a text or \"\" if @a startIndex 
                  is out of range or greater than @a endIndex.
               @tsexample
                  getWords( \"a b c d\", 1, 2, ) // Returns \"b c\"
               @endtsexample
               @see getWord
               @see getWordCount
               @see getFields
               @see getRecords
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getWorkingDirectory">
            <summary>
            @brief Reports the current directory
            
            	@return String containing full file path of working directory
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.getXInputState(System.Int32,System.String,System.Boolean)">
            <summary>
            ( int controllerID, string property, bool currentD )
            				@brief Queries the current state of a connected Xbox 360 controller.
                        XInput Properties:
                         - XI_THUMBLX, XI_THUMBLY - X and Y axes of the left thumbstick. 
                         - XI_THUMBRX, XI_THUMBRY - X and Y axes of the right thumbstick. 
                         - XI_LEFT_TRIGGER, XI_RIGHT_TRIGGER - Left and Right triggers. 
                         - SI_UPOV, SI_DPOV, SI_LPOV, SI_RPOV - Up, Down, Left, and Right on the directional pad.
                         - XI_START, XI_BACK - The Start and Back buttons.
                         - XI_LEFT_THUMB, XI_RIGHT_THUMB - Clicking in the left and right thumbstick.
                         - XI_LEFT_SHOULDER, XI_RIGHT_SHOULDER - Left and Right bumpers.
                         - XI_A, XI_B , XI_X, XI_Y - The A, B, X, and Y buttons.
                        @param controllerID Zero-based index of the controller to return information about.
                        @param property Name of input action being queried, such as \"XI_THUMBLX\".
                        @param current True checks current device in action.
                        @return Button queried - 1 if the button is pressed, 0 if it's not.
                        @return Thumbstick queried - Int representing displacement from rest position.
                        @return %Trigger queried - Int from 0 to 255 representing how far the trigger is displaced.
                        @ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.gotoWebPage(System.String)">
            <summary>
            Open the given URL or file in the user's web browser.
               @param address The address to open.  If this is not prefixed by a protocol specifier (\"...://\"), then 
                  the function checks whether the address refers to a file or directory and if so, prepends \"file://\" 
                  to @a adress; if the file check fails, \"http://\" is prepended to @a address.
               @tsexample
                  gotoWebPage( \"http://www.garagegames.com\" );
               @endtsexample
               @ingroup Platform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.importCachedFont(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Import an image strip from exportCachedFont. Call with the 
               same parameters you called exportCachedFont.
               @param faceName The name of the font face.
               @param fontSize The size of the font in pixels.
               @param fileName The file name and path for the input PNG.
               @param padding The padding between characters.   
               @param kerning The kerning between characters.   
               @ingroup Font )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.initContainerRadiusSearch(WinterLeaf.Engine.Containers.Point3F,System.Single,System.UInt32,System.Boolean)">
            <summary>
            @brief Start a search for items at the given position and within the given radius, filtering by mask.
            
               @param pos Center position for the search
               @param radius Search radius
               @param mask Bitmask of object types to include in the search
               @param useClientContainer Optionally indicates the search should be within the 
               client container.
            
               @see containerSearchNext 
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.initContainerTypeSearch(System.UInt32,System.Boolean)">
            <summary>
            @brief Start a search for all items of the types specified by the bitset mask.
            
               @param mask Bitmask of object types to include in the search
               @param useClientContainer Optionally indicates the search should be within the 
               client container.
            
               @see containerSearchNext 
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.initDisplayDeviceInfo">
            <summary>
            ()
            				@brief Initializes variables that track device and vendor information/IDs
            				@ingroup Rendering)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isalnum(System.String,System.Int32)">
            <summary>
            Test whether the character at the given position is an alpha-numeric character.
               Alpha-numeric characters are characters that are either alphabetic (a-z, A-Z) or numbers (0-9).
               @param str The string to test.
               @param index The index of a character in @a str.
               @return True if the character at the given index in @a str is an alpha-numeric character; false otherwise.
               @see isspace
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isClass(System.String)">
            <summary>
            @brief Returns true if the passed identifier is the name of a declared class.
            				@ingroup Console)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isCurrentScriptToolScript">
            <summary>
            () 
               Returns true if the calling script is a tools script.
               @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isDebugBuild">
            <summary>
            Test whether the engine has been compiled with TORQUE_DEBUG, i.e. if it includes debugging functionality.
               @return True if this is a debug build; false otherwise.
               @ingroup Platform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isDefined(System.String,System.String)">
            <summary>
            ) , (string varName) 
            	@brief Determines if a variable exists and contains a value
            	@param varName Name of the variable to search for
            	@return True if the variable was defined in script, false if not
               @tsexample
                  isDefined( \"$myVar\" );
               @endtsexample
            	@ingroup Scripting)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isDemo">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.IsDirectory(System.String)">
            <summary>
            @brief Determines if a specified directory exists or not
            
            	@param directory String containing path in the form of \"foo/bar\"
               @return Returns true if the directory was found.
            
            	@note Do not include a trailing slash '/'.
            
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isEventPending(System.Int32)">
            <summary>
            isEventPending(%scheduleId);)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isFile(System.String)">
            <summary>
            @brief Determines if the specified file exists or not
               
               @param fileName The path to the file.
               @return Returns true if the file was found.
               
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isFunction(System.String)">
            <summary>
            (string funcName) 
            	@brief Determines if a function exists or not
            	@param funcName String containing name of the function
            	@return True if the function exists, false if not
            	@ingroup Scripting)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isJoystickDetected">
            <summary>
            isJoystickDetected())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isJoystickEnabled">
            <summary>
            ()
            				@brief Queries input manager to see if a joystick is enabled
            				@return 1 if a joystick exists and is enabled, 0 if it's not.
            				@ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isKoreanBuild">
            <summary>
            isKoreanBuild())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isMemberOfClass(System.String,System.String)">
            <summary>
            @brief Returns true if the class is derived from the super class.
               If either class doesn't exist this returns false.
               @param className The class name.
               @param superClassName The super class to look for.
               @ingroup Console)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isMethod(System.String,System.String)">
            <summary>
            (string namespace, string method) 
            	@brief Determines if a class/namespace method exists
            	@param namespace Class or namespace, such as Player
            	@param method Name of the function to search for
            	@return True if the method exists, false if not
            	@ingroup Scripting)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isObject(System.String)">
            <summary>
            isObject(object))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isPackage(System.String)">
            <summary>
            @brief Returns true if the identifier is the name of a declared package.
               @ingroup Packages)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isQueueRegistered(System.String)">
            <summary>
            (string queueName)
            				@brief Determines if a dispatcher queue exists
            				@param queueName String containing the name of queue
            				@ingroup Messaging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isShippingBuild">
            <summary>
            Test whether the engine has been compiled with TORQUE_SHIPPING, i.e. in a form meant for final release.
               @return True if this is a shipping build; false otherwise.
               @ingroup Platform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isspace(System.String,System.Int32)">
            <summary>
            Test whether the character at the given position is a whitespace character.
               Characters such as tab, space, or newline are considered whitespace.
               @param str The string to test.
               @param index The index of a character in @a str.
               @return True if the character at the given index in @a str is a whitespace character; false otherwise.
               @see isalnum
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isToolBuild">
            <summary>
            Test whether the engine has been compiled with TORQUE_TOOLS, i.e. if it includes tool-related functionality.
               @return True if this is a tool build; false otherwise.
               @ingroup Platform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isValidObjectName(System.String)">
            <summary>
            ( string name )
            				@brief Return true if the given name makes for a valid object name.
            				@param name Name of object
            				@return True if name is allowed, false if denied (usually because it starts with a number, _, or invalid character
            				@ingroup Console)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isWebDemo">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isWriteableFileName(System.String)">
            <summary>
            @brief Determines if a file name can be written to using File I/O
            
            	@param fileName Name and path of file to check
            	@return Returns true if the file can be written to.
            
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.isXInputConnected(System.Int32)">
            <summary>
            ( int controllerID )
            				@brief Checks to see if an Xbox 360 controller is connected
            				@param controllerID Zero-based index of the controller to check.
                        @return 1 if the controller is connected, 0 if it isn't, and 205 if XInput 
                        hasn't been initialized.
            				@ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.lightScene(System.String,System.String)">
            <summary>
            Will generate static lighting for the scene if supported by the active light manager.
               If mode is \"forceAlways\", the lightmaps will be regenerated regardless of whether 
               lighting cache files can be written to. If mode is \"forceWritable\", then the lightmaps 
               will be regenerated only if the lighting cache files can be written.
               @param completeCallbackFn The name of the function to execute when the lighting is complete.
               @param mode One of \"forceAlways\",  \"forceWritable\" or \"loadOnly\".
               @return Returns true if the scene lighting process was started.
               @ingroup Lighting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.listGFXResources(System.Boolean)">
            <summary>
            Returns a list of the unflagged GFX resources. See flagCurrentGFXResources for usage details.
               @ingroup GFX
               @see flagCurrentGFXResources, clearGFXResourceFlags, describeGFXResources )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.loadColladaLights(System.String,System.String,System.String)">
            <summary>
            , ), 
               (string filename, SimGroup parentGroup=MissionGroup, SimObject baseObject=-1)
               Load all light instances from a COLLADA (.dae) file and add to the scene.
               @param filename COLLADA filename to load lights from
               @param parentGroup (optional) name of an existing simgroup to add the new 
               lights to (defaults to MissionGroup)
               @param baseObject (optional) name of an object to use as the origin (useful 
               if you are loading the lights for a collada scene and have moved or rotated 
               the geometry)
               @return true if successful, false otherwise
               @tsexample
               // load the lights in room.dae
               loadColladaLights( \"art/shapes/collada/room.dae\" );
               // load the lights in room.dae and add them to the RoomLights group
               loadColladaLights( \"art/shapes/collada/room.dae\", \"RoomLights\" );
               // load the lights in room.dae and use the transform of the \"Room\"
               object as the origin
               loadColladaLights( \"art/shapes/collada/room.dae\", \"\", \"Room\" );
               @endtsexample
               @note Currently for editor use only
               @ingroup Editors
               @internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.loadObject(System.String)">
            <summary>
            @brief Loads a serialized object from a file.
            				@param Name and path to text file containing the object
            				@ingroup Console)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.lockMouse(System.Boolean)">
            <summary>
            (bool isLocked) 
                        @brief Lock or unlock the mouse to the window.
                        When true, prevents the mouse from leaving the bounds of the game window.
                        @ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.log(System.String)">
            <summary>
            @brief Logs a message to the console.
               @param message The message text.
               @note By default, messages will appear white in the console.
               @ingroup Logging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.logError(System.String)">
            <summary>
            @brief Logs an error message to the console.
               @param message The message text.
               @note By default, errors will appear red in the console.
               @ingroup Logging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.logWarning(System.String)">
            <summary>
            @brief Logs a warning message to the console.
               @param message The message text.
               @note By default, warnings will appear turquoise in the console.
               @ingroup Logging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.ltrim(System.String)">
            <summary>
            Remove leading whitespace from the string.
               @param str A string.
               @return A string that is the same as @a str but with any leading (i.e. leftmost) whitespace removed.
               @tsexample
               ltrim( \"   string  \" ); // Returns \"string  \".
               @endtsexample
               @see rtrim
               @see trim
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.m2Pi">
            <summary>
            Return the value of 2*PI (full-circle in radians).
                @returns The value of 2*PI.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mAbs(System.Single)">
            <summary>
            Calculate absolute value of specified value.
                @param v Input Value.
                @returns Absolute value of specified value.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mAcos(System.Single)">
            <summary>
            Calculate the arc-cosine of v.
                @param v Input Value (in radians).
                @returns The arc-cosine of the input value.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.makeFullPath(System.String,System.String)">
            <summary>
            ),
            	@brief Converts a relative file path to a full path
            
            	For example, \"./console.log\" becomes \"C:/Torque/t3d/examples/FPS Example/game/console.log\"
            	@param path Name of file or path to check
               @param cwd Optional current working directory from which to build the full path.
            	@return String containing non-relative directory of path
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.makeRelativePath(System.String,System.String)">
            <summary>
            ),
            	@brief Turns a full or local path to a relative one
            
               For example, \"./game/art\" becomes \"game/art\"
               @param path Full path (may include a file) to convert
               @param to Optional base path used for the conversion.  If not supplied the current 
               working directory is used.
            	@returns String containing relative path
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mAsin(System.Single)">
            <summary>
            Calculate the arc-sine of v.
                @param v Input Value (in radians).
                @returns The arc-sine of the input value.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mAtan(System.Single,System.Single)">
            <summary>
            Calculate the arc-tangent (slope) of a line defined by rise and run.
                @param rise of line.
                @param run of line.
                @returns The arc-tangent (slope) of a line defined by rise and run.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.MatrixCreate(WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.AngAxisF)">
            <summary>
            Create a transform from the given translation and orientation.
               @param position The translation vector for the transform.
               @param orientation The axis and rotation that orients the transform.
               @return A transform based on the given position and orientation.
               @ingroup Matrices )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.MatrixCreateFromEuler(WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            @Create a matrix from the given rotations.
               @param Vector3F X, Y, and Z rotation in *radians*.
               @return A transform based on the given orientation.
               @ingroup Matrices )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.MatrixMulPoint(WinterLeaf.Engine.Containers.TransformF,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            @brief Multiply the given point by the given transform assuming that w=1.
               This function will multiply the given vector such that translation with take effect.
               @param transform A transform.
               @param point A vector.
               @return The transformed vector.
               @ingroup Matrices)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.MatrixMultiply(WinterLeaf.Engine.Containers.TransformF,WinterLeaf.Engine.Containers.TransformF)">
            <summary>
            @brief Multiply the two matrices.
               @param left First transform.
               @param right Right transform.
               @return Concatenation of the two transforms.
               @ingroup Matrices )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.MatrixMulVector(WinterLeaf.Engine.Containers.TransformF,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            @brief Multiply the vector by the transform assuming that w=0.
               This function will multiply the given vector by the given transform such that translation will 
               not affect the vector.
               @param transform A transform.
               @param vector A vector.
               @return The transformed vector.
               @ingroup Matrices)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mCeil(System.Single)">
            <summary>
            Round v up to the nearest integer.
                @param v Number to convert to integer.
                @returns Number converted to integer.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mClamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamp the specified value between two bounds.
                @param v Input value.
                @param min Minimum Bound.
                @param max Maximum Bound.
                @returns The specified value clamped to the specified bounds.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mCos(System.Single)">
            <summary>
            Calculate the cosine of v.
                @param v Input Value (in radians).
                @returns The cosine of the input value.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mDegToRad(System.Single)">
            <summary>
            Convert specified degrees into radians.
                @param degrees Input Value (in degrees).
                @returns The specified degrees value converted to radians.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.messageBox(System.String,System.String,WinterLeaf.Engine.Enums.TypeMBButtons,WinterLeaf.Engine.Enums.TypeMBIcons)">
            <summary>
            Display a modal message box using the platform's native message box implementation.
               @param title The title to display on the message box window.
               @param message The text message to display in the box.
               @param buttons Which buttons to put on the message box.
               @param icons Which icon to show next to the message.
               @return One of $MROK, $MRCancel, $MRRetry, and $MRDontSave identifying the button that the user pressed.
               @tsexample
                  messageBox( \"Error\", \"\" );    @endtsexample
               @ingroup Platform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mFloatLength(System.Single,System.UInt32)">
            <summary>
            Formats the specified number to the given number of decimal places.
                @param v Number to format.
                @param precision Number of decimal places to format to (1-9).
                @returns Number formatted to the specified number of decimal places.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mFloor(System.Single)">
            <summary>
            Round v down to the nearest integer.
                @param v Number to convert to integer.
                @returns Number converted to integer.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mFMod(System.Single,System.Single)">
            <summary>
            Calculate the remainder of v/d.
                @param v Input Value.
                @param d Divisor Value.
                @returns The remainder of v/d.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mIsPow2(System.Int32)">
            <summary>
            Returns whether the value is an exact power of two.
                @param v Input value.
                @returns Whether the specified value is an exact power of two.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mLerp(System.Single,System.Single,System.Single)">
            <summary>
            Calculate linearly interpolated value between two specified numbers using specified normalized time.
                @param v1 Interpolate From Input value.
                @param v2 Interpolate To Input value.
                @param time Normalized time used to interpolate values (0-1).
                @returns The interpolated value between the two specified values at normalized time t.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mLog(System.Single)">
            <summary>
            Calculate the natural logarithm of v.
                @param v Input Value.
                @returns The natural logarithm of the input value.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mPi">
            <summary>
            Return the value of PI (half-circle in radians).
                @returns The value of PI.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mPow(System.Single,System.Single)">
            <summary>
            Calculate b raised to the p-th power.
                @param v Input Value.
                @param p Power to raise value by.
                @returns v raised to the p-th power.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mRadToDeg(System.Single)">
            <summary>
            Convert specified radians into degrees.
                @param radians Input Value (in radians).
                @returns The specified radians value converted to degrees.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mRound(System.Single,System.Int32)">
            <summary>
            Round v to the nth decimal place or the nearest whole number by default.  
                @param v Value to roundn  
                @param n Number of decimal places to round to, 0 by defaultn  
                @return The rounded value as a S32.  
                @ingroup Math )  
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mSaturate(System.Single)">
            <summary>
            Clamp the specified value between 0 and 1 (inclusive).
                @param v Input value.
                @returns The specified value clamped between 0 and 1 (inclusive).
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mSin(System.Single)">
            <summary>
            Calculate the sine of v.
                @param v Input Value (in radians).
                @returns The sine of the input value.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mSolveCubic(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Solve a cubic equation (3rd degree polynomial) of form a*x^3 + b*x^2 + c*x + d = 0.
                @param a First Coefficient.
                @param b Second Coefficient.
                @param c Third Coefficient.
                @param d Fourth Coefficient.
                @returns A 4-tuple, containing: (sol x0 x1 x2). (sol) is the number of solutions
                (being 0, 1, 2 or 3), and (x0), (x1) and (x2) are the solutions, if any.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mSolveQuadratic(System.Single,System.Single,System.Single)">
            <summary>
            Solve a quadratic equation (2nd degree polynomial) of form a*x^2 + b*x + c = 0.
                @param a First Coefficient.
                @param b Second Coefficient.
                @param c Third Coefficient.
                @returns A triple, containing: (sol x0 x1). (sol) is the number of solutions
                (being 0, 1, or 2), and (x0) and (x1) are the solutions, if any.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mSolveQuartic(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Solve a quartic equation (4th degree polynomial) of form a*x^4 + b*x^3 + c*x^2 + d*x + e = 0.
                @param a First Coefficient.
                @param b Second Coefficient.
                @param c Third Coefficient.
                @param d Fourth Coefficient.
                @param e Fifth Coefficient.
                @returns A 5-tuple, containing: (sol x0 x1 x2 c3). (sol) is the number of solutions
                (being 0, 1, 2, 3 or 4), and (x0), (x1), (x2) and (x3) are the solutions, if any.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mSqrt(System.Single)">
            <summary>
            Calculate the square-root of v.
                @param v Input Value.
                @returns The square-root of the input value.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.mTan(System.Single)">
            <summary>
            Calculate the tangent of v.
                @param v Input Value (in radians).
                @returns The tangent of the input value.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.nameToID(System.String)">
            <summary>
            nameToID(object))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.nextToken(System.String,System.String,System.String)">
            <summary>
            ( string str, string token, string delimiters ) 
               Tokenize a string using a set of delimiting characters.
               This function first skips all leading charaters in @a str that are contained in @a delimiters. 
               From that position, it then scans for the next character in @a str that is contained in @a delimiters and stores all characters 
               from the starting position up to the first delimiter in a variable in the current scope called @a token.  Finally, it 
               skips all characters in @a delimiters after the token and then returns the remaining string contents in @a str.
               To scan out all tokens in a string, call this function repeatedly by passing the result it returns each time as the new @a str 
               until the function returns \"\".
               @param str A string.
               @param token The name of the variable in which to store the current token.  This variable is set in the 
                  scope in which nextToken is called.
               @param delimiters A string of characters.  Each character is considered a delimiter.
               @return The remainder of @a str after the token has been parsed out or \"\" if no more tokens were found in @a str.
               @tsexample
                  // Prints:
                  // a
                  // b
                  // c
                  %str = \"a   b c\";
                  while ( %str !$= \"\" )
                  {
                     // First time, stores \"a\" in the variable %token and sets %str to \"b c\".
                     %str = nextToken( %str, \"token\", \" \" );
                     echo( %token );
                  }
               @endtsexample
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.openFile(System.String)">
            <summary>
            @brief Open the given @a file through the system.  This will usually open the file in its 
               associated application.
               @param file %Path of the file to open.
               @note Only present in a Tools build of Torque.
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.openFolder(System.String)">
            <summary>
            @brief Open the given folder in the system's file manager.
               @param path full path to a directory.
               @note Only present in a Tools build of Torque.
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.pathConcat(System.String,System.String)">
            <summary>
            @brief Combines two separate strings containing a file path and file name together into a single string
            
            	@param path String containing file path
            	@param file String containing file name
            	@return String containing concatenated file name and path
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.pathCopy(System.String,System.String,System.Boolean)">
            <summary>
            @brief Copy a file to a new location.
               @param fromFile %Path of the file to copy.
               @param toFile %Path where to copy @a fromFile to.
               @param noOverwrite If true, then @a fromFile will not overwrite a file that may already exist at @a toFile.
               @return True if the file was successfully copied, false otherwise.
               @note Only present in a Tools build of Torque.
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.pathOnMissionLoadDone">
            <summary>
            @brief Load all Path information from the mission.
            
               This function is usually called from the loadMissionStage2() server-side function 
               after the mission file has loaded.  Internally it places all Paths into the server's 
               PathManager.  From this point the Paths are ready for transmission to the clients.
            
               @tsexample
                  // Inform the engine to load all Path information from the mission.
                  pathOnMissionLoadDone();
               @endtsexample
            
               @see NetConnection::transmitPaths()
               @see NetConnection::clearPaths()
               @see Path
            
               @ingroup Networking)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.physicsDebugDraw(System.Boolean)">
            <summary>
            physicsDebugDraw( bool enable ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.physicsDestroy">
            <summary>
            physicsDestroy())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.physicsDestroyWorld(System.String)">
            <summary>
            physicsDestroyWorld( String worldName ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.physicsGetTimeScale">
            <summary>
            physicsGetTimeScale())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.physicsInit(System.String)">
            <summary>
            ), physicsInit( [string library] ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.physicsInitWorld(System.String)">
            <summary>
            physicsInitWorld( String worldName ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.physicsPluginPresent">
            <summary>
            physicsPluginPresent()
               @brief Returns true if a physics plugin exists and is initialized.
               @ingroup Physics )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.physicsRestoreState">
            <summary>
            physicsRestoreState())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.physicsSetTimeScale(System.Single)">
            <summary>
            physicsSetTimeScale( F32 scale ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.physicsSimulationEnabled">
            <summary>
            physicsStopSimulation( String worldName ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.physicsStartSimulation(System.String)">
            <summary>
            physicsStartSimulation( String worldName ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.physicsStopSimulation(System.String)">
            <summary>
            physicsStopSimulation( String worldName ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.physicsStoreState">
            <summary>
            physicsStoreState())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.playJournal(System.String)">
            <summary>
            (string filename) 
                            @brief Begin playback of a journal from a specified field.
            				@param filename Name and path of file journal file
            				@ingroup Platform)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.playJournalToVideo(System.String,System.String,System.String,System.Single,WinterLeaf.Engine.Containers.Point2I)">
            <summary>
            THEORA, 30.0f, Point2I::Zero ),
               Load a journal file and capture it video.
               @ingroup Rendering )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.popInstantGroup">
            <summary>
            () 
            				@brief Pop and restore the last setting of $instantGroup off the stack.
            				@note Currently only used for editors
            				@ingroup Editors
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.populateAllFontCacheRange(System.UInt32,System.UInt32)">
            <summary>
            Populate the font cache for all fonts with Unicode code points in the specified range.
               @param rangeStart The start Unicode point.
               @param rangeEnd The end Unicode point.
               @note We only support BMP-0, so code points range from 0 to 65535.
               @ingroup Font )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.populateAllFontCacheString(System.String)">
            <summary>
            Populate the font cache for all fonts with characters from the specified string.
               @ingroup Font )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.populateFontCacheRange(System.String,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Populate the font cache for the specified font with Unicode code points in the specified range.
               @param faceName The name of the font face.
               @param fontSize The size of the font in pixels.
               @param rangeStart The start Unicode point.
               @param rangeEnd The end Unicode point.
               @note We only support BMP-0, so code points range from 0 to 65535.
               @ingroup Font )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.populateFontCacheString(System.String,System.Int32,System.String)">
            <summary>
            Populate the font cache for the specified font with characters from the specified string.
                @param faceName The name of the font face.
                @param fontSize The size of the font in pixels.
                @param string The string to populate.
                @ingroup Font )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.preloadClientDataBlocks">
            <summary>
            Preload all datablocks in client mode.
               (Server parameter is set to false).  This will take some time to complete.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.profilerDump">
            <summary>
            @brief Dumps current profiling stats to the console window.
            				@note Markers disabled with profilerMarkerEnable() will be skipped over. 
            				If the profiler is currently running, it will be disabled.
            				@ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.profilerDumpToFile(System.String)">
            <summary>
            @brief Dumps current profiling stats to a file.
            				@note If the profiler is currently running, it will be disabled.
            				@param fileName Name and path of file to save profiling stats to. Must use forward slashes (/). 
            				Will attempt to create the file if it does not already exist.
            				@tsexample
            				profilerDumpToFile( \"C:/Torque/log1.txt\" );
            				@endtsexample
            				@ingroup Debugging )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.profilerEnable(System.Boolean)">
            <summary>
            @brief Enables or disables the profiler.
            				Data is only gathered while the profiler is enabled.
            				@note Profiler is not available in shipping builds.
            				T3D has predefined profiling areas surrounded by markers, 
            				but you may need to define additional markers (in C++) around areas you wish to profile,
            				 by using the PROFILE_START( markerName ); and PROFILE_END(); macros.
            				@ingroup Debugging )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.profilerMarkerEnable(System.String,System.Boolean)">
            <summary>
            @brief Enable or disable a specific profile.
               @param enable     Optional paramater to enable or disable the profile.
               @param markerName Name of a specific marker to enable or disable.
               @note Calling this function will first call profilerReset(), clearing all data from profiler. 
               All profile markers are enabled by default.
               @ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.profilerReset">
            <summary>
            @brief Resets the profiler, clearing it of all its data.
            				If the profiler is currently running, it will first be disabled. 
            				All markers will retain their current enabled/disabled status.
            				@ingroup Debugging )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.pushInstantGroup(System.String)">
            <summary>
            ) , ([group]) 
            				@brief Pushes the current $instantGroup on a stack 
            				and sets it to the given value (or clears it).
            				@note Currently only used for editors
            				@ingroup Editors
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.queryAllServers(System.UInt32,System.UInt32,System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            queryAllServers(...); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.queryLanServers(System.UInt32,System.UInt32,System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            queryLanServers(...); )
            
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.queryMasterServer(System.UInt32,System.UInt32,System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            queryMasterServer(...); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.querySingleServer(System.String,System.Byte)">
            <summary>
            querySingleServer(...); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.quit">
            <summary>
            Shut down the engine and exit its process.
               This function cleanly uninitializes the engine and then exits back to the system with a process 
               exit status indicating a clean exit.
               @see quitWithErrorMessage
               @ingroup Platform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.quitWithErrorMessage(System.String)">
            <summary>
            Display an error message box showing the given @a message and then shut down the engine and exit its process.
               This function cleanly uninitialized the engine and then exits back to the system with a process 
               exit status indicating an error.
               @param message The message to log to the console and show in an error message box.
               @see quit
               @ingroup Platform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.redbookClose">
            <summary>
            Close the current Redbook device.
            				@brief Deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.redbookGetDeviceCount">
            <summary>
            get the number of redbook devices.
            				@brief Deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.redbookGetDeviceName(System.Int32)">
            <summary>
            (int index) Get name of specified Redbook device.
            				@brief Deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.redbookGetLastError">
            <summary>
            Get a string explaining the last redbook error.
            				@brief Deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.redbookGetTrackCount">
            <summary>
            Return the number of tracks.
            				@brief Deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.redbookGetVolume">
            <summary>
            Get the volume.
            				@brief Deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.redbookOpen(System.String)">
            <summary>
            ), (string device=NULL)
            				@brief Deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.redbookPlay(System.Int32)">
            <summary>
            (int track) Play the selected track.
            				@brief Deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.redbookSetVolume(System.Single)">
            <summary>
            (float volume) Set playback volume.
            				@brief Deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.redbookStop">
            <summary>
            Stop playing.
            				@brief Deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.registerMessageListener(System.String,System.String)">
            <summary>
            (string queueName, string listener)
            				@brief Registers an event message
            				@param queueName String containing the name of queue to attach listener to
            				@param listener Name of event messenger
            				@ingroup Messaging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.registerMessageQueue(System.String)">
            <summary>
            (string queueName)
            				@brief Registeres a dispatcher queue
            				@param queueName String containing the name of queue
            				@ingroup Messaging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.reInitMaterials">
            <summary>
            @brief Flushes all procedural shaders and re-initializes all active material instances. 
               @ingroup Materials)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.reloadResource(System.String)">
            <summary>
            Force the resource at specified input path to be reloaded
               @param path Path to the resource to be reloaded
               @tsexample
               reloadResource( \"art/shapes/box.dts\" );
               @endtsexample
               @note Currently used by editors only
               @ingroup Editors
               @internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.reloadTextures">
            <summary>
            Reload all the textures from disk.
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.removeField(System.String,System.Int32)">
            <summary>
            Remove the field in @a text at the given @a index.
               Fields in @a text must be separated by newlines and/or tabs.
               @param text A list of fields separated by newlines and/or tabs.
               @param index The zero-based index of the field in @a text.
               @return A new string with the field at the given index removed or the original string if @a index is 
                  out of range.
               @tsexample
                  removeField( \"a b\" TAB \"c d\" TAB \"e f\", 1 ) // Returns \"a b\" TAB \"e f\"
               @endtsexample
               @see removeWord
               @see removeRecord
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.removeGlobalShaderMacro(System.String)">
            <summary>
            Removes an existing global macro by name.
               @see addGlobalShaderMacro
               @ingroup Rendering )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.removeRecord(System.String,System.Int32)">
            <summary>
            Remove the record in @a text at the given @a index.
               Records in @a text must be separated by newlines.
               @param text A list of records separated by newlines.
               @param index The zero-based index of the record in @a text.
               @return A new string with the record at the given @a index removed or the original string if @a index is 
                  out of range.
               @tsexample
                  removeRecord( \"a b\" NL \"c d\" NL \"e f\", 1 ) // Returns \"a b\" NL \"e f\"
               @endtsexample
               @see removeWord
               @see removeField
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.removeTaggedString(System.Int32)">
            <summary>
            @brief Remove a tagged string from the Net String Table
            
               @param tag The tag associated with the string
            
               @see \\ref syntaxDataTypes under Tagged %Strings
               @see addTaggedString()
               @see getTaggedString()
               @ingroup Networking)
            	
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.removeWord(System.String,System.Int32)">
            <summary>
            Remove the word in @a text at the given @a index.
               Words in @a text must be separated by newlines, spaces, and/or tabs.
               @param text A whitespace-separated list of words.
               @param index The zero-based index of the word in @a text.
               @return A new string with the word at the given index removed or the original string if @a index is 
                  out of range.
               @tsexample
                  removeWord( \"a b c d\", 2 ) // Returns \"a b d\"
               @endtsexample
               @see removeField
               @see removeRecord
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.renameFile(System.String,System.String)">
            <summary>
            @brief Renames the given @a file.
               @param from %Path of the file to rename from.
               @param frome %Path of the file to rename to.
               @note Only present in a Tools build of Torque.
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.resetFPSTracker">
            <summary>
            ()
               @brief Reset FPS stats (fps::)
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.resetLightManager">
            <summary>
            @brief Deactivates and then activates the currently active light manager.
               This causes most shaders to be regenerated and is often used when global 
               rendering changes have occured.
               @ingroup Lighting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.resetXInput">
            <summary>
            ()
                        @brief Rebuilds the XInput section of the InputManager
                        Requests a full refresh of events for all controllers. Useful when called at the beginning 
                        of game code after actionMaps are set up to hook up all appropriate events.
                        @ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.restWords(System.String)">
            <summary>
            Return all but the first word in @a text.
               @param text A list of words separated by newlines, spaces, and/or tabs.
               @return @a text with the first word removed.
               @note This is equal to 
               @tsexample_nopar
                  getWords( text, 1 )
               @endtsexample
               @see getWords
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.rtrim(System.String)">
            <summary>
            Remove trailing whitespace from the string.
               @param str A string.
               @return A string that is the same as @a str but with any trailing (i.e. rightmost) whitespace removed.
               @tsexample
               rtrim( \"   string  \" ); // Returns \"   string\".
               @endtsexample
               @see ltrim
               @see trim
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.rumble(System.String,System.Single,System.Single)">
            <summary>
            (string device, float xRumble, float yRumble)
                  @brief Activates the vibration motors in the specified controller.
                  The controller will constantly at it's xRumble and yRumble intensities until 
                  changed or told to stop.
                  Valid inputs for xRumble/yRumble are [0 - 1].
                  @param device Name of the device to rumble.
                  @param xRumble Intensity to apply to the left motor.
                  @param yRumble Intensity to apply to the right motor.
                  @note in an Xbox 360 controller, the left motor is low-frequency, 
                  while the right motor is high-frequency.
                  @ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.saveJournal(System.String)">
            <summary>
            (string filename) 
                            Save the journal to the specified file.
            				@ingroup Platform)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.saveObject(System.String,System.String)">
            <summary>
            @brief Serialize the object to a file.
            				@param object The object to serialize.
            				@param filename The file name and path.
            				@ingroup Console)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.sceneDumpZoneStates(System.Boolean)">
            <summary>
            Dump the current zoning states of all zone spaces in the scene to the console.
               @param updateFirst If true, zoning states are brought up to date first; if false, the zoning states 
               are dumped as is.
               @note Only valid on the client.
               @ingroup Game )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.sceneGetZoneOwner(System.UInt32)">
            <summary>
            Return the SceneObject that contains the given zone.
               @param zoneId ID of zone.
               @return A SceneObject or NULL if the given @a zoneId is invalid.
               @note Only valid on the client.
               @ingroup Game )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.screenShot(System.String,System.String,System.UInt32,System.Single)">
            <summary>
            Takes a screenshot with optional tiling to produce huge screenshots.
               @param file The output image file path.
               @param format Either JPEG or PNG.
               @param tileCount If greater than 1 will tile the current screen size to take a large format screenshot.
               @param tileOverlap The amount of horizontal and vertical overlap between the tiles used to remove tile edge artifacts from post effects.
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.selectFile(System.String)">
            <summary>
            @brief Open the given folder in the system's file manager.
               @param path full path to a directory.
               @note Only present in a Tools build of Torque.
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.setClipboard(System.String)">
            <summary>
            (string text)
                           @brief Set the system clipboard.
            			   @internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.setCoreLangTable(System.String)">
            <summary>
            (string LangTable)
            				@brief Sets the primary LangTable used by the game
            				@param LangTable ID of the core LangTable
            				@ingroup Localization)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.setCurrentDirectory(System.String)">
            <summary>
            @brief Set the current working directory.
               @param path The absolute or relative (to the current working directory) path of the directory which should be made the new 
                  working directory.
               @return True if the working directory was successfully changed to @a path, false otherwise.
               @note Only present in a Tools build of Torque.
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.setDefaultFov(System.Single)">
            <summary>
            @brief Set the default FOV for a camera.
                        @param defaultFOV The default field of view in degrees
            				@ingroup CameraSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.setFarClippingDistance(System.Single)">
            <summary>
            Sets the clients far clipping.
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.setField(System.String,System.Int32,System.String)">
            <summary>
            Replace the field in @a text at the given @a index with @a replacement.
               Fields in @a text must be separated by newlines and/or tabs.
               @param text A list of fields separated by newlines and/or tabs.
               @param index The zero-based index of the field to replace.
               @param replacement The string with which to replace the field.
               @return A new string with the field at the given @a index replaced by @a replacement or the original 
                  string if @a index is out of range.
               @tsexample
                  setField( \"a b\" TAB \"c d\" TAB \"e f\", 1, \"g h\" ) // Returns \"a b\" TAB \"g h\" TAB \"e f\"
               @endtsexample
               @see getField
               @see setWord
               @see setRecord
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.SetFogVolumeQuality(System.UInt32)">
            <summary>
            @brief Resizes the rendertargets of the Volumetric Fog object.
            	If there are fogobjects in the scene then the function is postponed until
            	all fogobjects are deleted.
            	@params new_quality new quality for the rendertargets 1 = full size, 2 = halfsize, 3 = 1/3, 4 = 1/4 ...)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.setFov(System.Single)">
            <summary>
            @brief Set the FOV of the camera.
                        @param FOV The camera's new FOV in degrees
            				@ingroup CameraSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.setFrustumOffset(WinterLeaf.Engine.Containers.Point4F)">
            <summary>
            @brief .)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.setLightManager(System.String)">
            <summary>
            Finds and activates the named light manager.
               @return Returns true if the light manager is found and activated.
               @ingroup Lighting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.setLogMode(System.Int32)">
            <summary>
            @brief Determines how log files are written.
            	Sets the operational mode of the console logging system.
               @param mode Parameter specifying the logging mode.  This can be:
                  - 1: Open and close the console log file for each seperate string of output.  This will ensure that all 
                     parts get written out to disk and that no parts remain in intermediate buffers even if the process crashes.
                  - 2: Keep the log file open and write to it continuously.  This will make the system operate faster but 
                     if the process crashes, parts of the output may not have been written to disk yet and will be missing from 
                     the log.
                     
                  Additionally, when changing the log mode and thus opening a new log file, either of the two mode values may be 
                  combined by binary OR with 0x4 to cause the logging system to flush all console log messages that had already been 
                  issued to the console system into the newly created log file.
            
            	@note Xbox 360 does not support logging to a file. Use Platform::OutputDebugStr in C++ instead.
            	@ingroup Logging )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.setNetPort(System.Int32,System.Boolean)">
            <summary>
            (int port, bool bind=true) 
               @brief Set the network port for the game to use.
            
               @param port The port to use.
               @param bind True if bind() should be called on the port.
            
               @returns True if the port was successfully opened.
            
               This will trigger a windows firewall prompt.  
               If you don't have firewall tunneling tech you can set this to false to avoid the prompt.
               @ingroup Networking)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.setPixelShaderVersion(System.Single)">
            <summary>
            @brief Sets the pixel shader version for the active device.
               This can be used to force a lower pixel shader version than is supported by 
               the device for testing or performance optimization.
               @param version The floating point shader version number.
               @note This will only affect shaders/materials created after the call 
               and should be used before the game begins.
               @see $pref::Video::forcedPixVersion
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.setRandomSeed(System.Int32)">
            <summary>
            Set the current seed for the random number generator.
               Based on this seed, a repeatable sequence of numbers will be produced by getRandom().
               @param seed The seed with which to initialize the randon number generator with.  The same seed will always leed to
                  the same sequence of pseudo-random numbers.
                  If -1, the current timestamp will be used as the seed which is a good basis for randomization.
               @ingroup Random )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.setRecord(System.String,System.Int32,System.String)">
            <summary>
            Replace the record in @a text at the given @a index with @a replacement.
               Records in @a text must be separated by newlines.
               @param text A list of records separated by newlines.
               @param index The zero-based index of the record to replace.
               @param replacement The string with which to replace the record.
               @return A new string with the record at the given @a index replaced by @a replacement or the original 
                  string if @a index is out of range.
               @tsexample
                  setRecord( \"a b\" NL \"c d\" NL \"e f\", 1, \"g h\" ) // Returns \"a b\" NL \"g h\" NL \"e f\"
               @endtsexample
               @see getRecord
               @see setWord
               @see setField
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.setReflectFormat(WinterLeaf.Engine.Enums.TypeGFXFormat)">
            <summary>
            Set the reflection texture format.
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.setServerInfo(System.UInt32)">
            <summary>
            setServerInfo(...); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.setShadowManager(System.String)">
            <summary>
            ), string sShadowSystemName)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.setShadowVizLight(System.String)">
            <summary>
            ), )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.setVariable(System.String,System.String)">
            <summary>
            (string varName, string value) 
               @brief Sets the value of the named variable.
               @param varName Name of the variable to locate
               @param value New value of the variable
               @return True if variable was successfully found and set
               @ingroup Scripting)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.setWord(System.String,System.Int32,System.String)">
            <summary>
            Replace the word in @a text at the given @a index with @a replacement.
               Words in @a text must be separated by newlines, spaces, and/or tabs.
               @param text A whitespace-separated list of words.
               @param index The zero-based index of the word to replace.
               @param replacement The string with which to replace the word.
               @return A new string with the word at the given @a index replaced by @a replacement or the original 
                  string if @a index is out of range.
               @tsexample
                  setWord( \"a b c d\", 2, \"f\" ) // Returns \"a b f d\"
               @endtsexample
               @see getWord
               @see setField
               @see setRecord
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.setZoomSpeed(System.Int32)">
            <summary>
            @brief Set the zoom speed of the camera.
                        This affects how quickly the camera changes from one field of view 
                        to another.
                        @param speed The camera's zoom speed in ms per 90deg FOV change
            				@ingroup CameraSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.sfxCreateDevice(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Try to create a new sound device using the given properties.
               If a sound device is currently initialized, it will be uninitialized first.  However, be aware that in this case, 
               if this function fails, it will not restore the previously active device but rather leave the sound system in an 
               uninitialized state.
               Sounds that are already playing while the new device is created will be temporarily transitioned to virtualized 
               playback and then resume normal playback once the device has been created.
               In the core scripts, sound is automatically set up during startup in the sfxStartup() function.
               @param provider The name of the device provider as returned by sfxGetAvailableDevices().
               @param device The name of the device as returned by sfxGetAvailableDevices().
               @param useHardware Whether to enabled hardware mixing on the device or not.  Only relevant if supported by the given device.
               @param maxBuffers The maximum number of concurrent voices for this device to use or -1 for the device to pick its own reasonable default.
               @return True if the initialization was successful, false if not.
               @note This function must be called before any of the sound playback functions can be used.
               @see sfxGetAvailableDevices
               @see sfxGetDeviceInfo
               @see sfxDeleteDevice
               @ref SFX_devices
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.sfxCreateSource(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            , , , ),
                                 ( SFXTrack track | ( SFXDescription description, string filename ) [, float x, float y, float z ] ) 
                                 Creates a new paused sound source using a profile or a description 
                                 and filename.  The return value is the source which must be 
                                 released by delete().
                                 @hide )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.sfxDeleteDevice">
            <summary>
            Delete the currently active sound device and release all its resources.
               SFXSources that are still playing will be transitioned to virtualized playback mode. 
               When creating a new device, they will automatically transition back to normal playback.
               In the core scripts, this is done automatically for you during shutdown in the sfxShutdown() function.
               @see sfxCreateDevice
               @ref SFX_devices
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.sfxDeleteWhenStopped(System.String)">
            <summary>
            Mark the given @a source for deletion as soon as it moves into stopped state.
               This function will retroactively turn the given @a source into a play-once source (see @ref SFXSource_playonce).
               @param source A sound source.
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.sfxDumpSources(System.Boolean)">
            <summary>
            Dump information about all current SFXSource instances to the console.
               The dump includes information about the playback status for each source, volume levels, virtualization, etc.
               @param includeGroups If true, direct instances of SFXSources (which represent logical sound groups) will be included. 
                  Otherwise only instances of subclasses of SFXSources are included in the dump.
               @see SFXSource
               @see sfxDumpSourcesToString
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.sfxDumpSourcesToString(System.Boolean)">
            <summary>
            Dump information about all current SFXSource instances to a string.
               The dump includes information about the playback status for each source, volume levels, virtualization, etc.
               @param includeGroups If true, direct instances of SFXSources (which represent logical sound groups) will be included. 
                  Otherwise only instances of subclasses of SFXSources are included in the dump.
               @return A string containing a dump of information about all currently instantiated SFXSources.
               @see SFXSource
               @see sfxDumpSources
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.sfxGetActiveStates">
            <summary>
            Return a newline-separated list of all active states.
               @return A list of the form
               @verbatim
                  stateName1 NL stateName2 NL stateName3 ...
               @endverbatim
               where each element is the name of an active state object.
               @tsexample
                  // Disable all active states.
                  foreach$( %state in sfxGetActiveStates() )
                     %state.disable();
               @endtsexample
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.sfxGetAvailableDevices">
            <summary>
            Get a list of all available sound devices.
               The return value will be a newline-separated list of entries where each line describes one available sound 
               device.  Each such line will have the following format:
               @verbatim
                  provider TAB device TAB hasHardware TAB numMaxBuffers
               @endverbatim
               - provider: The name of the device provider (e.g. \"FMOD\").
               - device: The name of the device as returned by the device layer.
               - hasHardware: Whether the device supports hardware mixing or not.
               - numMaxBuffers: The maximum number of concurrent voices supported by the device's mixer.  If this limit 
                  limit is exceeded, i.e. if there are more active sounds playing at any one time, then voice virtualization 
                  will start culling voices and put them into virtualized playback mode.  Voice virtualization may or may not 
                  be provided by the device itself; if not provided by the device, it will be provided by Torque's sound system.
               @return A newline-separated list of information about all available sound devices.
               @see sfxCreateDevice
               @see sfxGetDeviceInfo
               @see $SFX::DEVICE_INFO_PROVIDER
               @see $SFX::DEVICE_INFO_NAME
               @see $SFX::DEVICE_INFO_USEHARDWARE
               @see $SFX::DEVICE_INFO_MAXBUFFERS
               @ref SFX_devices
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.sfxGetDeviceInfo">
            <summary>
            Return information about the currently active sound device.
               The return value is a tab-delimited string of the following format:
               @verbatim
                  provider TAB device TAB hasHardware TAB numMaxBuffers TAB caps
               @endverbatim
               - provider: The name of the device provider (e.g. \"FMOD\").
               - device: The name of the device as returned by the device layer.
               - hasHardware: Whether the device supports hardware mixing or not.
               - numMaxBuffers: The maximum number of concurrent voices supported by the device's mixer.  If this limit 
                  limit is exceeded, i.e. if there are more active sounds playing at any one time, then voice virtualization 
                  will start culling voices and put them into virtualized playback mode.  Voice virtualization may or may not 
                  be provided by the device itself; if not provided by the device, it will be provided by Torque's sound system.
               - caps: A bitfield of capability flags.
               @return A tab-separated list of properties of the currently active sound device or the empty string if no sound device has been initialized.
               @see sfxCreateDevice
               @see sfxGetAvailableDevices
               @see $SFX::DEVICE_INFO_PROVIDER
               @see $SFX::DEVICE_INFO_NAME
               @see $SFX::DEVICE_INFO_USEHARDWARE
               @see $SFX::DEVICE_INFO_MAXBUFFERS
               @see $SFX::DEVICE_INFO_CAPS
               @see $SFX::DEVICE_CAPS_REVERB
               @see $SFX::DEVICE_CAPS_VOICEMANAGEMENT
               @see $SFX::DEVICE_CAPS_OCCLUSION
               @see $SFX::DEVICE_CAPS_DSPEFFECTS
               @see $SFX::DEVICE_CAPS_MULTILISTENER
               @see $SFX::DEVICE_CAPS_FMODDESIGNER
               @ref SFX_devices
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.sfxGetDistanceModel">
            <summary>
            Get the falloff curve type currently being applied to 3D sounds.
               @return The current distance model type.
               @ref SFXSource_volume
               @ref SFX_3d
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.sfxGetDopplerFactor">
            <summary>
            Get the current global doppler effect setting.
               @return The current global doppler effect scale factor (>=0).
               @see sfxSetDopplerFactor
               @ref SFXSource_doppler
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.sfxGetRolloffFactor">
            <summary>
            Get the current global scale factor applied to volume attenuation of 3D sounds in the logarithmic model.
               @return The current scale factor for logarithmic 3D sound falloff curves.
               @see sfxGetDistanceModel
               @see SFXDistanceModel
               @ref SFXSource_volume
               @ref SFX_3d
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.sfxPlay(System.String,System.String,System.String,System.String)">
            <summary>
            , , ),
               Start playing the given source or create a new source for the given track and play it.
               @hide )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.sfxPlayOnce(System.String,System.String,System.String,System.String,System.String,System.Single)">
            <summary>
            , , , -1.0f),
               SFXSource sfxPlayOnce( ( SFXTrack track | SFXDescription description, string filename ) [, float x, float y, float z, float fadeInTime=-1 ] ) 
               Create a new play-once source for the given profile or description+filename and start playback of the source.
               @hide )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.sfxSetDistanceModel(WinterLeaf.Engine.Enums.TypeSFXDistanceModel)">
            <summary>
            Set the falloff curve type to use for distance-based volume attenuation of 3D sounds.
               @param model The distance model to use for 3D sound.
               @note This setting takes effect globally and is applied to all 3D sounds.
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.sfxSetDopplerFactor(System.Single)">
            <summary>
            Set the global doppler effect scale factor.
               @param value The new doppler shift scale factor.
               @pre @a value must be >= 0.
               @see sfxGetDopplerFactor
               @ref SFXSource_doppler
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.sfxSetRolloffFactor(System.Single)">
            <summary>
            Set the global scale factor to apply to volume attenuation of 3D sounds in the logarithmic model.
               @param value The new scale factor for logarithmic 3D sound falloff curves.
               @pre @a value must be > 0.
               @note This function has no effect if the currently distance model is set to SFXDistanceModel::Linear.
               @see sfxGetDistanceModel
               @see SFXDistanceModel
               @ref SFXSource_volume
               @ref SFX_3d
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.sfxStop(System.String)">
            <summary>
            Stop playback of the given @a source.
               This is equivalent to calling SFXSource::stop().
               @param source The source to put into stopped state.
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.sfxStopAndDelete(System.String)">
            <summary>
            Stop playback of the given @a source (if it is not already stopped) and delete the @a source.
               The advantage of this function over directly calling delete() is that it will correctly 
               handle volume fades that may be configured on the source.  Whereas calling delete() would immediately 
               stop playback and delete the source, this functionality will wait for the fade-out to play and only then 
               stop the source and delete it.
               @param source A sound source.
               @ref SFXSource_fades
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.shellExecute(System.String,System.String,System.String)">
            <summary>
            , ), (string executable, string args, string directory)
            				@brief Launches an outside executable or batch file
            				@param executable Name of the executable or batch file
            				@param args Optional list of arguments, in string format, to pass to the executable
            				@param directory Optional string containing path to output or shell
            				@ingroup Platform)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.sizeofx(System.String)">
            <summary>
            @brief Determines the memory consumption of a class or object.
            				@param objectOrClass The object or class being measured.
            				@return Returns the total size of an object in bytes.
            				@ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.snapToggle">
            <summary>
            @brief Prevents mouse movement from being processed
            
            					 In the source, whenever a mouse move event occurs 
            					 GameTSCtrl::onMouseMove() is called. Whenever snapToggle() 
            					 is called, it will flag a variable that can prevent this 
            					 from happening: gSnapLine. This variable is not exposed to 
            					 script, so you need to call this function to trigger it.
            
            					 @tsexample
            					 // Snapping is off by default, so we will toggle
            					 // it on first:
            					 PlayGui.snapToggle();
            					 // Mouse movement should be disabled
            					 // Let's turn it back on
            					 PlayGui.snapToggle();
            					 @endtsexample
            
            					 @ingroup GuiGame)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.spawnObject(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ,,,,) ,spawnObject(class [, dataBlock, name, properties, script,modelName])
            				@hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.StartClientReplication">
            <summary>
            Activates the shape replicator.
            													@tsexample
            														// Call the function
            														StartClientReplication()
            													@endtsexample
            													@ingroup Foliage
            					)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.startFileChangeNotifications">
            <summary>
            @brief Start watching resources for file changes
               Typically this is called during initializeCore().
               @see stopFileChangeNotifications()
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.StartFoliageReplication">
            <summary>
            Activates the foliage replicator.
            													@tsexample
            														// Call the function
            														StartFoliageReplication();
            													@endtsexample
            													@ingroup Foliage)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.startHeartbeat">
            <summary>
            startHeartbeat(...); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.startPrecisionTimer">
            <summary>
            startPrecisionTimer() - Create and start a high resolution platform timer. Returns the timer id. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.startsWith(System.String,System.String,System.Boolean)">
            <summary>
            Test whether the given string begins with the given prefix.
               @param str The string to test.
               @param prefix The potential prefix of @a str.
               @param caseSensitive If true, the comparison will be case-sensitive; if false, differences in casing will 
                  not be taken into account.
               @return True if the first characters in @a str match the complete contents of @a prefix; false otherwise.
               @tsexample
               startsWith( \"TEST123\", \"test\" ) // Returns true.
               @endtsexample
               @see endsWith
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.startVideoCapture(System.String,System.String,System.String,System.Single,WinterLeaf.Engine.Containers.Point2I)">
            <summary>
            THEORA, 30.0f, Point2I::Zero ),
               Begins a video capture session.
               @see stopVideoCapture
               @ingroup Rendering )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.stopFileChangeNotifications">
            <summary>
            @brief Stop watching resources for file changes
               Typically this is called during shutdownCore().
               @see startFileChangeNotifications()
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.stopHeartbeat">
            <summary>
            stopHeartbeat(...); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.stopPrecisionTimer(System.Int32)">
            <summary>
            stopPrecisionTimer( S32 id ) - Stop and destroy timer with the passed id.  Returns the elapsed milliseconds. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.stopSampling">
            <summary>
            ()
            				@brief Stops the rendering sampler
            				@ingroup Rendering)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.stopServerQuery">
            <summary>
            stopServerQuery(...); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.stopVideoCapture">
            <summary>
            Stops the video capture session.
               @see startVideoCapture   
               @ingroup Rendering )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.strasc(System.String)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
               @param chr a (one-character) string.
               @return the UTF32 code value for the first character in the given string.
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.strchr(System.String,System.String)">
            <summary>
            Find the first occurrence of the given character in @a str.
               @param str The string to search.
               @param chr The character to search for.  Only the first character from the string is taken.
               @return The remainder of the input string starting with the given character or the empty string if the character could not be found.
               @see strrchr
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.strchrpos(System.String,System.String,System.Int32)">
            <summary>
            Find the first occurrence of the given character in the given string.
               @param str The string to search.
               @param chr The character to look for.  Only the first character of this string will be searched for.
               @param start The index into @a str at which to start searching for the given character.
               @return The index of the first occurrence of @a chr in @a str or -1 if @a str does not contain the given character.
               @tsexample
               strchrpos( \"test\", \"s\" ) // Returns 2.
               @endtsexample
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.strcmp(System.String,System.String)">
            <summary>
            Compares two strings using case-b>sensitive/b> comparison.
               @param str1 The first string.
               @param str2 The second string.
               @return 0 if both strings are equal, a value 0 if the first character different in str1 has a smaller character code 
                  value than the character at the same position in str2, and a value >1 otherwise.
               @tsexample
               if( strcmp( %var, \"foobar\" ) == 0 )
                  echo( \"%var is equal to 'foobar'\" );
               @endtsexample
               @see stricmp
               @see strnatcmp
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.strformat(System.String,System.String)">
            <summary>
            Format the given value as a string using printf-style formatting.
               @param format A printf-style format string.
               @param value The value argument matching the given format string.
               @tsexample
               // Convert the given integer value to a string in a hex notation.
               %hex = strformat( \"%x\", %value );
               @endtsexample
               @ingroup Strings
               @see http://en.wikipedia.org/wiki/Printf )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.stricmp(System.String,System.String)">
            <summary>
            Compares two strings using case-b>insensitive/b> comparison.
               @param str1 The first string.
               @param str2 The second string.
               @return 0 if both strings are equal, a value 0 if the first character different in str1 has a smaller character code 
                  value than the character at the same position in str2, and a value >0 otherwise.
               @tsexample
               if( stricmp( \"FOObar\", \"foobar\" ) == 0 )
                  echo( \"this is always true\" );
               @endtsexample
               @see strcmp
               @see strinatcmp
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.strinatcmp(System.String,System.String)">
            <summary>
            Compares two strings using \"natural order\" case-b>insensitive/b> comparison.
               Natural order means that rather than solely comparing single character code values, strings are ordered in a 
               natural way.  For example, the string \"hello10\" is considered greater than the string \"hello2\" even though 
               the first numeric character in \"hello10\" actually has a smaller character value than the corresponding character 
               in \"hello2\".  However, since 10 is greater than 2, strnatcmp will put \"hello10\" after \"hello2\".
               @param str1 The first string.
               @param str2 The second string.
               @return 0 if the strings are equal, a value >0 if @a str1 comes after @a str2 in a natural order, and a value 
                  0 if @a str1 comes before @a str2 in a natural order.
               @tsexample
               // Bubble sort 10 elements of %array using natural order
               do
               {
                  %swapped = false;
                  for( %i = 0; %i  10 - 1; %i ++ )
                     if( strnatcmp( %array[ %i ], %array[ %i + 1 ] ) > 0 )
                     {
                        %temp = %array[ %i ];
                        %array[ %i ] = %array[ %i + 1 ];
                        %array[ %i + 1 ] = %temp;
                        %swapped = true;
                     }
               }
               while( %swapped );
               @endtsexample
               @see stricmp
               @see strnatcmp
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.stripChars(System.String,System.String)">
            <summary>
            Remove all occurrences of characters contained in @a chars from @a str.
               @param str The string to filter characters out from.
               @param chars A string of characters to filter out from @a str.
               @return A version of @a str with all occurrences of characters contained in @a chars filtered out.
               @tsexample
               stripChars( \"teststring\", \"se\" ); // Returns \"tttring\".
               @endtsexample
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.StripMLControlChars(System.String)">
            <summary>
            @brief Strip TorqueML control characters from the specified string, returning a 'clean' version.
            					 @param inString String to strip TorqueML control characters from.
            					 @tsexample
            					 // Define the string to strip TorqueML control characters from
            					 %string = \"font:Arial:24>How Now color:c43c12>Brown color:000000>Cow\";
            					 // Request the stripped version of the string
            					 %strippedString = StripMLControlChars(%string);
            					 @endtsexample
            					 @return Version of the inputted string with all TorqueML characters removed.
            					 @see References
            					 @ingroup GuiCore)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.stripTrailingNumber(System.String)">
            <summary>
            Strip a numeric suffix from the given string.
               @param str The string from which to strip its numeric suffix.
               @return The string @a str without its number suffix or the original string @a str if it has no such suffix.
               @tsexample
               stripTrailingNumber( \"test123\" ) // Returns \"test\".
               @endtsexample
               @see getTrailingNumber
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.strIsMatchExpr(System.String,System.String,System.Boolean)">
            <summary>
            Match a pattern against a string.
               @param pattern The wildcard pattern to match against.  The pattern can include characters, '*' to match 
                  any number of characters and '?' to match a single character.
               @param str The string which should be matched against @a pattern.
               @param caseSensitive If true, characters in the pattern are matched in case-sensitive fashion against 
                  this string.  If false, differences in casing are ignored.
               @return True if @a str matches the given @a pattern.
               @tsexample
               strIsMatchExpr( \"f?o*R\", \"foobar\" ) // Returns true.
               @endtsexample
               @see strIsMatchMultipleExpr
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.strIsMatchMultipleExpr(System.String,System.String,System.Boolean)">
            <summary>
            Match a multiple patterns against a single string.
               @param patterns A tab-separated list of patterns.  Each pattern can include charaters, '*' to match 
                  any number of characters and '?' to match a single character.  Each of the patterns is tried in turn.
               @param str The string which should be matched against @a patterns.
               @param caseSensitive If true, characters in the pattern are matched in case-sensitive fashion against 
                  this string.  If false, differences in casing are ignored.
               @return True if @a str matches any of the given @a patterns.
               @tsexample
               strIsMatchMultipleExpr( \"*.cs *.gui *.mis\", \"mymission.mis\" ) // Returns true.
               @endtsexample
               @see strIsMatchExpr
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.strlen(System.String)">
            <summary>
            Get the length of the given string in bytes.
               @note This does b>not/b> return a true character count for strings with multi-byte characters!
               @param str A string.
               @return The length of the given string in bytes.
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.strlwr(System.String)">
            <summary>
            Return an all lower-case version of the given string.
               @param str A string.
               @return A version of @a str with all characters converted to lower-case.
               @tsexample
               strlwr( \"TesT1\" ) // Returns \"test1\"
               @endtsexample
               @see strupr
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.strnatcmp(System.String,System.String)">
            <summary>
            Compares two strings using \"natural order\" case-b>sensitive/b> comparison.
               Natural order means that rather than solely comparing single character code values, strings are ordered in a 
               natural way.  For example, the string \"hello10\" is considered greater than the string \"hello2\" even though 
               the first numeric character in \"hello10\" actually has a smaller character value than the corresponding character 
               in \"hello2\".  However, since 10 is greater than 2, strnatcmp will put \"hello10\" after \"hello2\".
               @param str1 The first string.
               @param str2 The second string.
               @return 0 if the strings are equal, a value >0 if @a str1 comes after @a str2 in a natural order, and a value 
                  0 if @a str1 comes before @a str2 in a natural order.
               @tsexample
               // Bubble sort 10 elements of %array using natural order
               do
               {
                  %swapped = false;
                  for( %i = 0; %i  10 - 1; %i ++ )
                     if( strnatcmp( %array[ %i ], %array[ %i + 1 ] ) > 0 )
                     {
                        %temp = %array[ %i ];
                        %array[ %i ] = %array[ %i + 1 ];
                        %array[ %i + 1 ] = %temp;
                        %swapped = true;
                     }
               }
               while( %swapped );
               @endtsexample
               @see strcmp
               @see strinatcmp
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.strpos(System.String,System.String,System.Int32)">
            <summary>
            Find the start of @a needle in @a haystack searching from left to right beginning at the given offset.
               @param haystack The string to search.
               @param needle The string to search for.
               @return The index at which the first occurrence of @a needle was found in @a haystack or -1 if no match was found.
               @tsexample
               strpos( \"b ab\", \"b\", 1 ) // Returns 3.
               @endtsexample
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.strrchr(System.String,System.String)">
            <summary>
            Find the last occurrence of the given character in @a str.
               @param str The string to search.
               @param chr The character to search for.  Only the first character from the string is taken.
               @return The remainder of the input string starting with the given character or the empty string if the character could not be found.
               @see strchr
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.strrchrpos(System.String,System.String,System.Int32)">
            <summary>
            Find the last occurrence of the given character in the given string.
               @param str The string to search.
               @param chr The character to look for.  Only the first character of this string will be searched for.
               @param start The index into @a str at which to start searching for the given character.
               @return The index of the last occurrence of @a chr in @a str or -1 if @a str does not contain the given character.
               @tsexample
               strrchrpos( \"test\", \"t\" ) // Returns 3.
               @endtsexample
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.strrepeat(System.String,System.Int32,System.String)">
            <summary>
             ),
               Return a string that repeats @a str @a numTimes number of times delimiting each occurrence with @a delimiter.
               @param str The string to repeat multiple times.
               @param numTimes The number of times to repeat @a str in the result string.
               @param delimiter The string to put between each repetition of @a str.
               @return A string containing @a str repeated @a numTimes times.
               @tsexample
               strrepeat( \"a\", 5, \"b\" ) // Returns \"ababababa\".
               @endtsexample
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.strreplace(System.String,System.String,System.String)">
            <summary>
            Replace all occurrences of @a from in @a source with @a to.
               @param source The string in which to replace the occurrences of @a from.
               @param from The string to replace in @a source.
               @param to The string with which to replace occurrences of @from.
               @return A string with all occurrences of @a from in @a source replaced by @a to.
               @tsexample
               strreplace( \"aabbccbb\", \"bb\", \"ee\" ) // Returns \"aaeeccee\".
               @endtsexample
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.strstr(System.String,System.String)">
            <summary>
            Find the start of @a substring in the given @a string searching from left to right.
               @param string The string to search.
               @param substring The string to search for.
               @return The index into @a string at which the first occurrence of @a substring was found or -1 if @a substring could not be found.
               @tsexample
               strstr( \"abcd\", \"c\" ) // Returns 2.
               @endtsexample
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.strToPlayerName(System.String)">
            <summary>
            strToPlayerName(string); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.strupr(System.String)">
            <summary>
            Return an all upper-case version of the given string.
               @param str A string.
               @return A version of @a str with all characters converted to upper-case.
               @tsexample
               strupr( \"TesT1\" ) // Returns \"TEST1\"
               @endtsexample
               @see strlwr
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.telnetSetParameters(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            @brief Initializes and open the telnet console.
                            @param port        Port to listen on for console connections (0 will shut down listening).
                            @param consolePass Password for read/write access to console.
                            @param listenPass  Password for read access to console.
                            @param remoteEcho  [optional] Enable echoing back to the client, off by default.
            				@ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.testJavaScriptBridge(System.String,System.String,System.String)">
            <summary>
            testBridge(arg1, arg2, arg3))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.trace(System.Boolean)">
            <summary>
            Enable or disable tracing in the script code VM.
               When enabled, the script code runtime will trace the invocation and returns 
               from all functions that are called and log them to the console. This is helpful in 
               observing the flow of the script program.
               @param enable New setting for script trace execution, on by default.
               @ingroup Debugging )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.trim(System.String)">
            <summary>
            Remove leading and trailing whitespace from the string.
               @param str A string.
               @return A string that is the same as @a str but with any leading (i.e. leftmost) and trailing (i.e. rightmost) whitespace removed.
               @tsexample
               trim( \"   string  \" ); // Returns \"string\".
               @endtsexample
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.tsUpdateImposterImages(System.Boolean)">
            <summary>
            tsUpdateImposterImages( bool forceupdate ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.unregisterMessageListener(System.String,System.String)">
            <summary>
            (string queueName, string listener)
            				@brief Unregisters an event message
            				@param queueName String containing the name of queue
            				@param listener Name of event messenger
            				@ingroup Messaging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.unregisterMessageQueue(System.String)">
            <summary>
            (string queueName)
            				@brief Unregisters a dispatcher queue
            				@param queueName String containing the name of queue
            				@ingroup Messaging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.VectorAdd(WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            Add two vectors.
               @param a The first vector.
               @param b The second vector.
               @return The vector @a a + @a b.
               @tsexample
                  //-----------------------------------------------------------------------------
                  //
                  // VectorAdd( %a, %b );
                  //
                  // The sum of vector a, (ax, ay, az), and vector b, (bx, by, bz) is:
                  //
                  //     a + b = ( ax + bx, ay + by, az + bz )
                  //
                  //-----------------------------------------------------------------------------
                  %a = \"1 0 0\";
                  %b = \"0 1 0\";
                  // %r = \"( 1 + 0, 0 + 1, 0 + 0 )\";
                  // %r = \"1 1 0\";
                  %r = VectorAdd( %a, %b );
               @endtsexample
               @ingroup Vectors)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.VectorCross(WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            Calculcate the cross product of two vectors.
               @param a The first vector.
               @param b The second vector.
               @return The cross product @a x @a b.
               @tsexample
            	//-----------------------------------------------------------------------------
            	//
            	// VectorCross( %a, %b );
            	//
            	// The cross product of vector a, (ax, ay, az), and vector b, (bx, by, bz), is
            	//
            	//     a x b = ( ( ay * bz ) - ( az * by ), ( az * bx ) - ( ax * bz ), ( ax * by ) - ( ay * bx ) )
            	//
            	//-----------------------------------------------------------------------------
            
            	%a = \"1 1 0\";
            	%b = \"2 0 1\";
            
            	// %r = \"( ( 1 * 1 ) - ( 0 * 0 ), ( 0 * 2 ) - ( 1 * 1 ), ( 1 * 0 ) - ( 1 * 2 ) )\";
            	// %r = \"1 -1 -2\";
            	%r = VectorCross( %a, %b );
               @endtsexample	
               @ingroup Vectors )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.VectorDist(WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            Compute the distance between two vectors.
               @param a The first vector.
               @param b The second vector.
               @return The length( @a b - @a a ).
               @tsexample
            	//-----------------------------------------------------------------------------
            	//
            	// VectorDist( %a, %b );
            	//
            	// The distance between vector a, (ax, ay, az), and vector b, (bx, by, bz), is
            	//
            	//     a -> b = ||( b - a )||
            	//            = ||( bx - ax, by - ay, bz - az )||
            	//            = mSqrt( ( bx - ax ) * ( bx - ax ) + ( by - ay ) * ( by - ay ) + ( bz - az ) * ( bz - az ) )
            	//
            	//-----------------------------------------------------------------------------
            
            	%a = \"1 1 0\";
            	%b = \"2 0 1\";
            
            	// %r = mSqrt( ( 2 - 1 ) * ( 2 - 1) + ( 0 - 1 ) * ( 0 - 1 ) + ( 1 - 0 ) * ( 1 - 0 ) );
            	// %r = mSqrt( 3 );
            	%r = VectorDist( %a, %b );
               @endtsexample
               @ingroup Vectors )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.VectorDot(WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            Compute the dot product of two vectors.
               @param a The first vector.
               @param b The second vector.
               @return The dot product @a a * @a b.
               @tsexample
            	//-----------------------------------------------------------------------------
            	//
            	// VectorDot( %a, %b );
            	//
            	// The dot product between vector a, (ax, ay, az), and vector b, (bx, by, bz), is:
            	//
            	//     a . b = ( ax * bx + ay * by + az * bz )
            	//
            	//-----------------------------------------------------------------------------
            
            	%a = \"1 1 0\";
            	%b = \"2 0 1\";
            
            	// %r = \"( 1 * 2 + 1 * 0 + 0 * 1 )\";
            	// %r = 2;
            	%r = VectorDot( %a, %b );
               @endtsexample
               @ingroup Vectors )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.VectorLen(WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            Calculate the magnitude of the given vector.
               @param v A vector.
               @return The length of vector @a v.
               @tsexample
            	//-----------------------------------------------------------------------------
            	//
            	// VectorLen( %a );
            	//
            	// The length or magnitude of  vector a, (ax, ay, az), is:
            	//
            	//     ||a|| = Sqrt( ax * ax + ay * ay + az * az )
            	//
            	//-----------------------------------------------------------------------------
            
            	%a = \"1 1 0\";
            
            	// %r = mSqrt( 1 * 1 + 1 * 1 + 0 * 0 );
            	// %r = mSqrt( 2 );
            	// %r = 1.414;
            	%r = VectorLen( %a );
               @endtsexample
               @ingroup Vectors )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.VectorLerp(WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F,System.Single)">
            <summary>
            Linearly interpolate between two vectors by @a t.
               @param a Vector to start interpolation from.
               @param b Vector to interpolate to.
               @param t Interpolation factor (0-1).  At zero, @a a is returned and at one, @a b is returned.  In between, an interpolated vector 
                  between @a a and @a b is returned.
               @return An interpolated vector between @a a and @a b.
               @tsexample
            	//-----------------------------------------------------------------------------
            	//
            	// VectorLerp( %a, %b );
            	//
            	// The point between vector a, (ax, ay, az), and vector b, (bx, by, bz), which is
            	// weighted by the interpolation factor, t, is
            	//
            	//     r = a + t * ( b - a )
            	//       = ( ax + t * ( bx - ax ), ay + t * ( by - ay ), az + t * ( bz - az ) )
            	//
            	//-----------------------------------------------------------------------------
            
            	%a = \"1 1 0\";
            	%b = \"2 0 1\";
            	%v = \"0.25\";
            
            	// %r = \"( 1 + 0.25 * ( 2 - 1 ), 1 + 0.25 * ( 0 - 1 ), 0 + 0.25 * ( 1 - 0 ) )\";
            	// %r = \"1.25 0.75 0.25\";
            	%r = VectorLerp( %a, %b );
               @endtsexample
               @ingroup Vectors )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.VectorNormalize(WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            Brings a vector into its unit form, i.e. such that it has the magnitute 1.
               @param v The vector to normalize.
               @return The vector @a v scaled to length 1.
               @tsexample
            	//-----------------------------------------------------------------------------
            	//
            	// VectorNormalize( %a );
            	//
            	// The normalized vector a, (ax, ay, az), is:
            	//
            	//     a^ = a / ||a||
            	//        = ( ax / ||a||, ay / ||a||, az / ||a|| )
            	//
            	//-----------------------------------------------------------------------------
            
            	%a = \"1 1 0\";
            	%l = 1.414;
            
            	// %r = \"( 1 / 1.141, 1 / 1.141, 0 / 1.141 )\";
            	// %r = \"0.707 0.707 0\";
            	%r = VectorNormalize( %a );
               @endtsexample
               @ingroup Vectors )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.VectorOrthoBasis(WinterLeaf.Engine.Containers.AngAxisF)">
            <summary>
            Create an orthogonal basis from the given vector.
               @param aaf The vector to create the orthogonal basis from.
               @return A matrix representing the orthogonal basis.
               @ingroup Vectors )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.VectorRot(WinterLeaf.Engine.Containers.Point3F,System.Single)">
            <summary>
            (Vector3F, float) rotate a vector in 2d)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.VectorScale(WinterLeaf.Engine.Containers.Point3F,System.Single)">
            <summary>
            Scales a vector by a scalar.
               @param a The vector to scale.
               @param scalar The scale factor.
               @return The vector @a a * @a scalar.
               @tsexample
            	//-----------------------------------------------------------------------------
            	//
            	// VectorScale( %a, %v );
            	//
            	// Scaling vector a, (ax, ay, az), but the scalar, v, is:
            	//
            	//     a * v = ( ax * v, ay * v, az * v )
            	//
            	//-----------------------------------------------------------------------------
            
            	%a = \"1 1 0\";
            	%v = \"2\";
            
            	// %r = \"( 1 * 2, 1 * 2, 0 * 2 )\";
            	// %r = \"2 2 0\";
            	%r = VectorScale( %a, %v );
               @endtsexample
               @ingroup Vectors )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.VectorSub(WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            Subtract two vectors.
               @param a The first vector.
               @param b The second vector.
               @return The vector @a a - @a b.
               @tsexample
            	//-----------------------------------------------------------------------------
            	//
            	// VectorSub( %a, %b );
            	//
            	// The difference of vector a, (ax, ay, az), and vector b, (bx, by, bz) is:
            	//
            	//     a - b = ( ax - bx, ay - by, az - bz )
            	//
            	//-----------------------------------------------------------------------------
            
            	%a = \"1 0 0\";
            	%b = \"0 1 0\";
            
            	// %r = \"( 1 - 0, 0 - 1, 0 - 0 )\";
            	// %r = \"1 -1 0\";
            	%r = VectorSub( %a, %b );
               @endtsexample
               @ingroup Vectors )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.WalkaboutUpdateAll(System.Int32,System.Boolean)">
            <summary>
            @brief Update all NavMesh tiles that intersect the given object's world box.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.WalkaboutUpdateMesh(System.Int32,System.Int32,System.Boolean)">
            <summary>
            @brief Update all tiles in a given NavMesh that intersect the given object's world box.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UtilObject.writeFontCache">
            <summary>
            Force all cached fonts to serialize themselves to the cache.
               @ingroup Font )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ActionMapObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ActionMapObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ActionMapObject.bind(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( ActionMap, bind, bool, 5, 10, actionMap.bind( device, action, [modifier spec, mod...], command ) 
            			  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ActionMapObject.bindCmd(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             ),
                @brief Associates a make command and optional break command to a specified input device action.
                Must include parenthesis and semicolon in the make and break command strings.
                @param device The device to bind to. Can be a keyboard, mouse, joystick or gamepad.
                @param action The device action to bind to. The action is dependant upon the device. Specify a key for keyboards.
                @param makeCmd The command to execute when the device/action is made.
                @param breakCmd [optional] The command to execute when the device or action is unmade.
                @return True the bind was successful, false if the device was unknown or description failed.
            	@tsexample
            	// Print to the console when the spacebar is pressed
            	function onSpaceDown()
            	{
            	   echo(\"Space bar down!\");
            	}
            	// Print to the console when the spacebar is released
            	function onSpaceUp()
            	{
            	   echo(\"Space bar up!\");
            	}
               // Bind the commands onSpaceDown() and onSpaceUp() to spacebar events
            	moveMap.bindCmd(keyboard, \"space\", \"onSpaceDown();\", \"onSpaceUp();\");
            	@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ActionMapObject.bindObj(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( ActionMap, bindObj, bool, 6, 11, (device, action, [modifier spec, mod...], command, object)
            			  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ActionMapObject.getBinding(System.String,System.String)">
            <summary>
            @brief Gets the ActionMap binding for the specified command.
               Use getField() on the return value to get the device and action of the binding.
               @param command The function to search bindings for.
               @return The binding against the specified command. Returns an empty string(\"\") 
               if a binding wasn't found.
            	@tsexample
            	// Find what the function \"jump()\" is bound to in moveMap
            	%bind = moveMap.getBinding( \"jump\" );
            	if ( %bind !$= \"\" )
            	{
            	// Find out what device is used in the binding
            		%device = getField( %bind, 0 );
            	// Find out what action (such as a key) is used in the binding
            		%action = getField( %bind, 1 );
            	}
            	@endtsexample
               @see getField)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ActionMapObject.getCommand(System.String,System.String,System.String)">
            <summary>
            @brief Gets ActionMap command for the device and action.
               @param device The device that was bound. Can be a keyboard, mouse, joystick or a gamepad.
               @param action The device action that was bound.  The action is dependant upon the device. Specify a key for keyboards.
               @return The command against the specified device and action.
            	@tsexample
            	// Find what function is bound to a device\'s action
            	// In this example, \"jump()\" was assigned to the space key in another script
            	%command = moveMap.getCommand(\"keyboard\", \"space\");
            	// Should print \"jump\" in the console
            	echo(%command)
            	@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ActionMapObject.getDeadZone(System.String,System.String,System.String)">
            <summary>
            @brief Gets the Dead zone for the specified device and action.
               @param device The device that was bound.  Can be a keyboard, mouse, joystick or a gamepad.
               @param action The device action that was bound. The action is dependant upon the device. Specify a key for keyboards.
               @return The dead zone for the specified device and action. Returns \"0 0\" if there is no dead zone  
               or an empty string(\"\") if the mapping was not found.
            	@tsexample
            	%deadZone = moveMap.getDeadZone( \"gamepad\", \"thumbrx\");
            	@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ActionMapObject.getScale(System.String,System.String,System.String)">
            <summary>
            @brief Get any scaling on the specified device and action.
               @param device The device that was bound. Can be keyboard, mouse, joystick or gamepad.
               @param action The device action that was bound. The action is dependant upon the device. Specify a key for keyboards.
               @return Any scaling applied to the specified device and action.
            	@tsexample
            	%scale = %moveMap.getScale( \"gamepad\", \"thumbrx\");
            	@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ActionMapObject.isInverted(System.String,System.String,System.String)">
            <summary>
            @brief Determines if the specified device and action is inverted.
               Should only be used for scrolling devices or gamepad/joystick axes.
               @param device The device that was bound. Can be a keyboard, mouse, joystick or a gamepad.
               @param action The device action that was bound.  The action is dependant upon the device. Specify a key for keyboards.
               @return True if the specified device and action is inverted.
            	@tsexample
               %if ( moveMap.isInverted( \"mouse\", \"xaxis\"))
                  echo(\"Mouse's xAxis is inverted\");
            	@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ActionMapObject.pop(System.String)">
            <summary>
            @brief Pop the ActionMap off the %ActionMap stack.
               Deactivates an %ActionMap and removes it from the @ActionMap stack.
            	@tsexample
            	// Deactivate moveMap
            	moveMap.pop();
            	@endtsexample
               @see ActionMap)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ActionMapObject.push(System.String)">
            <summary>
            @brief Push the ActionMap onto the %ActionMap stack.
               Activates an ActionMap and placees it at the top of the ActionMap stack.
            	@tsexample
            	// Make moveMap the active action map
            	moveMap.push();
            	@endtsexample
               @see ActionMap)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ActionMapObject.save(System.String,System.String,System.Boolean)">
            <summary>
            @brief Saves the ActionMap to a file or dumps it to the console.
               @param fileName The file path to save the ActionMap to. If a filename is not specified 
                the ActionMap will be dumped to the console.
               @param append Whether to write the ActionMap at the end of the file or overwrite it.
            	@tsexample
            	// Write out the actionmap into the config.cs file
               moveMap.save( \"scripts/client/config.cs\" );
            	@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ActionMapObject.unbind(System.String,System.String,System.String)">
            <summary>
            @brief Removes the binding on an input device and action.
               @param device The device to unbind from. Can be a keyboard, mouse, joystick or a gamepad.
               @param action The device action to unbind from. The action is dependant upon the device. Specify a key for keyboards.
               @return True if the unbind was successful, false if the device was unknown or description failed.
            	@tsexample
            	moveMap.unbind(\"keyboard\", \"space\");
            	@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ActionMapObject.unbindObj(System.String,System.String,System.String,System.String)">
            <summary>
            @brief Remove any object-binding on an input device and action.
               @param device The device to bind to.  Can be keyboard, mouse, joystick or gamepad.
               @param action The device action to unbind from. The action is dependant upon the device. Specify a key for keyboards.
               @param obj The object to perform unbind against.
               @return True if the unbind was successful, false if the device was unknown or description failed.
            	@tsexample
               moveMap.unbindObj(\"keyboard\", \"numpad1\", \"rangeChange\", %player);
               @endtsexample)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIClientObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIClientObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIClientObject.AIClient_getAimLocation(System.String)">
            <summary>
            ai.getAimLocation(); ) 
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIClientObject.AIClient_getLocation(System.String)">
            <summary>
            ai.getLocation(); ) 
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIClientObject.AIClient_getMoveDestination(System.String)">
            <summary>
            ai.getMoveDestination(); ) 
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIClientObject.AIClient_getTargetObject(System.String)">
            <summary>
            ai.getTargetObject(); ) 
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIClientObject.AIClient_missionCycleCleanup(System.String)">
            <summary>
            ai.missionCycleCleanup(); ) 
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIClientObject.AIClient_move(System.String)">
            <summary>
            ai.move(); ) 
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIClientObject.AIClient_moveForward(System.String)">
            <summary>
            ai.moveForward(); ) 
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIClientObject.AIClient_setAimLocation(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            ai.setAimLocation( x y z ); ) 
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIClientObject.AIClient_setMoveDestination(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            ai.setMoveDestination( x y z ); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIClientObject.AIClient_setMoveSpeed(System.String,System.Single)">
            <summary>
            ai.setMoveSpeed( float ); ) 
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIClientObject.AIClient_setTargetObject(System.String,System.String)">
            <summary>
            ai.setTargetObject( obj ); ) 
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIClientObject.AIClient_stop(System.String)">
            <summary>
            ai.stop(); ) 
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIConnectionObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIConnectionObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIConnectionObject.AIConnection_getAddress(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIConnectionObject.AIConnection_getFreeLook(System.String)">
            <summary>
            getFreeLook()
                          Is freelook on for the current move?)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIConnectionObject.AIConnection_getMove(System.String,System.String)">
            <summary>
            (string field)
                          Get the given field of a move.
                          @param field One of {'x','y','z','yaw','pitch','roll'}
                          @returns The requested field on the current move.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIConnectionObject.AIConnection_getTrigger(System.String,System.Int32)">
            <summary>
            (int trigger)
                          Is the given trigger set?)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIConnectionObject.AIConnection_setFreeLook(System.String,System.Boolean)">
            <summary>
            (bool isFreeLook)
                          Enable/disable freelook on the current move.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIConnectionObject.AIConnection_setMove(System.String,System.String,System.Single)">
            <summary>
            (string field, float value)
                          Set a field on the current move.
                          @param   field One of {'x','y','z','yaw','pitch','roll'}
                          @param   value Value to set field to.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIConnectionObject.AIConnection_setTrigger(System.String,System.Int32,System.Boolean)">
            <summary>
            (int trigger, bool set)
                          Set a trigger.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.AIPlayer_setAimObject(System.String,System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            ( GameBase obj, [Point3F offset] )
                          Sets the bot's target object. Optionally set an offset from target location.
            			  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.AISearchSimSet(System.String,System.Single,System.Single,System.String,System.String)">
            <summary>
            )
            	
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.checkInFoV(System.String,System.String,System.Single,System.Boolean)">
            <summary>
            @brief Check whether an object is within a specified veiw cone.
               @obj Object to check. (If blank, it will check the current target).
               @fov view angle in degrees.(Defaults to 45)
               @checkEnabled check whether the object can take damage and if so is still alive.(Defaults to false))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.checkInLos(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            @brief Check whether an object is in line of sight.
               @obj Object to check. (If blank, it will check the current target).
               @useMuzzle Use muzzle position. Otherwise use eye position. (defaults to false).
               @checkEnabled check whether the object can take damage and if so is still alive.(Defaults to false))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.clearAim(System.String)">
            <summary>
            @brief Use this to stop aiming at an object or a point.
               
               @see setAimLocation()
               @see setAimObject())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.findCover(System.String,WinterLeaf.Engine.Containers.Point3F,System.Single)">
            <summary>
            @brief Tells the AI to find cover nearby.
            
               @param from   Location to find cover from (i.e., enemy position).
               @param radius Distance to search for cover.
               @return Cover point ID if cover was found, -1 otherwise.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.findNavMesh(System.String)">
            <summary>
            @brief Get the NavMesh object this AIPlayer is currently using.
            
               @return The ID of the NavPath object this character is using for 
               pathfinding. This is determined by the character's location, 
               navigation type and other factors. Returns -1 if no NavMesh is 
               found.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.followNavPath(System.String,System.UInt32)">
            <summary>
            @brief Tell the AIPlayer to follow a path.
            
               @param obj ID of a NavPath object for the character to follow.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.followObject(System.String,System.UInt32,System.Single)">
            <summary>
            @brief Tell the AIPlayer to follow another object.
            
               @param obj ID of the object to follow.
               @param radius Maximum distance we let the target escape to.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.getAimLocation(System.String)">
            <summary>
            @brief Returns the point the AIPlayer is aiming at.
            
               This will reflect the position set by setAimLocation(), 
               or the position of the object that the bot is now aiming at.  
               If the bot is not aiming at anything, this value will 
               change to whatever point the bot's current line-of-sight intercepts.
            
               @return World space coordinates of the object AI is aiming at. Formatted as \"X Y Z\".
               
               @see setAimLocation()
               @see setAimObject())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.getAimObject(System.String)">
            <summary>
            @brief Gets the object the AIPlayer is targeting.
            
               @return Returns -1 if no object is being aimed at, 
               or the SimObjectID of the object the AIPlayer is aiming at.
               
               @see setAimObject())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.getMoveDestination(System.String)">
            <summary>
            @brief Get the AIPlayer's current destination.
            
               @return Returns a point containing the \"x y z\" position 
               of the AIPlayer's current move destination. If no move destination 
               has yet been set, this returns \"0 0 0\".
               
               @see setMoveDestination())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.getMoveSpeed(System.String)">
            <summary>
            @brief Gets the move speed of an AI object.
            
               @return A speed multiplier between 0.0 and 1.0.
            
               @see setMoveSpeed())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.getNavMesh(System.String)">
            <summary>
            @brief Return the NavMesh this AIPlayer is using to navigate.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.getNavSize(System.String)">
            <summary>
            @brief Return the size of NavMesh this character uses for pathfinding.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.getPathDestination(System.String)">
            <summary>
            @brief Get the AIPlayer's current pathfinding destination.
            
               @return Returns a point containing the \"x y z\" position 
               of the AIPlayer's current path destination. If no path destination 
               has yet been set, this returns \"0 0 0\".
            
               @see setPathDestination())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.repath(System.String)">
            <summary>
            @brief Tells the AI to re-plan its path. Does nothing if the character 
               has no path, or if it is following a mission path.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.setAimLocation(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            @brief Tells the AIPlayer to aim at the location provided.
            
               @param target An \"x y z\" position in the game world to target.
               
               @see getAimLocation())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.setMoveDestination(System.String,WinterLeaf.Engine.Containers.Point3F,System.Boolean)">
            <summary>
            @brief Tells the AI to move to the location provided
            
               @param goal Coordinates in world space representing location to move to.
               @param slowDown A boolean value. If set to true, the bot will slow down 
               when it gets within 5-meters of its move destination. If false, the bot 
               will stop abruptly when it reaches the move destination. By default, this is true.
            
               @note Upon reaching a move destination, the bot will clear its move destination and 
               calls to getMoveDestination will return \"0 0 0\".
               
               @see getMoveDestination())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.setMoveSpeed(System.String,System.Single)">
            <summary>
            @brief Sets the move speed for an AI object.
            
               @param speed A speed multiplier between 0.0 and 1.0.  
               This is multiplied by the AIPlayer's base movement rates (as defined in 
               its PlayerData datablock)
               
               @see getMoveDestination())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.setNavSize(System.String,System.String)">
            <summary>
            @brief Set the size of NavMesh this character uses. One of \"Small\", \"Regular\" or \"Large\".)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.setPathDestination(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            @brief Tells the AI to find a path to the location provided
            
               @param goal Coordinates in world space representing location to move to.
               @return True if a path was found.
            
               @see getPathDestination()
               @see setMoveDestination())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AIPlayerObject.stop(System.String)">
            <summary>
            @brief Tells the AIPlayer to stop moving.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.AITurretShapeObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AITurretShapeObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AITurretShapeObject.activateTurret(System.String)">
            <summary>
            @brief Activate a turret from a deactive state.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AITurretShapeObject.addToIgnoreList(System.String,System.String)">
            <summary>
            @brief Adds object to the turret's ignore list.
               All objects in this list will be ignored by the turret's targeting.
               @param obj The ShapeBase object to ignore.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AITurretShapeObject.deactivateTurret(System.String)">
            <summary>
            @brief Deactivate a turret from an active state.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AITurretShapeObject.getTarget(System.String)">
            <summary>
            @brief Get the turret's current target.
               @returns The object that is the target's current target, or 0 if no target.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AITurretShapeObject.getWeaponLeadVelocity(System.String)">
            <summary>
            @brief Get the turret's defined projectile velocity that helps with target leading.
               @returns The defined weapon projectile speed, or 0 if leading is disabled.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AITurretShapeObject.hasTarget(System.String)">
            <summary>
            @brief Indicates if the turret has a target.
               @returns True if the turret has a target.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AITurretShapeObject.recenterTurret(System.String)">
            <summary>
            @brief Recenter the turret's weapon.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AITurretShapeObject.removeFromIgnoreList(System.String,System.String)">
            <summary>
            @brief Removes object from the turret's ignore list.
               All objects in this list will be ignored by the turret's targeting.
               @param obj The ShapeBase object to once again allow for targeting.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AITurretShapeObject.resetTarget(System.String)">
            <summary>
            @brief Resets the turret's target tracking.
               Only resets the internal target tracking.  Does not modify the turret's facing.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AITurretShapeObject.setAllGunsFiring(System.String,System.Boolean)">
            <summary>
            @brief Set the firing state of the turret's guns.
               @param fire Set to true to activate all guns.  False to deactivate them.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AITurretShapeObject.setGunSlotFiring(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Set the firing state of the given gun slot.
               @param slot The gun to modify.  Valid range is 0-3 that corresponds to the weapon mount point.
               @param fire Set to true to activate the gun.  False to deactivate it.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AITurretShapeObject.setTurretState(System.String,System.String,System.Boolean)">
            <summary>
            @brief Set the turret's current state.
               Normally the turret's state comes from updating the state machine but this method 
               allows you to override this and jump to the requested state immediately.
               @param newState The name of the new state.
               @param force Is true then force the full processing of the new state even if it is the 
               same as the current state.  If false then only the time out value is reset and the state's 
               script method is called, if any.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AITurretShapeObject.setWeaponLeadVelocity(System.String,System.Single)">
            <summary>
            @brief Set the turret's projectile velocity to help lead the target.
               This value normally comes from AITurretShapeData::weaponLeadVelocity but this method 
               allows you to override the datablock value.  This can be useful if the turret changes 
               ammunition, uses a different weapon than the default, is damaged, etc.
               @note Setting this to 0 will disable target leading.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AITurretShapeObject.startScanForTargets(System.String)">
            <summary>
            @brief Begin scanning for a target.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AITurretShapeObject.startTrackingTarget(System.String)">
            <summary>
            @brief Have the turret track the current target.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AITurretShapeObject.stopScanForTargets(System.String)">
            <summary>
            @brief Stop scanning for targets.
               @note Only impacts the scanning for new targets.  Does not effect a turret's current 
               target lock.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.AITurretShapeObject.stopTrackingTarget(System.String)">
            <summary>
            @brief Stop the turret from tracking the current target.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.add(System.String,System.String,System.String)">
            <summary>
             ),
               Adds a new element to the end of an array (same as push_back()).
               @param key Key for the new element
               @param value Value for the new element )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.append(System.String,System.String)">
            <summary>
            Appends the target array to the array object.
               @param target ArrayObject to append to the end of this array )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.count(System.String)">
            <summary>
            Get the number of elements in the array. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.countKey(System.String,System.String)">
            <summary>
            Get the number of times a particular key is found in the array.
               @param key Key value to count )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.countValue(System.String,System.String)">
            <summary>
            Get the number of times a particular value is found in the array.
               @param value Array element value to count )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.crop(System.String,System.String)">
            <summary>
            Removes elements with matching keys from array.
               @param target ArrayObject containing keys to remove from this array )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.duplicate(System.String,System.String)">
            <summary>
            Alters array into an exact duplicate of the target array.
               @param target ArrayObject to duplicate )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.echo(System.String)">
            <summary>
            Echos the array contents to the console )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.empty(System.String)">
            <summary>
            Emptys all elements from an array )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.erase(System.String,System.Int32)">
            <summary>
            Removes an element at a specific position from the array.
               @param index 0-based index of the element to remove )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.getCurrent(System.String)">
            <summary>
            Gets the current pointer index )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.getIndexFromKey(System.String,System.String)">
            <summary>
            Search the array from the current position for the key 
               @param value Array key to search for
               @return Index of the first element found, or -1 if none )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.getIndexFromValue(System.String,System.String)">
            <summary>
            Search the array from the current position for the element 
               @param value Array value to search for
               @return Index of the first element found, or -1 if none )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.getKey(System.String,System.Int32)">
            <summary>
            Get the key of the array element at the submitted index.
               @param index 0-based index of the array element to get
               @return The key associated with the array element at the 
               specified index, or \"\" if the index is out of range )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.getValue(System.String,System.Int32)">
            <summary>
            Get the value of the array element at the submitted index.
               @param index 0-based index of the array element to get
               @return The value of the array element at the specified index, 
               or \"\" if the index is out of range )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.insert(System.String,System.String,System.String,System.Int32)">
            <summary>
            Adds a new element to a specified position in the array.
               - @a index = 0 will insert an element at the start of the array (same as push_front())
               - @a index = %array.count() will insert an element at the end of the array (same as push_back())
               @param key Key for the new element
               @param value Value for the new element
               @param index 0-based index at which to insert the new element )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.moveFirst(System.String)">
            <summary>
            Moves array pointer to start of array
               @return Returns the new array pointer )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.moveLast(System.String)">
            <summary>
            Moves array pointer to end of array
               @return Returns the new array pointer )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.moveNext(System.String)">
            <summary>
            Moves array pointer to next position
               @return Returns the new array pointer, or -1 if already at the end )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.movePrev(System.String)">
            <summary>
            Moves array pointer to prev position
               @return Returns the new array pointer, or -1 if already at the start )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.pop_back(System.String)">
            <summary>
            Removes the last element from the array )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.pop_front(System.String)">
            <summary>
            Removes the first element from the array )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.push_back(System.String,System.String,System.String)">
            <summary>
             ),
               Adds a new element to the end of an array.
               @param key Key for the new element
               @param value Value for the new element )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.push_front(System.String,System.String,System.String)">
            <summary>
             ),
               Adds a new element to the front of an array )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.setCurrent(System.String,System.Int32)">
            <summary>
            Sets the current pointer index.
               @param index New 0-based pointer index )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.setKey(System.String,System.String,System.Int32)">
            <summary>
            Set the key at the given index.
               @param key New key value
               @param index 0-based index of the array element to update )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.setValue(System.String,System.String,System.Int32)">
            <summary>
            Set the value at the given index.
               @param value New array element value
               @param index 0-based index of the array element to update )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.sort(System.String,System.Boolean)">
            <summary>
            Alpha sorts the array by value
               @param ascending [optional] True for ascending sort, false for descending sort )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.sorta(System.String)">
            <summary>
            Alpha sorts the array by value in ascending order )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.sortd(System.String)">
            <summary>
            Alpha sorts the array by value in descending order )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.sortf(System.String,System.String)">
            <summary>
            Sorts the array by value in ascending order using the given callback function.
               @param functionName Name of a function that takes two arguments A and B and returns -1 if A is less, 1 if B is less, and 0 if both are equal.
               @tsexample
               function mySortCallback(%a, %b)
               {
                  return strcmp( %a.name, %b.name );
               }
               %array.sortf( \"mySortCallback\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.sortfd(System.String,System.String)">
            <summary>
            Sorts the array by value in descending order using the given callback function.
               @param functionName Name of a function that takes two arguments A and B and returns -1 if A is less, 1 if B is less, and 0 if both are equal.
               @see sortf )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.sortfk(System.String,System.String)">
            <summary>
            Sorts the array by key in ascending order using the given callback function.
               @param functionName Name of a function that takes two arguments A and B and returns -1 if A is less, 1 if B is less, and 0 if both are equal.
               @see sortf )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.sortfkd(System.String,System.String)">
            <summary>
            Sorts the array by key in descending order using the given callback function.
               @param functionName Name of a function that takes two arguments A and B and returns -1 if A is less, 1 if B is less, and 0 if both are equal.
               @see sortf )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.sortk(System.String,System.Boolean)">
            <summary>
            Alpha sorts the array by key
               @param ascending [optional] True for ascending sort, false for descending sort )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.sortka(System.String)">
            <summary>
            Alpha sorts the array by key in ascending order )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.sortkd(System.String)">
            <summary>
            Alpha sorts the array by key in descending order )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.sortn(System.String,System.Boolean)">
            <summary>
            Numerically sorts the array by value
               @param ascending [optional] True for ascending sort, false for descending sort )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.sortna(System.String)">
            <summary>
            Numerically sorts the array by value in ascending order ) 
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.sortnd(System.String)">
            <summary>
            Numerically sorts the array by value in descending order )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.sortnk(System.String,System.Boolean)">
            <summary>
            Numerically sorts the array by key
               @param ascending [optional] True for ascending sort, false for descending sort )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.sortnka(System.String)">
            <summary>
            Numerical sorts the array by key in ascending order )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.sortnkd(System.String)">
            <summary>
            Numerical sorts the array by key in descending order )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.uniqueKey(System.String)">
            <summary>
            Removes any elements that have duplicated keys (leaving the first instance) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ArrayObjectObject.uniqueValue(System.String)">
            <summary>
            Removes any elements that have duplicated values (leaving the first instance) )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.autoFitRadius(System.String,System.Single)">
            <summary>
            Move the camera to fully view the given radius.
                               @note For this operation to take affect a valid edit orbit point must first be specified.  See Camera::setEditOrbitPoint().
                               @param radius The radius to view.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.getAngularVelocity(System.String)">
            <summary>
            Get the angular velocity for a Newton mode camera.
                               @returns The angular velocity in the form of \"x y z\".
                               @note Only returns useful results when Camera::newtonRotation is set to true.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.getMode(System.String)">
            <summary>
            Returns the current camera control mode.
                               @see CameraMotionMode)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.getOffset(System.String)">
            <summary>
            Get the camera's offset from its orbit or tracking point.
                               The offset is added to the camera's position when set to CameraMode::OrbitObject.
                               @returns The offset in the form of \"x y z\".)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.getPosition(System.String)">
            <summary>
            Get the camera's position in the world.
                               @returns The position in the form of \"x y z\".)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.getRotation(System.String)">
            <summary>
            Get the camera's Euler rotation in radians.
                               @returns The rotation in radians in the form of \"x y z\".)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.getVelocity(System.String)">
            <summary>
            Get the velocity for the camera.
                               @returns The camera's velocity in the form of \"x y z\".
                               @note Only useful when the Camera is in Newton mode.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.isEditOrbitMode(System.String)">
            <summary>
            Is the camera in edit orbit mode?
                               @returns true if the camera is in edit orbit mode.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.isRotationDamped(System.String)">
            <summary>
            Is this a Newton Fly mode camera with damped rotation?
                                @returns true if the camera uses a damped rotation.  i.e. Camera::newtonRotation is set to true.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.lookAt(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            Point the camera at the specified position.  Does not work in Orbit or Track modes.
                               @param point The position to point the camera at.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.setAngularDrag(System.String,System.Single)">
            <summary>
            Set the angular drag for a Newton mode camera.
                               @param drag The angular drag applied while the camera is rotating.
                               @note Only takes affect when Camera::newtonRotation is set to true.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.setAngularForce(System.String,System.Single)">
            <summary>
            Set the angular force for a Newton mode camera.
                               @param force The angular force applied when attempting to rotate the camera.
                               @note Only takes affect when Camera::newtonRotation is set to true.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.setAngularVelocity(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            Set the angular velocity for a Newton mode camera.
                               @param velocity The angular velocity infor form of \"x y z\".
                               @note Only takes affect when Camera::newtonRotation is set to true.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.setBrakeMultiplier(System.String,System.Single)">
            <summary>
            Set the Newton mode camera brake multiplier when trigger[1] is active.
                               @param multiplier The brake multiplier to apply.
                               @note Only used when Camera is in Newton mode.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.setDrag(System.String,System.Single)">
            <summary>
            Set the drag for a Newton mode camera.
                               @param drag The drag applied to the camera while moving.
                               @note Only used when Camera is in Newton mode.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.setEditOrbitMode(System.String)">
            <summary>
            Set the editor camera to orbit around a point set with Camera::setEditOrbitPoint().
                                @note This method is generally used only within the World Editor and other tools.  To 
                                orbit about an object or point within a game, see Camera::setOrbitMode() and its helper methods.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.setEditOrbitPoint(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            Set the editor camera's orbit point.
                               @param point The point the camera will orbit in the form of \"x y z\".)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.setFlyForce(System.String,System.Single)">
            <summary>
            Set the force applied to a Newton mode camera while moving.
                               @param force The force applied to the camera while attempting to move.
                               @note Only used when Camera is in Newton mode.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.setFlyMode(System.String)">
            <summary>
            Set the camera to fly freely.
                               Allows the camera to have 6 degrees of freedom.  Provides for instantaneous motion 
                               and rotation unless one of the Newton fields has been set to true.  See Camera::newtonMode 
                               and Camera::newtonRotation.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.setMass(System.String,System.Single)">
            <summary>
            Set the mass for a Newton mode camera.
                               @param mass The mass used during ease-in and ease-out calculations.
                               @note Only used when Camera is in Newton mode.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.setNewtonFlyMode(System.String)">
            <summary>
            Set the camera to fly freely, but with ease-in and ease-out.
                                This method allows for the same 6 degrees of freedom as Camera::setFlyMode() but 
                                activates the ease-in and ease-out on the camera's movement.  To also activate 
                                Newton mode for the camera's rotation, set Camera::newtonRotation to true.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.setOffset(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            Set the camera's offset.
                               The offset is added to the camera's position when set to CameraMode::OrbitObject.
                               @param offset The distance to offset the camera by in the form of \"x y z\".)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.setOrbitMode(System.String,System.String,WinterLeaf.Engine.Containers.TransformF,System.Single,System.Single,System.Single,System.Boolean,WinterLeaf.Engine.Containers.Point3F,System.Boolean)">
            <summary>
            Set the camera to orbit around the given object, or if none is given, around the given point.
                                @param orbitObject The object to orbit around.  If no object is given (0 or blank string is passed in) use the orbitPoint instead
                                @param orbitPoint The point to orbit around when no object is given.  In the form of \"x y z ax ay az aa\" such as returned by SceneObject::getTransform().
                                @param minDistance The minimum distance allowed to the orbit object or point.
                                @param maxDistance The maximum distance allowed from the orbit object or point.
                                @param initDistance The initial distance from the orbit object or point.
                                @param ownClientObj [optional] Are we orbiting an object that is owned by us?  Default is false.
                                @param offset [optional] An offset added to the camera's position.  Default is no offset.
                                @param locked [optional] Indicates the camera does not receive input from the player.  Default is false.
                                @see Camera::setOrbitObject()
                                @see Camera::setOrbitPoint())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.setOrbitObject(System.String,System.String,WinterLeaf.Engine.Containers.Point3F,System.Single,System.Single,System.Single,System.Boolean,WinterLeaf.Engine.Containers.Point3F,System.Boolean)">
            <summary>
            Set the camera to orbit around a given object.
                                @param orbitObject The object to orbit around.
                                @param rotation The initial camera rotation about the object in radians in the form of \"x y z\".
                                @param minDistance The minimum distance allowed to the orbit object or point.
                                @param maxDistance The maximum distance allowed from the orbit object or point.
                                @param initDistance The initial distance from the orbit object or point.
                                @param ownClientObject [optional] Are we orbiting an object that is owned by us?  Default is false.
                                @param offset [optional] An offset added to the camera's position.  Default is no offset.
                                @param locked [optional] Indicates the camera does not receive input from the player.  Default is false.
                                @returns false if the given object could not be found.
                                @see Camera::setOrbitMode())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.setOrbitPoint(System.String,WinterLeaf.Engine.Containers.TransformF,System.Single,System.Single,System.Single,WinterLeaf.Engine.Containers.Point3F,System.Boolean)">
            <summary>
            Set the camera to orbit around a given point.
                                @param orbitPoint The point to orbit around.  In the form of \"x y z ax ay az aa\" such as returned by SceneObject::getTransform().
                                @param minDistance The minimum distance allowed to the orbit object or point.
                                @param maxDistance The maximum distance allowed from the orbit object or point.
                                @param initDistance The initial distance from the orbit object or point.
                                @param offset [optional] An offset added to the camera's position.  Default is no offset.
                                @param locked [optional] Indicates the camera does not receive input from the player.  Default is false.
                                @see Camera::setOrbitMode())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.setRotation(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            Set the camera's Euler rotation in radians.
                               @param rot The rotation in radians in the form of \"x y z\".
                               @note Rotation around the Y axis is ignored )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.setSpeedMultiplier(System.String,System.Single)">
            <summary>
            Set the Newton mode camera speed multiplier when trigger[0] is active.
                               @param multiplier The speed multiplier to apply.
                               @note Only used when Camera is in Newton mode.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.setTrackObject(System.String,System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            Set the camera to track a given object.
                                @param trackObject The object to track.
                                @param offset [optional] An offset added to the camera's position.  Default is no offset.
                                @returns false if the given object could not be found.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.setValidEditOrbitPoint(System.String,System.Boolean)">
            <summary>
            Set if there is a valid editor camera orbit point.
                               When validPoint is set to false the Camera operates as if it is 
                               in Fly mode rather than an Orbit mode.
                               @param validPoint Indicates the validity of the orbit point.
                               @note Only used when Camera is in Edit Orbit Mode.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CameraObject.setVelocity(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            Set the velocity for the camera.
                               @param velocity The camera's velocity in the form of \"x y z\".
                               @note Only affects the Camera when in Newton mode.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.CompoundUndoActionObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CompoundUndoActionObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CompoundUndoActionObject.CompoundUndoAction_addAction(System.String,System.String)">
            <summary>
            addAction( UndoAction ) )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleLoggerObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleLoggerObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleLoggerObject.ConsoleLogger_attach(System.String)">
            <summary>
            () Attaches the logger to the console and begins writing to file
            			  @tsexample
            			  // Create the logger
            			  // Will automatically start writing to testLogging.txt with normal priority
            			  new ConsoleLogger(logger, \"testLogging.txt\", false);
            			  // Send something to the console, with the logger consumes and writes to file
            			  echo(\"This is logged to the file\");
            			  // Stop logging, but do not delete the logger
            			  logger.detach();
            			  echo(\"This is not logged to the file\");
            			  // Attach the logger to the console again
            			  logger.attach();
            			  // Logging has resumed
            			  echo(\"Logging has resumed\");
            			  @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ConsoleLoggerObject.ConsoleLogger_detach(System.String)">
            <summary>
            () Detaches the logger from the console and stops writing to file
            			  @tsexample
            			  // Create the logger
            			  // Will automatically start writing to testLogging.txt with normal priority
            			  new ConsoleLogger(logger, \"testLogging.txt\", false);
            			  // Send something to the console, with the logger consumes and writes to file
            			  echo(\"This is logged to the file\");
            			  // Stop logging, but do not delete the logger
            			  logger.detach();
            			  echo(\"This is not logged to the file\");
            			  // Attach the logger to the console again
            			  logger.attach();
            			  // Logging has resumed
            			  echo(\"Logging has resumed\");
            			  @endtsexample)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.CoverPointObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CoverPointObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CoverPointObject.isOccupied(System.String)">
            <summary>
            @brief Returns true if someone is already using this cover point.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.CreatorTreeObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CreatorTreeObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CreatorTreeObject.CreatorTree_addGroup(System.String,System.Int32,System.String,System.String)">
            <summary>
            (string group, string name, string value))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CreatorTreeObject.CreatorTree_addItem(System.String,System.Int32,System.String,System.String)">
            <summary>
            (Node group, string name, string value))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CreatorTreeObject.CreatorTree_clear(System.String)">
            <summary>
            Clear the tree.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CreatorTreeObject.CreatorTree_fileNameMatch(System.String,System.String,System.String,System.String)">
            <summary>
            (string world, string type, string filename))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CreatorTreeObject.CreatorTree_getName(System.String,System.String)">
            <summary>
            (Node item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CreatorTreeObject.CreatorTree_getParent(System.String,System.Int32)">
            <summary>
            (Node n))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CreatorTreeObject.CreatorTree_getSelected(System.String)">
            <summary>
            Return a handle to the currently selected item.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CreatorTreeObject.CreatorTree_getValue(System.String,System.Int32)">
            <summary>
            (Node n))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CreatorTreeObject.CreatorTree_isGroup(System.String,System.String)">
            <summary>
            (Group g))
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.CubemapDataObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CubemapDataObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CubemapDataObject.getFilename(System.String)">
            <summary>
            Returns the script filename of where the CubemapData object was 
               defined.  This is used by the material editor. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.CubemapDataObject.updateFaces(System.String)">
            <summary>
            Update the assigned cubemaps faces. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.DbgFileViewObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DbgFileViewObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DbgFileViewObject.DbgFileView_clearBreakPositions(System.String)">
            <summary>
            ()
                          Clear all break points in the current file.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DbgFileViewObject.DbgFileView_findString(System.String,System.String)">
            <summary>
            (string findThis)
                          Find the specified string in the currently viewed file and 
                          scroll it into view.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DbgFileViewObject.DbgFileView_getCurrentLine(System.String)">
            <summary>
            ()
                          Get the currently executing file and line, if any.
                          @returns A string containing the file, a tab, and then the line number.
                           Use getField() with this.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DbgFileViewObject.DbgFileView_open(System.String,System.String)">
            <summary>
            (string filename)
                          Open a file for viewing.
                          @note This loads the file from the local system.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DbgFileViewObject.DbgFileView_removeBreak(System.String,System.UInt32)">
            <summary>
            (int line)
                          Remove a breakpoint from the specified line.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DbgFileViewObject.DbgFileView_setBreak(System.String,System.UInt32)">
            <summary>
            (int line)
                          Set a breakpoint at the specified line.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DbgFileViewObject.DbgFileView_setBreakPosition(System.String,System.UInt32)">
            <summary>
            (int line)
                          Set a breakpoint at the specified line.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DbgFileViewObject.DbgFileView_setCurrentLine(System.String,System.Int32,System.Boolean)">
            <summary>
            (int line, bool selected)
                          Set the current highlighted line.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.DebrisObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DebrisObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DebrisObject.init(System.String,System.String,System.String)">
            <summary>
            1.0 1.0 1.0, 1.0 0.0 0.0), 
               @brief Manually set this piece of debris at the given position with the given velocity.
            
               Usually you do not manually create Debris objects as they are generated through other means, 
               such as an Explosion.  This method exists when you do manually create a Debris object and 
               want to have it start moving.
            
               @param inputPosition Position to place the debris.
               @param inputVelocity Velocity to move the debris after it has been placed.
               @return Always returns true.
            
               @tsexample
                  // Define the position
                  %position = \"1.0 1.0 1.0\";
                  // Define the velocity
                  %velocity = \"1.0 0.0 0.0\";
                  // Inform the debris object of its new position and velocity
                  %debris.init(%position,%velocity);
               @endtsexample)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.DebugDrawerObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DebugDrawerObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DebugDrawerObject.drawBox(System.String,WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.ColorF)">
            <summary>
            Draws an axis aligned box primitive within the two 3d points. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DebugDrawerObject.drawLine(System.String,WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.ColorF)">
            <summary>
            Draws a line primitive between two 3d points. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DebugDrawerObject.setLastTTL(System.String,System.UInt32)">
            <summary>
            Sets the \"time to live\" (TTL) for the last rendered primitive. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DebugDrawerObject.setLastZTest(System.String,System.Boolean)">
            <summary>
            Sets the z buffer reading state for the last rendered primitive. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DebugDrawerObject.toggleDrawing(System.String)">
            <summary>
            Toggles the rendering of DebugDrawer primitives. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DebugDrawerObject.toggleFreeze(System.String)">
            <summary>
            Toggles freeze mode which keeps the currently rendered primitives from expiring. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.DecalDataObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DecalDataObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DecalDataObject.postApply(System.String)">
            <summary>
            Recompute the imagemap sub-texture rectangles for this DecalData.
               @tsexample
               // Inform the decal object to reload its imagemap and frame data.
               %decalData.texRows = 4;
               %decalData.postApply();
               @endtsexample)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.DecalRoadObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DecalRoadObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DecalRoadObject.postApply(System.String)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               Force trigger an inspectPostApply. This will transmit 
                               the material and other fields ( not including nodes ) 
                               to client objects.
                              )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DecalRoadObject.regenerate(System.String)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               Force DecalRoad to update it's spline and reclip geometry.
                              )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.DynamicConsoleMethodComponentObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DynamicConsoleMethodComponentObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.DynamicConsoleMethodComponentObject.callMethod(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( DynamicConsoleMethodComponent, callMethod, void, 3, 64 , (methodName, argi) Calls script defined method
            			  @param methodName The method's name as a string
            			  @param argi Any arguments to pass to the method
            			  @return No return value
            			  @note %obj.callMethod( %methodName, %arg1, %arg2, ... );)
            
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.EditManagerObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EditManagerObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EditManagerObject.EditManager_editorDisabled(System.String)">
            <summary>
            Perform the onEditorDisabled callback on all SimObjects and set gEditingMission false )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EditManagerObject.EditManager_editorEnabled(System.String)">
            <summary>
            Perform the onEditorEnabled callback on all SimObjects and set gEditingMission true )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EditManagerObject.EditManager_gotoBookmark(System.String,System.Int32)">
            <summary>
            (int slot))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EditManagerObject.EditManager_isEditorEnabled(System.String)">
            <summary>
            Return the value of gEditingMission. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EditManagerObject.EditManager_setBookmark(System.String,System.Int32)">
            <summary>
            (int slot))
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.EditTSCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EditTSCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EditTSCtrlObject.getDisplayType(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EditTSCtrlObject.getGizmo(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EditTSCtrlObject.getOrthoFOV(System.String)">
            <summary>
            Return the FOV for orthographic views. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EditTSCtrlObject.isMiddleMouseDown(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EditTSCtrlObject.renderBox(System.String,WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EditTSCtrlObject.renderCircle(System.String,WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F,System.Single,System.Int32)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EditTSCtrlObject.renderLine(System.String,WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F,System.Single)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EditTSCtrlObject.renderSphere(System.String,WinterLeaf.Engine.Containers.Point3F,System.Single,System.Int32)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EditTSCtrlObject.renderTriangle(System.String,WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EditTSCtrlObject.setDisplayType(System.String,System.Int32)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EditTSCtrlObject.setOrthoFOV(System.String,System.Single)">
            <summary>
            Set the FOV for to use for orthographic views. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.EventManagerObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EventManagerObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EventManagerObject.EventManager_dumpEvents(System.String)">
            <summary>
            ()
                          Print all registered events to the console. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EventManagerObject.EventManager_dumpSubscribers(System.String,System.String)">
            <summary>
            ), ( String event )
                          Print all subscribers to an event to the console.
                          @param event The event whose subscribers are to be printed. If this parameter isn't specified, all events will be dumped. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EventManagerObject.EventManager_isRegisteredEvent(System.String,System.String)">
            <summary>
            ( String event )
                          Check if an event is registered or not.
                          @param event The event to check.
                          @return Whether or not the event exists. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EventManagerObject.EventManager_postEvent(System.String,System.String,System.String)">
            <summary>
            ), ( String event, String data )
                          ~Trigger an event.
                          @param event The event to trigger.
                          @param data The data associated with the event.
                          @return Whether or not the event was dispatched successfully. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EventManagerObject.EventManager_registerEvent(System.String,System.String)">
            <summary>
            ( String event )
                          Register an event with the event manager.
                          @param event The event to register.
                          @return Whether or not the event was registered successfully. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EventManagerObject.EventManager_remove(System.String,System.String,System.String)">
            <summary>
            ( SimObject listener, String event )
                          Remove a listener from an event.
                          @param listener The listener to remove.
                          @param event The event to be removed from.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EventManagerObject.EventManager_removeAll(System.String,System.String)">
            <summary>
            ( SimObject listener )
                          Remove a listener from all events.
                          @param listener The listener to remove.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EventManagerObject.EventManager_subscribe(System.String,System.String,System.String,System.String)">
            <summary>
            ), ( SimObject listener, String event, String callback )
                          Subscribe a listener to an event.
                          @param listener The listener to subscribe.
                          @param event The event to subscribe to.
                          @param callback Optional method name to receive the event notification. If this is not specified, \"on[event]\" will be used.
                          @return Whether or not the subscription was successful. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.EventManagerObject.EventManager_unregisterEvent(System.String,System.String)">
            <summary>
            ( String event )
                          Remove an event from the EventManager.
                          @param event The event to remove. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.FieldBrushObjectObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.FieldBrushObjectObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.FieldBrushObjectObject.FieldBrushObject_copyFields(System.String,System.String,System.String)">
            <summary>
            ), (simObject, [fieldList]) Copy selected static-fields for selected object./
                                                                    @param simObject Object to copy static-fields from.
                                                                    @param fieldList fields to filter static-fields against.
            			                                            @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.FieldBrushObjectObject.FieldBrushObject_pasteFields(System.String,System.String)">
            <summary>
            (simObject) Paste copied static-fields to selected object./
                                                                    @param simObject Object to paste static-fields to.
            			                                            @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.FieldBrushObjectObject.FieldBrushObject_queryFields(System.String,System.String,System.String)">
            <summary>
            ), (simObject, [groupList]) Query available static-fields for selected object./
                                                                            @param simObject Object to query static-fields on.
                                                                            @param groupList groups to filter static-fields against.
            			                                                    @return Space-seperated static-field list.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.FieldBrushObjectObject.FieldBrushObject_queryGroups(System.String,System.String)">
            <summary>
            (simObject) Query available static-field groups for selected object./
                                                                            @param simObject Object to query static-field groups on.
            			                                                    @return Space-seperated static-field group list.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.FileDialogObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.FileDialogObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.FileDialogObject.Execute(System.String)">
            <summary>
            @brief Launches the OS file browser
            
               After an Execute() call, the chosen file name and path is available in one of two areas.  
               If only a single file selection is permitted, the results will be stored in the @a fileName 
               attribute.
            
               If multiple file selection is permitted, the results will be stored in the 
               @a files array.  The total number of files in the array will be stored in the 
               @a fileCount attribute.
            
               @tsexample
               // NOTE: This is not he preferred class to use, but this still works
               // Create the file dialog
               %baseFileDialog = new FileDialog()
               {
                  // Allow browsing of all file types
                  filters = \"*.*\";
                  // No default file
                  defaultFile = ;
                  // Set default path relative to project
                  defaultPath = \"./\";
                  // Set the title
                  title = \"Durpa\";
                  // Allow changing of path you are browsing
                  changePath = true;
               };
                // Launch the file dialog
                %baseFileDialog.Execute();
                
                // Don't forget to cleanup
                %baseFileDialog.delete();
            
                // A better alternative is to use the 
                // derived classes which are specific to file open and save
                // Create a dialog dedicated to opening files
                %openFileDlg = new OpenFileDialog()
                {
                   // Look for jpg image files
                   // First part is the descriptor|second part is the extension
                   Filters = \"Jepg Files|*.jpg\";
                   // Allow browsing through other folders
                   ChangePath = true;
                   // Only allow opening of one file at a time
                   MultipleFiles = false;
                };
                // Launch the open file dialog
                %result = %openFileDlg.Execute();
                // Obtain the chosen file name and path
                if ( %result )
                {
                   %seletedFile = %openFileDlg.file;
                }
                else
                {
                   %selectedFile = \"\";
                }
                // Cleanup
                %openFileDlg.delete();
            
                // Create a dialog dedicated to saving a file
                %saveFileDlg = new SaveFileDialog()
                {
                   // Only allow for saving of COLLADA files
                   Filters = \"COLLADA Files (*.dae)|*.dae|\";
                   // Default save path to where the WorldEditor last saved
                   DefaultPath = $pref::WorldEditor::LastPath;
                   // No default file specified
                   DefaultFile = \"\";
                   // Do not allow the user to change to a new directory
                   ChangePath = false;
                   // Prompt the user if they are going to overwrite an existing file
                   OverwritePrompt = true;
                };
                // Launch the save file dialog
                %result = %saveFileDlg.Execute();
                // Obtain the file name
                %selectedFile = \"\";
                if ( %result )
                   %selectedFile = %saveFileDlg.file;
                // Cleanup
                %saveFileDlg.delete();
               @endtsexample
            
               @return True if the file was selected was successfully found (opened) or declared (saved).)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.FileObjectObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.FileObjectObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.FileObjectObject.FileObject_writeObject(System.String,System.String,System.String)">
            <summary>
            ), FileObject.writeObject(SimObject, object prepend) 
            			  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.FileObjectObject.close(System.String)">
            <summary>
            @brief Close the file.
               
               It is EXTREMELY important that you call this function when you are finished reading or writing to a file. 
               Failing to do so is not only a bad programming practice, but could result in bad data or corrupt files. 
               Remember: Open, Read/Write, Close, Delete...in that order!
               
               @tsexample
               // Create a file object for reading
               %fileRead = new FileObject();
               // Open a text file, if it exists
               %fileRead.OpenForRead(\"./test.txt\");
               // Peek the first line
               %line = %fileRead.peekLine();
               // Print the line we just peeked
               echo(%line);
               // If we peek again...
               %line = %fileRead.peekLine();
               // We will get the same output as the first time
               // since the stream did not move forward
               echo(%line);
               // Close the file when finished
               %fileWrite.close();
               // Cleanup the file object
               %fileWrite.delete();
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.FileObjectObject.isEOF(System.String)">
            <summary>
            @brief Determines if the parser for this FileObject has reached the end of the file
               
               @tsexample
               // Create a file object for reading
               %fileRead = new FileObject();
               // Open a text file, if it exists
               %fileRead.OpenForRead(\"./test.txt\");
               // Keep reading until we reach the end of the file
               while( !%fileRead.isEOF() )
               {
                  %line = %fileRead.readline();
                  echo(%line);
               }
               // Made it to the end
               echo(\"Finished reading file\");
               @endtsexample
            
               @return True if the parser has reached the end of the file, false otherwise)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.FileObjectObject.openForAppend(System.String,System.String)">
            <summary>
            @brief Open a specified file for writing, adding data to the end of the file
               
               There is no limit as to what kind of file you can write. Any format and data is allowable, not just text. Unlike openForWrite(), 
               which will erase an existing file if it is opened, openForAppend() preserves data in an existing file and adds to it.
            
               @param filename Path, name, and extension of file to append to
               
               @tsexample
               // Create a file object for writing
               %fileWrite = new FileObject();
               // Open a file to write to, if it does not exist it will be created
               // If it does exist, whatever we write will be added to the end
               %result = %fileWrite.OpenForAppend(\"./test.txt\");
               @endtsexample
            
               @return True if file was successfully opened, false otherwise)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.FileObjectObject.openForRead(System.String,System.String)">
            <summary>
            @brief Open a specified file for reading
               
               There is no limit as to what kind of file you can read. Any format and data contained within is accessible, not just text
            
               @param filename Path, name, and extension of file to be read
               
               @tsexample
               // Create a file object for reading
               %fileRead = new FileObject();
               // Open a text file, if it exists
               %result = %fileRead.OpenForRead(\"./test.txt\");
               @endtsexample
            
               @return True if file was successfully opened, false otherwise)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.FileObjectObject.openForWrite(System.String,System.String)">
            <summary>
            @brief Open a specified file for writing
               
               There is no limit as to what kind of file you can write. Any format and data is allowable, not just text
            
               @param filename Path, name, and extension of file to write to
               
               @tsexample
               // Create a file object for writing
               %fileWrite = new FileObject();
               // Open a file to write to, if it does not exist it will be created
               %result = %fileWrite.OpenForWrite(\"./test.txt\");
               @endtsexample
            
               @return True if file was successfully opened, false otherwise)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.FileObjectObject.peekLine(System.String)">
            <summary>
            @brief Read a line from the file without moving the stream position.
               
               Emphasis on *line*, as in you cannot parse individual characters or chunks of data.  
               There is no limitation as to what kind of data you can read. Unlike readLine, the parser does not move forward after reading.
            
               @param filename Path, name, and extension of file to be read
               
               @tsexample
               // Create a file object for reading
               %fileRead = new FileObject();
               // Open a text file, if it exists
               %fileRead.OpenForRead(\"./test.txt\");
               // Peek the first line
               %line = %fileRead.peekLine();
               // Print the line we just peeked
               echo(%line);
               // If we peek again...
               %line = %fileRead.peekLine();
               // We will get the same output as the first time
               // since the stream did not move forward
               echo(%line);
               @endtsexample
            
               @return String containing the line of data that was just peeked)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.FileObjectObject.readLine(System.String)">
            <summary>
            @brief Read a line from file.
               
               Emphasis on *line*, as in you cannot parse individual characters or chunks of data.  
               There is no limitation as to what kind of data you can read.
               
               @tsexample
               // Create a file object for reading
               %fileRead = new FileObject();
               // Open a text file, if it exists
               %fileRead.OpenForRead(\"./test.txt\");
               // Read in the first line
               %line = %fileRead.readline();
               // Print the line we just read
               echo(%line);
               @endtsexample
            
               @return String containing the line of data that was just read)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.FileObjectObject.writeLine(System.String,System.String)">
            <summary>
            @brief Write a line to the file, if it was opened for writing.
               
               There is no limit as to what kind of text you can write. Any format and data is allowable, not just text. 
               Be careful of what you write, as whitespace, current values, and literals will be preserved.
            
               @param text The data we are writing out to file.
               
               @tsexample
               // Create a file object for writing
               %fileWrite = new FileObject();
               // Open a file to write to, if it does not exist it will be created
               %fileWrite.OpenForWrite(\"./test.txt\");
               // Write a line to the text files
               %fileWrite.writeLine(\"READ. READ CODE. CODE\");
               @endtsexample
            
               @return True if file was successfully opened, false otherwise)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.FileStreamObjectObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.FileStreamObjectObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.FileStreamObjectObject.close(System.String)">
            <summary>
            @brief Close the file. You can no longer read or write to it unless you open it again.
               
               @tsexample
               // Create a file stream object for reading
               %fsObject = new FileStreamObject();
               // Open a file for reading
               %fsObject.open(\"./test.txt\", \"read\");
               // Always remember to close a file stream when finished
               %fsObject.close();
               @endtsexample
               
               @see open())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.FileStreamObjectObject.open(System.String,System.String,System.String)">
            <summary>
            @brief Open a file for reading, writing, reading and writing, or appending
               
               Using \"Read\" for the open mode allows you to parse the contents of file, but not making modifications. \"Write\" will create a new 
               file if it does not exist, or erase the contents of an existing file when opened. Write also allows you to modify the contents of the file.
            
               \"ReadWrite\" will provide the ability to parse data (read it in) and manipulate data (write it out) interchangeably. Keep in mind the stream can 
               move during each operation. Finally, \"WriteAppend\" will open a file if it exists, but will not clear the contents. You can write new data starting 
                at the end of the files existing contents.
            
               @param filename Name of file to open
               @param openMode One of \"Read\", \"Write\", \"ReadWrite\" or \"WriteAppend\"
            
               @tsexample
               // Create a file stream object for reading
               %fsObject = new FileStreamObject();
               // Open a file for reading
               %fsObject.open(\"./test.txt\", \"read\");
               // Get the status and print it
               %status = %fsObject.getStatus();
               echo(%status);
               // Always remember to close a file stream when finished
               %fsObject.close();
               @endtsexample
            
               @return True if the file was successfully opened, false if something went wrong
               
               @see close())
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.FlyingVehicleObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.FlyingVehicleObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.FlyingVehicleObject.useCreateHeight(System.String,System.Boolean)">
            <summary>
            @brief Set whether the vehicle should temporarily use the createHoverHeight 
               specified in the datablock.This can help avoid problems with spawning.
               @param enabled true to use the datablock createHoverHeight, false otherwise )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestObject.Forest_clear(System.String)">
            <summary>
            () )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestObject.Forest_isDirty(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestObject.Forest_regenCells(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestObject.Forest_saveDataFile(System.String,System.String)">
            <summary>
            saveDataFile( [path] ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestObject.addItem(System.String,System.String,WinterLeaf.Engine.Containers.Point3F,System.Single,System.Single)">
            <summary>
            .)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestObject.addItemWithTransform(System.String,System.String,WinterLeaf.Engine.Containers.TransformF,System.Single)">
            <summary>
            .)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestBrushObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestBrushObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestBrushObject.ForestBrush_containsItemData(System.String,System.String)">
            <summary>
            ( ForestItemData obj ) )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestBrushToolObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestBrushToolObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestBrushToolObject.ForestBrushTool_collectElements(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestEditorCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestEditorCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestEditorCtrlObject.ForestEditorCtrl_deleteMeshSafe(System.String,System.String)">
            <summary>
            ( ForestItemData obj ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestEditorCtrlObject.ForestEditorCtrl_getActiveTool(System.String)">
            <summary>
            () )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestEditorCtrlObject.ForestEditorCtrl_isDirty(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestEditorCtrlObject.ForestEditorCtrl_setActiveTool(System.String,System.String)">
            <summary>
            ( ForestTool tool ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestEditorCtrlObject.ForestEditorCtrl_updateActiveForest(System.String)">
            <summary>
            () )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestSelectionToolObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestSelectionToolObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestSelectionToolObject.ForestSelectionTool_clearSelection(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestSelectionToolObject.ForestSelectionTool_copySelection(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestSelectionToolObject.ForestSelectionTool_cutSelection(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestSelectionToolObject.ForestSelectionTool_deleteSelection(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestSelectionToolObject.ForestSelectionTool_getSelectionCount(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestSelectionToolObject.ForestSelectionTool_pasteSelection(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestWindEmitterObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestWindEmitterObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ForestWindEmitterObject.attachToObject(System.String,System.UInt32)">
            <summary>
            @brief Mounts the wind emitter to another scene object
            
               @param objectID Unique ID of the object wind emitter should attach to
               
               @tsexample
               // Wind emitter previously created and named %windEmitter
               // Going to attach it to the player, making him a walking wind storm
               %windEmitter.attachToObject(%player);
               @endtsexample)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameBaseObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameBaseObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameBaseObject.applyImpulse(System.String,WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            @brief Apply an impulse to this object as defined by a world position and velocity vector.
            
               @param pos impulse world position
               @param vel impulse velocity (impulse force F = m * v)
               @return Always true
            
               @note Not all objects that derrive from GameBase have this defined.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameBaseObject.applyRadialImpulse(System.String,WinterLeaf.Engine.Containers.Point3F,System.Single,System.Single)">
            <summary>
            @brief Applies a radial impulse to the object using the given origin and force.
            
               @param origin World point of origin of the radial impulse.
               @param radius The radius of the impulse area.
               @param magnitude The strength of the impulse.
               
               @note Not all objects that derrive from GameBase have this defined.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameBaseObject.getDataBlock(System.String)">
            <summary>
            @brief Get the datablock used by this object.
               @return the datablock this GameBase is using.
               @see setDataBlock())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameBaseObject.setDataBlock(System.String,System.String)">
            <summary>
            @brief Assign this GameBase to use the specified datablock.
               @param data new datablock to use
               @return true if successful, false if failed.
               @see getDataBlock())
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.activateGhosting(System.String)">
            <summary>
            @brief Called by the server during phase 2 of the mission download to start sending ghosts to the client.
               
               Ghosts represent objects on the server that are in scope for the client.  These need 
               to be synchronized with the client in order for the client to see and interact with them.  
               This is typically done during the standard mission start phase 2 when following Torque's 
               example mission startup sequence.
            
               @tsexample
               function serverCmdMissionStartPhase2Ack(%client, %seq, %playerDB)
               {
                  // Make sure to ignore calls from a previous mission load
                  if (%seq != $missionSequence || !$MissionRunning)
                     return;
                  if (%client.currentPhase != 1.5)
                     return;
                  %client.currentPhase = 2;
               
                  // Set the player datablock choice
                  %client.playerDB = %playerDB;
               
                  // Update mod paths, this needs to get there before the objects.
                  %client.transmitPaths();
               
                  // Start ghosting objects to the client
                  %client.activateGhosting();
               }
               @endtsexample
            
               @see @ref ghosting_scoping for a description of the ghosting system.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.chaseCam(System.String,System.Int32)">
            <summary>
            @brief Sets the size of the chase camera's matrix queue.
               @note This sets the queue size across all GameConnections.
               @note This is not currently hooked up.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.clearCameraObject(System.String)">
            <summary>
            @brief Clear the connection's camera object reference.
               
               @see GameConnection::setCameraObject() and GameConnection::getCameraObject())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.clearDisplayDevice(System.String)">
            <summary>
            @brief Clear any display device.
               A display device may define a number of properties that are used during rendering.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.delete(System.String,System.String)">
            <summary>
            ),
               @brief On the server, disconnect a client and pass along an optional reason why.
            
               This method performs two operations: it disconnects a client connection from the server, 
               and it deletes the connection object.  The optional reason is sent in the disconnect packet 
               and is often displayed to the user so they know why they've been disconnected.
               
               @param reason [optional] The reason why the user has been disconnected from the server.
               
               @tsexample
               function kick(%client)
               {
                  messageAll( 'MsgAdminForce', '\\c2The Admin has kicked %1.', %client.playerName);
               
                  if (!%client.isAIControlled())
                     BanList::add(%client.guid, %client.getAddress(), $Pref::Server::KickBanTime);
                  %client.delete(\"You have been kicked from this server\");
               }
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.getCameraObject(System.String)">
            <summary>
            @brief Returns the connection's camera object used when not viewing through the control object.
               
               @see GameConnection::setCameraObject() and GameConnection::clearCameraObject())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.getControlCameraDefaultFov(System.String)">
            <summary>
            @brief Returns the default field of view as used by the control object's camera.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.getControlCameraFov(System.String)">
            <summary>
            @brief Returns the field of view as used by the control object's camera.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.getControlObject(System.String)">
            <summary>
            @brief On the server, returns the object that the client is controlling.
               By default the control object is an instance of the Player class, but can also be an instance 
               of Camera (when editing the mission, for example), or any other ShapeBase derived class as 
               appropriate for the game.
               @see GameConnection::setControlObject())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.getControlSchemeAbsoluteRotation(System.String)">
            <summary>
            @brief Get the connection's control scheme absolute rotation property.
               
               @return True if the connection's control object should use an absolute rotation control scheme.
               @see GameConnection::setControlSchemeParameters())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.getDamageFlash(System.String)">
            <summary>
            @brief On the client, get the control object's damage flash level.
               @return flash level)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.getWhiteOut(System.String)">
            <summary>
            @brief On the client, get the control object's white-out level.
               @return white-out level)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.isAIControlled(System.String)">
            <summary>
            @brief Returns true if this connection is AI controlled.
               @see AIConnection)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.isControlObjectRotDampedCamera(System.String)">
            <summary>
            @brief Returns true if the object being controlled by the client is making use 
               of a rotation damped camera.
               @see Camera)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.isDemoPlaying(System.String)">
            <summary>
            @brief Returns true if a previously recorded demo file is now playing.
               
               @see GameConnection::playDemo())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.isDemoRecording(System.String)">
            <summary>
            @brief Returns true if a demo file is now being recorded.
               
               @see GameConnection::startRecording(), GameConnection::stopRecording())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.isFirstPerson(System.String)">
            <summary>
            @brief Returns true if this connection is in first person mode.
            
               @note Transition to first person occurs over time via mCameraPos, so this 
               won't immediately return true after a set.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.listClassIDs(System.String)">
            <summary>
            @brief List all of the classes that this connection knows about, and what their IDs are. Useful for debugging network problems.
               @note The list is sent to the console.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.LoadDatablocksFromFile(System.String,System.UInt32)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.play2D(System.String,System.String)">
            <summary>
            @brief Used on the server to play a 2D sound that is not attached to any object.
            
               @param profile The SFXProfile that defines the sound to play.
            
               @tsexample
               function ServerPlay2D(%profile)
               {
                  // Play the given sound profile on every client.
                  // The sounds will be transmitted as an event, not attached to any object.
                  for(%idx = 0; %idx  ClientGroup.getCount(); %idx++)
                     ClientGroup.getObject(%idx).play2D(%profile);
               }
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.play3D(System.String,System.String,WinterLeaf.Engine.Containers.TransformF)">
            <summary>
            @brief Used on the server to play a 3D sound that is not attached to any object.
               
               @param profile The SFXProfile that defines the sound to play.
               @param location The position and orientation of the 3D sound given in the form of \"x y z ax ay az aa\".
            
               @tsexample
               function ServerPlay3D(%profile,%transform)
               {
                  // Play the given sound profile at the given position on every client
                  // The sound will be transmitted as an event, not attached to any object.
                  for(%idx = 0; %idx  ClientGroup.getCount(); %idx++)
                     ClientGroup.getObject(%idx).play3D(%profile,%transform);
               }
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.playDemo(System.String,System.String)">
            <summary>
            @brief On the client, play back a previously recorded game session.
               
               It is often useful to play back a game session.  This could be for producing a 
               demo of the game that will be shown at a later time, or for debugging a game.  
               By recording the entire network stream it is possible to later play game the game 
               exactly as it unfolded during the actual play session.  This is because all user 
               control and server results pass through the connection.
            
               @returns True if the playback was successful.  False if there was an issue, such as 
               not being able to open the demo file for playback.
               
               @see GameConnection::startRecording(), GameConnection::stopRecording())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.resetGhosting(System.String)">
            <summary>
            @brief On the server, resets the connection to indicate that ghosting has been disabled.
            
               Typically when a mission has ended on the server, all connected clients are informed of this change 
               and their connections are reset back to a starting state.  This method resets a connection on the 
               server to indicate that ghosts are no longer being transmitted.  On the client end, all ghost 
               information will be deleted.
            
               @tsexample
                  // Inform the clients
                  for (%clientIndex = 0; %clientIndex  ClientGroup.getCount(); %clientIndex++)
                  {
                     // clear ghosts and paths from all clients
                     %cl = ClientGroup.getObject(%clientIndex);
                     %cl.endMission();
                     %cl.resetGhosting();
                     %cl.clearPaths();
                  }
               @endtsexample
            
               @see @ref ghosting_scoping for a description of the ghosting system.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.setBlackOut(System.String,System.Boolean,System.Int32)">
            <summary>
            @brief On the server, sets the client's 3D display to fade to black.
               @param doFade Set to true to fade to black, and false to fade from black.
               @param timeMS Time it takes to perform the fade as measured in ms.
               @note Not currently hooked up, and is not synchronized over the network.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.setCameraObject(System.String,System.String)">
            <summary>
            @brief On the server, set the connection's camera object used when not viewing 
               through the control object.
               
               @see GameConnection::getCameraObject() and GameConnection::clearCameraObject())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.setConnectArgs(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            (GameConnection, setConnectArgs, void, 3, 17,
               (const char* args) @brief On the client, pass along a variable set of parameters to the server.
               
               Once the connection is established with the server, the server calls its onConnect() method 
               with the client's passed in parameters as aruments.
               
               @see GameConnection::onConnect())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.setControlCameraFov(System.String,System.Single)">
            <summary>
            @brief On the server, sets the control object's camera's field of view.
               @param newFOV New field of view (in degrees) to force the control object's camera to use.  This value 
               is clamped to be within the range of 1 to 179 degrees.
               @note When transmitted over the network to the client, the resolution is limited to 
               one degree.  Any fraction is dropped.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.setControlObject(System.String,System.String)">
            <summary>
            @brief On the server, sets the object that the client will control.
               By default the control object is an instance of the Player class, but can also be an instance 
               of Camera (when editing the mission, for example), or any other ShapeBase derived class as 
               appropriate for the game.
               @param ctrlObj The GameBase object on the server to control.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.setControlSchemeParameters(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            @brief Set the control scheme that may be used by a connection's control object.
               
               @param absoluteRotation Use absolute rotation values from client, likely through ExtendedMove.
               @param addYawToAbsRot Add relative yaw control to the absolute rotation calculation.  Only useful when absoluteRotation is true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.setFirstPerson(System.String,System.Boolean)">
            <summary>
            @brief On the server, sets this connection into or out of first person mode.
               
               @param firstPerson Set to true to put the connection into first person mode.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.setJoinPassword(System.String,System.String)">
            <summary>
            @brief On the client, set the password that will be passed to the server.
                          
                          On the server, this password is compared with what is stored in $pref::Server::Password.  
                          If $pref::Server::Password is empty then the client's sent password is ignored.  Otherwise, 
                          if the passed in client password and the server password do not match, the CHR_PASSWORD 
                          error string is sent back to the client and the connection is immediately terminated.
                          
                          This password checking is performed quite early on in the connection request process so as 
                          to minimize the impact of multiple failed attempts -- also known as hacking.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.setMissionCRC(System.String,System.Int32)">
            <summary>
            @brief On the server, transmits the mission file's CRC value to the client.
            
               Typically, during the standard mission start phase 1, the mission file's CRC value 
               on the server is send to the client.  This allows the client to determine if the mission 
               has changed since the last time it downloaded this mission and act appropriately, such as 
               rebuilt cached lightmaps.
            
               @param CRC The mission file's CRC value on the server.
            
               @tsexample
               function serverCmdMissionStartPhase1Ack(%client, %seq)
               {
                  // Make sure to ignore calls from a previous mission load
                  if (%seq != $missionSequence || !$MissionRunning)
                     return;
                  if (%client.currentPhase != 0)
                     return;
                  %client.currentPhase = 1;
               
                  // Start with the CRC
                  %client.setMissionCRC( $missionCRC );
               
                  // Send over the datablocks...
                  // OnDataBlocksDone will get called when have confirmation
                  // that they've all been received.
                  %client.transmitDataBlocks($missionSequence);
               }
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.startRecording(System.String,System.String)">
            <summary>
            @brief On the client, starts recording the network connection's traffic to a demo file.
               
               It is often useful to play back a game session.  This could be for producing a 
               demo of the game that will be shown at a later time, or for debugging a game.  
               By recording the entire network stream it is possible to later play game the game 
               exactly as it unfolded during the actual play session.  This is because all user 
               control and server results pass through the connection.
               
               @param fileName The file name to use for the demo recording.
               
               @see GameConnection::stopRecording(), GameConnection::playDemo())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.stopRecording(System.String)">
            <summary>
            @brief On the client, stops the recording of a connection's network traffic to a file.
               
               @see GameConnection::startRecording(), GameConnection::playDemo())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GameConnectionObject.transmitDataBlocks(System.String,System.Int32)">
            <summary>
            @brief Sent by the server during phase 1 of the mission download to send the datablocks to the client.
               
               SimDataBlocks, also known as just datablocks, need to be transmitted to the client 
               prior to the client entering the game world.  These represent the static data that 
               most objects in the world reference.  This is typically done during the standard 
               mission start phase 1 when following Torque's example mission startup sequence.
            
               When the datablocks have all been transmitted, onDataBlocksDone() is called to move 
               the mission start process to the next phase.
            
               @param sequence The sequence is common between the server and client and ensures 
               that the client is acting on the most recent mission start process.  If an errant 
               network packet (one that was lost but has now been found) is received by the client 
               with an incorrect sequence, it is just ignored.  This sequence number is updated on 
               the server every time a mission is loaded.
            
               @tsexample
               function serverCmdMissionStartPhase1Ack(%client, %seq)
               {
                  // Make sure to ignore calls from a previous mission load
                  if (%seq != $missionSequence || !$MissionRunning)
                     return;
                  if (%client.currentPhase != 0)
                     return;
                  %client.currentPhase = 1;
               
                  // Start with the CRC
                  %client.setMissionCRC( $missionCRC );
               
                  // Send over the datablocks...
                  // OnDataBlocksDone will get called when have confirmation
                  // that they've all been received.
                  %client.transmitDataBlocks($missionSequence);
               }
               @endtsexample
               
               @see GameConnection::onDataBlocksDone())
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GroundPlaneObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GroundPlaneObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GroundPlaneObject.postApply(System.String)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               Force trigger an inspectPostApply. This will transmit 
                               material and other fields to client objects.
                               )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoCompleteCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoCompleteCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoCompleteCtrlObject.add(System.String,System.String,System.String,System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, add, void, 3, 5, (string name, int idNum, int scheme=0))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoCompleteCtrlObject.addScheme(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, addScheme, void, 6, 6, (int id, ColorI fontColor, ColorI fontColorHL, ColorI fontColorSEL))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoCompleteCtrlObject.changeTextById(System.String,System.String,System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, changeTextById, void, 4, 4, ( int id, string text ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoCompleteCtrlObject.clear(System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, clear, void, 2, 2, Clear the popup list.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoCompleteCtrlObject.clearEntry(System.String,System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, clearEntry, void, 3, 3, (S32 entry))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoCompleteCtrlObject.findText(System.String,System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, findText, S32, 3, 3, (string text)
                          Returns the position of the first entry containing the specified text.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoCompleteCtrlObject.forceClose(System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, forceClose, void, 2, 2, )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoCompleteCtrlObject.forceOnAction(System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, forceOnAction, void, 2, 2, )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoCompleteCtrlObject.getSelected(System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, getSelected, S32, 2, 2, )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoCompleteCtrlObject.getText(System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, getText, void, 2, 2, )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoCompleteCtrlObject.getTextById(System.String,System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, getTextById, const char*, 3, 3,  (int id))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoCompleteCtrlObject.replaceText(System.String,System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, replaceText, void, 3, 3, (bool doReplaceText))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoCompleteCtrlObject.setEnumContent(System.String,System.String,System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, setEnumContent, void, 4, 4, (string class, string enum)
                          This fills the popup with a classrep's field enumeration type info.
                          More of a helper function than anything.   If console access to the field list is added, 
                          at least for the enumerated types, then this should go away..)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoCompleteCtrlObject.setFirstSelected(System.String,System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, setFirstSelected, void, 2, 3, ([scriptCallback=true]))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoCompleteCtrlObject.setNoneSelected(System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, setNoneSelected, void, 2, 2, )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoCompleteCtrlObject.setSelected(System.String,System.String,System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, setSelected, void, 3, 4, (int id, [scriptCallback=true]))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoCompleteCtrlObject.size(System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, size, S32, 2, 2, Get the size of the menu - the number of entries in it.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoCompleteCtrlObject.sort(System.String)">
            <summary>
            (GuiAutoCompleteCtrl, sort, void, 2, 2, Sort the list alphabetically.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoCompleteCtrlObject.sortID(System.String)">
            <summary>
            (GuiAutoCompleteCtrl, sortID, void, 2, 2, Sort the list by ID.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoScrollCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoScrollCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiAutoScrollCtrlObject.reset(System.String)">
            <summary>
            Reset scrolling. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiBitmapButtonCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiBitmapButtonCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiBitmapButtonCtrlObject.setBitmap(System.String,System.String)">
            <summary>
            Set the bitmap to show on the button.
               @param path Path to the texture file in any of the supported formats. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiBitmapCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiBitmapCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiBitmapCtrlObject.GuiBitmapCtrl_setBitmap(System.String,System.String,System.Boolean)">
            <summary>
            ( String filename | String filename, bool resize ) Assign an image to the control.
               @hide )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiBitmapCtrlObject.setValue(System.String,System.Int32,System.Int32)">
            <summary>
            Set the offset of the bitmap within the control.
               @param x The x-axis offset of the image.
               @param y The y-axis offset of the image.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiButtonBaseCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiButtonBaseCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiButtonBaseCtrlObject.getText(System.String)">
            <summary>
            Get the text display on the button's label (if any).
               @return The button's label. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiButtonBaseCtrlObject.performClick(System.String)">
            <summary>
            Simulate a click on the button.
               This method will trigger the button's action just as if the button had been pressed by the 
               user. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiButtonBaseCtrlObject.resetState(System.String)">
            <summary>
            Reset the mousing state of the button.
               This method should not generally be called. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiButtonBaseCtrlObject.setStateOn(System.String,System.Boolean)">
            <summary>
            For toggle or radio buttons, set whether the button is currently activated or not.  For radio buttons, 
               toggling a button on will toggle all other radio buttons in its group to off.
               @param isOn If true, the button will be toggled on (if not already); if false, it will be toggled off.
               @note Toggling the state of a button with this method will em>not/em> not trigger the action associated with the 
                  button.  To do that, use performClick(). )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiButtonBaseCtrlObject.setText(System.String,System.String)">
            <summary>
            Set the text displayed on the button's label.
               @param text The text to display as the button's text label.
               @note Not all buttons render text labels.
               @see getText
               @see setTextID )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiButtonBaseCtrlObject.setTextID(System.String,System.String)">
            <summary>
            Set the text displayed on the button's label using a string from the string table 
               assigned to the control.
               @param id Name of the variable that contains the integer string ID.  Used to look up 
                  string in table.
               @note Not all buttons render text labels.
               @see setText
               @see getText
               @see GuiControl::langTableMod
               @see LangTable
               @ref Gui_i18n )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.GuiCanvas_isFullscreen(System.String)">
            <summary>
            () - Is this canvas currently fullscreen? )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.GuiCanvas_isMaximized(System.String)">
            <summary>
            () )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.GuiCanvas_isMinimized(System.String)">
            <summary>
            () )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.GuiCanvas_maximizeWindow(System.String)">
            <summary>
            () - maximize this canvas' window. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.GuiCanvas_minimizeWindow(System.String)">
            <summary>
            () - minimize this canvas' window. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.GuiCanvas_popDialog(System.String,System.String)">
            <summary>
            (GuiControl ctrl=NULL)
            			  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.GuiCanvas_popLayer(System.String,System.Int32)">
            <summary>
            (int layer) 
            			  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.GuiCanvas_pushDialog(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            (GuiControl ctrl, int layer=0, bool center=false)
            			  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.GuiCanvas_restoreWindow(System.String)">
            <summary>
            () - restore this canvas' window. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.GuiCanvas_setCursorPos(System.String,WinterLeaf.Engine.Containers.Point2I)">
            <summary>
            (Point2I pos)
            			  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.GuiCanvas_setFocus(System.String)">
            <summary>
            () - Claim OS input focus for this canvas' window.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.GuiCanvas_setVideoMode(System.String,System.UInt32,System.UInt32,System.Boolean,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            (int width, int height, bool fullscreen, [int bitDepth], [int refreshRate], [int antialiasLevel] )
                           Change the video mode of this canvas. This method has the side effect of setting the $pref::Video::mode to the new values.
                           \\param width The screen width to set.
                           \\param height The screen height to set.
                           \\param fullscreen Specify true to run fullscreen or false to run in a window
                           \\param bitDepth [optional] The desired bit-depth. Defaults to the current setting. This parameter is ignored if you are running in a window.
                           \\param refreshRate [optional] The desired refresh rate. Defaults to the current setting. This parameter is ignored if you are running in a window
            					\\param antialiasLevel [optional] The level of anti-aliasing to apply 0 = none )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.clientToScreen(System.String,WinterLeaf.Engine.Containers.Point2I)">
            <summary>
            Translate a coordinate from canvas window-space to screen-space.
               @param coordinate The coordinate in window-space.
               @return The given coordinate translated to screen-space. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.cursorOff(System.String)">
            <summary>
            @brief Turns on the mouse off.
            				   @tsexample
            				   Canvas.cursorOff();
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.cursorOn(System.String)">
            <summary>
            @brief Turns on the mouse cursor.
            				   @tsexample
            				   Canvas.cursorOn();
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.findFirstMatchingMonitor(System.String,System.String)">
            <summary>
            @brief Find the first monitor index that matches the given name.
                           The actual match algorithm depends on the implementation.
                           @param name The name to search for.
            				   @return The number of monitors attached to the system, including the default monoitor.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.getContent(System.String)">
            <summary>
            @brief Get the GuiControl which is being used as the content.
            
            				   @tsexample
            				   Canvas.getContent();
            				   @endtsexample
            
            				   @return ID of current content control)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.getCursorPos(System.String)">
            <summary>
            @brief Get the current position of the cursor.
            				   @param param Description
            				   @tsexample
            				   %cursorPos = Canvas.getCursorPos();
            				   @endtsexample
            				   @return Screen coordinates of mouse cursor, in format \"X Y\")
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.getExtent(System.String)">
            <summary>
            @brief Returns the dimensions of the canvas
            
            				   @tsexample
            				   %extent = Canvas.getExtent();
            				   @endtsexample
            
            				   @return Width and height of canvas. Formatted as numerical values in a single string \"# #\")
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.getMode(System.String,System.Int32)">
            <summary>
            @brief Gets information on the specified mode of this device.
            				   @param modeId Index of the mode to get data from.
            				   @return A video mode string given an adapter and mode index.
            				   @see GuiCanvas::getVideoMode())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.getModeCount(System.String)">
            <summary>
            @brief Gets the number of modes available on this device.
            
            				   @param param Description
            
            				   @tsexample
            				   %modeCount = Canvas.getModeCount()
            				   @endtsexample
            
            				   @return The number of video modes supported by the device)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.getMonitorCount(System.String)">
            <summary>
            @brief Gets the number of monitors attached to the system.
            
            				   @return The number of monitors attached to the system, including the default monoitor.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.getMonitorName(System.String,System.Int32)">
            <summary>
            @brief Gets the name of the requested monitor.
                           @param index The monitor index.
            				   @return The name of the requested monitor.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.getMonitorRect(System.String,System.Int32)">
            <summary>
            @brief Gets the region of the requested monitor.
                           @param index The monitor index.
            				   @return The rectangular region of the requested monitor.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.getMouseControl(System.String)">
            <summary>
            @brief Gets the gui control under the mouse.
            				   @tsexample
            				   %underMouse = Canvas.getMouseControl();
            				   @endtsexample
            
            				   @return ID of the gui control, if one was found. NULL otherwise)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.getVideoMode(System.String)">
            <summary>
            @brief Gets the current screen mode as a string.
            
            				   The return string will contain 5 values (width, height, fullscreen, bitdepth, refreshRate). 
            				   You will need to parse out each one for individual use.
            
            				   @tsexample
            				   %screenWidth = getWord(Canvas.getVideoMode(), 0);
            				   %screenHeight = getWord(Canvas.getVideoMode(), 1);
            				   %isFullscreen = getWord(Canvas.getVideoMode(), 2);
            				   %bitdepth = getWord(Canvas.getVideoMode(), 3);
            				   %refreshRate = getWord(Canvas.getVideoMode(), 4);
            				   @endtsexample
            
            				   @return String formatted with screen width, screen height, screen mode, bit depth, and refresh rate.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.getWindowPosition(System.String)">
            <summary>
            Get the current position of the platform window associated with the canvas.
               @return The window position of the canvas in screen-space. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.hideCursor(System.String)">
            <summary>
            @brief Disable rendering of the cursor.
            
            				   @tsexample
            				   Canvas.hideCursor();
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.hideWindow(System.String)">
            <summary>
            ( GuiCanvas, hideWindow, void, 2, 2,  )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.isCursorOn(System.String)">
            <summary>
            @brief Determines if mouse cursor is enabled.
            
            				   @tsexample
            				   // Is cursor on?
            				   if(Canvas.isCursorOn())
            				   	echo(\"Canvas cursor is on\");
            				   @endtsexample
            				   @return Returns true if the cursor is on.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.isCursorShown(System.String)">
            <summary>
            @brief Determines if mouse cursor is rendering.
            
            				   @tsexample
            				   // Is cursor rendering?
            				   if(Canvas.isCursorShown())
            				   	echo(\"Canvas cursor is rendering\");
            				   @endtsexample
            				   @return Returns true if the cursor is rendering.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.renderFront(System.String,System.Boolean)">
            <summary>
            @brief This turns on/off front-buffer rendering.
            
            				   @param enable True if all rendering should be done to the front buffer
            
            				   @tsexample
            				   Canvas.renderFront(false);
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.repaint(System.String,System.Int32)">
            <summary>
            @brief Force canvas to redraw.
                           If the elapsed time is greater than the time since the last paint 
                           then the repaint will be skipped.
                           @param elapsedMS The optional elapsed time in milliseconds.
            
            				   @tsexample
            				   Canvas.repaint();
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.reset(System.String)">
            <summary>
            @brief Reset the update regions for the canvas.
            
            				   @tsexample
            				   Canvas.reset();
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.screenToClient(System.String,WinterLeaf.Engine.Containers.Point2I)">
            <summary>
            Translate a coordinate from screen-space to canvas window-space.
               @param coordinate The coordinate in screen-space.
               @return The given coordinate translated to window-space. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.setContent(System.String,System.String)">
            <summary>
            @brief Set the content of the canvas to a specified control.
            
            				   @param ctrl ID or name of GuiControl to set content to
            
            				   @tsexample
            				   Canvas.setContent(PlayGui);
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.setCursor(System.String,System.String)">
            <summary>
            @brief Sets the cursor for the canvas.
            
            				   @param cursor Name of the GuiCursor to use
            
            				   @tsexample
            				   Canvas.setCursor(\"DefaultCursor\");
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.setPopupShown(System.String,System.Boolean)">
            <summary>
            (bool shown) - Enabled when a context menu/popup menu is shown.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.setWindowPosition(System.String,WinterLeaf.Engine.Containers.Point2I)">
            <summary>
            Set the position of the platform window associated with the canvas.
               @param position The new position of the window in screen-space. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.setWindowTitle(System.String,System.String)">
            <summary>
            @brief Change the title of the OS window.
            
            				   @param newTitle String containing the new name
            
            				   @tsexample
            				   Canvas.setWindowTitle(\"Documentation Rocks!\");
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.showCursor(System.String)">
            <summary>
            @brief Enable rendering of the cursor.
            
            				   @tsexample
            				   Canvas.showCursor();
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.showWindow(System.String)">
            <summary>
            ( GuiCanvas, showWindow, void, 2, 2,  )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCanvasObject.toggleFullscreen(System.String)">
            <summary>
            @brief toggle canvas from fullscreen to windowed mode or back.
            
            				   @tsexample
            				   // If we are in windowed mode, the following will put is in fullscreen
            				   Canvas.toggleFullscreen();
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCheckBoxCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCheckBoxCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCheckBoxCtrlObject.isStateOn(System.String)">
            <summary>
            Test whether the checkbox is currently checked.
               @return True if the checkbox is currently ticked, false otherwise. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiCheckBoxCtrlObject.setStateOn(System.String,System.Boolean)">
            <summary>
            Set whether the checkbox is ticked or not.
               @param newState If true the box will be checked, if false, it will be unchecked.
               @note This method will @b not trigger the command associated with the control.  To toggle the 
                  checkbox state as if the user had clicked the control, use performClick(). )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiChunkedBitmapCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiChunkedBitmapCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiChunkedBitmapCtrlObject.setBitmap(System.String,System.String)">
            <summary>
            @brief Set the image rendered in this control.
               @param filename The image name you want to set
               @tsexample
               ChunkedBitmap.setBitmap(\"images/background.png\");
               @endtsexample)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiClockHudObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiClockHudObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiClockHudObject.getTime(System.String)">
            <summary>
            Returns the current time, in seconds.
            													@return timeInseconds Current time, in seconds
            													@tsexample
            														// Get the current time from the GuiClockHud control
            														%timeInSeconds = %guiClockHud.getTime();
            													@endtsexample
            				  )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiClockHudObject.setReverseTime(System.String,System.Single)">
            <summary>
            @brief Sets a time for a countdown clock.
               												Setting the time like this will cause the clock to count backwards from the specified time.
            													@param timeInSeconds Time to set the clock, in seconds (IE: 00:02 would be 120)
            													@see setTime
            				  )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiClockHudObject.setTime(System.String,System.Single)">
            <summary>
            Sets the current base time for the clock.
            													@param timeInSeconds Time to set the clock, in seconds (IE: 00:02 would be 120)
            													@tsexample
            														// Define the time, in seconds
            														%timeInSeconds = 120;
            														// Change the time on the GuiClockHud control
            														%guiClockHud.setTime(%timeInSeconds);
            													@endtsexample
            				  )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiColorPickerCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiColorPickerCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiColorPickerCtrlObject.GuiColorPickerCtrl_getSelectorPos(System.String)">
            <summary>
            Gets the current position of the selector)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiColorPickerCtrlObject.GuiColorPickerCtrl_setSelectorPos(System.String,WinterLeaf.Engine.Containers.Point2I)">
            <summary>
            Sets the current position of the selector)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiColorPickerCtrlObject.GuiColorPickerCtrl_updateColor(System.String)">
            <summary>
            Forces update of pick color)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.GuiControl_getBounds(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.GuiControl_getValue(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.GuiControl_isActive(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.GuiControl_makeFirstResponder(System.String,System.Boolean)">
            <summary>
            (bool isFirst))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.GuiControl_setExtent(System.String,WinterLeaf.Engine.Containers.Point2F)">
            <summary>
             Set the width and height of the control.
               @hide )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.addGuiControl(System.String,System.String)">
            <summary>
            Add the given control as a child to this control.
               This is synonymous to calling SimGroup::addObject.
               @param control The control to add as a child.
               @note The control will retain its current position and size.
               @see SimGroup::addObject
               @ref GuiControl_Hierarchy )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.canChangeContextBackColor(System.String)">
            <summary>
            Returns if the control's background color can be changed in the game or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.canChangeContextFillColor(System.String)">
            <summary>
            Returns if the control's fill color can be changed in the game or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.canChangeContextFontColor(System.String)">
            <summary>
            Returns if the control's font color can be changed in the game or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.canChangeContextFontSize(System.String)">
            <summary>
            Returns if the control's font size can be changed in the game or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.canShowContextWindowSettings(System.String)">
            <summary>
            Returns if the control's window settings can be changed in the game or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.clearFirstResponder(System.String,System.Boolean)">
            <summary>
            Clear this control from being the first responder in its hierarchy chain.
               @param ignored Ignored.  Supported for backwards-compatibility. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.controlIsChild(System.String,System.String)">
            <summary>
            Test whether the given control is a direct or indirect child to this control.
               @param control The potential child control.
               @return True if the given control is a direct or indirect child to this control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.controlIsSibling(System.String,System.String)">
            <summary>
            Test whether the given control is a sibling of this control.
               @param control The potential sibling control.
               @return True if the given control is a sibling of this control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.findHitControl(System.String,System.Int32,System.Int32)">
            <summary>
            Find the topmost child control located at the given coordinates.
               @note Only children that are both visible and have the 'modal' flag set in their profile will be considered in the search.
               @param x The X coordinate in the control's own coordinate space.
               @param y The Y coordinate in the control's own coordinate space.
               @return The topmost child control at the given coordintes or the control on which the method was called if no matching child could be found.
               @see GuiControlProfile::modal
               @see findHitControls )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.findHitControls(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Find all visible child controls that intersect with the given rectangle.
               @note Invisible child controls will not be included in the search.
               @param x The X coordinate of the rectangle's upper left corner in the control's own coordinate space.
               @param y The Y coordinate of the rectangle's upper left corner in the control's own coordinate space.
               @param width The width of the search rectangle in pixels.
               @param height The height of the search rectangle in pixels.
               @return A space-separated list of the IDs of all visible control objects intersecting the given rectangle.
               @tsexample
               // Lock all controls in the rectangle at x=10 and y=10 and the extent width=100 and height=100.
               foreach$( %ctrl in %this.findHitControls( 10, 10, 100, 100 ) )
                  %ctrl.setLocked( true );
               @endtsexample
               @see findHitControl )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.getAlphaFadeTime(System.String)">
            <summary>
            Get the alpha fade time for the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.getAlphaValue(System.String)">
            <summary>
            Get the alpha for the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.getAspect(System.String)">
            <summary>
            Get the aspect ratio of the control's extents.
               @return The width of the control divided by its height.
               @see getExtent )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.getCenter(System.String)">
            <summary>
            Get the coordinate of the control's center point relative to its parent.
               @return The coordinate of the control's center point in parent-relative coordinates. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.getControlFontSize(System.String)">
            <summary>
            Sets the font size of a control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.getControlLock(System.String)">
            <summary>
            Returns if the control is locked or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.getControlTextureFile(System.String)">
            <summary>
            Returns the filename of the texture of the control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.getExtent(System.String)">
            <summary>
            Get the width and height of the control.
               @return A point structure containing the width of the control in x and the height in y. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.getFirstResponder(System.String)">
            <summary>
            Get the first responder set on this GuiControl tree.
               @return The first responder set on the control's subtree.
               @see isFirstResponder
               @see makeFirstResponder
               @see setFirstResponder
               @ref GuiControl_FirstResponders )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.getGlobalCenter(System.String)">
            <summary>
            Get the coordinate of the control's center point in coordinates relative to the root control in its control hierarchy.
               @Return the center coordinate of the control in root-relative coordinates. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.getGlobalPosition(System.String)">
            <summary>
            Get the position of the control relative to the root of the GuiControl hierarchy it is contained in.
               @return The control's current position in root-relative coordinates. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.getMaxExtent(System.String)">
            <summary>
            Get the maximum allowed size of the control.
               @return The maximum size to which the control can be shrunk.
               @see maxExtent )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.getMinExtent(System.String)">
            <summary>
            Get the minimum allowed size of the control.
               @return The minimum size to which the control can be shrunk.
               @see minExtent )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.getMouseOverAlphaValue(System.String)">
            <summary>
            Get the mouse over alpha for the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.getParent(System.String)">
            <summary>
            Get the immediate parent control of the control.
               @return The immediate parent GuiControl or 0 if the control is not parented to a GuiControl. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.getPosition(System.String)">
            <summary>
            Get the control's current position relative to its parent.
               @return The coordinate of the control in its parent's coordinate space. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.getRoot(System.String)">
            <summary>
            Get the canvas on which the control is placed.
               @return The canvas on which the control's hierarchy is currently placed or 0 if the control is not currently placed on a GuiCanvas.
               @see GuiControl_Hierarchy )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.getRootControl(System.String)">
            <summary>
            Get root control )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.isAwake(System.String)">
            <summary>
            Test whether the control is currently awake.
               If a control is awake it means that it is part of the GuiControl hierarchy of a GuiCanvas.
               @return True if the control is awake.
               @ref GuiControl_Waking )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.isContextAlphaEnabled(System.String)">
            <summary>
            Returns if the control's alpha value can be changed in the game or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.isContextAlphaFadeEnabled(System.String)">
            <summary>
            Returns if the control's alpha fade value can be changed in the game or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.isContextLockable(System.String)">
            <summary>
            Returns if the control can be locked in the game or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.isContextMouseOverAlphaEnabled(System.String)">
            <summary>
            Returns if the control's mouse-over alpha value can be changed in the game or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.isContextMovable(System.String)">
            <summary>
            Returns if the control can be moved in the game or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.isFirstResponder(System.String)">
            <summary>
            Test whether the control is the current first responder.
               @return True if the control is the current first responder.
               @see makeFirstResponder
               @see setFirstResponder
               @ref GuiControl_FirstResponders )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.isMouseLocked(System.String)">
            <summary>
            Indicates if the mouse is locked in this control.
               @return True if the mouse is currently locked. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.isVisible(System.String)">
            <summary>
            Test whether the control is currently set to be visible.
               @return True if the control is currently set to be visible.
               @note This method does not tell anything about whether the control is actually visible to 
                  the user at the moment.
               @ref GuiControl_VisibleActive )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.pointInControl(System.String,System.Int32,System.Int32)">
            <summary>
            Test whether the given point lies within the rectangle of the control.
               @param x X coordinate of the point in parent-relative coordinates.
               @param y Y coordinate of the point in parent-relative coordinates.
               @return True if the point is within the control, false if not.
               @see getExtent
               @see getPosition )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.refresh(System.String)">
            <summary>
            Recalculates the position and size of this control and all its children. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.resetCur(System.String)">
            <summary>
            Removes the plus cursor.
               @param ignored Ignored.  Supported for backwards-compatibility. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.resize(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resize and reposition the control using the give coordinates and dimensions.  Child controls 
               will resize according to their layout behaviors.
               @param x The new X coordinate of the control in its parent's coordinate space.
               @param y The new Y coordinate of the control in its parent's coordinate space.
               @param width The new width to which the control should be resized.
               @param height The new height to which the control should be resized. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setActive(System.String,System.Boolean)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setAlphaFadeTime(System.String,System.Int32)">
            <summary>
            Set the alpha for the object.
               @param value Range 0, 1 for the transparency. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setAlphaValue(System.String,System.Single)">
            <summary>
            Set the alpha for the object.
               @param value Range 0, 1 for the transparency. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setCenter(System.String,System.Int32,System.Int32)">
            <summary>
            Set the control's position by its center point.
               @param x The X coordinate of the new center point of the control relative to the control's parent.
               @param y The Y coordinate of the new center point of the control relative to the control's parent. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setContextAlpha(System.String,System.Boolean)">
            <summary>
            Displays the option to set the alpha of the control in the game when true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setContextAlphaFade(System.String,System.Boolean)">
            <summary>
            Displays the option to set the alpha fade value of the control in the game when true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setContextBackColor(System.String,System.Boolean)">
            <summary>
            Displays the option to set the background color of the control in the game when true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setContextFillColor(System.String,System.Boolean)">
            <summary>
            Displays the option to set the fill color of the control in the game when true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setContextFontColor(System.String,System.Boolean)">
            <summary>
            Displays the option to set the font color of the control in the game when true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setContextFontSize(System.String,System.Boolean)">
            <summary>
            Displays the option to set the font size of the control in the game when true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setContextLockControl(System.String,System.Boolean)">
            <summary>
            Displays the option to lock the control in the game when true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setContextMouseOverAlpha(System.String,System.Boolean)">
            <summary>
            Displays the option to set the mouse-over alpha of the control in the game when true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setContextMoveControl(System.String,System.Boolean)">
            <summary>
            Displays the option to move the control in the game when true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setControlBackgroundColor(System.String,WinterLeaf.Engine.Containers.ColorI)">
            <summary>
            Set control background color. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setControlFillColor(System.String,WinterLeaf.Engine.Containers.ColorI)">
            <summary>
            Set control fill color. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setControlFontColor(System.String,WinterLeaf.Engine.Containers.ColorI)">
            <summary>
            Set control font color. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setControlFontSize(System.String,System.Int32)">
            <summary>
            Sets the font size of a control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setControlLock(System.String,System.Boolean)">
            <summary>
            Lock the control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setControlTexture(System.String,System.String)">
            <summary>
            Set control texture. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setCur(System.String)">
            <summary>
            Sets the cursor as a plus.
               @param ignored Ignored.  Supported for backwards-compatibility. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setFirstResponder(System.String)">
            <summary>
            Make this control the current first responder.
               @note Only controls with a profile that has canKeyFocus enabled are able to become first responders.
               @see GuiControlProfile::canKeyFocus
               @see isFirstResponder
               @ref GuiControl_FirstResponders )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setMouseOverAlphaValue(System.String,System.Single)">
            <summary>
            Set the alpha for the object.
               @param value Range 0, 1 for the transparency. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setPosition(System.String,System.Int32,System.Int32)">
            <summary>
            Position the control in the local space of the parent control.
               @param x The new X coordinate of the control relative to its parent's upper left corner.
               @param y The new Y coordinate of the control relative to its parent's upper left corner. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setPositionGlobal(System.String,System.Int32,System.Int32)">
            <summary>
            Set position of the control relative to the root of the GuiControl hierarchy it is contained in.
               @param x The new X coordinate of the control relative to the root's upper left corner.
               @param y The new Y coordinate of the control relative to the root's upper left corner. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setProfile(System.String,System.String)">
            <summary>
            Set the control profile for the control to use.
               The profile used by a control determines a great part of its behavior and appearance.
               @param profile The new profile the control should use.
               @ref GuiControl_Profiles )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setShowContextWindowSettings(System.String,System.Boolean)">
            <summary>
            Displays the option to set the window settings of the control in the game when true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setValue(System.String,System.String)">
            <summary>
            Set the value associated with the control.
               @param value The new value for the control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.setVisible(System.String,System.Boolean)">
            <summary>
            Set whether the control is visible or not.
               @param state The new visiblity flag state for the control.
               @ref GuiControl_VisibleActive )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlObject.transparentControlCheck(System.String)">
            <summary>
            Returns true if the control is transparent. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlProfileObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlProfileObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiControlProfileObject.GuiControlProfile_getStringWidth(System.String,System.String)">
            <summary>
            ( pString ) )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiConvexEditorCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiConvexEditorCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiConvexEditorCtrlObject.GuiConvexEditorCtrl_dropSelectionAtScreenCenter(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiConvexEditorCtrlObject.GuiConvexEditorCtrl_handleDelete(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiConvexEditorCtrlObject.GuiConvexEditorCtrl_handleDeselect(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiConvexEditorCtrlObject.GuiConvexEditorCtrl_hasSelection(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiConvexEditorCtrlObject.GuiConvexEditorCtrl_hollowSelection(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiConvexEditorCtrlObject.GuiConvexEditorCtrl_recenterSelection(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiConvexEditorCtrlObject.GuiConvexEditorCtrl_selectConvex(System.String,System.String)">
            <summary>
            ( ConvexShape ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiConvexEditorCtrlObject.GuiConvexEditorCtrl_splitSelectedFace(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDecalEditorCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDecalEditorCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDecalEditorCtrlObject.GuiDecalEditorCtrl_deleteDecalDatablock(System.String,System.String)">
            <summary>
            deleteSelectedDecalDatablock( String datablock ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDecalEditorCtrlObject.GuiDecalEditorCtrl_deleteSelectedDecal(System.String)">
            <summary>
            deleteSelectedDecal() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDecalEditorCtrlObject.GuiDecalEditorCtrl_editDecalDetails(System.String,System.UInt32,WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F,System.Single)">
            <summary>
            editDecalDetails( S32 )() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDecalEditorCtrlObject.GuiDecalEditorCtrl_getDecalCount(System.String)">
            <summary>
            getDecalCount() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDecalEditorCtrlObject.GuiDecalEditorCtrl_getDecalLookupName(System.String,System.UInt32)">
            <summary>
            getDecalLookupName( S32 )() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDecalEditorCtrlObject.GuiDecalEditorCtrl_getDecalTransform(System.String,System.UInt32)">
            <summary>
            getDecalTransform() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDecalEditorCtrlObject.GuiDecalEditorCtrl_getMode(System.String)">
            <summary>
            getMode() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDecalEditorCtrlObject.GuiDecalEditorCtrl_getSelectionCount(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDecalEditorCtrlObject.GuiDecalEditorCtrl_retargetDecalDatablock(System.String,System.String,System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDecalEditorCtrlObject.GuiDecalEditorCtrl_selectDecal(System.String,System.UInt32)">
            <summary>
            selectDecal( S32 )() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDecalEditorCtrlObject.GuiDecalEditorCtrl_setMode(System.String,System.String)">
            <summary>
            setMode( String mode )() )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDirectoryFileListCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDirectoryFileListCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDirectoryFileListCtrlObject.getSelectedFile(System.String)">
            <summary>
            Get the currently selected filename.
               @return The filename of the currently selected file )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDirectoryFileListCtrlObject.getSelectedFiles(System.String)">
            <summary>
            Get the list of selected files.
               @return A space separated list of selected files )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDirectoryFileListCtrlObject.reload(System.String)">
            <summary>
            Update the file list. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDirectoryFileListCtrlObject.setFilter(System.String,System.String)">
            <summary>
            Set the file filter.
               @param filter Tab-delimited list of file name patterns. Only matched files will be displayed. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDirectoryFileListCtrlObject.setPath(System.String,System.String,System.String)">
            <summary>
            Set the search path and file filter.
               @param path   Path in game directory from which to list files.
               @param filter Tab-delimited list of file name patterns. Only matched files will be displayed. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDragAndDropControlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDragAndDropControlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDragAndDropControlObject.startDragging(System.String,System.Int32,System.Int32)">
            <summary>
            Start the drag operation.
               @param x X coordinate for the mouse pointer offset which the drag control should position itself.
               @param y Y coordinate for the mouse pointer offset which the drag control should position itself.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDynamicCtrlArrayControlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDynamicCtrlArrayControlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiDynamicCtrlArrayControlObject.refresh(System.String)">
            <summary>
            Recalculates the position and size of this control and all its children. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_addNewCtrl(System.String,System.String)">
            <summary>
            (GuiControl ctrl))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_addSelection(System.String,System.Int32)">
            <summary>
            selects a control.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_bringToFront(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_clearGuides(System.String,System.Int32)">
            <summary>
            ( [ int axis ] ) - Clear all currently set guide lines. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_clearSelection(System.String)">
            <summary>
            Clear selected controls list.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_deleteSelection(System.String)">
            <summary>
            () - Delete the selected controls.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_fitIntoParents(System.String,System.Boolean,System.Boolean)">
            <summary>
            ( bool width=true, bool height=true ) - Fit selected controls into their parents. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_getContentControl(System.String)">
            <summary>
            () - Return the toplevel control edited inside the GUI editor. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_getCurrentAddSet(System.String)">
            <summary>
            Returns the set to which new controls will be added)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_getMouseMode(System.String)">
            <summary>
            () - Return the current mouse mode. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_getNumSelected(System.String)">
            <summary>
            () - Return the number of controls currently selected. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_getSelectionGlobalBounds(System.String)">
            <summary>
            () - Returns global bounds of current selection as vector 'x y width height'. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_justify(System.String,System.UInt32)">
            <summary>
            (int mode) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_loadSelection(System.String,System.String)">
            <summary>
            ( string fileName=null ) - Load selection from file or clipboard.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_moveSelection(System.String,WinterLeaf.Engine.Containers.Point2I)">
            <summary>
            Move all controls in the selection by (dx,dy) pixels.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_pushToBack(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_readGuides(System.String,System.String,System.Int32)">
            <summary>
            ( GuiControl ctrl [, int axis ] ) - Read the guides from the given control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_removeSelection(System.String,System.Int32)">
            <summary>
            deselects a control.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_saveSelection(System.String,System.String)">
            <summary>
            ( string fileName=null ) - Save selection to file or clipboard.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_select(System.String,System.String)">
            <summary>
            (GuiControl ctrl))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_selectAll(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_selectChildren(System.String,System.Boolean)">
            <summary>
            ( bool addToSelection=false ) - Select children of currently selected controls. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_selectParents(System.String,System.Boolean)">
            <summary>
            ( bool addToSelection=false ) - Select parents of currently selected controls. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_setContentControl(System.String,System.String)">
            <summary>
            ( GuiControl ctrl ) - Set the toplevel control to edit in the GUI editor. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_setCurrentAddSet(System.String,System.String)">
            <summary>
            (GuiControl ctrl))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_setSnapToGrid(System.String,System.UInt32)">
            <summary>
            GuiEditCtrl.setSnapToGrid(gridsize))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_toggle(System.String)">
            <summary>
            Toggle activation.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.GuiEditCtrl_writeGuides(System.String,System.String,System.Int32)">
            <summary>
            ( GuiControl ctrl [, int axis ] ) - Write the guides to the given control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.getSelection(System.String)">
            <summary>
            Gets the set of GUI controls currently selected in the editor. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiEditCtrlObject.getTrash(System.String)">
            <summary>
            Gets the GUI controls(s) that are currently in the trash.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFileTreeCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFileTreeCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFileTreeCtrlObject.GuiFileTreeCtrl_getSelectedPath(System.String)">
            <summary>
            getSelectedPath() - returns the currently selected path in the tree)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFileTreeCtrlObject.GuiFileTreeCtrl_reload(System.String)">
            <summary>
            () - Reread the directory tree hierarchy. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFileTreeCtrlObject.GuiFileTreeCtrl_setSelectedPath(System.String,System.String)">
            <summary>
            setSelectedPath(path) - expands the tree to the specified path)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFilterCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFilterCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFilterCtrlObject.GuiFilterCtrl_getValue(System.String)">
            <summary>
            Return a tuple containing all the values in the filter.
            			  @internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFilterCtrlObject.GuiFilterCtrl_identity(System.String)">
            <summary>
            Reset the filtering.
            			  @internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFilterCtrlObject.setValue(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( GuiFilterCtrl, setValue, void, 3, 20, (f1, f2, ...)
                          Reset the filter to use the specified points, spread equidistantly across the domain.
            			  @internal)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFormCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFormCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFormCtrlObject.getMenuID(System.String)">
            <summary>
            Get the ID of this form's menu.
               @return The ID of the form menu )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFormCtrlObject.setCaption(System.String,System.String)">
            <summary>
            Sets the title of the form.
               @param caption Form caption )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFrameSetCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFrameSetCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFrameSetCtrlObject.addColumn(System.String)">
            <summary>
            Add a new column. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFrameSetCtrlObject.addRow(System.String)">
            <summary>
            Add a new row. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFrameSetCtrlObject.frameBorder(System.String,System.Int32,System.String)">
            <summary>
            dynamic ),
               Override the i>borderEnable/i> setting for this frame.
               @param index  Index of the frame to modify
               @param state  New borderEnable state: \"on\", \"off\" or \"dynamic\" )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFrameSetCtrlObject.frameMinExtent(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the minimum width and height for the frame. It will not be possible 
               for the user to resize the frame smaller than this.
               @param index  Index of the frame to modify
               @param width  Minimum width in pixels
               @param height Minimum height in pixels )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFrameSetCtrlObject.frameMovable(System.String,System.Int32,System.String)">
            <summary>
            dynamic ),
               Override the i>borderMovable/i> setting for this frame.
               @param index  Index of the frame to modify
               @param state  New borderEnable state: \"on\", \"off\" or \"dynamic\" )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFrameSetCtrlObject.framePadding(System.String,System.Int32,WinterLeaf.Engine.Containers.RectSpacingI)">
            <summary>
            Set the padding for this frame. Padding introduces blank space on the inside 
               edge of the frame.
               @param index     Index of the frame to modify
               @param padding   Frame top, bottom, left, and right padding )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFrameSetCtrlObject.getColumnCount(System.String)">
            <summary>
            Get the number of columns.
               @return The number of columns )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFrameSetCtrlObject.getColumnOffset(System.String,System.Int32)">
            <summary>
            Get the horizontal offset of a column.
               @param index Index of the column to query
               @return Column offset in pixels )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFrameSetCtrlObject.getFramePadding(System.String,System.Int32)">
            <summary>
            Get the padding for this frame.
               @param index     Index of the frame to query )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFrameSetCtrlObject.getRowCount(System.String)">
            <summary>
            Get the number of rows.
               @return The number of rows )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFrameSetCtrlObject.getRowOffset(System.String,System.Int32)">
            <summary>
            Get the vertical offset of a row.
               @param index Index of the row to query
               @return Row offset in pixels )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFrameSetCtrlObject.removeColumn(System.String)">
            <summary>
            Remove the last (rightmost) column. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFrameSetCtrlObject.removeRow(System.String)">
            <summary>
            Remove the last (bottom) row. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFrameSetCtrlObject.setColumnOffset(System.String,System.Int32,System.Int32)">
            <summary>
            Set the horizontal offset of a column.
               Note that column offsets must always be in increasing order, and therefore 
               this offset must be between the offsets of the colunns either side.
               @param index  Index of the column to modify
               @param offset New column offset )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFrameSetCtrlObject.setRowOffset(System.String,System.Int32,System.Int32)">
            <summary>
            Set the vertical offset of a row.
               Note that row offsets must always be in increasing order, and therefore 
               this offset must be between the offsets of the rows either side.
               @param index  Index of the row to modify
               @param offset New row offset )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiFrameSetCtrlObject.updateSizes(System.String)">
            <summary>
            Recalculates child control sizes. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGameListMenuCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGameListMenuCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGameListMenuCtrlObject.activateRow(System.String)">
            <summary>
            Activates the current row. The script callback of  the current row will be called (if it has one). )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGameListMenuCtrlObject.addRow(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Add a row to the list control.
               @param label The text to display on the row as a label.
               @param callback Name of a script function to use as a callback when this row is activated.
               @param icon [optional] Index of the icon to use as a marker.
               @param yPad [optional] An extra amount of height padding before the row. Does nothing on the first row.
               @param useHighlightIcon [optional] Does this row use the highlight icon?.
               @param enabled [optional] If this row is initially enabled. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGameListMenuCtrlObject.getRowCount(System.String)">
            <summary>
            Gets the number of rows on the control.
               @return (int) The number of rows on the control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGameListMenuCtrlObject.getRowLabel(System.String,System.Int32)">
            <summary>
            Gets the label displayed on the specified row.
               @param row Index of the row to get the label of.
               @return The label for the row. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGameListMenuCtrlObject.getSelectedRow(System.String)">
            <summary>
            Gets the index of the currently selected row.
               @return Index of the selected row. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGameListMenuCtrlObject.isRowEnabled(System.String,System.Int32)">
            <summary>
            Determines if the specified row is enabled or disabled.
               @param row The row to set the enabled status of.
               @return True if the specified row is enabled. False if the row is not enabled or the given index was not valid. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGameListMenuCtrlObject.setRowEnabled(System.String,System.Int32,System.Boolean)">
            <summary>
            Sets a row's enabled status according to the given parameters.
               @param row The index to check for validity.
               @param enabled Indicate true to enable the row or false to disable it. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGameListMenuCtrlObject.setRowLabel(System.String,System.Int32,System.String)">
            <summary>
            Sets the label on the given row.
               @param row Index of the row to set the label on.
               @param label Text to set as the label of the row. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGameListMenuCtrlObject.setSelected(System.String,System.Int32)">
            <summary>
            Sets the selected row. Only rows that are enabled can be selected.
               @param row Index of the row to set as selected. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGameListOptionsCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGameListOptionsCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGameListOptionsCtrlObject.addRow(System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Add a row to the list control.
               @param label The text to display on the row as a label.
               @param options A tab separated list of options.
               @param wrapOptions Specify true to allow options to wrap at each end or false to prevent wrapping.
               @param callback Name of a script function to use as a callback when this row is activated.
               @param icon [optional] Index of the icon to use as a marker.
               @param yPad [optional] An extra amount of height padding before the row. Does nothing on the first row.
               @param enabled [optional] If this row is initially enabled. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGameListOptionsCtrlObject.getCurrentOption(System.String,System.Int32)">
            <summary>
            Gets the text for the currently selected option of the given row.
               @param row Index of the row to get the option from.
               @return A string representing the text currently displayed as the selected option on the given row. If there is no such displayed text then the empty string is returned. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGameListOptionsCtrlObject.selectOption(System.String,System.Int32,System.String)">
            <summary>
            Set the row's current option to the one specified
               @param row Index of the row to set an option on.
               @param option The option to be made active.
               @return True if the row contained the option and was set, false otherwise. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGameListOptionsCtrlObject.setOptions(System.String,System.Int32,System.String)">
            <summary>
            Sets the list of options on the given row.
               @param row Index of the row to set options on.
               @param optionsList A tab separated list of options for the control. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGradientCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGradientCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGradientCtrlObject.GuiGradientCtrl_getColor(System.String,System.Int32)">
            <summary>
            Get color value)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGradientCtrlObject.GuiGradientCtrl_getColorCount(System.String)">
            <summary>
            Get color count)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGraphCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGraphCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGraphCtrlObject.addAutoPlot(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Sets up the given plotting curve to automatically plot the value of the @a variable with a 
               frequency of @a updateFrequency.
               @param plotId Index of the plotting curve.  Must be 0=plotId6.
               @param variable Name of the global variable.
               @param updateFrequency Frequency with which to add new data points to the plotting curve (in milliseconds).
               @tsexample
               // Plot FPS counter at 1 second intervals.
               %graph.addAutoPlot( 0, \"fps::real\", 1000 );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGraphCtrlObject.addDatum(System.String,System.Int32,System.Single)">
            <summary>
            Add a data point to the plot's curve.
               @param plotId Index of the plotting curve to which to add the data point.  Must be 0=plotId6.
               @param value Value of the data point to add to the curve.
               @note Data values are added to the @b left end of the plotting curve.
               @note A maximum number of 200 data points can be added to any single plotting curve at any one time.  If 
                  this limit is exceeded, data points on the right end of the curve are culled. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGraphCtrlObject.getDatum(System.String,System.Int32,System.Int32)">
            <summary>
            Get a data point on the given plotting curve.
               @param plotId Index of the plotting curve from which to fetch the data point.  Must be 0=plotId6.
               @param index Index of the data point on the curve.
               @return The value of the data point or -1 if @a plotId or @a index are out of range. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGraphCtrlObject.removeAutoPlot(System.String,System.Int32)">
            <summary>
            Stop automatic variable plotting for the given curve.
               @param plotId Index of the plotting curve.  Must be 0=plotId6. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiGraphCtrlObject.setGraphType(System.String,System.Int32,WinterLeaf.Engine.Enums.TypeGuiGraphType)">
            <summary>
            Change the charting type of the given plotting curve.
               @param plotId Index of the plotting curve.  Must be 0=plotId6.
               @param graphType Charting type to use for the curve.
               @note Instead of calling this method, you can directly assign to #plotType. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiIconButtonCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiIconButtonCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiIconButtonCtrlObject.setBitmap(System.String,System.String)">
            <summary>
            @brief Set the bitmap to use for the button portion of this control.
               @param buttonFilename Filename for the image
               @tsexample
               // Define the button filename
               %buttonFilename = \"pearlButton\";
               // Inform the GuiIconButtonCtrl control to update its main button graphic to the defined bitmap
               %thisGuiIconButtonCtrl.setBitmap(%buttonFilename);
               @endtsexample
               @see GuiControl
               @see GuiButtonCtrl)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiIdleCamFadeBitmapCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiIdleCamFadeBitmapCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiIdleCamFadeBitmapCtrlObject.GuiIdleCamFadeBitmapCtrl_fadeIn(System.String)">
            <summary>
            ()
            			  @internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiIdleCamFadeBitmapCtrlObject.GuiIdleCamFadeBitmapCtrl_fadeOut(System.String)">
            <summary>
            ()
            			  @internal)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiImageListObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiImageListObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiImageListObject.clear(System.String)">
            <summary>
            @brief Clears the imagelist
               @tsexample
               // Inform the GuiImageList control to clear itself.
               %isFinished = %thisGuiImageList.clear();
               @endtsexample
               @return Returns true when finished.
               @see SimObject)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiImageListObject.count(System.String)">
            <summary>
            @brief Gets the number of images in the list.
               @tsexample
               // Request the number of images from the GuiImageList control.
               %imageCount = %thisGuiImageList.count();
               @endtsexample
               @return Number of images in the control.
               @see SimObject)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiImageListObject.getImage(System.String,System.Int32)">
            <summary>
            @brief Get a path to the texture at the specified index.
               @param index Index of the image in the list.
               @tsexample
               // Define the image index/n
               %index = \"5\";
               // Request the image path location from the control.
               %imagePath = %thisGuiImageList.getImage(%index);
               @endtsexample
               @return File path to the image map for the specified index.
               @see SimObject)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiImageListObject.getIndex(System.String,System.String)">
            <summary>
            @brief Retrieves the imageindex of a specified texture in the list.
               @param imagePath Imagemap including filepath of image to search for
               @tsexample
               // Define the imagemap to search for
               %imagePath = \"./game/client/data/images/thisImage\";
               // Request the index entry for the defined imagemap
               %imageIndex = %thisGuiImageList.getIndex(%imagePath);
               @endtsexample
               @return Index of the imagemap matching the defined image path.
               @see SimObject)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiImageListObject.insert(System.String,System.String)">
            <summary>
            @brief Insert an image into imagelist- returns the image index or -1 for failure.
               @param imagePath Imagemap, with path, to add to the list.
               @tsexample
               // Define the imagemap to add to the list
               %imagePath = \"./game/client/data/images/thisImage\";
               // Request the GuiImageList control to add the defined image to its list.
               %imageIndex = %thisGuiImageList.insert(%imagePath);
               @endtsexample
               @return The index of the newly inserted imagemap, or -1 if the insertion failed.
               @see SimObject)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiImageListObject.remove(System.String,System.Int32)">
            <summary>
            @brief Removes an image from the list by index.
               @param index Image index to remove.
               @tsexample
               // Define the image index.
               %imageIndex = \"4\";
               // Inform the GuiImageList control to remove the image at the defined index.
               %wasSuccessful = %thisGuiImageList.remove(%imageIndex);
               @endtsexample
               @return True if the operation was successful, false if it was not.
               @see SimObject)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorObject.GuiInspector_addInspect(System.String,System.String,System.Boolean)">
            <summary>
            ( id object, (bool autoSync = true) ) - Add the object to the list of objects being inspected. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorObject.GuiInspector_apply(System.String)">
            <summary>
            apply() - Force application of inspected object's attributes )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorObject.GuiInspector_getInspectObject(System.String,System.UInt32)">
            <summary>
            getInspectObject( int index=0 ) - Returns currently inspected object )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorObject.GuiInspector_getNumInspectObjects(System.String)">
            <summary>
            () - Return the number of objects currently being inspected. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorObject.GuiInspector_inspect(System.String,System.String)">
            <summary>
            Inspect(Object))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorObject.GuiInspector_refresh(System.String)">
            <summary>
            Reinspect the currently selected object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorObject.GuiInspector_removeInspect(System.String,System.String)">
            <summary>
            ( id object ) - Remove the object from the list of objects being inspected. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorObject.GuiInspector_setName(System.String,System.String)">
            <summary>
            setName(NewObjectName))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorObject.GuiInspector_setObjectField(System.String,System.String,System.String)">
            <summary>
            setObjectField( fieldname, data ) - Set a named fields value on the inspected object if it exists. This triggers all the usual callbacks that would occur if the field had been changed through the gui. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorDynamicFieldObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorDynamicFieldObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorDynamicFieldObject.GuiInspectorDynamicField_renameField(System.String,System.String)">
            <summary>
            field.renameField(newDynamicFieldName); )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorDynamicGroupObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorDynamicGroupObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorDynamicGroupObject.GuiInspectorDynamicGroup_addDynamicField(System.String)">
            <summary>
            obj.addDynamicField(); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorDynamicGroupObject.GuiInspectorDynamicGroup_inspectGroup(System.String)">
            <summary>
            Refreshes the dynamic fields in the inspector.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorDynamicGroupObject.GuiInspectorDynamicGroup_removeDynamicField(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorFieldObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorFieldObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorFieldObject.GuiInspectorField_apply(System.String,System.String,System.Boolean)">
            <summary>
            , true), ( string newValue, bool callbacks=true ) - Set the field's value. Suppress callbacks for undo if callbacks=false. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorFieldObject.GuiInspectorField_applyWithoutUndo(System.String,System.String)">
            <summary>
            () - Set field value without recording undo (same as 'apply( value, false )'). )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorFieldObject.GuiInspectorField_getData(System.String)">
            <summary>
            () - Return the value currently displayed on the field. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorFieldObject.GuiInspectorField_getInspectedFieldName(System.String)">
            <summary>
            () - Return the name of the field edited by this inspector field. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorFieldObject.GuiInspectorField_getInspectedFieldType(System.String)">
            <summary>
            () - Return the type of the field edited by this inspector field. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorFieldObject.GuiInspectorField_getInspector(System.String)">
            <summary>
            () - Return the GuiInspector to which this field belongs. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorFieldObject.GuiInspectorField_reset(System.String)">
            <summary>
            () - Reset to default value. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorTypeBitMask32Object">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorTypeBitMask32Object.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorTypeBitMask32Object.applyBit(System.String)">
            <summary>
            ( GuiInspectorTypeBitMask32, applyBit, void, 2,2, apply(); )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorTypeFileNameObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorTypeFileNameObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiInspectorTypeFileNameObject.apply(System.String,System.String)">
            <summary>
            ( GuiInspectorTypeFileName, apply, void, 3,3, apply(newValue); )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.addFilteredItem(System.String,System.String)">
            <summary>
            @brief Checks if there is an item with the exact text of what is passed in, and if so
               the item is removed from the list and adds that item's data to the filtered list.
               @param itemName Name of the item that we wish to add to the filtered item list of the GuiListBoxCtrl.
               @tsexample
               // Define the itemName that we wish to add to the filtered item list.
               %itemName = \"This Item Name\";
               // Add the item name to the filtered item list.
               %thisGuiListBoxCtrl.addFilteredItem(%filteredItemName);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.addItem(System.String,System.String,System.String)">
            <summary>
             ),
               @brief Adds an item to the end of the list with an optional color.
               @param newItem New item to add to the list.
               @param color Optional color parameter to add to the new item.
               @tsexample
               // Define the item to add to the list.
               %newItem = \"Gideon's Blue Coat\";
               // Define the optional color for the new list item.
               %color = \"0.0 0.0 1.0\";
               // Inform the GuiListBoxCtrl object to add the item to the end of the list with the defined color.
               %thisGuiListBoxCtrl.addItem(%newItem,%color);
               @endtsexample
               @return If not void, return value and description
               @see GuiControl
               @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.clearItemColor(System.String,System.Int32)">
            <summary>
            @brief Removes any custom coloring from an item at the defined index id in the list.
               @param index Index id for the item to clear any custom color from.
               @tsexample
               // Define the index id
               %index = \"4\";
               // Request the GuiListBoxCtrl object to remove any custom coloring from the defined index entry
               %thisGuiListBoxCtrl.clearItemColor(%index);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.clearItems(System.String)">
            <summary>
            @brief Clears all the items in the listbox.
               @tsexample
               // Inform the GuiListBoxCtrl object to clear all items from its list.
               %thisGuiListBoxCtrl.clearItems();
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.clearSelection(System.String)">
            <summary>
            @brief Sets all currently selected items to unselected.
               Detailed description
               @tsexample
               // Inform the GuiListBoxCtrl object to set all of its items to unselected./n
               %thisGuiListBoxCtrl.clearSelection();
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.deleteItem(System.String,System.Int32)">
            <summary>
            @brief Removes the list entry at the requested index id from the control and clears the memory associated with it.
               @param itemIndex Index id location to remove the item from.
               @tsexample
               // Define the index id we want to remove from the list
               %itemIndex = \"8\";
               // Inform the GuiListBoxCtrl object to remove the item at the defined index id.
               %thisGuiListBoxCtrl.deleteItem(%itemIndex);
               @endtsexample
               @see References)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.doMirror(System.String)">
            <summary>
            @brief Informs the GuiListBoxCtrl object to mirror the contents of the GuiListBoxCtrl stored in the mirrorSet field.
               @tsexample
               \\ Inform the object to mirror the object located at %thisGuiListBox.mirrorSet
               %thisGuiListBox.doMirror();
               @endtsexample
               @see GuiCore)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.findItemText(System.String,System.String,System.Boolean)">
            <summary>
            @brief Returns index of item with matching text or -1 if none found.
               @param findText Text in the list to find.
               @param isCaseSensitive If true, the search will be case sensitive.
               @tsexample
               // Define the text we wish to find in the list.
               %findText = \"Hickory Smoked Gideon\"/n/n
               // Define if this is a case sensitive search or not.
               %isCaseSensitive = \"false\";
               // Ask the GuiListBoxCtrl object what item id in the list matches the requested text.
               %matchingId = %thisGuiListBoxCtrl.findItemText(%findText,%isCaseSensitive);
               @endtsexample
               @return Index id of item with matching text or -1 if none found.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.getItemCount(System.String)">
            <summary>
            @brief Returns the number of items in the list.
               @tsexample
               // Request the number of items in the list of the GuiListBoxCtrl object.
               %listItemCount = %thisGuiListBoxCtrl.getItemCount();
               @endtsexample
               @return The number of items in the list.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.getItemObject(System.String,System.Int32)">
            <summary>
            @brief Returns the object associated with an item. This only makes sense if you are mirroring a simset.
               @param index Index id to request the associated item from.
               @tsexample
               // Define the index id
               %index = \"12\";
               // Request the item from the GuiListBoxCtrl object
               %object = %thisGuiListBoxCtrl.getItemObject(%index);
               @endtsexample
               @return The object associated with the item in the list.
               @see References)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.getItemText(System.String,System.Int32)">
            <summary>
            @brief Returns the text of the item at the specified index.
               @param index Index id to return the item text from.
               @tsexample
               // Define the index id entry to request the text from
               %index = \"12\";
               // Request the item id text from the GuiListBoxCtrl object.
               %text = %thisGuiListBoxCtrl.getItemText(%index);
               @endtsexample
               @return The text of the requested index id.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.getLastClickItem(System.String)">
            <summary>
            @brief Request the item index for the item that was last clicked.
               @tsexample
               // Request the item index for the last clicked item in the list
               %lastClickedIndex = %thisGuiListBoxCtrl.getLastClickItem();
               @endtsexample
               @return Index id for the last clicked item in the list.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.getSelCount(System.String)">
            <summary>
            @brief Returns the number of items currently selected.
               @tsexample
               // Request the number of currently selected items
               %selectedItemCount = %thisGuiListBoxCtrl.getSelCount();
               @endtsexample
               @return Number of currently selected items.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.getSelectedItem(System.String)">
            <summary>
            @brief Returns the selected items index or -1 if none selected. If multiple selections exist it returns the first selected item. 
               @tsexample
               // Request the index id of the currently selected item
               %selectedItemId = %thisGuiListBoxCtrl.getSelectedItem();
               @endtsexample
               @return The selected items index or -1 if none selected.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.getSelectedItems(System.String)">
            <summary>
            @brief Returns a space delimited list of the selected items indexes in the list.
               @tsexample
               // Request a space delimited list of the items in the GuiListBoxCtrl object.
               %selectionList = %thisGuiListBoxCtrl.getSelectedItems();
               @endtsexample
               @return Space delimited list of the selected items indexes in the list
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.insertItem(System.String,System.String,System.Int32)">
            <summary>
            @brief Inserts an item into the list at the specified index and returns the index assigned or -1 on error.
               @param text Text item to add.
               @param index Index id to insert the list item text at.
               @tsexample
               // Define the text to insert
               %text = \"Secret Agent Gideon\";
               // Define the index entry to insert the text at
               %index = \"14\";
               // In form the GuiListBoxCtrl object to insert the text at the defined index.
               %assignedId = %thisGuiListBoxCtrl.insertItem(%text,%index);
               @endtsexample
               @return If successful will return the index id assigned. If unsuccessful, will return -1.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.removeFilteredItem(System.String,System.String)">
            <summary>
            @brief Removes an item of the entered name from the filtered items list.
               @param itemName Name of the item to remove from the filtered list.
               @tsexample
               // Define the itemName that you wish to remove.
               %itemName = \"This Item Name\";
               // Remove the itemName from the GuiListBoxCtrl
               %thisGuiListBoxCtrl.removeFilteredItem(%itemName);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.setCurSel(System.String,System.Int32)">
            <summary>
            @brief Sets the currently selected item at the specified index.
               @param indexId Index Id to set selected.
               @tsexample
               // Define the index id that we wish to select.
               %selectId = \"4\";
               // Inform the GuiListBoxCtrl object to set the requested index as selected.
               %thisGuiListBoxCtrl.setCurSel(%selectId);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.setCurSelRange(System.String,System.Int32,System.Int32)">
            <summary>
            @brief Sets the current selection range from index start to stop. If no stop is specified it sets from start index to the end of the list
               @param indexStart Index Id to start selection.
               @param indexStop Index Id to end selection.
               @tsexample
               // Set start id
               %indexStart = \"3\";
               // Set end id
               %indexEnd = \"6\";
               // Request the GuiListBoxCtrl object to select the defined range.
               %thisGuiListBoxCtrl.setCurSelRange(%indexStart,%indexEnd);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.setItemColor(System.String,System.Int32,WinterLeaf.Engine.Containers.ColorF)">
            <summary>
            @brief Sets the color of a single list entry at the specified index id.
               @param index Index id to modify the color of in the list.
               @param color Color value to set the list entry to.
               @tsexample
               // Define the index id value
               %index = \"5\";
               // Define the color value
               %color = \"1.0 0.0 0.0\";
               // Inform the GuiListBoxCtrl object to change the color of the requested index
               %thisGuiListBoxCtrl.setItemColor(%index,%color);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.setItemText(System.String,System.Int32,System.String)">
            <summary>
            @brief Sets the items text at the specified index.
               @param index Index id to set the item text at.
               @param newtext Text to change the list item at index id to.
               @tsexample
               // Define the index id/n
               %index = \"12\";
               // Define the text to set the list item to
               %newtext = \"Gideon's Fancy Goggles\";
               // Inform the GuiListBoxCtrl object to change the text at the requested index
               %thisGuiListBoxCtrl.setItemText(%index,%newText);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.setItemTooltip(System.String,System.Int32,System.String)">
            <summary>
            @brief Set the tooltip text to display for the given list item.
               @param index Index id to change the tooltip text
               @param text Text for the tooltip.
               @tsexample
               // Define the index id
               %index = \"12\";
               // Define the tooltip text
               %tooltip = \"Gideon's goggles can see through space and time.\"
               // Inform the GuiListBoxCtrl object to set the tooltop for the item at the defined index id
               %thisGuiListBoxCtrl.setItemToolTip(%index,%tooltip);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.setMultipleSelection(System.String,System.Boolean)">
            <summary>
            @brief Enable or disable multiple selections for this GuiListBoxCtrl object.
               @param allowMultSelections Boolean variable to set the use of multiple selections or not.
               @tsexample
               // Define the multiple selection use state.
               %allowMultSelections = \"true\";
               // Set the allow  multiple selection state on the GuiListBoxCtrl object.
               %thisGuiListBoxCtrl.setMultipleSelection(%allowMultSelections);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiListBoxCtrlObject.setSelected(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Sets the item at the index specified to selected or not.
               Detailed description
               @param index Item index to set selected or unselected.
               @param setSelected Boolean selection state to set the requested item index.
               @tsexample
               // Define the index
               %index = \"5\";
               // Define the selection state
               %selected = \"true\"
               // Inform the GuiListBoxCtrl object of the new selection state for the requested index entry.
               %thisGuiListBoxCtrl.setSelected(%index,%selected);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMaterialCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMaterialCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMaterialCtrlObject.GuiMaterialCtrl_setMaterial(System.String,System.String)">
            <summary>
            ( string materialName )
                           Set the material to be displayed in the control. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMaterialPreviewObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMaterialPreviewObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMaterialPreviewObject.deleteModel(System.String)">
            <summary>
            Deletes the preview model.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMaterialPreviewObject.reset(System.String)">
            <summary>
            Resets the viewport to default zoom, pan, rotate and lighting.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMaterialPreviewObject.setAmbientLightColor(System.String,WinterLeaf.Engine.Containers.ColorF)">
            <summary>
            Sets the color of the ambient light in the scene.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMaterialPreviewObject.setLightColor(System.String,WinterLeaf.Engine.Containers.ColorF)">
            <summary>
            Sets the color of the light in the scene.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMaterialPreviewObject.setModel(System.String,System.String)">
            <summary>
            Sets the model to be displayed in this control
               @param shapeName Name of the model to display.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMaterialPreviewObject.setOrbitDistance(System.String,System.Single)">
            <summary>
            Sets the distance at which the camera orbits the object. Clamped to the 
               acceptable range defined in the class by min and max orbit distances.
               @param distance The distance to set the orbit to (will be clamped).)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMenuBarObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMenuBarObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMenuBarObject.addMenu(System.String,System.String,System.Int32)">
            <summary>
            @brief Adds a new menu to the menu bar.
               @param menuText Text to display for the new menu item.
               @param menuId ID for the new menu item.
               @tsexample
               // Define the menu text
               %menuText = \"New Menu\";
               // Define the menu ID.
               %menuId = \"2\";
               // Inform the GuiMenuBar control to add the new menu
               %thisGuiMenuBar.addMenu(%menuText,%menuId);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMenuBarObject.addMenuItem(System.String,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            ,,0,,-1),
               @brief Adds a menu item to the specified menu.  The menu argument can be either the text of a menu or its id.
               @param menu Menu name or menu Id to add the new item to.
               @param menuItemText Text for the new menu item.
               @param menuItemId Id for the new menu item.
               @param accelerator Accelerator key for the new menu item.
               @param checkGroup Check group to include this menu item in.
               @tsexample
               // Define the menu we wish to add the item to
               %targetMenu = \"New Menu\";  or  %menu = \"4\";
               // Define the text for the new menu item
               %menuItemText = \"Menu Item\";
               // Define the id for the new menu item
               %menuItemId = \"3\";
               // Set the accelerator key to toggle this menu item with
               %accelerator = \"n\";
               // Define the Check Group that this menu item will be in, if we want it to be in a check group. -1 sets it in no check group.
               %checkGroup = \"4\";
               // Inform the GuiMenuBar control to add the new menu item with the defined fields
               %thisGuiMenuBar.addMenuItem(%menu,%menuItemText,%menuItemId,%accelerator,%checkGroup);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMenuBarObject.addSubmenuItem(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            @brief Adds a menu item to the specified menu.  The menu argument can be either the text of a menu or its id.
               @param menuTarget Menu to affect a submenu in
               @param menuItem Menu item to affect
               @param submenuItemText Text to show for the new submenu
               @param submenuItemId Id for the new submenu
               @param accelerator Accelerator key for the new submenu
               @param checkGroup Which check group the new submenu should be in, or -1 for none.
               @tsexample
               // Define the menuTarget
               %menuTarget = \"New Menu\";  or  %menuTarget = \"3\";
               // Define the menuItem
               %menuItem = \"New Menu Item\";  or  %menuItem = \"5\";
               // Define the text for the new submenu
               %submenuItemText = \"New Submenu Item\";
               // Define the id for the new submenu
               %submenuItemId = \"4\";
               // Define the accelerator key for the new submenu
               %accelerator = \"n\";
               // Define the checkgroup for the new submenu
               %checkgroup = \"7\";
               // Request the GuiMenuBar control to add the new submenu with the defined information
               %thisGuiMenuBar.addSubmenuItem(%menuTarget,%menuItem,%submenuItemText,%submenuItemId,%accelerator,%checkgroup);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMenuBarObject.clearMenuItems(System.String,System.String)">
            <summary>
            @brief Removes all the menu items from the specified menu.
               @param menuTarget Menu to remove all items from  
               @tsexample
               // Define the menuTarget
               %menuTarget = \"New Menu\";  or %menuTarget = \"3\";
               // Inform the GuiMenuBar control to clear all menu items from the defined menu
               %thisGuiMenuBar.clearMenuItems(%menuTarget);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMenuBarObject.clearMenus(System.String,System.Int32,System.Int32)">
            <summary>
            @brief Clears all the menus from the menu bar.
               @tsexample
               // Inform the GuiMenuBar control to clear all menus from itself.
               %thisGuiMenuBar.clearMenus();
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMenuBarObject.clearSubmenuItems(System.String,System.String,System.String)">
            <summary>
            @brief Removes all the menu items from the specified submenu.
               @param menuTarget Menu to affect a submenu in
               @param menuItem Menu item to affect
               @tsexample
               // Define the menuTarget
               %menuTarget = \"New Menu\";  or %menuTarget = \"3\";
               // Define the menuItem
               %menuItem = \"New Menu Item\";  or  %menuItem = \"5\";
               // Inform the GuiMenuBar to remove all submenu items from the defined menu item
               %thisGuiMenuBar.clearSubmenuItems(%menuTarget,%menuItem);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMenuBarObject.removeMenu(System.String,System.String)">
            <summary>
            @brief Removes the specified menu from the menu bar.
               @param menuTarget Menu to remove from the menu bar  
               @tsexample
               // Define the menuTarget
               %menuTarget = \"New Menu\";  or %menuTarget = \"3\";
               // Inform the GuiMenuBar to remove the defined menu from the menu bar
               %thisGuiMenuBar.removeMenu(%menuTarget);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMenuBarObject.removeMenuItem(System.String,System.String,System.String)">
            <summary>
            @brief Removes the specified menu item from the menu.
               @param menuTarget Menu to affect the menu item in
               @param menuItem Menu item to affect
               @tsexample
               // Define the menuTarget
               %menuTarget = \"New Menu\";  or %menuTarget = \"3\";
               // Define the menuItem
               %menuItem = \"New Menu Item\";  or  %menuItem = \"5\";
               // Request the GuiMenuBar control to remove the define menu item
               %thisGuiMenuBar.removeMenuItem(%menuTarget,%menuItem);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMenuBarObject.setCheckmarkBitmapIndex(System.String,System.Int32)">
            <summary>
            @brief Sets the menu bitmap index for the check mark image.
               @param bitmapIndex Bitmap index for the check mark image.
               @tsexample
               // Define the bitmap index
               %bitmapIndex = \"2\";
               // Inform the GuiMenuBar control of the proper bitmap index for the check mark image
               %thisGuiMenuBar.setCheckmarkBitmapIndex(%bitmapIndex);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMenuBarObject.setMenuBitmapIndex(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            @brief Sets the bitmap index for the menu and toggles rendering only the bitmap.
               @param menuTarget Menu to affect
               @param bitmapindex Bitmap index to set for the menu
               @param bitmaponly If true, only the bitmap will be rendered
               @param drawborder If true, a border will be drawn around the menu.
               @tsexample
               // Define the menuTarget to affect
               %menuTarget = \"New Menu\";  or %menuTarget = \"3\";
               // Set the bitmap index
               %bitmapIndex = \"5\";
               // Set if we are only to render the bitmap or not
               %bitmaponly = \"true\";
               // Set if we are rendering a border or not
               %drawborder = \"true\";
               // Inform the GuiMenuBar of the bitmap and rendering changes
               %thisGuiMenuBar.setMenuBitmapIndex(%menuTarget,%bitmapIndex,%bitmapOnly,%drawBorder);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMenuBarObject.setMenuItemBitmap(System.String,System.String,System.String,System.Int32)">
            <summary>
            @brief Sets the specified menu item bitmap index in the bitmap array.  Setting the item's index to -1 will remove any bitmap.
               @param menuTarget Menu to affect the menuItem in
               @param menuItem Menu item to affect
               @param bitmapIndex Bitmap index to set the menu item to
               @tsexample
               // Define the menuTarget
               %menuTarget = \"New Menu\";  or  %menuTarget = \"3\";
               // Define the menuItem\"
               %menuItem = \"New Menu Item\";  or %menuItem = \"2\";
               // Define the bitmapIndex
               %bitmapIndex = \"6\";
               // Inform the GuiMenuBar control to set the menu item to the defined bitmap
               %thisGuiMenuBar.setMenuItemBitmap(%menuTarget,%menuItem,%bitmapIndex);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMenuBarObject.setMenuItemChecked(System.String,System.String,System.String,System.Boolean)">
            <summary>
            @brief Sets the menu item bitmap to a check mark, which by default is the first element in
               the bitmap array (although this may be changed with setCheckmarkBitmapIndex()).
               Any other menu items in the menu with the same check group become unchecked if they are checked.
               @param menuTarget Menu to work in
               @param menuItem Menu item to affect
               @param checked Whether we are setting it to checked or not
               @tsexample
               
               @endtsexample
               @return If not void, return value and description
               @see References)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMenuBarObject.setMenuItemEnable(System.String,System.String,System.String,System.Boolean)">
            <summary>
            @brief sets the menu item to enabled or disabled based on the enable parameter.
               The specified menu and menu item can either be text or ids.
               Detailed description
               @param menuTarget Menu to work in
               @param menuItemTarget The menu item inside of the menu to enable or disable
               @param enabled Boolean enable / disable value.
               @tsexample
               // Define the menu
               %menu = \"New Menu\";  or  %menu = \"4\";
               // Define the menu item
               %menuItem = \"New Menu Item\";  or %menuItem = \"2\";
               // Define the enabled state
               %enabled = \"true\";
               // Inform the GuiMenuBar control to set the enabled state of the requested menu item
               %thisGuiMenuBar.setMenuItemEnable(%menu,%menuItme,%enabled);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMenuBarObject.setMenuItemSubmenuState(System.String,System.String,System.String,System.Boolean)">
            <summary>
            @brief Sets the given menu item to be a submenu.
               @param menuTarget Menu to affect a submenu in
               @param menuItem Menu item to affect
               @param isSubmenu Whether or not the menuItem will become a subMenu or not
               @tsexample
               // Define the menuTarget
               %menuTarget = \"New Menu\";  or %menuTarget = \"3\";
               // Define the menuItem
               %menuItem = \"New Menu Item\";  or  %menuItem = \"5\";
               // Define whether or not the Menu Item is a sub menu or not
               %isSubmenu = \"true\";
               // Inform the GuiMenuBar control to set the defined menu item to be a submenu or not.
               %thisGuiMenuBar.setMenuItemSubmenuState(%menuTarget,%menuItem,%isSubmenu);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMenuBarObject.setMenuItemText(System.String,System.String,System.String,System.String)">
            <summary>
            @brief Sets the text of the specified menu item to the new string.
               @param menuTarget Menu to affect
               @param menuItem Menu item in the menu to change the text at
               @param newMenuItemText New menu text
               @tsexample
               // Define the menuTarget
               %menuTarget = \"New Menu\";  or  %menuTarget = \"4\";
               // Define the menuItem
               %menuItem = \"New Menu Item\";  or  %menuItem = \"2\";
               // Define the new text for the menu item
               %newMenuItemText = \"Very New Menu Item\";
               // Inform the GuiMenuBar control to change the defined menu item with the new text
               %thisGuiMenuBar.setMenuItemText(%menuTarget,%menuItem,%newMenuItemText);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMenuBarObject.setMenuItemVisible(System.String,System.String,System.String,System.Boolean)">
            <summary>
            @brief Brief Description.
               Detailed description
               @param menuTarget Menu to affect the menu item in
               @param menuItem Menu item to affect
               @param isVisible Visible state to set the menu item to.
               @tsexample
               // Define the menuTarget
               %menuTarget = \"New Menu\";  or  %menuTarget = \"3\";
               // Define the menuItem
               %menuItem = \"New Menu Item\";  or  %menuItem = \"2\";
               // Define the visibility state
               %isVisible = \"true\";
               // Inform the GuiMenuBarControl of the visibility state of the defined menu item
               %thisGuiMenuBar.setMenuItemVisible(%menuTarget,%menuItem,%isVisible);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMenuBarObject.setMenuMargins(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            @brief Sets the menu rendering margins: horizontal, vertical, bitmap spacing.
               Detailed description
               @param horizontalMargin Number of pixels on the left and right side of a menu's text.
               @param verticalMargin Number of pixels on the top and bottom of a menu's text.
               @param bitmapToTextSpacing Number of pixels between a menu's bitmap and text.
               @tsexample
               // Define the horizontalMargin
               %horizontalMargin = \"5\";
               // Define the verticalMargin
               %verticalMargin = \"5\";
               // Define the bitmapToTextSpacing
               %bitmapToTextSpacing = \"12\";
               // Inform the GuiMenuBar control to set its margins based on the defined values.
               %thisGuiMenuBar.setMenuMargins(%horizontalMargin,%verticalMargin,%bitmapToTextSpacing);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMenuBarObject.setMenuText(System.String,System.String,System.String)">
            <summary>
            @brief Sets the text of the specified menu to the new string.
               @param menuTarget Menu to affect
               @param newMenuText New menu text
               @tsexample
               // Define the menu to affect
               %menu = \"New Menu\";  or %menu = \"3\";
               // Define the text to change the menu to
               %newMenuText = \"Still a New Menu\";
               // Inform the GuiMenuBar control to change the defined menu to the defined text
               %thisGuiMenuBar.setMenuText(%menu,%newMenuText);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMenuBarObject.setMenuVisible(System.String,System.String,System.Boolean)">
            <summary>
            @brief Sets the whether or not to display the specified menu.
               @param menuTarget Menu item to affect
               @param visible Whether the menu item will be visible or not
               @tsexample
               // Define the menu to work with
               %menuTarget = \"New Menu\";  or  %menuTarget = \"4\";
               // Define if the menu should be visible or not
               %visible = \"true\";
               // Inform the GuiMenuBar control of the new visibility state for the defined menu
               %thisGuiMenuBar.setMenuVisible(%menuTarget,%visible);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMenuBarObject.setSubmenuItemChecked(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            @brief Sets the menu item bitmap to a check mark, which by default is the first element in the
               bitmap array (although this may be changed with setCheckmarkBitmapIndex()).
               Any other menu items in the menu with the same check group become unchecked if they are checked.
               @param menuTarget Menu to affect a submenu in
               @param menuItem Menu item to affect
               @param submenuItemText Text to show for submenu
               @param checked Whether or not this submenu item will be checked.
               @tsexample
               // Define the menuTarget
               %menuTarget = \"New Menu\";  or %menuTarget = \"3\";
               // Define the menuItem
               %menuItem = \"New Menu Item\";  or  %menuItem = \"5\";
               // Define the text for the new submenu
               %submenuItemText = \"Submenu Item\";
               // Define if this submenu item should be checked or not
               %checked = \"true\";
               // Inform the GuiMenuBar control to set the checked state of the defined submenu item
               %thisGuiMenuBar.setSubmenuItemChecked(%menuTarget,%menuItem,%submenuItemText,%checked);
               @endtsexample
               @return If not void, return value and description
               @see References)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMeshRoadEditorCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMeshRoadEditorCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMeshRoadEditorCtrlObject.GuiMeshRoadEditorCtrl_deleteNode(System.String)">
            <summary>
            deleteNode() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMeshRoadEditorCtrlObject.GuiMeshRoadEditorCtrl_getMode(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMeshRoadEditorCtrlObject.GuiMeshRoadEditorCtrl_getNodeDepth(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMeshRoadEditorCtrlObject.GuiMeshRoadEditorCtrl_getNodeNormal(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMeshRoadEditorCtrlObject.GuiMeshRoadEditorCtrl_getNodePosition(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMeshRoadEditorCtrlObject.GuiMeshRoadEditorCtrl_getNodeWidth(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMeshRoadEditorCtrlObject.GuiMeshRoadEditorCtrl_getSelectedRoad(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMeshRoadEditorCtrlObject.GuiMeshRoadEditorCtrl_matchTerrainToRoad(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMeshRoadEditorCtrlObject.GuiMeshRoadEditorCtrl_regenerate(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMeshRoadEditorCtrlObject.GuiMeshRoadEditorCtrl_setMode(System.String,System.String)">
            <summary>
            setMode( String mode ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMeshRoadEditorCtrlObject.GuiMeshRoadEditorCtrl_setNodeDepth(System.String,System.Single)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMeshRoadEditorCtrlObject.GuiMeshRoadEditorCtrl_setNodeNormal(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMeshRoadEditorCtrlObject.GuiMeshRoadEditorCtrl_setNodePosition(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMeshRoadEditorCtrlObject.GuiMeshRoadEditorCtrl_setNodeWidth(System.String,System.Single)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMeshRoadEditorCtrlObject.GuiMeshRoadEditorCtrl_setSelectedRoad(System.String,System.String)">
            <summary>
            ),  )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMessageVectorCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMessageVectorCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMessageVectorCtrlObject.attach(System.String,System.String)">
            <summary>
            @brief Push a line onto the back of the list.
            
            	   @param item The GUI element being pushed into the control
            
            	   @tsexample
            	   // All messages are stored in this HudMessageVector, the actual
            	   // MainChatHud only displays the contents of this vector.
            	   new MessageVector(HudMessageVector);
            	   // Attach the MessageVector to the chat control
            	   chatHud.attach(HudMessageVector);
            	   @endtsexample
            
            	   @return Value)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMessageVectorCtrlObject.detach(System.String)">
            <summary>
            @brief Stop listing messages from the MessageVector previously attached to, if any.
            
            				   Detailed description
            
            				   @param param Description
            
            				   @tsexample
            				   // Deatch the MessageVector from HudMessageVector
            				   // HudMessageVector will no longer render the text
            				   chatHud.detach();
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMissionAreaCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMissionAreaCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMissionAreaCtrlObject.setMissionArea(System.String,System.String)">
            <summary>
            @brief Set the MissionArea to edit.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMissionAreaCtrlObject.updateTerrain(System.String)">
            <summary>
            @brief Update the terrain bitmap.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMissionAreaEditorCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMissionAreaEditorCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMissionAreaEditorCtrlObject.GuiMissionAreaEditorCtrl_getSelectedMissionArea(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMissionAreaEditorCtrlObject.GuiMissionAreaEditorCtrl_setSelectedMissionArea(System.String,System.String)">
            <summary>
            ),  )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMLTextCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMLTextCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMLTextCtrlObject.addText(System.String,System.String,System.Boolean)">
            <summary>
            @brief Appends the text in the control with additional text. Also .
               @param text New text to append to the existing text.
               @param reformat If true, the control will also be visually reset (defaults to true).
               @tsexample
               // Define new text to add
               %text = \"New Text to Add\";
               // Set reformat boolean
               %reformat = \"true\";
               // Inform the control to add the new text
               %thisGuiMLTextCtrl.addText(%text,%reformat);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMLTextCtrlObject.forceReflow(System.String)">
            <summary>
            @brief Forces the text control to reflow the text after new text is added, possibly resizing the control.
               @tsexample
               // Define new text to add
               %newText = \"BACON!\";
               // Add the new text to the control
               %thisGuiMLTextCtrl.addText(%newText);
               // Inform the GuiMLTextCtrl object to force a reflow to ensure the added text fits properly.
               %thisGuiMLTextCtrl.forceReflow();
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMLTextCtrlObject.getText(System.String)">
            <summary>
            @brief Returns the text from the control, including TorqueML characters.
               @tsexample
               // Get the text displayed in the control
               %controlText = %thisGuiMLTextCtrl.getText();
               @endtsexample
               @return Text string displayed in the control, including any TorqueML characters.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMLTextCtrlObject.scrollToBottom(System.String)">
            <summary>
            @brief Scroll to the bottom of the text.
               @tsexample
               // Inform GuiMLTextCtrl object to scroll to its bottom
               %thisGuiMLTextCtrl.scrollToBottom();
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMLTextCtrlObject.scrollToTag(System.String,System.Int32)">
            <summary>
            @brief Scroll down to a specified tag.
               Detailed description
               @param tagID TagID to scroll the control to
               @tsexample
               // Define the TagID we want to scroll the control to
               %tagId = \"4\";
               // Inform the GuiMLTextCtrl to scroll to the defined TagID
               %thisGuiMLTextCtrl.scrollToTag(%tagId);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMLTextCtrlObject.scrollToTop(System.String,System.Int32,System.Int32)">
            <summary>
            @brief Scroll to the top of the text.
               @tsexample
               // Inform GuiMLTextCtrl object to scroll to its top
               %thisGuiMLTextCtrl.scrollToTop();
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMLTextCtrlObject.setAlpha(System.String,System.Single)">
            <summary>
            @brief Sets the alpha value of the control.
               @param alphaVal n - 1.0 floating value for the alpha
               @tsexample
               // Define the alphe value
               %alphaVal = \"0.5\";
               // Inform the control to update its alpha value.
               %thisGuiMLTextCtrl.setAlpha(%alphaVal);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMLTextCtrlObject.setCursorPosition(System.String,System.Int32)">
            <summary>
            @brief Change the text cursor's position to a new defined offset within the text in the control.
               @param newPos Offset to place cursor.
               @tsexample
               // Define cursor offset position
               %position = \"23\";
               // Inform the GuiMLTextCtrl object to move the cursor to the new position.
               %thisGuiMLTextCtrl.setCursorPosition(%position);
               @endtsexample
               @return Returns true if the cursor position moved, or false if the position was not changed.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiMLTextCtrlObject.setText(System.String,System.String)">
            <summary>
            @brief Set the text contained in the control.
               @param text The text to display in the control.
               @tsexample
               // Define the text to display
               %text = \"Nifty Control Text\";
               // Set the text displayed within the control
               %thisGuiMLTextCtrl.setText(%text);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiNavEditorCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiNavEditorCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiNavEditorCtrlObject.GuiNavEditorCtrl_getMode(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiNavEditorCtrlObject.GuiNavEditorCtrl_setMode(System.String,System.String)">
            <summary>
            setMode(String mode))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiNavEditorCtrlObject.buildTile(System.String)">
            <summary>
            @brief Build the currently selected tile.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiNavEditorCtrlObject.deleteLink(System.String)">
            <summary>
            @brief Delete the currently selected link.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiNavEditorCtrlObject.deselect(System.String)">
            <summary>
            @brief Deselect whatever is currently selected in the editor.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiNavEditorCtrlObject.getMesh(System.String)">
            <summary>
            @brief Select a NavMesh object.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiNavEditorCtrlObject.getPlayer(System.String)">
            <summary>
            @brief Select a NavMesh object.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiNavEditorCtrlObject.selectMesh(System.String,System.Int32)">
            <summary>
            @brief Select a NavMesh object.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiNavEditorCtrlObject.setLinkFlags(System.String,System.UInt32)">
            <summary>
            @Brief Set jump and drop properties of the selected link.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiNavEditorCtrlObject.spawnPlayer(System.String)">
            <summary>
            @brief Spawn an AIPlayer at the centre of the screen.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiObjectViewObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiObjectViewObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiObjectViewObject.getCameraSpeed(System.String)">
            <summary>
            @brief Return the current multiplier for camera zooming and rotation.
               @tsexample
               // Request the current camera zooming and rotation multiplier value
               %multiplier = %thisGuiObjectView.getCameraSpeed();
               @endtsexample
               @return Camera zooming / rotation multiplier value.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiObjectViewObject.getModel(System.String)">
            <summary>
            @brief Return the model displayed in this view.
               @tsexample
               // Request the displayed model name from the GuiObjectView object.
               %modelName = %thisGuiObjectView.getModel();
               @endtsexample
               @return Name of the displayed model.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiObjectViewObject.getMountedModel(System.String)">
            <summary>
            @brief Return the name of the mounted model.
               @tsexample
               // Request the name of the mounted model from the GuiObjectView object
               %mountedModelName = %thisGuiObjectView.getMountedModel();
               @endtsexample
               @return Name of the mounted model.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiObjectViewObject.getMountSkin(System.String,System.Int32,System.Int32)">
            <summary>
            @brief Return the name of skin used on the mounted model.
               @tsexample
               // Request the skin name from the model mounted on to the main model in the control
               %mountModelSkin = %thisGuiObjectView.getMountSkin();
               @endtsexample
               @return Name of the skin used on the mounted model.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiObjectViewObject.getOrbitDistance(System.String)">
            <summary>
            @brief Return the current distance at which the camera orbits the object.
               @tsexample
               // Request the current orbit distance
               %orbitDistance = %thisGuiObjectView.getOrbitDistance();
               @endtsexample
               @return The distance at which the camera orbits the object.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiObjectViewObject.getSkin(System.String)">
            <summary>
            @brief Return the name of skin used on the primary model.
               @tsexample
               // Request the name of the skin used on the primary model in the control
               %skinName = %thisGuiObjectView.getSkin();
               @endtsexample
               @return Name of the skin used on the primary model.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiObjectViewObject.setCameraSpeed(System.String,System.Single)">
            <summary>
            @brief Sets the multiplier for the camera rotation and zoom speed.
               @param factor Multiplier for camera rotation and zoom speed.
               @tsexample
               // Set the factor value
               %factor = \"0.75\";
               // Inform the GuiObjectView object to set the camera speed.
               %thisGuiObjectView.setCameraSpeed(%factor);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiObjectViewObject.setLightAmbient(System.String,WinterLeaf.Engine.Containers.ColorF)">
            <summary>
            @brief Set the light ambient color on the sun object used to render the model.
               @param color Ambient color of sunlight.
               @tsexample
               // Define the sun ambient color value
               %color = \"1.0 0.4 0.6\";
               // Inform the GuiObjectView object to set the sun ambient color to the requested value
               %thisGuiObjectView.setLightAmbient(%color);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiObjectViewObject.setLightColor(System.String,WinterLeaf.Engine.Containers.ColorF)">
            <summary>
            @brief Set the light color on the sun object used to render the model.
               @param color Color of sunlight.
               @tsexample
               // Set the color value for the sun
               %color = \"1.0 0.4 0.5\";
               // Inform the GuiObjectView object to change the sun color to the defined value
               %thisGuiObjectView.setLightColor(%color);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiObjectViewObject.setLightDirection(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            @brief Set the light direction from which to light the model.
               @param direction XYZ direction from which the light will shine on the model
               @tsexample
               // Set the light direction
               %direction = \"1.0 0.2 0.4\"
               // Inform the GuiObjectView object to change the light direction to the defined value
               %thisGuiObjectView.setLightDirection(%direction);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiObjectViewObject.setModel(System.String,System.String)">
            <summary>
            @brief Sets the model to be displayed in this control.
               @param shapeName Name of the model to display.
               @tsexample
               // Define the model we want to display
               %shapeName = \"gideon.dts\";
               // Tell the GuiObjectView object to display the defined model
               %thisGuiObjectView.setModel(%shapeName);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiObjectViewObject.setMount(System.String,System.String,System.String)">
            <summary>
            @brief Mounts the given model to the specified mount point of the primary model displayed in this control.
               Detailed description
               @param shapeName Name of the model to mount.
               @param mountNodeIndexOrName Index or name of the mount point to be mounted to. If index, corresponds to \"mountN\" in your shape where N is the number passed here.
               @tsexample
               // Set the shapeName to mount
               %shapeName = \"GideonGlasses.dts\"
               // Set the mount node of the primary model in the control to mount the new shape at
               %mountNodeIndexOrName = \"3\";
               //OR:
               %mountNodeIndexOrName = \"Face\";
               // Inform the GuiObjectView object to mount the shape at the specified node.
               %thisGuiObjectView.setMount(%shapeName,%mountNodeIndexOrName);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiObjectViewObject.setMountedModel(System.String,System.String)">
            <summary>
            @brief Sets the model to be mounted on the primary model.
               @param shapeName Name of the model to mount.
               @tsexample
               // Define the model name to mount
               %modelToMount = \"GideonGlasses.dts\";
               // Inform the GuiObjectView object to mount the defined model to the existing model in the control
               %thisGuiObjectView.setMountedModel(%modelToMount);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiObjectViewObject.setMountSkin(System.String,System.String)">
            <summary>
            @brief Sets the skin to use on the mounted model.
               @param skinName Name of the skin to set on the model mounted to the main model in the control
               @tsexample
               // Define the name of the skin
               %skinName = \"BronzeGlasses\";
               // Inform the GuiObjectView Control of the skin to use on the mounted model
               %thisGuiObjectViewCtrl.setMountSkin(%skinName);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiObjectViewObject.setOrbitDistance(System.String,System.Single)">
            <summary>
            @brief Sets the distance at which the camera orbits the object. Clamped to the acceptable range defined in the class by min and max orbit distances.
               Detailed description
               @param distance The distance to set the orbit to (will be clamped).
               @tsexample
               // Define the orbit distance value
               %orbitDistance = \"1.5\";
               // Inform the GuiObjectView object to set the orbit distance to the defined value
               %thisGuiObjectView.setOrbitDistance(%orbitDistance);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiObjectViewObject.setSeq(System.String,System.String)">
            <summary>
            @brief Sets the animation to play for the viewed object.
               @param indexOrName The index or name of the animation to play.
               @tsexample
               // Set the animation index value, or animation sequence name.
               %indexVal = \"3\";
               //OR:
               %indexVal = \"idle\";
               // Inform the GuiObjectView object to set the animation sequence of the object in the control.
               %thisGuiObjectVew.setSeq(%indexVal);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiObjectViewObject.setSkin(System.String,System.String)">
            <summary>
            @brief Sets the skin to use on the model being displayed.
               @param skinName Name of the skin to use.
               @tsexample
               // Define the skin we want to apply to the main model in the control
               %skinName = \"disco_gideon\";
               // Inform the GuiObjectView control to update the skin the to defined skin
               %thisGuiObjectView.setSkin(%skinName);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPaneControlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPaneControlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPaneControlObject.setCollapsed(System.String,System.Boolean)">
            <summary>
            Collapse or un-collapse the control.
               @param collapse True to collapse the control, false to un-collapse it )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_addPlotPoint(System.String,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            (int plotID, float x, float y, bool setAdded = true;)
                          Add a data point to the given plot.
            			  @return)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_changePlotPoint(System.String,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            (int plotID, int i, float x, float y)
                          Change a data point to the given plot and plot position.
            			  @param plotID The plot you want to access
            			  @param i The data point.
            			  @param x,y The plot position.
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_clearAllGraphs(System.String)">
            <summary>
            ()
                          Clear all of the graphs.
            			  @return No return value)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_clearGraph(System.String,System.Int32)">
            <summary>
            (int plotID)
                          Clear the graph of the given plot.
            			  @return No return value)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_getGraphColor(System.String,System.Int32)">
            <summary>
            (int plotID)
                          Get the color of the graph passed.
            			  @return Returns the color of the graph as a string of RGB values formatted as \"R G B\")
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_getGraphMax(System.String,System.Int32)">
            <summary>
            (int plotID) 
            			  Get the maximum values of the graph ranges.
            			  @return Returns the maximum of the range formatted as \"x-max y-max\")
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_getGraphMin(System.String,System.Int32)">
            <summary>
            (int plotID) 
                          Get the minimum values of the graph ranges.
            			  @return Returns the minimum of the range formatted as \"x-min y-min\")
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_getGraphName(System.String,System.Int32)">
            <summary>
            (int plotID) 
                          Get the name of the graph passed.
            			  @return Returns the name of the plot)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_getPlotIndex(System.String,System.Int32,System.Single,System.Single)">
            <summary>
            (int plotID, float x, float y)
                          Gets the index of the point passed on the plotID passed (graph ID).
            			  @param plotID The plot you wish to check.
            			  @param x,y The coordinates of the point to get.
            			  @return Returns the index of the point.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_getPlotPoint(System.String,System.Int32,System.Int32)">
            <summary>
            (int plotID, int samples)
                          Get a data point from the plot specified, samples from the start of the graph.
            			  @return The data point ID)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_getSelectedPlot(System.String)">
            <summary>
            () 
                          Gets the selected Plot (a.k.a. graph).
            			  @return The plot's ID.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_getSelectedPoint(System.String)">
            <summary>
            ()
                          Gets the selected Point on the Plot (a.k.a. graph).
            			  @return The last selected point ID)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_insertPlotPoint(System.String,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            (int plotID, int i, float x, float y)
                          Insert a data point to the given plot and plot position.
            			  @param plotID The plot you want to access
            			  @param i The data point.
            			  @param x,y The plot position.
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_isExistingPoint(System.String,System.Int32,System.Int32)">
            <summary>
            (int plotID, int samples)
                          @return Returns true or false whether or not the point in the plot passed is an existing point.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_resetSelectedPoint(System.String)">
            <summary>
            ()
            			  This will reset the currently selected point to nothing.
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_setAutoGraphMax(System.String,System.Boolean)">
            <summary>
            (bool autoMax) 
            			  Set whether the max will automatically be set when adding points 
            			  (ie if you add a value over the current max, the max is increased to that value).
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_setAutoRemove(System.String,System.Boolean)">
            <summary>
            (bool autoRemove) 
            			  Set whether or not a point should be deleted when you drag another one over it.
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_setGraphHidden(System.String,System.Int32,System.Boolean)">
            <summary>
            (int plotID, bool isHidden)
            			  Set whether the graph number passed is hidden or not.
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_setGraphMax(System.String,System.Int32,System.Single,System.Single)">
            <summary>
            (int plotID, float maxX, float maxY) 
            			  Set the max values of the graph of plotID.
            			  @param plotID The plot to modify
            			  @param maxX,maxY The maximum bound of the value range.
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_setGraphMaxX(System.String,System.Int32,System.Single)">
            <summary>
            (int plotID, float maxX)
            			  Set the max X value of the graph of plotID.
            			  @param plotID The plot to modify.
            			  @param maxX The maximum x value.
            			  @return No return Value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_setGraphMaxY(System.String,System.Int32,System.Single)">
            <summary>
            (int plotID, float maxY)
            			  Set the max Y value of the graph of plotID.
            			  @param plotID The plot to modify.
            			  @param maxY The maximum y value.
            			  @return No return Value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_setGraphMin(System.String,System.Int32,System.Single,System.Single)">
            <summary>
            (int plotID, float minX, float minY) 
            			  Set the min values of the graph of plotID.
            			  @param plotID The plot to modify
            			  @param minX,minY The minimum bound of the value range.
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_setGraphMinX(System.String,System.Int32,System.Single)">
            <summary>
            (int plotID, float minX) 
            			  Set the min X value of the graph of plotID.
            			  @param plotID The plot to modify.
            			  @param minX The minimum x value.
            			  @return No return Value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_setGraphMinY(System.String,System.Int32,System.Single)">
            <summary>
            (int plotID, float minY) 
            			  Set the min Y value of the graph of plotID.
            			  @param plotID The plot to modify.
            			  @param minY The minimum y value.
            			  @return No return Value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_setGraphName(System.String,System.Int32,System.String)">
            <summary>
            (int plotID, string graphName) 
            			  Set the name of the given plot.
            			  @param plotID The plot to modify.
            			  @param graphName The name to set on the plot.
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_setPointXMovementClamped(System.String,System.Boolean)">
            <summary>
            (bool clamped)
            			  Set whether the x position of the selected graph point should be clamped
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_setRenderAll(System.String,System.Boolean)">
            <summary>
            (bool renderAll)
            			  Set whether or not a position should be rendered on every point or just the last selected.
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_setRenderGraphTooltip(System.String,System.Boolean)">
            <summary>
            (bool renderGraphTooltip)
            			  Set whether or not to render the graph tooltip.
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_setSelectedPlot(System.String,System.Int32)">
            <summary>
            (int plotID)
                          Set the selected plot (a.k.a. graph).
            			  @return No return value )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiParticleGraphCtrlObject.GuiParticleGraphCtrl_setSelectedPoint(System.String,System.Int32)">
            <summary>
            (int point)
                          Set the selected point on the graph.
            			  @return No return value)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlObject.GuiPopUpMenuCtrl_add(System.String,System.String,System.Int32,System.UInt32)">
            <summary>
            , -1, 0), (string name, int idNum, int scheme=0))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlObject.GuiPopUpMenuCtrl_addScheme(System.String,System.UInt32,WinterLeaf.Engine.Containers.ColorI,WinterLeaf.Engine.Containers.ColorI,WinterLeaf.Engine.Containers.ColorI)">
            <summary>
            (int id, ColorI fontColor, ColorI fontColorHL, ColorI fontColorSEL))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlObject.GuiPopUpMenuCtrl_changeTextById(System.String,System.Int32,System.String)">
            <summary>
            ( int id, string text ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlObject.GuiPopUpMenuCtrl_clear(System.String)">
            <summary>
            Clear the popup list.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlObject.GuiPopUpMenuCtrl_clearEntry(System.String,System.Int32)">
            <summary>
            (S32 entry))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlObject.GuiPopUpMenuCtrl_findText(System.String,System.String)">
            <summary>
            (string text)
                          Returns the position of the first entry containing the specified text.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlObject.GuiPopUpMenuCtrl_forceClose(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlObject.GuiPopUpMenuCtrl_forceOnAction(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlObject.GuiPopUpMenuCtrl_getSelected(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlObject.GuiPopUpMenuCtrl_getText(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlObject.GuiPopUpMenuCtrl_getTextById(System.String,System.Int32)">
            <summary>
            (int id))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlObject.GuiPopUpMenuCtrl_replaceText(System.String,System.Boolean)">
            <summary>
            (bool doReplaceText))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlObject.GuiPopUpMenuCtrl_setEnumContent(System.String,System.String,System.String)">
            <summary>
            (string class, string enum)
                          This fills the popup with a classrep's field enumeration type info.
                          More of a helper function than anything.   If console access to the field list is added, 
                          at least for the enumerated types, then this should go away..)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlObject.GuiPopUpMenuCtrl_setFirstSelected(System.String,System.Boolean)">
            <summary>
            ([scriptCallback=true]))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlObject.GuiPopUpMenuCtrl_setNoneSelected(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlObject.GuiPopUpMenuCtrl_setSelected(System.String,System.Int32,System.Boolean)">
            <summary>
            (int id, [scriptCallback=true]))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlObject.GuiPopUpMenuCtrl_size(System.String)">
            <summary>
            Get the size of the menu - the number of entries in it.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlObject.GuiPopUpMenuCtrl_sort(System.String)">
            <summary>
            Sort the list alphabetically.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlObject.GuiPopUpMenuCtrl_sortID(System.String)">
            <summary>
            Sort the list by ID.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlExObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlExObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlExObject.GuiPopUpMenuCtrlEx_add(System.String,System.String,System.Int32,System.UInt32)">
            <summary>
            , -1, 0), (string name, int idNum, int scheme=0))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlExObject.GuiPopUpMenuCtrlEx_clearEntry(System.String,System.Int32)">
            <summary>
            (S32 entry))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlExObject.GuiPopUpMenuCtrlEx_findText(System.String,System.String)">
            <summary>
            (string text)
                          Returns the id of the first entry containing the specified text or -1 if not found.
            			  @param text String value used for the query
            			  @return Numerical ID of entry containing the text.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlExObject.GuiPopUpMenuCtrlEx_getColorById(System.String,System.Int32)">
            <summary>
            @brief Get color of an entry's box
            			  @param id ID number of entry to query
            			  @return ColorI in the format of \"Red Green Blue Alpha\", each of with is a value between 0 - 255)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlExObject.GuiPopUpMenuCtrlEx_replaceText(System.String,System.Int32)">
            <summary>
            @brief Flag that causes each new text addition to replace the current entry
            			  @param True to turn on replacing, false to disable it)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlExObject.GuiPopUpMenuCtrlEx_setEnumContent(System.String,System.String,System.String)">
            <summary>
            @brief This fills the popup with a classrep's field enumeration type info.
                          More of a helper function than anything.   If console access to the field list is added, 
                          at least for the enumerated types, then this should go away.
            			  @param class Name of the class containing the enum
            			  @param enum Name of the enum value to acces)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlExObject.GuiPopUpMenuCtrlEx_setFirstSelected(System.String,System.Boolean)">
            <summary>
            ([scriptCallback=true])
            			  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlExObject.GuiPopUpMenuCtrlEx_setSelected(System.String,System.Int32,System.Boolean)">
            <summary>
            (int id, [scriptCallback=true])
            			  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlExObject.GuiPopUpMenuCtrlEx_size(System.String)">
            <summary>
            @brief Get the size of the menu
            			  @return Number of entries in the menu)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlExObject.addCategory(System.String,System.String)">
            <summary>
            @brief Add a category to the list.
            
            				   Acts as a separator between entries, allowing for sub-lists
            
            				   @param text Name of the new category)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlExObject.addScheme(System.String,System.Int32,WinterLeaf.Engine.Containers.ColorI,WinterLeaf.Engine.Containers.ColorI,WinterLeaf.Engine.Containers.ColorI)">
            <summary>
            @brief Create a new scheme and add it to the list of choices for when a new text entry is added.
            				   @param id Numerical id associated with this scheme
            				   @param fontColor The base text font color. Formatted as \"Red Green Blue\", each a numerical between 0 and 255.
            				   @param fontColorHL Color of text when being highlighted. Formatted as \"Red Green Blue\", each a numerical between 0 and 255.
            				   @param fontColorSel Color of text when being selected. Formatted as \"Red Green Blue\", each a numerical between 0 and 255.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlExObject.clear(System.String)">
            <summary>
            @brief Clear the popup list.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlExObject.forceClose(System.String)">
            <summary>
            @brief Manually force this control to collapse and close.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlExObject.forceOnAction(System.String)">
            <summary>
            @brief Manually for the onAction function, which updates everything in this control.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlExObject.getSelected(System.String)">
            <summary>
            @brief Get the current selection of the menu.
            				   @return Returns the ID of the currently selected entry)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlExObject.getText(System.String)">
            <summary>
            @brief Get the.
            
            				   Detailed description
            
            				   @param param Description
            
            				   @tsexample
            				   // Comment
            				   code();
            				   @endtsexample
            
            				   @return Returns current text in string format)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlExObject.getTextById(System.String,System.Int32)">
            <summary>
            @brief Get the text of an entry based on an ID.
            				   @param id The ID assigned to the entry being queried
            				   @return String contained by the specified entry, NULL if empty or bad ID)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlExObject.setNoneSelected(System.String,System.Int32)">
            <summary>
            @brief Clears selection in the menu.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlExObject.setText(System.String,System.String)">
            <summary>
            @brief Set the current text to a specified value.
            				   @param text String containing new text to set)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlExObject.sort(System.String)">
            <summary>
            @brief Sort the list alphabetically.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiPopUpMenuCtrlExObject.sortID(System.String)">
            <summary>
            @brief Sort the list by ID.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiProgressBitmapCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiProgressBitmapCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiProgressBitmapCtrlObject.setBitmap(System.String,System.String)">
            <summary>
            Set the bitmap to use for rendering the progress bar.
               @param filename ~Path to the bitmap file.
               @note Directly assign to #bitmap rather than using this method.
               @see GuiProgressBitmapCtrl::setBitmap )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRiverEditorCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRiverEditorCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRiverEditorCtrlObject.GuiRiverEditorCtrl_deleteNode(System.String)">
            <summary>
            deleteNode() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRiverEditorCtrlObject.GuiRiverEditorCtrl_getMode(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRiverEditorCtrlObject.GuiRiverEditorCtrl_getNodeDepth(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRiverEditorCtrlObject.GuiRiverEditorCtrl_getNodeNormal(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRiverEditorCtrlObject.GuiRiverEditorCtrl_getNodePosition(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRiverEditorCtrlObject.GuiRiverEditorCtrl_getNodeWidth(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRiverEditorCtrlObject.GuiRiverEditorCtrl_getSelectedRiver(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRiverEditorCtrlObject.GuiRiverEditorCtrl_regenerate(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRiverEditorCtrlObject.GuiRiverEditorCtrl_setMode(System.String,System.String)">
            <summary>
            setMode( String mode ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRiverEditorCtrlObject.GuiRiverEditorCtrl_setNodeDepth(System.String,System.Single)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRiverEditorCtrlObject.GuiRiverEditorCtrl_setNodeNormal(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRiverEditorCtrlObject.GuiRiverEditorCtrl_setNodePosition(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRiverEditorCtrlObject.GuiRiverEditorCtrl_setNodeWidth(System.String,System.Single)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRiverEditorCtrlObject.GuiRiverEditorCtrl_setSelectedRiver(System.String,System.String)">
            <summary>
            ),  )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRoadEditorCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRoadEditorCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRoadEditorCtrlObject.GuiRoadEditorCtrl_deleteNode(System.String)">
            <summary>
            deleteNode() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRoadEditorCtrlObject.GuiRoadEditorCtrl_deleteRoad(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRoadEditorCtrlObject.GuiRoadEditorCtrl_getMode(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRoadEditorCtrlObject.GuiRoadEditorCtrl_getNodePosition(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRoadEditorCtrlObject.GuiRoadEditorCtrl_getNodeWidth(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRoadEditorCtrlObject.GuiRoadEditorCtrl_getSelectedNode(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRoadEditorCtrlObject.GuiRoadEditorCtrl_getSelectedRoad(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRoadEditorCtrlObject.GuiRoadEditorCtrl_setMode(System.String,System.String)">
            <summary>
            setMode( String mode ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRoadEditorCtrlObject.GuiRoadEditorCtrl_setNodePosition(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRoadEditorCtrlObject.GuiRoadEditorCtrl_setNodeWidth(System.String,System.Single)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRoadEditorCtrlObject.GuiRoadEditorCtrl_setSelectedRoad(System.String,System.String)">
            <summary>
            ),  )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRolloutCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRolloutCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRolloutCtrlObject.collapse(System.String)">
            <summary>
            Collapse the rollout if it is currently expanded.  This will make the rollout's child control invisible.
               @note The rollout will animate to collapsed state.  To instantly collapse without animation, use instantCollapse(). )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRolloutCtrlObject.expand(System.String)">
            <summary>
            Expand the rollout if it is currently collapsed.  This will make the rollout's child control visible.
               @note The rollout will animate to expanded state.  To instantly expand without animation, use instantExpand(). )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRolloutCtrlObject.instantCollapse(System.String)">
            <summary>
            Instantly collapse the rollout without animation.  To smoothly slide the rollout to collapsed state, use collapse(). )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRolloutCtrlObject.instantExpand(System.String)">
            <summary>
            Instantly expand the rollout without animation.  To smoothly slide the rollout to expanded state, use expand(). )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRolloutCtrlObject.isExpanded(System.String)">
            <summary>
            Determine whether the rollout is currently expanded, i.e. whether the child control is visible.
               @return True if the rollout is expanded, false if not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRolloutCtrlObject.sizeToContents(System.String)">
            <summary>
            Resize the rollout to exactly fit around its child control.  This can be used to manually trigger a recomputation of 
               the rollout size. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRolloutCtrlObject.toggleCollapse(System.String)">
            <summary>
            Toggle the current collapse state of the rollout.  If it is currently expanded, then collapse it.  If it 
               is currently collapsed, then expand it. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiRolloutCtrlObject.toggleExpanded(System.String,System.Boolean)">
            <summary>
            Toggle the current expansion state of the rollout  If it is currently expanded, then collapse it.  If it 
               is currently collapsed, then expand it.
               @param instant If true, the rollout will toggle its state without animation.  Otherwise, the rollout will 
                  smoothly slide into the opposite state. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiScrollCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiScrollCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiScrollCtrlObject.computeSizes(System.String)">
            <summary>
            Refresh sizing and positioning of child controls. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiScrollCtrlObject.getScrollPosition(System.String)">
            <summary>
            Get the current coordinates of the scrolled content.
               @return The current position of the scrolled content. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiScrollCtrlObject.getScrollPositionX(System.String)">
            <summary>
            Get the current X coordinate of the scrolled content.
               @return The current X coordinate of the scrolled content. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiScrollCtrlObject.getScrollPositionY(System.String)">
            <summary>
            Get the current Y coordinate of the scrolled content.
               @return The current Y coordinate of the scrolled content. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiScrollCtrlObject.scrollToBottom(System.String)">
            <summary>
            Scroll all the way to the bottom of the vertical scrollbar and the left of the horizontal bar. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiScrollCtrlObject.scrollToObject(System.String,System.String)">
            <summary>
            Scroll the control so that the given child @a control is visible.
               @param control A child control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiScrollCtrlObject.scrollToTop(System.String)">
            <summary>
            Scroll all the way to the top of the vertical and left of the horizontal scrollbar. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiScrollCtrlObject.setScrollPosition(System.String,System.Int32,System.Int32)">
            <summary>
            Set the position of the scrolled content.
               @param x Position on X axis.
               @param y Position on y axis. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.addThread(System.String)">
            <summary>
            Add a new thread (initially without any sequence set) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.computeShapeBounds(System.String)">
            <summary>
            Compute the bounding box of the shape using the current detail and node transforms
               @return the bounding box \"min.x min.y min.z max.x max.y max.z\" )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.exportToCollada(System.String,System.String)">
            <summary>
            Export the current shape and all mounted objects to COLLADA (.dae).
               Note that animation is not exported, and all geometry is combined into a 
               single mesh.
               @param path Destination filename )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.fitToShape(System.String)">
            <summary>
            Adjust the camera position and zoom to fit the shape within the view. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.getMeshHidden(System.String,System.String)">
            <summary>
            Return whether the named object is currently hidden )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.getMountThreadDir(System.String,System.Int32)">
            <summary>
            Get the playback direction of the sequence playing on this mounted shape
               @param slot mounted shape slot
               @return direction of the sequence (-1=reverse, 0=paused, 1=forward) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.getMountThreadPos(System.String,System.Int32)">
            <summary>
            Get the playback position of the sequence playing on this mounted shape
               @param slot mounted shape slot
               @return playback position of the sequence (0-1) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.getMountThreadSequence(System.String,System.Int32)">
            <summary>
            Get the name of the sequence playing on this mounted shape
               @param slot mounted shape slot
               @return name of the sequence (if any) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.getThreadCount(System.String)">
            <summary>
            Get the number of threads
               @return the number of threads )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.getThreadSequence(System.String)">
            <summary>
            Get the name of the sequence assigned to the active thread )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.mountShape(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Mount a shape onto the main shape at the specified node
               @param shapePath path to the shape to mount
               @param nodeName name of the node on the main shape to mount to
               @param type type of mounting to use (Object, Image or Wheel)
               @param slot mount slot )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.refreshShape(System.String)">
            <summary>
            Refresh the shape (used when the shape meshes or nodes have been added or removed) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.refreshThreadSequences(System.String)">
            <summary>
            Refreshes thread sequences (in case of removed/renamed sequences )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.removeThread(System.String,System.Int32)">
            <summary>
            Removes the specifed thread
               @param slot index of the thread to remove )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.setAllMeshesHidden(System.String,System.Boolean)">
            <summary>
            Show or hide all objects in the shape )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.setMeshHidden(System.String,System.String,System.Boolean)">
            <summary>
            Show or hide the named object in the shape )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.setModel(System.String,System.String)">
            <summary>
            Sets the model to be displayed in this control
               @param shapeName Name of the model to display.
               @return True if the model was loaded successfully, false otherwise. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.setMountNode(System.String,System.Int32,System.String)">
            <summary>
            Set the node a shape is mounted to.
               @param slot mounted shape slot
               @param nodename name of the node to mount to )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.setMountThreadDir(System.String,System.Int32,System.Single)">
            <summary>
            Set the playback direction of the shape mounted in the specified slot
               @param slot mounted shape slot
               @param dir playback direction (-1=backwards, 0=paused, 1=forwards) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.setMountThreadPos(System.String,System.Int32,System.Single)">
            <summary>
            Set the sequence position of the shape mounted in the specified slot
               @param slot mounted shape slot
               @param pos sequence position (0-1) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.setMountThreadSequence(System.String,System.Int32,System.String)">
            <summary>
            Set the sequence to play for the shape mounted in the specified slot
               @param slot mounted shape slot
               @param name name of the sequence to play )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.setOrbitPos(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            Set the camera orbit position
               @param pos Position in the form \"x y z\" )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.setThreadSequence(System.String,System.String,System.Single,System.Single,System.Boolean)">
            <summary>
            Sets the sequence to play for the active thread.
               @param name name of the sequence to play
               @param duration transition duration (0 for no transition)
               @param pos position in the new sequence to transition to
               @param play if true, the new sequence will play during the transition )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.setTimeScale(System.String,System.Single)">
            <summary>
            Set the time scale of all threads
               @param scale new time scale value )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.unmountAll(System.String)">
            <summary>
            Unmount all shapes )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.unmountShape(System.String,System.Int32)">
            <summary>
            Unmount the shape in the specified slot
               @param slot mounted shape slot )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiShapeEdPreviewObject.updateNodeTransforms(System.String)">
            <summary>
            Refresh the shape node transforms (used when a node transform has been modified externally) )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiSliderCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiSliderCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiSliderCtrlObject.getValue(System.String)">
            <summary>
            Get the current value of the slider based on the position of the thumb.
               @return Slider position (from range.x to range.y). )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiSliderCtrlObject.isThumbBeingDragged(System.String)">
            <summary>
            Returns true if the thumb is currently being dragged by the user.  This method is mainly useful 
               for scrubbing type sliders where the slider position is sync'd to a changing value.  When the 
               user is dragging the thumb, however, the sync'ing should pause and not get in the way of the user. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiSliderCtrlObject.setValue(System.String,System.Single,System.Boolean)">
            <summary>
            Set position of the thumb on the slider.
               @param pos New slider position (from range.x to range.y)
               @param doCallback If true, the altCommand callback will be invoked )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiStackControlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiStackControlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiStackControlObject.freeze(System.String,System.Boolean)">
            <summary>
            Prevents control from restacking - useful when adding or removing child controls
               @param freeze True to freeze the control, false to unfreeze it
               @tsexample
               %stackCtrl.freeze(true);
               // add controls to stack
               %stackCtrl.freeze(false);
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiStackControlObject.isFrozen(System.String)">
            <summary>
            Return whether or not this control is frozen )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiStackControlObject.updateStack(System.String)">
            <summary>
            Restack the child controls. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiSwatchButtonCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiSwatchButtonCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiSwatchButtonCtrlObject.setColor(System.String,System.String)">
            <summary>
            Set the color of the swatch control.
               @param newColor The new color string given to the swatch control in float format \"r g b a\".
               @note It's also important to note that when setColor is called causes
               the control's altCommand field to be executed. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTabBookCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTabBookCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTabBookCtrlObject.addPage(System.String,System.String)">
            <summary>
             ),
               Add a new tab page to the control.
               @param title Title text for the tab page header. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTabBookCtrlObject.getSelectedPage(System.String)">
            <summary>
            Get the index of the currently selected tab page.
               @return Index of the selected tab page or -1 if no tab page is selected. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTabBookCtrlObject.selectPage(System.String,System.Int32)">
            <summary>
            Set the selected tab page.
               @param index Index of the tab page. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTableControlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTableControlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTableControlObject.addChildRow(System.String,System.String,System.Int32)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTableControlObject.addHeading(System.String,System.String,System.Int32)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTableControlObject.clearChildren(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTableControlObject.findColumnTextIndex(System.String,System.Int32,System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTableControlObject.getSelectedRow(System.String)">
            <summary>
            @brief Returns the selected row index (not the row ID).
               @tsexample
               // Acquire the selected row index
               %rowIndex = %thisGuiTextListCtrl.getSelectedRow();
               @endtsexample
               @return Index of the selected row
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTableControlObject.setColumnSort(System.String,System.Int32,System.Boolean)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTableControlObject.setSelectedRow(System.String,System.Int32)">
            <summary>
            @briefSelects the specified row.
               @param rowNum Row number to set selected.
               @tsexample
               // Define the row number to set selected
               %rowNum = \"4\";
               %guiTextListCtrl.setSelectedRow(%rowNum);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTabPageCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTabPageCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTabPageCtrlObject.select(System.String)">
            <summary>
            Select this page in its tab book. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTerrPreviewCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTerrPreviewCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTerrPreviewCtrlObject.GuiTerrPreviewCtrl_getOrigin(System.String)">
            <summary>
            Return a Point2F containing the position of the origin.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTerrPreviewCtrlObject.GuiTerrPreviewCtrl_getRoot(System.String)">
            <summary>
            Return a Point2F representing the position of the root.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTerrPreviewCtrlObject.GuiTerrPreviewCtrl_getValue(System.String)">
            <summary>
            Returns a 4-tuple containing: root_x root_y origin_x origin_y)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTerrPreviewCtrlObject.GuiTerrPreviewCtrl_reset(System.String)">
            <summary>
            Reset the view of the terrain.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTerrPreviewCtrlObject.GuiTerrPreviewCtrl_setOrigin(System.String,WinterLeaf.Engine.Containers.Point2F)">
            <summary>
            (float x, float y)
                          Set the origin of the view.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTerrPreviewCtrlObject.GuiTerrPreviewCtrl_setRoot(System.String)">
            <summary>
            Add the origin to the root and reset the origin.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTerrPreviewCtrlObject.GuiTerrPreviewCtrl_setValue(System.String,System.String)">
            <summary>
            Accepts a 4-tuple in the same form as getValue returns.
                          @see GuiTerrPreviewCtrl::getValue())
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextCtrlObject.setText(System.String,System.String)">
            <summary>
            @brief Sets the text in the control.
               @param text Text to display in the control.
               @tsexample
               // Set the text to show in the control
               %text = \"Gideon - Destroyer of World\";
               // Inform the GuiTextCtrl control to change its text to the defined value
               %thisGuiTextCtrl.setText(%text);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextCtrlObject.setTextID(System.String,System.String)">
            <summary>
            @brief Maps the text ctrl to a variable used in localization, rather than raw text.
               @param textID Name of variable text should be mapped to
               @tsexample
               // Inform the GuiTextCtrl control of the textID to use
               %thisGuiTextCtrl.setTextID(\"STR_QUIT\");
               @endtsexample
               @see GuiControl
               @see Localization)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextEditCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextEditCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextEditCtrlObject.GuiTextEditCtrl_selectText(System.String,System.Int32,System.Int32)">
            <summary>
            textEditCtrl.selectText( %startBlock, %endBlock ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextEditCtrlObject.clearSelectedText(System.String)">
            <summary>
            @brief Unselects all selected text in the control.
               @tsexample
               // Inform the control to unselect all of its selected text
               %thisGuiTextEditCtrl.clearSelectedText();
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextEditCtrlObject.forceValidateText(System.String)">
            <summary>
            @brief Force a validation to occur.
               @tsexample
               // Inform the control to force a validation of its text.
               %thisGuiTextEditCtrl.forceValidateText();
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextEditCtrlObject.getCursorPos(System.String)">
            <summary>
            @brief Returns the current position of the text cursor in the control.
               @tsexample
               // Acquire the cursor position in the control
               %position = %thisGuiTextEditCtrl.getCursorPost();
               @endtsexample
               @return Text cursor position within the control.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextEditCtrlObject.getText(System.String)">
            <summary>
            @brief Acquires the current text displayed in this control.
               @tsexample
               // Acquire the value of the text control.
               %text = %thisGuiTextEditCtrl.getText();
               @endtsexample
               @return The current text within the control.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextEditCtrlObject.isAllTextSelected(System.String)">
            <summary>
            @brief Checks to see if all text in the control has been selected.
               @tsexample
               // Check to see if all text has been selected or not.
               %allSelected = %thisGuiTextEditCtrl.isAllTextSelected();
               @endtsexample
               @return True if all text in the control is selected, otherwise false.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextEditCtrlObject.selectAllText(System.String)">
            <summary>
            @brief Selects all text within the control.
               @tsexample
               // Inform the control to select all of its text.
               %thisGuiTextEditCtrl.selectAllText();
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextEditCtrlObject.setCursorPos(System.String,System.Int32)">
            <summary>
            @brief Sets the text cursor at the defined position within the control.
               @param position Text position to set the text cursor.
               @tsexample
               // Define the cursor position
               %position = \"12\";
               // Inform the GuiTextEditCtrl control to place the text cursor at the defined position
               %thisGuiTextEditCtrl.setCursorPos(%position);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextEditCtrlObject.setText(System.String,System.String)">
            <summary>
            @brief Sets the text in the control.
               @param text Text to place in the control.
               @tsexample
               // Define the text to display
               %text = \"Text!\"
               // Inform the GuiTextEditCtrl to display the defined text
               %thisGuiTextEditCtrl.setText(%text);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject.addRow(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            ,-1),
               @brief Adds a new row at end of the list with the defined id and text.
               If index is used, then the new row is inserted at the row location of 'index'.
               @param id Id of the new row.
               @param text Text to display at the new row.
               @param index Index to insert the new row at. If not used, new row will be placed at the end of the list.
               @tsexample
               // Define the id
               %id = \"4\";
               // Define the text to display
               %text = \"Display Text\"
               // Define the index (optional)
               %index = \"2\"
               // Inform the GuiTextListCtrl control to add the new row with the defined information.
               %rowIndex = %thisGuiTextListCtrl.addRow(%id,%text,%index);
               @endtsexample
               @return Returns the row index of the new row. If 'index' was defined, then this just returns the number of rows in the list.
               @see References)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject.clear(System.String)">
            <summary>
            @brief Clear the list.
               @tsexample
               // Inform the GuiTextListCtrl control to clear its contents
               %thisGuiTextListCtrl.clear();
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject.clearSelection(System.String)">
            <summary>
            @brief Set the selection to nothing.
               @tsexample
               // Deselect anything that is currently selected
               %thisGuiTextListCtrl.clearSelection();
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject.findColumnTextIndex(System.String,System.Int32,System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject.findTextIndex(System.String,System.String)">
            <summary>
            @brief Find needle in the list, and return the row number it was found in.
               @param needle Text to find in the list.
               @tsexample
               // Define the text to find in the list
               %needle = \"Text To Find\";
               // Request the row number that contains the defined text to find
               %rowNumber = %thisGuiTextListCtrl.findTextIndex(%needle);
               @endtsexample
               @return Row number that the defined text was found in,
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject.getRowId(System.String,System.Int32)">
            <summary>
            @brief Get the row ID for an index.
               @param index Index to get the RowID at
               @tsexample
               // Define the index
               %index = \"3\";
               // Request the row ID at the defined index
               %rowId = %thisGuiTextListCtrl.getRowId(%index);
               @endtsexample
               @return RowId at the defined index.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject.getRowNumById(System.String,System.Int32)">
            <summary>
            @brief Get the row number for a specified id.
               @param id Id to get the row number at
               @tsexample
               // Define the id
               %id = \"4\";
               // Request the row number from the GuiTextListCtrl control at the defined id.
               %rowNumber = %thisGuiTextListCtrl.getRowNumById(%id);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject.getRowText(System.String,System.Int32)">
            <summary>
            @brief Get the text of the row with the specified index.
               @param index Row index to acquire the text at.
               @tsexample
               // Define the row index
               %index = \"5\";
               // Request the text from the row at the defined index
               %rowText = %thisGuiTextListCtrl.getRowText(%index);
               @endtsexample
               @return Text at the defined row index.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject.getRowTextById(System.String,System.Int32)">
            <summary>
            @brief Get the text of a row with the specified id.
               @tsexample
               // Define the id
               %id = \"4\";
               // Inform the GuiTextListCtrl control to return the text at the defined row id
               %rowText = %thisGuiTextListCtrl.getRowTextById(%id);
               @endtsexample
               @return Row text at the requested row id.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject.getSelectedId(System.String)">
            <summary>
            @brief Get the ID of the currently selected item.
               @tsexample
               // Acquire the ID of the selected item in the list.
               %id = %thisGuiTextListCtrl.getSelectedId();
               @endtsexample
               @return The id of the selected item in the list.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject.getSelectedRow(System.String)">
            <summary>
            @brief Returns the selected row index (not the row ID).
               @tsexample
               // Acquire the selected row index
               %rowIndex = %thisGuiTextListCtrl.getSelectedRow();
               @endtsexample
               @return Index of the selected row
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject.isRowActive(System.String,System.Int32)">
            <summary>
            @brief Check if the specified row is currently active or not.
               @param rowNum Row number to check the active state.
               @tsexample
               // Define the row number
               %rowNum = \"5\";
               // Request the active state of the defined row number from the GuiTextListCtrl control.
               %rowActiveState = %thisGuiTextListCtrl.isRowActive(%rowNum);
               @endtsexample
               @return Active state of the defined row number.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject.removeRow(System.String,System.Int32)">
            <summary>
            @brief Remove a row from the table, based on its index.
               @param index Row index to remove from the list.
               @tsexample
               // Define the row index
               %index = \"4\";
               // Inform the GuiTextListCtrl control to remove the row at the defined row index
               %thisGuiTextListCtrl.removeRow(%index);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject.removeRowById(System.String,System.Int32)">
            <summary>
            @brief Remove row with the specified id.
               @param id Id to remove the row entry at
               @tsexample
               // Define the id
               %id = \"4\";
               // Inform the GuiTextListCtrl control to remove the row at the defined id
               %thisGuiTextListCtrl.removeRowById(%id);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject.rowCount(System.String)">
            <summary>
            @brief Get the number of rows.
               @tsexample
               // Get the number of rows in the list
               %rowCount = %thisGuiTextListCtrl.rowCount();
               @endtsexample
               @return Number of rows in the list.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject.scrollVisible(System.String,System.Int32)">
            <summary>
            @brief Scroll so the specified row is visible
               @param rowNum Row number to make visible
               @tsexample
               // Define the row number to make visible
               %rowNum = \"4\";
               // Inform the GuiTextListCtrl control to scroll the list so the defined rowNum is visible.
               %thisGuiTextListCtrl.scrollVisible(%rowNum);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject.setRowActive(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Mark a specified row as active/not.
               @param rowNum Row number to change the active state.
               @param active Boolean active state to set the row number.
               @tsexample
               // Define the row number
               %rowNum = \"4\";
               // Define the boolean active state
               %active = \"true\";
               // Informthe GuiTextListCtrl control to set the defined active state at the defined row number.
               %thisGuiTextListCtrl.setRowActive(%rowNum,%active);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject.setRowById(System.String,System.Int32,System.String)">
            <summary>
            @brief Sets the text at the defined id.
               @param id Id to change.
               @param text Text to use at the Id.
               @tsexample
               // Define the id
               %id = \"4\";
               // Define the text
               %text = \"Text To Display\";
               // Inform the GuiTextListCtrl control to display the defined text at the defined id
               %thisGuiTextListCtrl.setRowById(%id,%text);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject.setSelectedById(System.String,System.Int32)">
            <summary>
            @brief Finds the specified entry by id, then marks its row as selected.
               @param id Entry within the text list to make selected.
               @tsexample
               // Define the id
               %id = \"5\";
               // Inform the GuiTextListCtrl control to set the defined id entry as selected
               %thisGuiTextListCtrl.setSelectedById(%id);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject.setSelectedRow(System.String,System.Int32)">
            <summary>
            @briefSelects the specified row.
               @param rowNum Row number to set selected.
               @tsexample
               // Define the row number to set selected
               %rowNum = \"4\";
               %guiTextListCtrl.setSelectedRow(%rowNum);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject.sort(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Performs a standard (alphabetical) sort on the values in the specified column.
               @param columnId Column ID to perform the sort on.
               @param increasing If false, sort will be performed in reverse.
               @tsexample
               // Define the columnId
               %id = \"1\";
               // Define if we are increasing or not
               %increasing = \"false\";
               // Inform the GuiTextListCtrl to perform the sort operation
               %thisGuiTextListCtrl.sort(%id,%increasing);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTextListCtrlObject.sortNumerical(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Perform a numerical sort on the values in the specified column.
               Detailed description
               @param columnId Column ID to perform the sort on.
               @param increasing If false, sort will be performed in reverse.
               @tsexample
               // Define the columnId
               %id = \"1\";
               // Define if we are increasing or not
               %increasing = \"false\";
               // Inform the GuiTextListCtrl to perform the sort operation
               %thisGuiTextListCtrl.sortNumerical(%id,%increasing);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTheoraCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTheoraCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTheoraCtrlObject.getCurrentTime(System.String)">
            <summary>
            Get the current playback time.
               @return The elapsed playback time in seconds. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTheoraCtrlObject.isPlaybackDone(System.String)">
            <summary>
            Test whether the video has finished playing.
               @return True if the video has finished playing, false otherwise. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTheoraCtrlObject.pause(System.String)">
            <summary>
            Pause playback of the video.  If the video is not currently playing, the call is ignored.
               While stopped, the control displays the last frame. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTheoraCtrlObject.play(System.String)">
            <summary>
            Start playing the video.  If the video is already playing, the call is ignored. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTheoraCtrlObject.setFile(System.String,System.String)">
            <summary>
            Set the video file to play.  If a video is already playing, playback is stopped and 
               the new video file is loaded.
               @param filename The video file to load. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTheoraCtrlObject.stop(System.String)">
            <summary>
            Stop playback of the video.  The next call to play() will then start playback from the beginning of the video.
               While stopped, the control renders empty with just the background color. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTickCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTickCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTickCtrlObject.GuiTickCtrl_setProcessTicks(System.String,System.Boolean)">
            <summary>
            ( [tick = true] ) - This will set this object to either be processing ticks or not )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiToolboxButtonCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiToolboxButtonCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiToolboxButtonCtrlObject.GuiToolboxButtonCtrl_setHoverBitmap(System.String,System.String)">
            <summary>
            ( filepath name ) sets the bitmap that shows when the button is disabled)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiToolboxButtonCtrlObject.GuiToolboxButtonCtrl_setLoweredBitmap(System.String,System.String)">
            <summary>
            ( filepath name ) sets the bitmap that shows when the button is disabled)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiToolboxButtonCtrlObject.GuiToolboxButtonCtrl_setNormalBitmap(System.String,System.String)">
            <summary>
            ( filepath name ) sets the bitmap that shows when the button is active)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_addChildSelectionByValue(System.String,System.Int32,System.String)">
            <summary>
            addChildSelectionByValue(TreeItemId parent, value))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_buildIconTable(System.String,System.String)">
            <summary>
            (builds an icon table))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_buildVisibleTree(System.String,System.Boolean)">
            <summary>
            Build the visible tree)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_cancelRename(System.String)">
            <summary>
            For internal use. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_clear(System.String)">
            <summary>
            () - empty tree)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_editItem(System.String,System.Int32,System.String,System.String)">
            <summary>
            (TreeItemId item, string newText, string newValue))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_expandItem(System.String,System.Int32,System.Boolean)">
            <summary>
            (TreeItemId item, bool expand=true))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_findItemByObjectId(System.String,System.Int32)">
            <summary>
            (find item by object id and returns the mId))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_getChild(System.String,System.Int32)">
            <summary>
            (TreeItemId item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_getFirstRootItem(System.String)">
            <summary>
            Get id for root item.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_getItemCount(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_getItemText(System.String,System.Int32)">
            <summary>
            (TreeItemId item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_getItemValue(System.String,System.Int32)">
            <summary>
            (TreeItemId item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_getNextSibling(System.String,System.Int32)">
            <summary>
            (TreeItemId item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_getParentItem(System.String,System.Int32)">
            <summary>
            (TreeItemId item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_getPrevSibling(System.String,System.Int32)">
            <summary>
            (TreeItemId item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_getSelectedItem(System.String,System.Int32)">
            <summary>
            ( int index=0 ) - Return the selected item at the given index.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_getSelectedItemList(System.String)">
            <summary>
            returns a space seperated list of mulitple item ids)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_getSelectedItemsCount(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_getSelectedObject(System.String,System.Int32)">
            <summary>
            ( int index=0 ) - Return the currently selected SimObject at the given index in inspector mode or -1)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_getSelectedObjectList(System.String)">
            <summary>
            Returns a space sperated list of all selected object ids.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_getTextToRoot(System.String,System.Int32,System.String)">
            <summary>
            (TreeItemId item,Delimiter=none) gets the text from the current node to the root, concatenating at each branch upward, with a specified delimiter optionally)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_isParentItem(System.String,System.Int32)">
            <summary>
            ( int id ) - Returns true if the given item contains child items. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_markItem(System.String,System.Int32,System.Boolean)">
            <summary>
            (TreeItemId item, bool mark=true))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_moveItemDown(System.String,System.Int32)">
            <summary>
            (TreeItemId item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_moveItemUp(System.String,System.Int32)">
            <summary>
            (TreeItemId item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_onRenameValidate(System.String)">
            <summary>
            For internal use. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_open(System.String,System.String,System.Boolean)">
            <summary>
            (SimSet obj, bool okToEdit=true) Set the root of the tree view to the specified object, or to the root set.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_removeAllChildren(System.String,System.Int32)">
            <summary>
            removeAllChildren(TreeItemId parent))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_removeChildSelectionByValue(System.String,System.Int32,System.String)">
            <summary>
            removeChildSelectionByValue(TreeItemId parent, value))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_removeItem(System.String,System.Int32)">
            <summary>
            (TreeItemId item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_removeSelection(System.String,System.Int32)">
            <summary>
            (deselects an item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_scrollVisible(System.String,System.Int32)">
            <summary>
            (TreeItemId item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_scrollVisibleByObjectId(System.String,System.Int32)">
            <summary>
            (show item by object id. returns true if sucessful.))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_selectItem(System.String,System.Int32,System.Boolean)">
            <summary>
            (TreeItemId item, bool select=true))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_setDebug(System.String,System.Boolean)">
            <summary>
            ( bool value=true ) - Enable/disable debug output. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_setItemImages(System.String,System.Int32,System.SByte,System.SByte)">
            <summary>
            ( int id, int normalImage, int expandedImage ) - Sets the normal and expanded images to show for the given item. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_setItemTooltip(System.String,System.Int32,System.String)">
            <summary>
            ( int id, string text ) - Set the tooltip to show for the given item. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_showItemRenameCtrl(System.String,System.Int32)">
            <summary>
            ( TreeItemId id ) - Show the rename text field for the given item (only one at a time). )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.GuiTreeViewCtrl_sort(System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            ( int parent, bool traverseHierarchy=false, bool parentsFirst=false, bool caseSensitive=true ) - Sorts all items of the given parent (or root).  With 'hierarchy', traverses hierarchy. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.addSelection(System.String,System.Int32,System.Boolean)">
            <summary>
            Add an item/object to the current selection.
               @param id ID of item/object to add to the selection.
               @param isLastSelection Whether there are more pending items/objects to be added to the selection.  If false, 
                  the control will defer refreshing the tree and wait until addSelection() is called with this parameter set 
                  to true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.clearFilterText(System.String)">
            <summary>
            Clear the current item filtering pattern.
               @see setFilterText
               @see getFilterText )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.clearSelection(System.String)">
            <summary>
            Unselect all currently selected items. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.deleteSelection(System.String)">
            <summary>
            Delete all items/objects in the current selection. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.findChildItemByName(System.String,System.Int32,System.String)">
            <summary>
            Get the child item of the given parent item whose text matches @a childName.
               @param parentId Item ID of the parent in which to look for the child.
               @param childName Text of the child item to find.
               @return ID of the child item or -1 if no child in @a parentId has the given text @a childName.
               @note This method does not recurse, i.e. it only looks for direct children. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.findItemByName(System.String,System.String)">
            <summary>
            Get the ID of the item whose text matches the given @a text.
               @param text Item text to match.
               @return ID of the item or -1 if no item matches the given text. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.findItemByValue(System.String,System.String)">
            <summary>
            Get the ID of the item whose value matches @a value.
               @param value Value text to match.
               @return ID of the item or -1 if no item has the given value. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.getFilterText(System.String)">
            <summary>
            Get the current filter expression.  Only tree items whose text matches this expression 
               are displayed.  By default, the expression is empty and all items are shown.
               @return The current filter pattern or an empty string if no filter pattern is currently active.
               @see setFilterText
               @see clearFilterText )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.hideSelection(System.String,System.Boolean)">
            <summary>
            Call SimObject::setHidden( @a state ) on all objects in the current selection.
               @param state Visibility state to set objects in selection to. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.insertItem(System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            , , 0, 0 ),
               Add a new item to the tree.
               @param parentId Item ID of parent to which to add the item as a child.  0 is root item.
               @param text Text to display on the item in the tree.
               @param value Behind-the-scenes value of the item.
               @param icon
               @param normalImage
               @param expandedImage
               @return The ID of the newly added item. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.insertObject(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Inserts object as a child to the given parent. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.isItemSelected(System.String,System.Int32)">
            <summary>
            Check whether the given item is currently selected in the tree.
               @param id Item/object ID.
               @return True if the given item/object is currently selected in the tree. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.lockSelection(System.String,System.Boolean)">
            <summary>
            Set whether the current selection can be changed by the user or not.
               @param lock If true, the current selection is frozen and cannot be changed.  If false, 
                  the selection may be modified. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.setFilterText(System.String,System.String)">
            <summary>
            Set the pattern by which to filter items in the tree.  Only items in the tree whose text 
               matches this pattern are displayed.
               @param pattern New pattern based on which visible items in the tree should be filtered.  If empty, all items become visible.
               @see getFilterText
               @see clearFilterText )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.toggleHideSelection(System.String)">
            <summary>
            Toggle the hidden state of all objects in the current selection. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTreeViewCtrlObject.toggleLockSelection(System.String)">
            <summary>
            Toggle the locked state of all objects in the current selection. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTSCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTSCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTSCtrlObject.calculateViewDistance(System.String,System.Single)">
            <summary>
            Given the camera's current FOV, get the distance from the camera's viewpoint at which the given radius will fit in the render area.
               @param radius Radius in world-space units which should fit in the view.
               @return The distance from the viewpoint at which the given radius would be fully visible. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTSCtrlObject.getClickVector(System.String,WinterLeaf.Engine.Containers.Point2I)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTSCtrlObject.getWorldPosition(System.String,WinterLeaf.Engine.Containers.Point2I)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTSCtrlObject.getWorldToScreenScale(System.String)">
            <summary>
            Get the ratio between world-space units and pixels.
               @return The amount of world-space units covered by the extent of a single pixel. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTSCtrlObject.project(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            Transform world-space coordinates to screen-space (x, y, depth) coordinates.
               @param worldPosition The world-space position to transform to screen-space.
               @return The  )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiTSCtrlObject.unproject(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            Transform 3D screen-space coordinates (x, y, depth) to world space.
               This method can be, for example, used to find the world-space position relating to the current mouse cursor position.
               @param screenPosition The x/y position on the screen plus the depth from the screen-plane outwards.
               @return The world-space position corresponding to the given screen-space coordinates. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiVariableInspectorObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiVariableInspectorObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiVariableInspectorObject.GuiVariableInspector_loadVars(System.String,System.String)">
            <summary>
            loadVars( searchString ) )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiWindowCtrlObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiWindowCtrlObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiWindowCtrlObject.attachTo(System.String,System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiWindowCtrlObject.ClosePopOut(System.String)">
            <summary>
            Puts the guiwindow back on the main canvas. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiWindowCtrlObject.getWindowTitle(System.String)">
            <summary>
            Returns the title of the window. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiWindowCtrlObject.isTitleSet(System.String)">
            <summary>
            Returns if the title can be set or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiWindowCtrlObject.OpenPopOut(System.String)">
            <summary>
            Puts the guiwindow on a new canvas. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiWindowCtrlObject.selectWindow(System.String)">
            <summary>
            Bring the window to the front. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiWindowCtrlObject.setCollapseGroup(System.String,System.Boolean)">
            <summary>
            Set the window's collapsing state. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiWindowCtrlObject.setContextTitle(System.String,System.Boolean)">
            <summary>
            Displays the option to set the title of the window. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiWindowCtrlObject.setWindowTitle(System.String,System.String)">
            <summary>
            Sets the title of the window. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.GuiWindowCtrlObject.toggleCollapseGroup(System.String)">
            <summary>
            Toggle the window collapsing. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.HTTPObjectObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.HTTPObjectObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.HTTPObjectObject.get(System.String,System.String,System.String,System.String)">
            <summary>
             ),
               @brief Send a GET command to a server to send or retrieve data.
            
               @param Address HTTP web address to send this get call to. Be sure to include the port at the end (IE: \"www.garagegames.com:80\").
               @param requirstURI Specific location on the server to access (IE: \"index.php\".)
               @param query Optional. Actual data to transmit to the server. Can be anything required providing it sticks with limitations of the HTTP protocol. 
               If you were building the URL manually, this is the text that follows the question mark.  For example: http://www.google.com/ig/api?b>weather=Las-Vegas,US/b>
               
               @tsexample
            	   // Create an HTTP object for communications
            	   %httpObj = new HTTPObject();
            	   // Specify a URL to transmit to
                  %url = \"www.garagegames.com:80\";
            	   // Specify a URI to communicate with
            	   %URI = \"/index.php\";
            	   // Specify a query to send.
            	   %query = \"\";
            	   // Send the GET command to the server
            	   %httpObj.get(%url,%URI,%query);
               @endtsexample
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.HTTPObjectObject.post(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            @brief Send POST command to a server to send or retrieve data.
            
               @param Address HTTP web address to send this get call to. Be sure to include the port at the end (IE: \"www.garagegames.com:80\").
               @param requirstURI Specific location on the server to access (IE: \"index.php\".)
               @param query Actual data to transmit to the server. Can be anything required providing it sticks with limitations of the HTTP protocol. 
               @param post Submission data to be processed.
               
               @note The post() method is currently non-functional.
            
               @tsexample
            	   // Create an HTTP object for communications
            	   %httpObj = new HTTPObject();
            	   // Specify a URL to transmit to
                  %url = \"www.garagegames.com:80\";
            	   // Specify a URI to communicate with
            	   %URI = \"/index.php\";
            	   // Specify a query to send.
            	   %query = \"\";
            	   // Specify the submission data.
            	   %post = \"\";
            	   // Send the POST command to the server
            	   %httpObj.POST(%url,%URI,%query,%post);
               @endtsexample
               )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ItemObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ItemObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ItemObject.getLastStickyNormal(System.String)">
            <summary>
            @brief Get the normal of the surface on which the object is stuck.   
               @return Returns The XYZ normal from where this Item is stuck.
               @tsexample
            	   // Acquire the position where this Item is currently stuck
            	   %stuckPosition = %item.getLastStickPos();
               @endtsexample
               @note Server side only.
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ItemObject.getLastStickyPos(System.String)">
            <summary>
            @brief Get the position on the surface on which this Item is stuck.   
               @return Returns The XYZ position of where this Item is stuck.
               @tsexample
            	   // Acquire the position where this Item is currently stuck
            	   %stuckPosition = %item.getLastStickPos();
               @endtsexample
               @note Server side only.
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ItemObject.isAtRest(System.String)">
            <summary>
            @brief Is the object at rest (ie, no longer moving)?   
               @return True if the object is at rest, false if it is not.
               @tsexample
            	   // Query the item on if it is or is not at rest.
            	   %isAtRest = %item.isAtRest();
               @endtsexample
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ItemObject.isRotating(System.String)">
            <summary>
            @brief Is the object still rotating?   
               @return True if the object is still rotating, false if it is not.
               @tsexample
            	   // Query the item on if it is or is not rotating.
            	   %isRotating = %itemData.isRotating();
               @endtsexample
               @see rotate
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ItemObject.isStatic(System.String)">
            <summary>
            @brief Is the object static (ie, non-movable)?   
               @return True if the object is static, false if it is not.
               @tsexample
            	   // Query the item on if it is or is not static.
            	   %isStatic = %itemData.isStatic();
               @endtsexample
               @see static
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ItemObject.setCollisionTimeout(System.String,System.Int32)">
            <summary>
            @brief Temporarily disable collisions against a specific ShapeBase object.
            
               This is useful to prevent a player from immediately picking up an Item they have 
               just thrown.  Only one object may be on the timeout list at a time.  The timeout is 
               defined as 15 ticks.
            
               @param objectID ShapeBase object ID to disable collisions against.
               @return Returns true if the ShapeBase object requested could be found, false if it could not.
            
               @tsexample
            	   // Set the ShapeBase Object ID to disable collisions against
            	   %ignoreColObj = %player.getID();
            	   // Inform this Item object to ignore collisions temproarily against the %ignoreColObj.
            	   %item.setCollisionTimeout(%ignoreColObj);
               @endtsexample
               )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.LangTableObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.LangTableObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.LangTableObject.LangTable_addLanguage(System.String,System.String,System.String)">
            <summary>
            , ), 
            			  (string filename, [string languageName])
            			  @brief Adds a language to the table
            			  @param filename Name and path to the language file
            			  @param languageName Optional name to assign to the new language entry
            			  @return True If file was successfully found and language created
            			  )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.LangTableObject.LangTable_getCurrentLanguage(System.String)">
            <summary>
            ()
            			  @brief Get the ID of the current language table
            			  @return Numerical ID of the current language table)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.LangTableObject.LangTable_getLangName(System.String,System.Int32)">
            <summary>
            (int language)
            			  @brief Return the readable name of the language table
            			  @param language Numerical ID of the language table to access
            			  @return String containing the name of the table, NULL if ID was invalid or name was never specified)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.LangTableObject.LangTable_getNumLang(System.String)">
            <summary>
            ()
            			  @brief Used to find out how many languages are in the table
            			  @return Size of the vector containing the languages, numerical)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.LangTableObject.LangTable_getString(System.String,System.UInt32)">
            <summary>
            (string filename)
            			  @brief Grabs a string from the specified table
            			  If an invalid is passed, the function will attempt to 
            			  to grab from the default table
            			  @param filename Name of the language table to access
            			  @return Text from the specified language table, \"\" if ID was invalid and default table is not set)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.LangTableObject.LangTable_setCurrentLanguage(System.String,System.Int32)">
            <summary>
            (int language)
            			  @brief Sets the current language table for grabbing text
            			  @param language ID of the table)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.LangTableObject.LangTable_setDefaultLanguage(System.String,System.Int32)">
            <summary>
            (int language)
            			  @brief Sets the default language table
            			  @param language ID of the table)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.LevelInfoObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.LevelInfoObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.LevelInfoObject.setNearClip(System.String,System.String)">
            <summary>
            ( LevelInfo, setNearClip, void, 3, 3, ( F32 nearClip ))
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.LightBaseObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.LightBaseObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.LightBaseObject.LightBase_pauseAnimation(System.String)">
            <summary>
            Stops the light animation. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.LightBaseObject.LightBase_playAnimation(System.String,System.String)">
            <summary>
            ), ( [LightAnimData anim] )\t
               Plays a light animation on the light.  If no LightAnimData is passed the 
               existing one is played.
               @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.LightBaseObject.setLightEnabled(System.String,System.Boolean)">
            <summary>
            @brief Toggles the light on and off
               
               @param state Turns the light on (true) or off (false)
            
               @tsexample
               // Disable the light
               CrystalLight.setLightEnabled(false);
               // Renable the light
               CrystalLight.setLightEnabled(true);
               
               @endtsexample
            )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.LightDescriptionObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.LightDescriptionObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.LightDescriptionObject.apply(System.String)">
            <summary>
            @brief Force an inspectPostApply call for the benefit of tweaking via the console
               
               Normally this functionality is only exposed to objects via the World Editor, once changes have been made. 
               Exposing apply to script allows you to make changes to it on the fly without the World Editor.
            
               @note This is intended for debugging and tweaking, not for game play
            
               @tsexample
               // Change a property of the light description
               RocketLauncherLightDesc.brightness = 10;
               // Make it so
               RocketLauncherLightDesc.apply();
               
               @endtsexample
            )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.LightFlareDataObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.LightFlareDataObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.LightFlareDataObject.apply(System.String)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               Force trigger an inspectPostApply
                               )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.LightningObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.LightningObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.LightningObject.strikeObject(System.String,System.String)">
            <summary>
            Creates a LightningStrikeEvent which strikes a specific object.
               @note This method is currently unimplemented. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.LightningObject.strikeRandomPoint(System.String)">
            <summary>
            Creates a LightningStrikeEvent which attempts to strike and damage a random 
               object in range of the Lightning object.
               @tsexample
               // Generate a damaging lightning strike effect on all clients
               %lightning.strikeRandomPoint();
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.LightningObject.warningFlashes(System.String)">
            <summary>
            @brief Creates a LightningStrikeEvent that triggers harmless lightning 
               bolts on all clients.
               No objects will be damaged by these bolts.
               @tsexample
               // Generate a harmless lightning strike effect on all clients
               %lightning.warningFlashes();
               @endtsexample )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.MaterialObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MaterialObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MaterialObject.Material_dumpInstances(System.String)">
            <summary>
            Dumps a formatted list of the currently allocated material instances for this material to the console. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MaterialObject.Material_flush(System.String)">
            <summary>
            Flushes all material instances that use this material. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MaterialObject.Material_getAnimFlags(System.String,System.UInt32)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MaterialObject.Material_getFilename(System.String)">
            <summary>
            Get filename of material)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MaterialObject.Material_isAutoGenerated(System.String)">
            <summary>
            Returns true if this Material was automatically generated by MaterialList::mapMaterials() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MaterialObject.Material_reload(System.String)">
            <summary>
            Reloads all material instances that use this material. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MaterialObject.Material_setAutoGenerated(System.String,System.Boolean)">
            <summary>
            setAutoGenerated(bool isAutoGenerated): Set whether or not the Material is autogenerated. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.MECreateUndoActionObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MECreateUndoActionObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MECreateUndoActionObject.MECreateUndoAction_addObject(System.String,System.String)">
            <summary>
            ( SimObject obj ))
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.MEDeleteUndoActionObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MEDeleteUndoActionObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MEDeleteUndoActionObject.MEDeleteUndoAction_deleteObject(System.String,System.String)">
            <summary>
            ( SimObject obj ))
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.MenuBarObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MenuBarObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MenuBarObject.MenuBar_attachToCanvas(System.String,System.String,System.Int32)">
            <summary>
            (GuiCanvas, pos))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MenuBarObject.MenuBar_insert(System.String,System.String,System.Int32)">
            <summary>
            (object, pos) insert object at position)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MenuBarObject.MenuBar_removeFromCanvas(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.MeshRoadObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MeshRoadObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MeshRoadObject.postApply(System.String)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               Force trigger an inspectPostApply. This will transmit 
                               material and other fields ( not including nodes ) to client objects.
                               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MeshRoadObject.regenerate(System.String)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               Force MeshRoad to recreate its geometry.
                               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MeshRoadObject.setNodeDepth(System.String,System.Int32,System.Single)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               Sets the depth in meters of a particular node.
                               )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.MessageObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MessageObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MessageObject.Message_addReference(System.String)">
            <summary>
            () Increment the reference count for this message)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MessageObject.Message_freeReference(System.String)">
            <summary>
            () Decrement the reference count for this message)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MessageObject.Message_getType(System.String)">
            <summary>
            () Get message type (script class name or C++ class name if no script defined class))
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.MessageVectorObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MessageVectorObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MessageVectorObject.MessageVector_dump(System.String,System.String,System.String)">
            <summary>
            ), (string filename, string header=NULL)
                          Dump the message vector to a file, optionally prefixing a header.
            			  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MessageVectorObject.clear(System.String)">
            <summary>
            Clear all messages in the vector
               @tsexample
               HudMessageVector.clear();
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MessageVectorObject.deleteLine(System.String,System.Int32)">
            <summary>
            Delete the line at the specified position.
               @param deletePos Position in the vector containing the line to be deleted
               @tsexample
               // Delete the first line (index 0) in the vector...
               HudMessageVector.deleteLine(0);
               @endtsexample
               @return False if deletePos is greater than the number of lines in the current vector)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MessageVectorObject.getLineIndexByTag(System.String,System.Int32)">
            <summary>
            Scan through the vector, returning the line number of the first line that matches the specified tag; else returns -1 if no match was found.
               @param tag Numerical value assigned to a message when it was added or inserted
               @tsexample
               // Locate a line of text tagged with the value \"1\", then delete it.
               %taggedLine = HudMessageVector.getLineIndexByTag(1);
               HudMessageVector.deleteLine(%taggedLine);
               @endtsexample
               @return Line with matching tag, other wise -1)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MessageVectorObject.getLineTag(System.String,System.Int32)">
            <summary>
            Get the tag of a specified line.
               @param pos Position in vector to grab tag from
               @tsexample
               // Remove all lines that do not have a tag value of 1.
               while( HudMessageVector.getNumLines())
               {
                  %tag = HudMessageVector.getLineTag(1);
                  if(%tag != 1)
                     %tag.delete();
                  HudMessageVector.popFrontLine();
               }
               @endtsexample
               @return Tag value of a given line, if the position is greater than the number of lines return 0)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MessageVectorObject.getLineText(System.String,System.Int32)">
            <summary>
            Get the text at a specified line.
               @param pos Position in vector to grab text from
               @tsexample
               // Print a line of text at position 1.
               %text = HudMessageVector.getLineText(1);
               echo(%text);
               @endtsexample
               @return Text at specified line, if the position is greater than the number of lines return \"\")
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MessageVectorObject.getLineTextByTag(System.String,System.Int32)">
            <summary>
            Scan through the lines in the vector, returning the first line that has a matching tag.
               @param tag Numerical value assigned to a message when it was added or inserted
               @tsexample
               // Locate text in the vector tagged with the value \"1\", then print it
               %taggedText = HudMessageVector.getLineTextByTag(1);
               echo(%taggedText);
               @endtsexample
               @return Text from a line with matching tag, other wise \"\")
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MessageVectorObject.getNumLines(System.String)">
            <summary>
            Get the number of lines in the vector.
               @tsexample
               // Find out how many lines have been stored in HudMessageVector
               %chatLines = HudMessageVector.getNumLines();
               echo(%chatLines);
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MessageVectorObject.insertLine(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Push a line onto the back of the list.
               @param msg Text that makes up the message
               @param tag Numerical value associated with this message, useful for searching.
               @tsexample
               // Add the message...
               HudMessageVector.insertLine(1, \"Hello World\", 0);
               @endtsexample
               @return False if insertPos is greater than the number of lines in the current vector)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MessageVectorObject.popBackLine(System.String)">
            <summary>
            Pop a line from the back of the list; destroys the line.
               @tsexample
               HudMessageVector.popBackLine();
               @endtsexample
               @return False if there are no lines to pop (underflow), true otherwise)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MessageVectorObject.popFrontLine(System.String)">
            <summary>
            Pop a line from the front of the vector, destroying the line.
               @tsexample
               HudMessageVector.popFrontLine();
               @endtsexample
               @return False if there are no lines to pop (underflow), true otherwise)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MessageVectorObject.pushBackLine(System.String,System.String,System.Int32)">
            <summary>
            Push a line onto the back of the list.
               @param msg Text that makes up the message
               @param tag Numerical value associated with this message, useful for searching.
               @tsexample
               // Add the message...
               HudMessageVector.pushBackLine(\"Hello World\", 0);
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MessageVectorObject.pushFrontLine(System.String,System.String,System.Int32)">
            <summary>
            Push a line onto the front of the vector.
               @param msg Text that makes up the message
               @param tag Numerical value associated with this message, useful for searching.
               @tsexample
               // Add the message...
               HudMessageVector.pushFrontLine(\"Hello World\", 0);
               @endtsexample)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.MissionAreaObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MissionAreaObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MissionAreaObject.getArea(System.String)">
            <summary>
            Returns 4 fields: starting x, starting y, extents x, extents y.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MissionAreaObject.postApply(System.String)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               Force trigger an inspectPostApply. This will transmit 
                               material and other fields ( not including nodes ) to client objects.
                               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.MissionAreaObject.setArea(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            @brief - Defines the size of the MissionArea
            			  param x Starting X coordinate position for MissionArea
            			  param y Starting Y coordinate position for MissionArea
            			  param width New width of the MissionArea
            			  param height New height of the MissionArea
                       @note Only the server object may be set.
            			  )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavMeshObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavMeshObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavMeshObject.addLink(System.String,WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F,System.UInt32)">
            <summary>
            Add a link to this NavMesh between two points.
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavMeshObject.build(System.String,System.Boolean,System.Boolean)">
            <summary>
            @brief Create a Recast nav mesh.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavMeshObject.buildLinks(System.String)">
            <summary>
            @brief Build tiles of this mesh where there are unsynchronised links.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavMeshObject.buildTiles(System.String,WinterLeaf.Engine.Containers.Box3F)">
            <summary>
            @brief Rebuild the tiles overlapped by the input box.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavMeshObject.cancelBuild(System.String)">
            <summary>
            @brief Cancel the current NavMesh build.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavMeshObject.createCoverPoints(System.String)">
            <summary>
            @brief Create cover points for this NavMesh.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavMeshObject.deleteCoverPoints(System.String)">
            <summary>
            @brief Remove all cover points for this NavMesh.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavMeshObject.deleteLink(System.String,System.UInt32)">
            <summary>
            Delete a given off-mesh link.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavMeshObject.deleteLinks(System.String)">
            <summary>
            Deletes all off-mesh links on this NavMesh.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavMeshObject.getLink(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            Get the off-mesh link closest to a given world point.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavMeshObject.getLinkCount(System.String)">
            <summary>
            Return the number of links this mesh has.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavMeshObject.getLinkEnd(System.String,System.UInt32)">
            <summary>
            Get the ending point of an off-mesh link.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavMeshObject.getLinkFlags(System.String,System.UInt32)">
            <summary>
            Get the flags set for a particular off-mesh link.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavMeshObject.getLinkStart(System.String,System.UInt32)">
            <summary>
            Get the starting point of an off-mesh link.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavMeshObject.load(System.String)">
            <summary>
            @brief Load this NavMesh from its file.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavMeshObject.save(System.String)">
            <summary>
            @brief Save this NavMesh to its file.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavMeshObject.setLinkFlags(System.String,System.UInt32,System.UInt32)">
            <summary>
            Set the flags of a particular off-mesh link.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavPathObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavPathObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavPathObject.getFlags(System.String,System.Int32)">
            <summary>
            @brief Get a specified node along the path.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavPathObject.getLength(System.String)">
            <summary>
            @brief Get the length of this path.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavPathObject.getNode(System.String,System.Int32)">
            <summary>
            @brief Get a specified node along the path.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavPathObject.onNavMeshUpdate(System.String,System.String)">
            <summary>
            @brief Callback when this path's NavMesh is loaded or rebuilt.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavPathObject.onNavMeshUpdateBox(System.String,System.String)">
            <summary>
            @brief Callback when a particular area in this path's NavMesh is rebuilt.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavPathObject.plan(System.String)">
            <summary>
            @brief Find a path using the already-specified path properties.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NavPathObject.size(System.String)">
            <summary>
            @brief Return the number of nodes in this path.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetConnectionObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetConnectionObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetConnectionObject.checkMaxRate(System.String)">
            <summary>
            @brief Ensures that all configured packet rates and sizes meet minimum requirements.
            
               This method is normally only called when a NetConnection class is first constructed.  It need 
               only be manually called if the global variables that set the packet rate or size have changed.
            
               @note If @$pref::Net::PacketRateToServer, @$pref::Net::PacketRateToClient or @$pref::Net::PacketSize 
               have been changed since a NetConnection has been created, this method must be called on 
               all connections for them to follow the new rates or size.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetConnectionObject.clearPaths(System.String)">
            <summary>
            @brief On the server, resets the connection to indicate that motion spline paths have not been transmitted.
            
               Typically when a mission has ended on the server, all connected clients are informed of this change 
               and their connections are reset back to a starting state.  This method resets a connection on the 
               server to indicate that motion spline paths have not been transmitted.
            
               @tsexample
                  // Inform the clients
                  for (%clientIndex = 0; %clientIndex  ClientGroup.getCount(); %clientIndex++)
                  {
                     // clear ghosts and paths from all clients
                     %cl = ClientGroup.getObject(%clientIndex);
                     %cl.endMission();
                     %cl.resetGhosting();
                     %cl.clearPaths();
                  }
               @endtsexample
               
               @see transmitPaths()
               @see Path)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetConnectionObject.connect(System.String,System.String)">
            <summary>
            @brief Connects to the remote address.
            
               Attempts to connect with another NetConnection on the given address.  Typically once 
               connected, a game's information is passed along from the server to the client, followed 
               by the player entering the game world.  The actual procedure is dependent on 
               the NetConnection subclass that is used.  i.e. GameConnection.
            
               @param remoteAddress The address to connect to in the form of IP:address>:port 
               although the i>IP:/i> portion is optional.  The i>address/i> portion may be in the form 
               of w.x.y.z or as a host name, in which case a DNS lookup will be performed.  You may also 
               substitue the word i>broadcast/i> for the address to broadcast the connect request over 
               the local subnet.
            
               @see NetConnection::connectLocal() to connect to a server running within the same process 
               as the client.
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetConnectionObject.connectLocal(System.String)">
            <summary>
            @brief Connects with the server that is running within the same process as the client.
            
               @returns An error text message upon failure, or an empty string when successful.
            
               @see See @ref local_connections for a description of local connections and their use.  See 
               NetConnection::connect() to connect to a server running in another process (on the same machine or not).)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetConnectionObject.getAddress(System.String)">
            <summary>
            @brief Returns the far end network address for the connection.
            
               The address will be in one of the following forms:
               - b>IP:Broadcast:port>/b> for broadcast type addresses
               - b>IP:address>:port>/b> for IP addresses
               - b>local/b> when connected locally (server and client running in same process)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetConnectionObject.getGhostID(System.String,System.Int32)">
            <summary>
            @brief On server or client, convert a real id to the ghost id for this connection.
            
               Torque's network ghosting system only exchanges ghost ID's between the server and client.  Use 
               this method on the server or client to discover an object's ghost ID based on its real SimObject ID.
            
               @param realID The real SimObject ID of the object.
               @returns The ghost ID of the object for this connection, or -1 if it could not be resolved.
            
               @see @ref ghosting_scoping for a description of the ghosting system.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetConnectionObject.GetGhostIndex(System.String,System.String)">
            <summary>
            Returns the ghost-index for an object.
            	@ingroup AFX)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetConnectionObject.getGhostsActive(System.String)">
            <summary>
            @brief Provides the number of active ghosts on the connection.
               @returns The number of active ghosts.
               @see @ref ghosting_scoping for a description of the ghosting system.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetConnectionObject.getPacketLoss(System.String)">
            <summary>
            @brief Returns the percentage of packets lost per tick.
            
               @note This method is not yet hooked up.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetConnectionObject.getPing(System.String)">
            <summary>
            @brief Returns the average round trip time (in ms) for the connection.
            
               The round trip time is recalculated every time a notify packet is received.  Notify 
               packets are used to information the connection that the far end successfully received 
               the sent packet.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetConnectionObject.ResolveGhost(System.String,System.Int32)">
            <summary>
            Resolves a ghost-index into an object ID.
            	@ingroup AFX)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetConnectionObject.resolveGhostID(System.String,System.Int32)">
            <summary>
            @brief On the client, convert a ghost ID from this connection to a real SimObject ID.
            
               Torque's network ghosting system only exchanges ghost ID's between the server and client.  Use 
               this method on the client to discover an object's local SimObject ID when you only have a 
               ghost ID.
            
               @param ghostID The ghost ID of the object as sent by the server.
               @returns The SimObject ID of the object, or 0 if it could not be resolved.
            
               @tsexample
                  %object = ServerConnection.resolveGhostID( %ghostId );
               @endtsexample
            
               @see @ref ghosting_scoping for a description of the ghosting system.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetConnectionObject.resolveObjectFromGhostIndex(System.String,System.Int32)">
            <summary>
            @brief On the server, convert a ghost ID from this connection to a real SimObject ID.
            
               Torque's network ghosting system only exchanges ghost ID's between the server and client.  Use 
               this method on the server to discover an object's local SimObject ID when you only have a 
               ghost ID.
            
               @param ghostID The ghost ID of the object as sent by the server.
               @returns The SimObject ID of the object, or 0 if it could not be resolved.
            
               @tsexample
                  %object = %client.resolveObjectFromGhostIndex( %ghostId );
               @endtsexample
            
               @see @ref ghosting_scoping for a description of the ghosting system.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetConnectionObject.setSimulatedNetParams(System.String,System.Single,System.Int32)">
            <summary>
            @brief Simulate network issues on the connection for testing.
            
               @param packetLoss The fraction of packets that will be lost.  Ranges from 0.0 (no loss) to 1.0 (complete loss)
               @param delay Delays packets being transmitted by simulating a particular ping.  This is an absolute 
               integer, measured in ms.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetConnectionObject.transmitPaths(System.String)">
            <summary>
            @brief Sent by the server during phase 2 of the mission download to update motion spline paths.
            
               The server transmits all spline motion paths that are within the mission (Path) separate from 
               other objects.  This is due to the potentially large number of nodes within each path, which may 
               saturate a packet sent to the client.  By managing this step separately, Torque has finer control 
               over how packets are organised vs. doing it during the ghosting stage.
            
               Internally a PathManager is used to track all paths defined within a mission on the server, and each 
               one is transmitted using a PathManagerEvent.  The client side collects these events and builds the 
               given paths within its own PathManager.  This is typically done during the standard mission start 
               phase 2 when following Torque's example mission startup sequence.
            
               When a mission is ended, all paths need to be cleared from their respective path managers.
            
               @tsexample
               function serverCmdMissionStartPhase2Ack(%client, %seq, %playerDB)
               {
                  // Make sure to ignore calls from a previous mission load
                  if (%seq != $missionSequence || !$MissionRunning)
                     return;
                  if (%client.currentPhase != 1.5)
                     return;
                  %client.currentPhase = 2;
               
                  // Set the player datablock choice
                  %client.playerDB = %playerDB;
               
                  // Update mission paths (SimPath), this needs to get there before the objects.
                  %client.transmitPaths();
               
                  // Start ghosting objects to the client
                  %client.activateGhosting();
               }
               @endtsexample
               
               @see clearPaths()
               @see Path)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetObjectObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetObjectObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetObjectObject.clearScopeToClient(System.String,System.String)">
            <summary>
            @brief Undo the effects of a scopeToClient() call.
            
               @param client The connection to remove this object's scoping from 
               
               @see scopeToClient())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetObjectObject.getClientObject(System.String)">
            <summary>
            @brief Returns a pointer to the client object when on a local connection.
            
               Short-Circuit-Networking: this is only valid for a local-client / singleplayer situation.
            
               @returns the SimObject ID of the client object.
            
               @tsexample
                  // Psuedo-code, some values left out for this example
                  %node = new ParticleEmitterNode(){};
                  %clientObject = %node.getClientObject();
                  if(isObject(%clientObject)
                  	%clientObject.setTransform(\"0 0 0\");
               @endtsexample
               
               @see @ref local_connections)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetObjectObject.getGhostID(System.String)">
            <summary>
            @brief Get the ghost index of this object from the server.
            
               @returns The ghost ID of this NetObject on the server
            
               @tsexample
                  %ghostID = LocalClientConnection.getGhostId( %serverObject );
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetObjectObject.getServerObject(System.String)">
            <summary>
            @brief Returns a pointer to the client object when on a local connection.
            
               Short-Circuit-Netorking: this is only valid for a local-client / singleplayer situation.
               
               @returns The SimObject ID of the server object.
               @tsexample
                  // Psuedo-code, some values left out for this example
                  %node = new ParticleEmitterNode(){};
                  %serverObject = %node.getServerObject();
                  if(isObject(%serverObject)
                  	%serverObject.setTransform(\"0 0 0\");
               @endtsexample
               
               @see @ref local_connections)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetObjectObject.isClientObject(System.String)">
            <summary>
            @brief Called to check if an object resides on the clientside.
               @return True if the object resides on the client, false otherwise.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetObjectObject.isServerObject(System.String)">
            <summary>
            @brief Checks if an object resides on the server.
               @return True if the object resides on the server, false otherwise.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetObjectObject.scopeToClient(System.String,System.String)">
            <summary>
            @brief Cause the NetObject to be forced as scoped on the specified NetConnection.
            
               @param client The connection this object will always be scoped to
            
               @tsexample
                  // Called to create new cameras in TorqueScript
                  // %this - The active GameConnection
                  // %spawnPoint - The spawn point location where we creat the camera
                  function GameConnection::spawnCamera(%this, %spawnPoint)
                  {
                  	// If this connection's camera exists
                  	if(isObject(%this.camera))
                  	{
                  		// Add it to the mission group to be cleaned up later
                  		MissionCleanup.add( %this.camera );
                  		// Force it to scope to the client side
                  		%this.camera.scopeToClient(%this);
                  	}
                  }
               @endtsexample
               
               @see clearScopeToClient())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.NetObjectObject.setScopeAlways(System.String)">
            <summary>
            @brief Always scope this object on all connections.
            
               The object is marked as ScopeAlways and is immediately ghosted to 
               all active connections.  This function has no effect if the object 
               is not marked as Ghostable.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ParticleDataObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ParticleDataObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ParticleDataObject.reload(System.String)">
            <summary>
            Reloads this particle.
               @tsexample
               // Get the editor's current particle
               %particle = PE_ParticleEditor.currParticle
               // Change a particle value
               %particle.setFieldValue( %propertyField, %value );
               // Reload it
               %particle.reload();
               @endtsexample )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ParticleEmitterDataObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ParticleEmitterDataObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ParticleEmitterDataObject.reload(System.String)">
            <summary>
            Reloads the ParticleData datablocks and other fields used by this emitter.
               @tsexample
               // Get the editor's current particle emitter
               %emitter = PE_EmitterEditor.currEmitter
               // Change a field value
               %emitter.setFieldValue( %propertyField, %value );
               // Reload this emitter
               %emitter.reload();
               @endtsexample)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ParticleEmitterNodeObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ParticleEmitterNodeObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ParticleEmitterNodeObject.setActive(System.String,System.Boolean)">
            <summary>
            Turns the emitter on or off.
               @param active New emitter state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ParticleEmitterNodeObject.setEmitterDataBlock(System.String,System.String)">
            <summary>
            Assigns the datablock for this emitter node.
               @param emitterDatablock ParticleEmitterData datablock to assign
               @tsexample
               // Assign a new emitter datablock
               %emitter.setEmitterDatablock( %emitterDatablock );
               @endtsexample )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.PathCameraObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PathCameraObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PathCameraObject.popFront(System.String)">
            <summary>
            Removes the knot at the front of the camera's path.
            													@tsexample
            														// Remove the first knot in the camera's path.
            														%pathCamera.popFront();
            													@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PathCameraObject.pushBack(System.String,WinterLeaf.Engine.Containers.TransformF,System.Single,System.String,System.String)">
            <summary>
            Normal, Linear), 
            											      @brief Adds a new knot to the back of a path camera's path.
            													@param transform Transform for the new knot.  In the form of \"x y z ax ay az aa\" such as returned by SceneObject::getTransform()
            													@param speed Speed setting for this knot.
            													@param type Knot type (Normal, Position Only, Kink).
            													@param path %Path type (Linear, Spline).
            													@tsexample
            														// Transform vector for new knot. (Pos_X Pos_Y Pos_Z Rot_X Rot_Y Rot_Z Angle)
            														%transform = \"15.0 5.0 5.0 1.4 1.0 0.2 1.0\"
            														// Speed setting for knot.
            														%speed = \"1.0\"
            														// Knot type. (Normal, Position Only, Kink)
            														%type = \"Normal\";
            														// Path Type. (Linear, Spline)
            														%path = \"Linear\";
            														// Inform the path camera to add a new knot to the back of its path
            														%pathCamera.pushBack(%transform,%speed,%type,%path);
            													@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PathCameraObject.pushFront(System.String,WinterLeaf.Engine.Containers.TransformF,System.Single,System.String,System.String)">
            <summary>
            Normal, Linear), 
            											      @brief Adds a new knot to the front of a path camera's path.
            													@param transform Transform for the new knot. In the form of \"x y z ax ay az aa\" such as returned by SceneObject::getTransform()
            													@param speed Speed setting for this knot.
            													@param type Knot type (Normal, Position Only, Kink).
            													@param path %Path type (Linear, Spline).
            													@tsexample
            														// Transform vector for new knot. (Pos_X,Pos_Y,Pos_Z,Rot_X,Rot_Y,Rot_Z,Angle)
            														%transform = \"15.0 5.0 5.0 1.4 1.0 0.2 1.0\"
            														// Speed setting for knot.
            														%speed = \"1.0\";
            														// Knot type. (Normal, Position Only, Kink)
            														%type = \"Normal\";
            														// Path Type. (Linear, Spline)
            														%path = \"Linear\";
            														// Inform the path camera to add a new knot to the front of its path
            														%pathCamera.pushFront(%transform, %speed, %type, %path);
            													@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PathCameraObject.reset(System.String,System.Single)">
            <summary>
            @brief Clear the camera's path and set the camera's current transform as the start of the new path.
                                                   What specifically occurs is a new knot is created from the camera's current transform.  Then the current path 
                                                   is cleared and the new knot is pushed onto the path.  Any previous target is cleared and the camera's movement 
                                                   state is set to Forward.  The camera is now ready for a new path to be defined.
            													@param speed Speed for the camera to move along its path after being reset.
            													@tsexample
            														//Determine the new movement speed of this camera. If not set, the speed will default to 1.0.
            														%speed = \"0.50\";
            														// Inform the path camera to start a new path at
                                                      // the camera's current position, and set the new 
                                                      // path's speed value.
            														%pathCamera.reset(%speed);
                                                   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PathCameraObject.setPosition(System.String,System.Single)">
            <summary>
            Set the current position of the camera along the path.
            													@param position Position along the path, from 0.0 (path start) - 1.0 (path end), to place the camera.
            													@tsexample
                                                      // Set the camera on a position along its path from 0.0 - 1.0.
            														%position = \"0.35\";
            														// Force the pathCamera to its new position along the path.
            														%pathCamera.setPosition(%position);
            													@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PathCameraObject.setState(System.String,System.String)">
            <summary>
            forward), Set the movement state for this path camera.
            													@param newState New movement state type for this camera. Forward, Backward or Stop.
            													@tsexample
            														// Set the state type (forward, backward, stop).
                                                      // In this example, the camera will travel from the first node
                                                      // to the last node (or target if given with setTarget())
            														%state = \"forward\";
            														// Inform the pathCamera to change its movement state to the defined value.
            														%pathCamera.setState(%state);
            													@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PathCameraObject.setTarget(System.String,System.Single)">
            <summary>
            @brief Set the movement target for this camera along its path.
                                                   The camera will attempt to move along the path to the given target in the direction provided 
                                                   by setState() (the default is forwards).  Once the camera moves past this target it will come 
                                                   to a stop, and the target state will be cleared.
            													@param position Target position, between 0.0 (path start) and 1.0 (path end), for the camera to move to along its path.
            													@tsexample
                                                      // Set the position target, between 0.0 (path start) and 1.0 (path end), for this camera to move to.
            														%position = \"0.50\";
            														// Inform the pathCamera of the new target position it will move to.
            														%pathCamera.setTarget(%position);
            													@endtsexample)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.PersistenceManagerObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PersistenceManagerObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PersistenceManagerObject.PersistenceManager_clearAll(System.String)">
            <summary>
            ()
                          Clears all the tracked objects without saving them. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PersistenceManagerObject.PersistenceManager_deleteObjectsFromFile(System.String,System.String)">
            <summary>
            ( fileName )
                          Delete all of the objects that are created from the given file. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PersistenceManagerObject.PersistenceManager_getDirtyObject(System.String,System.Int32)">
            <summary>
            ( index )
                          Returns the ith dirty object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PersistenceManagerObject.PersistenceManager_getDirtyObjectCount(System.String)">
            <summary>
            ()
                          Returns the number of dirty objects. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PersistenceManagerObject.PersistenceManager_hasDirty(System.String)">
            <summary>
            ()
                          Returns true if the manager has dirty objects to save. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PersistenceManagerObject.PersistenceManager_isDirty(System.String,System.String)">
            <summary>
            (SimObject object)
                          Returns true if the SimObject is on the dirty list.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PersistenceManagerObject.PersistenceManager_listDirty(System.String)">
            <summary>
            ()
                          Prints the dirty list to the console.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PersistenceManagerObject.PersistenceManager_removeDirty(System.String,System.String)">
            <summary>
            (SimObject object)
                          Remove a SimObject from the dirty list.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PersistenceManagerObject.PersistenceManager_removeField(System.String,System.String,System.String)">
            <summary>
            (SimObject object, string fieldName)
                          Remove a specific field from an object declaration.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PersistenceManagerObject.PersistenceManager_removeObjectFromFile(System.String,System.String,System.String)">
            <summary>
            ) , (SimObject object, [filename])
                          Remove an existing SimObject from a file (can optionally specify a different file than \
                           the one it was created in.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PersistenceManagerObject.PersistenceManager_saveDirty(System.String)">
            <summary>
            ()
                          Saves all of the SimObject's on the dirty list to their respective files.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PersistenceManagerObject.PersistenceManager_saveDirtyObject(System.String,System.String)">
            <summary>
            (SimObject object)
                          Save a dirty SimObject to it's file.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PersistenceManagerObject.PersistenceManager_setDirty(System.String,System.String,System.String)">
            <summary>
            ), (SimObject object, [filename])
                          Mark an existing SimObject as dirty (will be written out when saveDirty() is called).)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.PhysicalZoneObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PhysicalZoneObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PhysicalZoneObject.activate(System.String)">
            <summary>
            Activate the physical zone's effects.
            													@tsexample
            														// Activate effects for a specific physical zone.
            														%thisPhysicalZone.activate();
            													@endtsexample
            													@ingroup Datablocks
            				  )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PhysicalZoneObject.deactivate(System.String)">
            <summary>
            Deactivate the physical zone's effects.
            													@tsexample
            														// Deactivate effects for a specific physical zone.
            														%thisPhysicalZone.deactivate();
            													@endtsexample
            													@ingroup Datablocks
            				  )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.PhysicsDebrisDataObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PhysicsDebrisDataObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PhysicsDebrisDataObject.PhysicsDebrisData_preload(System.String)">
            <summary>
            @brief Loads some information to have readily available at simulation time.
               Forces generation of shaders, materials, and other data used by the %PhysicsDebris object. 
               This function should be used while a level is loading in order to shorten 
               the amount of time to create a PhysicsDebris in game.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.PhysicsForceObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PhysicsForceObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PhysicsForceObject.attach(System.String,WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F,System.Single)">
            <summary>
            @brief Attempts to associate the PhysicsForce with a PhysicsBody.
               Performs a physics ray cast of the provided length and direction. The %PhysicsForce  
               will attach itself to the first dynamic PhysicsBody the ray collides with. 
               On every tick, the attached body will be attracted towards the position of the %PhysicsForce.
               A %PhysicsForce can only be attached to one body at a time.
               @note To determine if an %attach was successful, check isAttached() immediately after 
               calling this function.n)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PhysicsForceObject.detach(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            @brief Disassociates the PhysicsForce from any attached PhysicsBody.
               @param force Optional force to apply to the attached PhysicsBody 
               before detaching.
               @note Has no effect if the %PhysicsForce is not attached to anything.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PhysicsForceObject.isAttached(System.String)">
            <summary>
            @brief Returns true if the %PhysicsForce is currently attached to an object.
               @see PhysicsForce::attach())
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.PhysicsShapeObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PhysicsShapeObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PhysicsShapeObject.destroy(System.String)">
            <summary>
            @brief Disables rendering and physical simulation.
               Calling destroy() will also spawn any explosions, debris, and/or destroyedShape 
               defined for it, as well as remove it from the scene graph.
               Destroyed objects are only created on the server. Ghosting will later update the client.
               @note This does not actually delete the PhysicsShape. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PhysicsShapeObject.isDestroyed(System.String)">
            <summary>
            @brief Returns if a PhysicsShape has been destroyed or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PhysicsShapeObject.restore(System.String)">
            <summary>
            @brief Restores the shape to its state before being destroyed.
               Re-enables rendering and physical simulation on the object and 
               adds it to the client's scene graph. 
               Has no effect if the shape is not destroyed.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.PlayerObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PlayerObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PlayerObject.allowAllPoses(System.String)">
            <summary>
            @brief Allow all poses a chance to occur.
               This method resets any poses that have manually been blocked from occuring.  
               This includes the regular pose states such as sprinting, crouch, being prone 
               and swimming.  It also includes being able to jump and jet jump.  While this 
               is allowing these poses to occur it doesn't mean that they all can due to other 
               conditions.  We're just not manually blocking them from being allowed.
               @see allowJumping()
               @see allowJetJumping()
               @see allowSprinting()
               @see allowCrouching()
               @see allowProne()
               @see allowSwimming() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PlayerObject.allowCrouching(System.String,System.Boolean)">
            <summary>
            @brief Set if the Player is allowed to crouch.
               The default is to allow crouching unless there are other environmental concerns 
               that prevent it.  This method is mainly used to explicitly disallow crouching 
               at any time.
               @param state Set to true to allow crouching, false to disable it.
               @see allowAllPoses() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PlayerObject.allowJetJumping(System.String,System.Boolean)">
            <summary>
            @brief Set if the Player is allowed to jet jump.
               The default is to allow jet jumping unless there are other environmental concerns 
               that prevent it.  This method is mainly used to explicitly disallow jet jumping 
               at any time.
               @param state Set to true to allow jet jumping, false to disable it.
               @see allowAllPoses() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PlayerObject.allowJumping(System.String,System.Boolean)">
            <summary>
            @brief Set if the Player is allowed to jump.
               The default is to allow jumping unless there are other environmental concerns 
               that prevent it.  This method is mainly used to explicitly disallow jumping 
               at any time.
               @param state Set to true to allow jumping, false to disable it.
               @see allowAllPoses() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PlayerObject.allowProne(System.String,System.Boolean)">
            <summary>
            @brief Set if the Player is allowed to go prone.
               The default is to allow being prone unless there are other environmental concerns 
               that prevent it.  This method is mainly used to explicitly disallow going prone 
               at any time.
               @param state Set to true to allow being prone, false to disable it.
               @see allowAllPoses() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PlayerObject.allowSprinting(System.String,System.Boolean)">
            <summary>
            @brief Set if the Player is allowed to sprint.
               The default is to allow sprinting unless there are other environmental concerns 
               that prevent it.  This method is mainly used to explicitly disallow sprinting 
               at any time.
               @param state Set to true to allow sprinting, false to disable it.
               @see allowAllPoses() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PlayerObject.allowSwimming(System.String,System.Boolean)">
            <summary>
            @brief Set if the Player is allowed to swim.
               The default is to allow swimming unless there are other environmental concerns 
               that prevent it.  This method is mainly used to explicitly disallow swimming 
               at any time.
               @param state Set to true to allow swimming, false to disable it.
               @see allowAllPoses() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PlayerObject.checkDismountPoint(System.String,WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            @brief Check if it is safe to dismount at this position.
            
               Internally this method casts a ray from oldPos to pos to determine if it hits the 
               terrain, an interior object, a water object, another player, a static shape, 
               a vehicle (exluding the one currently mounted), or physical zone.  If this ray 
               is in the clear, then the player's bounding box is also checked for a collision at 
               the pos position.  If this displaced bounding box is also in the clear, then 
               checkDismountPoint() returns true.
            
               @param oldPos The player's current position
               @param pos The dismount position to check
               @return True if the dismount position is clear, false if not
               
               @note The player must be already mounted for this method to not assert.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PlayerObject.clearControlObject(System.String)">
            <summary>
            @brief Clears the player's current control object.
               Returns control to the player. This internally calls 
               Player::setControlObject(0).
               @tsexample
            		%player.clearControlObject();
                  echo(%player.getControlObject()); //-- Returns 0, player assumes control
                  %player.setControlObject(%vehicle);
                  echo(%player.getControlObject()); //-- Returns %vehicle, player controls the vehicle now.
            	@endtsexample
               @note If the player does not have a control object, the player will receive all moves 
               from its GameConnection.  If you're looking to remove control from the player itself 
               (i.e. stop sending moves to the player) use GameConnection::setControlObject() to transfer 
               control to another object, such as a camera.
               @see setControlObject()
               @see getControlObject()
               @see GameConnection::setControlObject())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PlayerObject.getControlObject(System.String)">
            <summary>
            @brief Get the current object we are controlling.
               @return ID of the ShapeBase object we control, or 0 if not controlling an 
               object.
               @see setControlObject()
               @see clearControlObject())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PlayerObject.getDamageLocation(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            @brief Get the named damage location and modifier for a given world position.
            
               the Player object can simulate different hit locations based on a pre-defined set 
               of PlayerData defined percentages.  These hit percentages divide up the Player's 
               bounding box into different regions.  The diagram below demonstrates how the various 
               PlayerData properties split up the bounding volume:
            
               img src=\"images/player_damageloc.png\">
            
               While you may pass in any world position and getDamageLocation() will provide a best-fit 
               location, you should be aware that this can produce some interesting results.  For example, 
               any position that is above PlayerData::boxHeadPercentage will be considered a 'head' hit, even 
               if the world position is high in the sky.  Therefore it may be wise to keep the passed in point 
               to somewhere on the surface of, or within, the Player's bounding volume.
            
               @note This method will not return an accurate location when the player is 
               prone or swimming.
            
               @param pos A world position for which to retrieve a body region on this player.
            
               @return a string containing two words (space separated strings), where the 
               first is a location and the second is a modifier.
            
               Posible locations:ul>
               li>head/li>
               li>torso/li>
               li>legs/li>/ul>
            
               Head modifiers:ul>
               li>left_back/li>
               li>middle_back/li>
               li>right_back/li>
               li>left_middle/li>
               li>middle_middle/li>
               li>right_middle/li>
               li>left_front/li>
               li>middle_front/li>
               li>right_front/li>/ul>
            
               Legs/Torso modifiers:ul>
               li>front_left/li>
               li>front_right/li>
               li>back_left/li>
               li>back_right/li>/ul>
            
               @see PlayerData::boxHeadPercentage
               @see PlayerData::boxHeadFrontPercentage
               @see PlayerData::boxHeadBackPercentage
               @see PlayerData::boxHeadLeftPercentage
               @see PlayerData::boxHeadRightPercentage
               @see PlayerData::boxTorsoPercentage
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PlayerObject.getNumDeathAnimations(System.String)">
            <summary>
            @brief Get the number of death animations available to this player.
               Death animations are assumed to be named death1-N using consecutive indices. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PlayerObject.getPose(System.String)">
            <summary>
            @brief Get the name of the player's current pose.
            
               The pose is one of the following:ul>
               li>Stand - Standard movement pose./li>
               li>Sprint - Sprinting pose./li>
               li>Crouch - Crouch pose./li>
               li>Prone - Prone pose./li>
               li>Swim - Swimming pose./li>/ul>
            
               @return The current pose; one of: \"Stand\", \"Sprint\", \"Crouch\", \"Prone\", \"Swim\" )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PlayerObject.getState(System.String)">
            <summary>
            @brief Get the name of the player's current state.
            
               The state is one of the following:ul>
               li>Dead - The Player is dead./li>
               li>Mounted - The Player is mounted to an object such as a vehicle./li>
               li>Move - The Player is free to move.  The usual state./li>
               li>Recover - The Player is recovering from a fall.  See PlayerData::recoverDelay./li>/ul>
            
               @return The current state; one of: \"Dead\", \"Mounted\", \"Move\", \"Recover\" )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PlayerObject.setActionThread(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            @brief Set the main action sequence to play for this player.
               @param name Name of the action sequence to set
               @param hold Set to false to get a callback on the datablock when the sequence ends (PlayerData::animationDone()).  
               When set to true no callback is made.
               @param fsp True if first person and none of the spine nodes in the shape should animate.  False will allow the shape's 
               spine nodes to animate.
               @return True if succesful, false if failed
               
               @note The spine nodes for the Player's shape are named as follows:ul>
               li>Bip01 Pelvis/li>
               li>Bip01 Spine/li>
               li>Bip01 Spine1/li>
               li>Bip01 Spine2/li>
               li>Bip01 Neck/li>
               li>Bip01 Head/li>/ul>
               
               You cannot use setActionThread() to have the Player play one of the motion 
               determined action animation sequences.  These sequences are chosen based on how 
               the Player moves and the Player's current pose.  The names of these sequences are:ul>
               li>root/li>
               li>run/li>
               li>side/li>
               li>side_right/li>
               li>crouch_root/li>
               li>crouch_forward/li>
               li>crouch_backward/li>
               li>crouch_side/li>
               li>crouch_right/li>
               li>prone_root/li>
               li>prone_forward/li>
               li>prone_backward/li>
               li>swim_root/li>
               li>swim_forward/li>
               li>swim_backward/li>
               li>swim_left/li>
               li>swim_right/li>
               li>fall/li>
               li>jump/li>
               li>standjump/li>
               li>land/li>
               li>jet/li>/ul>
               
               If the player moves in any direction then the animation sequence set using this 
               method will be cancelled and the chosen mation-based sequence will take over.  This makes 
               great for times when the Player cannot move, such as when mounted, or when it doesn't matter 
               if the action sequence changes, such as waving and saluting.
               
               @tsexample
                  // Place the player in a sitting position after being mounted
                  %player.setActionThread( \"sitting\", true, true );
            	@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PlayerObject.setArmThread(System.String,System.String)">
            <summary>
            @brief Set the sequence that controls the player's arms (dynamically adjusted 
               to match look direction).
               @param name Name of the sequence to play on the player's arms.
               @return true if successful, false if failed.
               @note By default the 'look' sequence is used, if available.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PlayerObject.setControlObject(System.String,System.String)">
            <summary>
            @brief Set the object to be controlled by this player
            
               It is possible to have the moves sent to the Player object from the 
               GameConnection to be passed along to another object.  This happens, for example 
               when a player is mounted to a vehicle.  The move commands pass through the Player 
               and on to the vehicle (while the player remains stationary within the vehicle).  
               With setControlObject() you can have the Player pass along its moves to any object.  
               One possible use is for a player to move a remote controlled vehicle.  In this case 
               the player does not mount the vehicle directly, but still wants to be able to control it.
            
               @param obj Object to control with this player
               @return True if the object is valid, false if not
            
               @see getControlObject()
               @see clearControlObject()
               @see GameConnection::setControlObject())
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.PopupMenuObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PopupMenuObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PopupMenuObject.PopupMenu_attachToMenuBar(System.String,System.String,System.Int32,System.String)">
            <summary>
            (GuiCanvas, pos, title))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PopupMenuObject.PopupMenu_checkItem(System.String,System.Int32,System.Boolean)">
            <summary>
            (pos, checked))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PopupMenuObject.PopupMenu_checkRadioItem(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            (firstPos, lastPos, checkPos))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PopupMenuObject.PopupMenu_enableItem(System.String,System.Int32,System.Boolean)">
            <summary>
            (pos, enabled))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PopupMenuObject.PopupMenu_getItemCount(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PopupMenuObject.PopupMenu_insertItem(System.String,System.Int32,System.String,System.String)">
            <summary>
            , ), (pos[, title][, accelerator]))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PopupMenuObject.PopupMenu_insertSubMenu(System.String,System.Int32,System.String,System.String)">
            <summary>
            (pos, title, subMenu))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PopupMenuObject.PopupMenu_isItemChecked(System.String,System.Int32)">
            <summary>
            (pos))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PopupMenuObject.PopupMenu_removeFromMenuBar(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PopupMenuObject.PopupMenu_removeItem(System.String,System.Int32)">
            <summary>
            (pos))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PopupMenuObject.PopupMenu_setItem(System.String,System.Int32,System.String,System.String)">
            <summary>
            ), (pos, title[, accelerator]))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PopupMenuObject.PopupMenu_showPopup(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            (Canvas,[x, y]))
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.PortalObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PortalObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PortalObject.isExteriorPortal(System.String)">
            <summary>
            Test whether the portal connects interior zones to the outdoor zone.
               @return True if the portal is an exterior portal. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PortalObject.isInteriorPortal(System.String)">
            <summary>
            Test whether the portal connects interior zones only.
               @return True if the portal is an interior portal. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.PostEffectObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PostEffectObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PostEffectObject.clearShaderMacros(System.String)">
            <summary>
            Remove all shader macros. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PostEffectObject.disable(System.String)">
            <summary>
            Disables the effect. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PostEffectObject.dumpShaderDisassembly(System.String)">
            <summary>
            Dumps this PostEffect shader's disassembly to a temporary text file.
               @return Full path to the dumped file or an empty string if failed. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PostEffectObject.enable(System.String)">
            <summary>
            Enables the effect. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PostEffectObject.getAspectRatio(System.String)">
            <summary>
            @return Width over height of the backbuffer. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PostEffectObject.isEnabled(System.String)">
            <summary>
            @return True if the effect is enabled. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PostEffectObject.reload(System.String)">
            <summary>
            Reloads the effect shader and textures. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PostEffectObject.removeShaderMacro(System.String,System.String)">
            <summary>
            Remove a shader macro. This will usually be called within the preProcess callback.
               @param key Macro to remove. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PostEffectObject.setShaderConst(System.String,System.String,System.String)">
            <summary>
            Sets the value of a uniform defined in the shader. This will usually 
               be called within the setShaderConsts callback. Array type constants are 
               not supported.    
               @param name Name of the constanst, prefixed with '$'. 
               @param value Value to set, space seperate values with more than one element.
               @tsexample
               function MyPfx::setShaderConsts( %this )
               {
                  // example float4 uniform
                  %this.setShaderConst( \"$colorMod\", \"1.0 0.9 1.0 1.0\" );
                  // example float1 uniform
                  %this.setShaderConst( \"$strength\", \"3.0\" );
                  // example integer uniform
                  %this.setShaderConst( \"$loops\", \"5\" );
               }
               @endtsexample )   
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PostEffectObject.setShaderMacro(System.String,System.String,System.String)">
            <summary>
             ),
               Adds a macro to the effect's shader or sets an existing one's value. 
               This will usually be called within the onAdd or preProcess callback.
               @param key lval of the macro.
               @param value rval of the macro, or may be empty.
               @tsexample
               function MyPfx::onAdd( %this )
               {
                  %this.setShaderMacro( \"NUM_SAMPLES\", \"10\" );
                  %this.setShaderMacro( \"HIGH_QUALITY_MODE\" );
                  
                  // In the shader looks like... 
                  // #define NUM_SAMPLES 10
                  // #define HIGH_QUALITY_MODE
               }
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PostEffectObject.setTexture(System.String,System.Int32,System.String)">
            <summary>
            This is used to set the texture file and load the texture on a running effect. 
               If the texture file is not different from the current file nothing is changed.  If 
               the texture cannot be found a null texture is assigned.    
               @param index The texture stage index. 
               @param filePath The file name of the texture to set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PostEffectObject.toggle(System.String)">
            <summary>
            Toggles the effect between enabled / disabled.
               @return True if effect is enabled. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.PrecipitationObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PrecipitationObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PrecipitationObject.modifyStorm(System.String,System.Single,System.Single)">
            <summary>
            Smoothly change the maximum number of drops in the effect (from current 
               value to #numDrops * @a percentage).
               This method can be used to simulate a storm building or fading in intensity 
               as the number of drops in the Precipitation box changes.
               @param percentage New maximum number of drops value (as a percentage of 
               #numDrops). Valid range is 0-1.
               @param seconds Length of time (in seconds) over which to increase the drops 
               percentage value. Set to 0 to change instantly.
               @tsexample
               %percentage = 0.5;  // The percentage, from 0 to 1, of the maximum drops to display
               %seconds = 5.0;     // The length of time over which to make the change.
               %precipitation.modifyStorm( %percentage, %seconds );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PrecipitationObject.setPercentage(System.String,System.Single)">
            <summary>
            Sets the maximum number of drops in the effect, as a percentage of #numDrops.
               The change occurs instantly (use modifyStorm() to change the number of drops 
               over a period of time.
               @param percentage New maximum number of drops value (as a percentage of 
               #numDrops). Valid range is 0-1.
               @tsexample
               %percentage = 0.5;  // The percentage, from 0 to 1, of the maximum drops to display
               %precipitation.setPercentage( %percentage );
               @endtsexample
               @see modifyStorm )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.PrecipitationObject.setTurbulence(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Smoothly change the turbulence parameters over a period of time.
               @param max New #maxTurbulence value. Set to 0 to disable turbulence.
               @param speed New #turbulenceSpeed value.
               @param seconds Length of time (in seconds) over which to interpolate the 
               turbulence settings. Set to 0 to change instantly.
               @tsexample
               %turbulence = 0.5;     // Set the new turbulence value. Set to 0 to disable turbulence.
               %speed = 5.0;          // The new speed of the turbulance effect.
               %seconds = 5.0;        // The length of time over which to make the change.
               %precipitation.setTurbulence( %turbulence, %speed, %seconds );
               @endtsexample )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ProjectileObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ProjectileObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ProjectileObject.presimulate(System.String,System.Single)">
            <summary>
            @brief Updates the projectile's positional and collision information.
                                                   This function will first delete the projectile if it is a server object and is outside it's ProjectileData::lifetime. 
                                                   Also responsible for applying gravity, determining collisions, triggering explosions, 
                                                   emitting trail particles, and calculating bounces if necessary.
            									            @param seconds Amount of time, in seconds since the simulation's start, to advance.
            									            @tsexample
            									               // Tell the projectile to process a simulation event, and provide the amount of time
            										            // that has passed since the simulation began.
            										            %seconds = 2.0;
            										            %projectile.presimulate(%seconds);
            									            @endtsexample
                                                   @note This function is not called if the SimObject::hidden is true.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ProximityMineObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ProximityMineObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ProximityMineObject.explode(System.String)">
            <summary>
            @brief Manually cause the mine to explode.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ReadXMLObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ReadXMLObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ReadXMLObject.ReadXML_readFile(System.String)">
            <summary>
            readXMLObj.readFile();)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.RenderBinManagerObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.RenderBinManagerObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.RenderBinManagerObject.getBinType(System.String)">
            <summary>
            Returns the bin type string. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.RenderMeshExampleObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.RenderMeshExampleObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.RenderMeshExampleObject.postApply(System.String)">
            <summary>
            A utility method for forcing a network update.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.RenderPassManagerObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.RenderPassManagerObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.RenderPassManagerObject.addManager(System.String,System.String)">
            <summary>
            Add as a render bin manager to the pass. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.RenderPassManagerObject.getManager(System.String,System.Int32)">
            <summary>
            Returns the render bin manager at the index or null if the index is out of range. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.RenderPassManagerObject.getManagerCount(System.String)">
            <summary>
            Returns the total number of bin managers. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.RenderPassManagerObject.removeManager(System.String,System.String)">
            <summary>
            Removes a render bin manager. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.RenderPassStateTokenObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.RenderPassStateTokenObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.RenderPassStateTokenObject.disable(System.String)">
            <summary>
            @brief Disables the token.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.RenderPassStateTokenObject.enable(System.String)">
            <summary>
            @brief Enables the token. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.RenderPassStateTokenObject.toggle(System.String)">
            <summary>
            @brief Toggles the token from enabled to disabled or vice versa. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.RigidShapeObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.RigidShapeObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.RigidShapeObject.forceClientTransform(System.String)">
            <summary>
            @brief Forces the client to jump to the RigidShape's transform rather then warp to it.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.RigidShapeObject.freezeSim(System.String,System.Boolean)">
            <summary>
            @brief Enables or disables the physics simulation on the RigidShape object.
               @param isFrozen Boolean frozen state to set the object.
               @tsexample
               // Define the frozen state.
               %isFrozen = \"true\";
               // Inform the object of the defined frozen state
               %thisRigidShape.freezeSim(%isFrozen);
               @endtsexample
               @see ShapeBaseData)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.RigidShapeObject.reset(System.String)">
            <summary>
            @brief Clears physic forces from the shape and sets it at rest.
               @tsexample
               // Inform the RigidShape object to reset.
               %thisRigidShape.reset();
               @endtsexample
               @see ShapeBaseData)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.RiverObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.RiverObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.RiverObject.regenerate(System.String)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               Force River to recreate its geometry.
                               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.RiverObject.setBatchSize(System.String,System.Single)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               BatchSize is not currently used.
                               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.RiverObject.setMaxDivisionSize(System.String,System.Single)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               @see SubdivideLength field.
                               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.RiverObject.setMetersPerSegment(System.String,System.Single)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               @see SegmentLength field.
                               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.RiverObject.setNodeDepth(System.String,System.Int32,System.Single)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               Sets the depth in meters of a particular node.
                               )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ScatterSkyObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ScatterSkyObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ScatterSkyObject.applyChanges(System.String)">
            <summary>
            Apply a full network update of all fields to all clients.
                              )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.getEulerRotation(System.String)">
            <summary>
            Get Euler rotation of this object.
               @return the orientation of the object in the form of rotations around the 
               X, Y and Z axes in degrees. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.getForwardVector(System.String)">
            <summary>
            Get the direction this object is facing.
               @return a vector indicating the direction this object is facing.
               @note This is the object's y axis. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.getInverseTransform(System.String)">
            <summary>
            Get the object's inverse transform.
               @return the inverse transform of the object )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.getMountedObject(System.String,System.Int32)">
            <summary>
            Get the object mounted at a particular slot.
               @param slot mount slot index to query
               @return ID of the object mounted in the slot, or 0 if no object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.getMountedObjectCount(System.String)">
            <summary>
            Get the number of objects mounted to us.
               @return the number of mounted objects. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.getMountedObjectNode(System.String,System.Int32)">
            <summary>
            @brief Get the mount node index of the object mounted at our given slot.
               @param slot mount slot index to query
               @return index of the mount node used by the object mounted in this slot. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.getMountNodeObject(System.String,System.Int32)">
            <summary>
            @brief Get the object mounted at our given node index.
               @param node mount node index to query
               @return ID of the first object mounted at the node, or 0 if none found. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.getObjectBox(System.String)">
            <summary>
            Get the object's bounding box (relative to the object's origin).
               @return six fields, two Point3Fs, containing the min and max points of the 
               objectbox. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.getObjectMount(System.String)">
            <summary>
            @brief Get the object we are mounted to.
               @return the SimObjectID of the object we're mounted to, or 0 if not mounted. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.getPosition(System.String)">
            <summary>
            Get the object's world position.
               @return the current world position of the object )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.getRightVector(System.String)">
            <summary>
            Get the right vector of the object.
               @return a vector indicating the right direction of this object.
               @note This is the object's x axis. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.getScale(System.String)">
            <summary>
            Get the object's scale.
               @return object scale as a Point3F )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.getTransform(System.String)">
            <summary>
            Get the object's transform.
               @return the current transform of the object )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.getType(System.String)">
            <summary>
            Return the type mask for this object.
               @return The numeric type mask for the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.getUpVector(System.String)">
            <summary>
            Get the up vector of the object.
               @return a vector indicating the up direction of this object.
               @note This is the object's z axis. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.getWorldBox(System.String)">
            <summary>
            Get the object's world bounding box.
               @return six fields, two Point3Fs, containing the min and max points of the 
               worldbox. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.getWorldBoxCenter(System.String)">
            <summary>
            Get the center of the object's world bounding box.
               @return the center of the world bounding box for this object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.isGlobalBounds(System.String)">
            <summary>
            Check if this object has a global bounds set.
               If global bounds are set to be true, then the object is assumed to have an 
               infinitely large bounding box for collision and rendering purposes.
               @return true if the object has a global bounds. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.isMounted(System.String)">
            <summary>
            @brief Check if we are mounted to another object.
               @return true if mounted to another object, false if not mounted. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.mountObject(System.String,System.String,System.Int32,WinterLeaf.Engine.Containers.TransformF)">
            <summary>
            @brief Mount objB to this object at the desired slot with optional transform.
            
               @param objB  Object to mount onto us
               @param slot  Mount slot ID
               @param txfm (optional) mount offset transform
               @return true if successful, false if failed (objB is not valid) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.setScale(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            Set the object's scale.
               @param scale object scale to set )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.setTransform(System.String,WinterLeaf.Engine.Containers.TransformF)">
            <summary>
            Set the object's transform (orientation and position).
               @param txfm object transform to set )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.TickCounterAdd(System.String,System.String,System.UInt32)">
            <summary>
            @brief Adds a new counter or updates an existing counter to be tracked via ticks.
               @return true if successful, false if failed )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.TickCounterGetInterval(System.String,System.String)">
            <summary>
            @brief returns the interval for a counter.
               @return true if successful, false if failed )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.TickCounterHas(System.String,System.String)">
            <summary>
            @brief Checks to see if the counter exists.
               @return true if successful, false if failed )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.TickCounterRemove(System.String,System.String)">
            <summary>
            @brief Removes a counter to be tracked via ticks.
               @return true if successful, false if failed )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.TickCounterReset(System.String,System.String)">
            <summary>
            @brief resets the current count for a counter.
               @return true if successful, false if failed )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.TickCountersClear(System.String)">
            <summary>
            @brief Clears all counters from the object.)
               
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.TickCounterSuspend(System.String,System.String,System.Boolean)">
            <summary>
            @brief Adds a new counter to be tracked via ticks.
                )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.unmount(System.String)">
            <summary>
            Unmount us from the currently mounted object if any. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SceneObjectObject.unmountObject(System.String,System.String)">
            <summary>
            @brief Unmount an object from ourselves.
            
               @param target object to unmount
               @return true if successful, false if failed )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ScriptTickObjectObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ScriptTickObjectObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ScriptTickObjectObject.isProcessingTicks(System.String)">
            <summary>
            @brief Is this object wanting to receive tick notifications.
            
               If this object is set to receive tick notifications then its onInterpolateTick() and 
               onProcessTick() callbacks are called.
               @return True if object wants tick notifications )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ScriptTickObjectObject.setProcessTicks(System.String,System.Boolean)">
            <summary>
            @brief Sets this object as either tick processing or not.
            
               @param tick This object's onInterpolateTick() and onProcessTick() callbacks are called if set to true.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.SettingsObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SettingsObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SettingsObject.Settings_beginGroup(System.String,System.String,System.Boolean)">
            <summary>
            settingObj.beginGroup(groupName, fromStart = false);)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SettingsObject.Settings_clearGroups(System.String)">
            <summary>
            settingObj.clearGroups();)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SettingsObject.Settings_endGroup(System.String)">
            <summary>
            settingObj.endGroup();)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SettingsObject.Settings_findFirstValue(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            , false, false), settingObj.findFirstValue();)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SettingsObject.Settings_findNextValue(System.String)">
            <summary>
            settingObj.findNextValue();)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SettingsObject.Settings_getCurrentGroups(System.String)">
            <summary>
            settingObj.getCurrentGroups();)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SettingsObject.Settings_read(System.String)">
            <summary>
            %success = settingObj.read();)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SettingsObject.Settings_remove(System.String,System.String,System.Boolean)">
            <summary>
            settingObj.remove(settingName, includeDefaults = false);)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SettingsObject.Settings_setDefaultValue(System.String,System.String,System.String)">
            <summary>
            settingObj.setDefaultValue(settingName, value);)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SettingsObject.Settings_setValue(System.String,System.String,System.String)">
            <summary>
            ), settingObj.setValue(settingName, value);)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SettingsObject.Settings_value(System.String,System.String,System.String)">
            <summary>
            ), settingObj.value(settingName, defaultValue);)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SettingsObject.write(System.String)">
            <summary>
            (Settings, write, bool, 2, 2, %success = settingObj.write();)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXControllerObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXControllerObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXControllerObject.getCurrentSlot(System.String)">
            <summary>
            Get the index of the playlist slot currently processed by the controller.
               @return The slot index currently being played.
               @see SFXPlayList )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXControllerObject.setCurrentSlot(System.String,System.Int32)">
            <summary>
            Set the index of the playlist slot to play by the controller.  This can be used to seek in the playlist.
               @param index Index of the playlist slot. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXEmitterObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXEmitterObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXEmitterObject.getSource(System.String)">
            <summary>
            Get the sound source object from the emitter.
               @return The sound source used by the emitter or null.
               @note This method will return null when called on the server-side SFXEmitter object.  Only client-side ghosts 
                  actually hold on to %SFXSources. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXEmitterObject.play(System.String)">
            <summary>
            Manually start playback of the emitter's sound.
               If this is called on the server-side object, the play command will be related to all client-side ghosts. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXEmitterObject.stop(System.String)">
            <summary>
            Manually stop playback of the emitter's sound.
               If this is called on the server-side object, the stop command will be related to all client-side ghosts. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXParameterObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXParameterObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXParameterObject.getParameterName(System.String)">
            <summary>
            Get the name of the parameter.
               @return The paramete name. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXParameterObject.reset(System.String)">
            <summary>
            Reset the parameter's value to its default.
               @see SFXParameter::defaultValue )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXProfileObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXProfileObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXProfileObject.getSoundDuration(System.String)">
            <summary>
            Return the length of the sound data in seconds.
               @return The length of the sound data in seconds or 0 if the sound referenced by the profile could not be found. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSoundObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSoundObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSoundObject.getDuration(System.String)">
            <summary>
            Get the total play time (in seconds) of the sound data attached to the sound.
               @return 
               @note Be aware that for looped sounds, this will not return the total playback time of the sound. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSoundObject.getPosition(System.String)">
            <summary>
            Get the current playback position in seconds.
               @return The current play cursor offset. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSoundObject.isReady(System.String)">
            <summary>
            Test whether the sound data associated with the sound has been fully loaded and is ready for playback.
               For streamed sounds, this will be false during playback when the stream queue for the sound is starved and 
               waiting for data.  For buffered sounds, only an initial loading phase will potentially cause isReady to 
               return false.
               @return True if the sound is ready for playback. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSoundObject.setPosition(System.String,System.Single)">
            <summary>
            Set the current playback position in seconds.
               If the source is currently playing, playback will jump to the new position.  If playback is stopped or paused, 
               playback will resume at the given position when play() is called.
               @param position The new position of the play cursor (in seconds). )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject.SFXSource_setTransform(System.String,System.String,System.String)">
            <summary>
             ),
               ( vector position [, vector direction ] ) 
               Set the position and orientation of a 3D sound source.
               @hide )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject.addMarker(System.String,System.String,System.Single)">
            <summary>
            Add a notification marker called @a name at @a pos seconds of playback.
               @param name Symbolic name for the marker that will be passed to the onMarkerPassed() callback.
               @param pos Playback position in seconds when the notification should trigger.  Note that this is a soft limit and there 
                  may be a delay between the play cursor actually passing the position and the callback being triggered.
               @note For looped sounds, the marker will trigger on each iteration.
               @tsexample
               // Create a new source.
               $source = sfxCreateSource( AudioMusicLoop2D, \"art/sound/backgroundMusic\" );
               
               // Assign a class to the source.
               $source.class = \"BackgroundMusic\";
               
               // Add a playback marker at one minute into playback.
               $source.addMarker( \"first\", 60 );
               
               // Define the callback function.  This function will be called when the playback position passes the one minute mark.
               function BackgroundMusic::onMarkerPassed( %this, %markerName )
               {
                  if( %markerName $= \"first\" )
                     echo( \"Playback has passed the 60 seconds mark.\" );
               }
               
               // Play the sound.
               $source.play();
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject.addParameter(System.String,System.String)">
            <summary>
            Attach @a parameter to the source,
               Once attached, the source will react to value changes of the given @a parameter.  Attaching a parameter 
               will also trigger an initial read-out of the parameter's current value.
               @param parameter The parameter to attach to the source. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject.getAttenuatedVolume(System.String)">
            <summary>
            Get the final effective volume level of the source.
               This method returns the volume level as it is after source group volume modulation, fades, and distance-based 
               volume attenuation have been applied to the base volume level.
               @return The effective volume of the source.
               @ref SFXSource_volume )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject.getFadeInTime(System.String)">
            <summary>
            Get the fade-in time set on the source.
               This will initially be SFXDescription::fadeInTime.
               @return The fade-in time set on the source in seconds.
               @see SFXDescription::fadeInTime
               @ref SFXSource_fades )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject.getFadeOutTime(System.String)">
            <summary>
            Get the fade-out time set on the source.
               This will initially be SFXDescription::fadeOutTime.
               @return The fade-out time set on the source in seconds.
               @see SFXDescription::fadeOutTime
               @ref SFXSource_fades )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject.getParameter(System.String,System.Int32)">
            <summary>
            Get the parameter at the given index.
               @param index Index of the parameter to fetch.  Must be 0=index=getParameterCount().
               @return The parameter at the given @a index or null if @a index is out of range.
               @tsexample
                  // Print the name ofo each parameter attached to %source.
                  %numParams = %source.getParameterCount();
                  for( %i = 0; %i  %numParams; %i ++ )
                     echo( %source.getParameter( %i ).getParameterName() );
               @endtsexample
               @see getParameterCount )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject.getParameterCount(System.String)">
            <summary>
            Get the number of SFXParameters that are attached to the source.
               @return The number of parameters attached to the source.
               @tsexample
                  // Print the name ofo each parameter attached to %source.
                  %numParams = %source.getParameterCount();
                  for( %i = 0; %i  %numParams; %i ++ )
                     echo( %source.getParameter( %i ).getParameterName() );
               @endtsexample
               @see getParameter
               @see addParameter )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject.getPitch(System.String)">
            <summary>
            Get the pitch scale of the source.
               Pitch determines the playback speed of the source (default: 1).
               @return The current pitch scale factor of the source.
               @see setPitch
               @see SFXDescription::pitch )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject.getStatus(System.String)">
            <summary>
            Get the current playback status.
               @return Te current playback status )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject.getVolume(System.String)">
            <summary>
            Get the current base volume level of the source.
               This is not the final effective volume that the source is playing at but rather the starting 
               volume level before source group modulation, fades, or distance-based volume attenuation are applied.
               @return The current base volume level.
               @see setVolume
               @see SFXDescription::volume
               @ref SFXSource_volume )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject.isPaused(System.String)">
            <summary>
            Test whether the source is currently paused.
               @return True if the source is in paused state, false otherwise.
               @see pause
               @see getStatus
               @see SFXStatus )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject.isPlaying(System.String)">
            <summary>
            Test whether the source is currently playing.
               @return True if the source is in playing state, false otherwise.
               @see play
               @see getStatus
               @see SFXStatus )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject.isStopped(System.String)">
            <summary>
            Test whether the source is currently stopped.
               @return True if the source is in stopped state, false otherwise.
               @see stop
               @see getStatus
               @see SFXStatus )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject.pause(System.String,System.Single)">
            <summary>
            Pause playback of the source.
               @param fadeOutTime Seconds for the sound to fade down to zero volume.  If -1, the SFXDescription::fadeOutTime 
                  set in the source's associated description is used.  Pass 0 to disable a fade-out effect that may be 
                  configured on the description.
                  Be aware that if a fade-out effect is used, the source will not immediately to paused state but will 
                  rather remain in playing state until the fade-out time has expired.. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject.play(System.String,System.Single)">
            <summary>
            Start playback of the source.
               If the sound data for the source has not yet been fully loaded, there will be a delay after calling 
               play and playback will start after the data has become available.
               @param fadeInTime Seconds for the sound to reach full volume.  If -1, the SFXDescription::fadeInTime 
                  set in the source's associated description is used.  Pass 0 to disable a fade-in effect that may 
                  be configured on the description. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject.removeParameter(System.String,System.String)">
            <summary>
            Detach @a parameter from the source.
               Once detached, the source will no longer react to value changes of the given @a parameter.
               If the parameter is not attached to the source, the method will do nothing.
               @param parameter The parameter to detach from the source. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject.setCone(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Set up the 3D volume cone for the source.
               @param innerAngle Angle of the inner sound cone in degrees (@ref SFXDescription::coneInsideAngle).  Must be 0=innerAngle=360.
               @param outerAngle Angle of the outer sound cone in degrees (@ref SFXDescription::coneOutsideAngle).  Must be 0=outerAngle=360.
               @param outsideVolume Volume scale factor outside of outer cone (@ref SFXDescription::coneOutsideVolume).  Must be 0=outsideVolume=1.
               @note This method has no effect on the source if the source is not 3D. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject.setFadeTimes(System.String,System.Single,System.Single)">
            <summary>
            Set the fade time parameters of the source.
               @param fadeInTime The new fade-in time in seconds.
               @param fadeOutTime The new fade-out time in seconds.
               @see SFXDescription::fadeInTime
               @see SFXDescription::fadeOutTime
               @ref SFXSource_fades )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject.setPitch(System.String,System.Single)">
            <summary>
            Set the pitch scale of the source.
               Pitch determines the playback speed of the source (default: 1).
               @param pitch The new pitch scale factor.
               @see getPitch
               @see SFXDescription::pitch )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject.setVolume(System.String,System.Single)">
            <summary>
            Set the base volume level for the source.
               This volume will be the starting point for source group volume modulation, fades, and distance-based 
               volume attenuation.
               @param volume The new base volume level for the source.  Must be 0>=volume=1.
               @see getVolume
               @ref SFXSource_volume )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXSourceObject.stop(System.String,System.Single)">
            <summary>
            Stop playback of the source.
               @param fadeOutTime Seconds for the sound to fade down to zero volume.  If -1, the SFXDescription::fadeOutTime 
                  set in the source's associated description is used.  Pass 0 to disable a fade-out effect that may be 
                  configured on the description.
                  Be aware that if a fade-out effect is used, the source will not immediately transtion to stopped state but 
                  will rather remain in playing state until the fade-out time has expired. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXStateObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXStateObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXStateObject.activate(System.String)">
            <summary>
            Increase the activation count on the state.
               If the state isn't already active and it is not disabled, the state will be activated.
               @see isActive
               @see deactivate )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXStateObject.deactivate(System.String)">
            <summary>
            Decrease the activation count on the state.
               If the count reaches zero and the state was not disabled, the state will be deactivated.
               @see isActive
               @see activate )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXStateObject.disable(System.String)">
            <summary>
            Increase the disabling count of the state.
               If the state is currently active, it will be deactivated.
               @see isDisabled )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXStateObject.enable(System.String)">
            <summary>
            Decrease the disabling count of the state.
               If the disabling count reaches zero while the activation count is still non-zero, 
                  the state will be reactivated again.
               @see isDisabled )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXStateObject.isActive(System.String)">
            <summary>
            Test whether the state is currently active.
               This is true when the activation count is >0 and the disabling count is =0.
               @return True if the state is currently active.
               @see activate )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SFXStateObject.isDisabled(System.String)">
            <summary>
            Test whether the state is currently disabled.
               This is true when the disabling count of the state is non-zero.
               @return True if the state is disabled.
               @see disable )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShaderDataObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShaderDataObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShaderDataObject.reload(System.String)">
            <summary>
            @brief Rebuilds all the vertex and pixel shader instances created from this ShaderData.
            
            				   @tsexample
            				   // Rebuild the shader instances from ShaderData CloudLayerShader
            				   CloudLayerShader.reload();
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.applyDamage(System.String,System.Single)">
            <summary>
            @brief Increment the current damage level by the specified amount.
            
               @param amount value to add to current damage level )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.applyImpulse(System.String,WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            @brief Apply an impulse to the object.
            
               @param pos world position of the impulse
               @param vec impulse momentum (velocity * mass)
               @return true )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.applyRepair(System.String,System.Single)">
            <summary>
            @brief Repair damage by the specified amount.
            
               Note that the damage level is only reduced by repairRate per tick, so it may 
               take several ticks for the total repair to complete.
            
               @param amount total repair value (subtracted from damage level over time) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.blowUp(System.String)">
            <summary>
            @brief Explodes an object into pieces.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.canCloak(System.String)">
            <summary>
            @brief Check if this object can cloak.
               @return true
               
               @note Not implemented as it always returns true.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.changeMaterial(System.String,System.String,System.String,System.String)">
            <summary>
            @brief Change one of the materials on the shape.
            
               This method changes materials per mapTo with others. The material that 
               is being replaced is mapped to unmapped_mat as a part of this transition.
            
               @note Warning, right now this only sort of works. It doesn't do a live 
               update like it should.
            
               @param mapTo the name of the material target to remap (from getTargetName)
               @param oldMat the old Material that was mapped 
               @param newMat the new Material to map
            
               @tsexample
               // remap the first material in the shape
               %mapTo = %obj.getTargetName( 0 );
               %obj.changeMaterial( %mapTo, 0, MyMaterial );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.destroyThread(System.String,System.Int32)">
            <summary>
            @brief Destroy an animation thread, which prevents it from playing.
            
               @param slot thread slot to destroy
               @return true if successful, false if failed
               
               @see playThread )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.dumpMeshVisibility(System.String)">
            <summary>
            @brief Print a list of visible and hidden meshes in the shape to the console 
               for debugging purposes.
               @note Only in a SHIPPING build.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getAIRepairPoint(System.String)">
            <summary>
            @brief Get the position at which the AI should stand to repair things.
            
               If the shape defines a node called \"AIRepairNode\", this method will 
               return the current world position of that node, otherwise \"0 0 0\".
               @return the AI repair position )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getCameraFov(System.String)">
            <summary>
            @brief Returns the vertical field of view in degrees for this object if used as a camera.
            
               @return current FOV as defined in ShapeBaseData::cameraDefaultFov )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getControllingClient(System.String)">
            <summary>
            @brief Get the client (if any) that controls this object.
            
               The controlling client is the one that will send moves to us to act on.
            
               @return the ID of the controlling GameConnection, or 0 if this object is not 
               controlled by any client.
               
               @see GameConnection)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getControllingObject(System.String)">
            <summary>
            @brief Get the object (if any) that controls this object.
            
               @return the ID of the controlling ShapeBase object, or 0 if this object is 
               not controlled by another object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getDamageFlash(System.String)">
            <summary>
            @brief Get the damage flash level.
            
               @return flash level
            
               @see setDamageFlash )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getDamageLevel(System.String)">
            <summary>
            @brief Get the object's current damage level.
            
               @return damage level
               
               @see setDamageLevel())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getDamagePercent(System.String)">
            <summary>
            @brief Get the object's current damage level as a percentage of maxDamage.
            
               @return damageLevel / datablock.maxDamage
               
               @see setDamageLevel())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getDamageState(System.String)">
            <summary>
            @brief Get the object's damage state.
            
               @return the damage state; one of \"Enabled\", \"Disabled\", \"Destroyed\"
               
               @see setDamageState())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getDefaultCameraFov(System.String)">
            <summary>
            @brief Returns the default vertical field of view in degrees for this object if used as a camera.
            
               @return Default FOV )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getEnergyLevel(System.String)">
            <summary>
            @brief Get the object's current energy level.
            
               @return energy level
               
               @see setEnergyLevel())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getEnergyPercent(System.String)">
            <summary>
            @brief Get the object's current energy level as a percentage of maxEnergy.
               @return energyLevel / datablock.maxEnergy
            
               @see setEnergyLevel())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getEyePoint(System.String)">
            <summary>
            @brief Get the position of the 'eye' for this object.
            
               If the object model has a node called 'eye', this method will return that 
               node's current world position, otherwise it will return the object's current 
               world position.
            
               @return the eye position for this object
            
               @see getEyeVector
               @see getEyeTransform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getEyeTransform(System.String)">
            <summary>
            @brief Get the 'eye' transform for this object.
            
               If the object model has a node called 'eye', this method will return that 
               node's current transform, otherwise it will return the object's current 
               transform.
            
               @return the eye transform for this object
            
               @see getEyeVector
               @see getEyePoint )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getEyeVector(System.String)">
            <summary>
            @brief Get the forward direction of the 'eye' for this object.
            
               If the object model has a node called 'eye', this method will return that 
               node's current forward direction vector, otherwise it will return the 
               object's current forward direction vector.
            
               @return the eye vector for this object
            
               @see getEyePoint
               @see getEyeTransform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getImageAltTrigger(System.String,System.Int32)">
            <summary>
            @brief Get the alt trigger state of the Image mounted in the specified slot.
            
               @param slot Image slot to query
               @return the Image's current alt trigger state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getImageAmmo(System.String,System.Int32)">
            <summary>
            @brief Get the ammo state of the Image mounted in the specified slot.
            
               @param slot Image slot to query
               @return the Image's current ammo state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getImageGenericTrigger(System.String,System.Int32,System.Int32)">
            <summary>
            @brief Get the generic trigger state of the Image mounted in the specified slot.
            
               @param slot Image slot to query
               @param trigger Generic trigger number
               @return the Image's current generic trigger state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getImageLoaded(System.String,System.Int32)">
            <summary>
            @brief Get the loaded state of the Image mounted in the specified slot.
            
               @param slot Image slot to query
               @return the Image's current loaded state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getImageScriptAnimPrefix(System.String,System.Int32)">
            <summary>
            @brief Get the script animation prefix of the Image mounted in the specified slot.
            
               @param slot Image slot to query
               @return the Image's current script animation prefix )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getImageSkinTag(System.String,System.Int32)">
            <summary>
            @brief Get the skin tag ID for the Image mounted in the specified slot.
            
               @param slot Image slot to query
               @return the skinTag value passed to mountImage when the image was 
               mounted )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getImageState(System.String,System.Int32)">
            <summary>
            @brief Get the name of the current state of the Image in the specified slot.
            
               @param slot Image slot to query
               @return name of the current Image state, or \"Error\" if slot is invalid )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getImageTarget(System.String,System.Int32)">
            <summary>
            @brief Get the target state of the Image mounted in the specified slot.
            
               @param slot Image slot to query
               @return the Image's current target state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getImageTrigger(System.String,System.Int32)">
            <summary>
            @brief Get the trigger state of the Image mounted in the specified slot.
            
               @param slot Image slot to query
               @return the Image's current trigger state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getLookAtPoint(System.String,System.Single,System.UInt32)">
            <summary>
            @brief Get the world position this object is looking at.
            
               Casts a ray from the eye and returns information about what the ray hits.
            
               @param distance maximum distance of the raycast
               @param typeMask typeMask of objects to include for raycast collision testing
               @return look-at information as \"Object HitX HitY HitZ [Material]\" or empty string for no hit
            
               @tsexample
               %lookat = %obj.getLookAtPoint();
               echo( \"Looking at: \" @ getWords( %lookat, 1, 3 ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getMaxDamage(System.String)">
            <summary>
            Get the object's maxDamage level.  
               @return datablock.maxDamage)    
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getModelFile(System.String)">
            <summary>
            @brief Get the model filename used by this shape.
            
               @return the shape filename )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getMountedImage(System.String,System.Int32)">
            <summary>
            @brief Get the Image mounted in the specified slot.
            
               @param slot Image slot to query
               @return ID of the ShapeBaseImageData datablock mounted in the slot, or 0 
               if no Image is mounted there. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getMountSlot(System.String,System.String)">
            <summary>
            @brief Get the first slot the given datablock is mounted to on this object.
            
               @param image ShapeBaseImageData datablock to query
               @return index of the first slot the Image is mounted in, or -1 if the Image 
               is not mounted in any slot on this object. )
            
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getMuzzlePoint(System.String,System.Int32)">
            <summary>
            @brief Get the muzzle position of the Image mounted in the specified slot.
            
               If the Image shape contains a node called 'muzzlePoint', then the muzzle 
               position is the position of that node in world space. If no such node 
               is specified, the slot's mount node is used instead.
            
               @param slot Image slot to query
               @return the muzzle position, or \"0 0 0\" if the slot is invalid )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getMuzzleVector(System.String,System.Int32)">
            <summary>
            @brief Get the muzzle vector of the Image mounted in the specified slot.
            
               If the Image shape contains a node called 'muzzlePoint', then the muzzle 
               vector is the forward direction vector of that node's transform in world 
               space. If no such node is specified, the slot's mount node is used 
               instead.
            
               If the correctMuzzleVector flag (correctMuzzleVectorTP in 3rd person) 
               is set in the Image, the muzzle vector is computed to point at whatever 
               object is right in front of the object's 'eye' node.
            
               @param slot Image slot to query
               @return the muzzle vector, or \"0 1 0\" if the slot is invalid )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getPendingImage(System.String,System.Int32)">
            <summary>
            @brief Get the Image that will be mounted next in the specified slot.
            
               Calling mountImage when an Image is already mounted does one of two things: 
               ol>li>Mount the new Image immediately, the old Image is discarded and 
               whatever state it was in is ignored./li>
               li>If the current Image state does not allow Image changes, the new 
               Image is marked as pending, and will not be mounted until the current 
               state completes. eg. if the user changes weapons, you may wish to ensure 
               that the current weapon firing state plays to completion first./li>/ol>
               This command retrieves the ID of the pending Image (2nd case above).
               
               @param slot Image slot to query
               @return ID of the pending ShapeBaseImageData datablock, or 0 if none. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getRechargeRate(System.String)">
            <summary>
            @brief Get the current recharge rate.
            
               @return the recharge rate (per tick)
               
               @see setRechargeRate())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getRepairRate(System.String)">
            <summary>
            @brief Get the per-tick repair amount.
            
               @return the current value to be subtracted from damage level each tick
            
               @see setRepairRate )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getShapeName(System.String)">
            <summary>
            @brief Get the name of the shape.
            
               @note This is the name of the shape object that is sent to the client, 
               not the DTS or DAE model filename.
            
               @return the name of the shape 
               
               @see setShapeName())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getSkinName(System.String)">
            <summary>
            @brief Get the name of the skin applied to this shape.
            
               @return the name of the skin 
            
               @see skin
               @see setSkinName())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getSlotTransform(System.String,System.Int32)">
            <summary>
            @brief Get the world transform of the specified mount slot.
            
               @param slot Image slot to query
               @return the mount transform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getTargetCount(System.String)">
            <summary>
            @brief Get the number of materials in the shape.
            
               @return the number of materials in the shape. 
               
               @see getTargetName())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getTargetName(System.String,System.Int32)">
            <summary>
            @brief Get the name of the indexed shape material.
            
               @param index index of the material to get (valid range is 0 - getTargetCount()-1).
               @return the name of the indexed material.
               
               @see getTargetCount())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getVelocity(System.String)">
            <summary>
            @brief Get the object's current velocity.
            
               @return the current velocity )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.getWhiteOut(System.String)">
            <summary>
            @brief Get the white-out level.
            
               @return white-out level
            
               @see setWhiteOut )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.hasImageState(System.String,System.Int32,System.String)">
            <summary>
            @brief Check if the given state exists on the mounted Image.
            
               @param slot Image slot to query
               @param state Image state to check for
               @return true if the Image has the requested state defined. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.isCloaked(System.String)">
            <summary>
            @brief Check if this object is cloaked.
            
               @return true if cloaked, false if not 
               
               @see setCloaked())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.isDestroyed(System.String)">
            <summary>
            @brief Check if the object is in the Destroyed damage state.
            
               @return true if damage state is \"Destroyed\", false if not 
               
               @see isDisabled()
               @see isEnabled())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.isDisabled(System.String)">
            <summary>
            @brief Check if the object is in the Disabled or Destroyed damage state.
            
               @return true if damage state is not \"Enabled\", false if it is
               
               @see isDestroyed()
               @see isEnabled())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.isEnabled(System.String)">
            <summary>
            @brief Check if the object is in the Enabled damage state.
            
               @return true if damage state is \"Enabled\", false if not
               
               @see isDestroyed()
               @see isDisabled())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.isHidden(System.String)">
            <summary>
            Check if the object is hidden.
               @return true if the object is hidden, false if visible. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.isImageFiring(System.String,System.Int32)">
            <summary>
            @brief Check if the current Image state is firing.
            
               @param slot Image slot to query
               @return true if the current Image state in this slot has the 'stateFire' flag set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.isImageMounted(System.String,System.String)">
            <summary>
            @brief Check if the given datablock is mounted to any slot on this object.
            
               @param image ShapeBaseImageData datablock to query
               @return true if the Image is mounted to any slot, false otherwise. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.mountImage(System.String,System.String,System.Int32,System.Boolean,System.String)">
            <summary>
             ),
               @brief Mount a new Image.
            
               @param image the Image to mount
               @param slot Image slot to mount into (valid range is 0 - 3)
               @param loaded initial loaded state for the Image
               @param skinTag tagged string to reskin the mounted Image
               @return true if successful, false if failed
            
               @tsexample
               %player.mountImage( PistolImage, 1 );
               %player.mountImage( CrossbowImage, 0, false );
               %player.mountImage( RocketLauncherImage, 0, true, 'blue' );
               @endtsexample
               
               @see unmountImage()
               @see getMountedImage()
               @see getPendingImage()
               @see isImageMounted())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.pauseThread(System.String,System.Int32)">
            <summary>
            @brief Pause an animation thread.
               
               If restarted using playThread, the animation 
               will resume from the paused position.
               @param slot thread slot to stop
               @return true if successful, false if failed
               
               @see playThread )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.playAudio(System.String,System.Int32,System.String)">
            <summary>
            @brief Attach a sound to this shape and start playing it.
            
               @param slot Audio slot index for the sound (valid range is 0 - 3)    @param track SFXTrack to play
               @return true if the sound was attached successfully, false if failed
               
               @see stopAudio())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.playThread(System.String,System.Int32,System.String)">
            <summary>
             ),
               @brief Start a new animation thread, or restart one that has been paused or 
               stopped.
            
               @param slot thread slot to play. Valid range is 0 - 3)     @param name name of the animation sequence to play in this slot. If not 
               specified, the paused or stopped thread in this slot will be resumed.
               @return true if successful, false if failed
            
               @tsexample
               %obj.playThread( 0, \"ambient\" );      // Play the ambient sequence in slot 0
               %obj.setThreadTimeScale( 0, 0.5 );    // Play at half-speed
               %obj.pauseThread( 0 );                // Pause the sequence
               %obj.playThread( 0 );                 // Resume playback
               %obj.playThread( 0, \"spin\" );         // Replace the sequence in slot 0
               @endtsexample
               
               @see pauseThread()
               @see stopThread()
               @see setThreadDir()
               @see setThreadTimeScale()
               @see destroyThread())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setAllMeshesHidden(System.String,System.Boolean)">
            <summary>
            @brief Set the hidden state on all the shape meshes.
            
               This allows you to hide all meshes in the shape, for example, and then only 
               enable a few.
            
               @param hide new hidden state for all meshes )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setCameraFov(System.String,System.Single)">
            <summary>
            @brief Set the vertical field of view in degrees for this object if used as a camera.
            
               @param fov new FOV value )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setCloaked(System.String,System.Boolean)">
            <summary>
            @brief Set the cloaked state of this object.
            
               When an object is cloaked it is not rendered.
            
               @param cloak true to cloak the object, false to uncloak
               
               @see isCloaked())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setDamageFlash(System.String,System.Single)">
            <summary>
            @brief Set the damage flash level.
            
               Damage flash may be used as a postfx effect to flash the screen when the 
               client is damaged.
            
               @note Relies on the flash postFx.
            
               @param level flash level (0-1)
               
               @see getDamageFlash())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setDamageLevel(System.String,System.Single)">
            <summary>
            @brief Set the object's current damage level.
            
               @param level new damage level
               
               @see getDamageLevel()
               @see getDamagePercent())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setDamageState(System.String,System.String)">
            <summary>
            @brief Set the object's damage state.
            
               @param state should be one of \"Enabled\", \"Disabled\", \"Destroyed\"
               @return true if successful, false if failed
               
               @see getDamageState())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setDamageVector(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            @brief Set the damage direction vector.
            
               Currently this is only used to initialise the explosion if this object 
               is blown up.
            
               @param vec damage direction vector
            
               @tsexample
               %obj.setDamageVector( \"0 0 1\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setEnergyLevel(System.String,System.Single)">
            <summary>
            @brief Set this object's current energy level.
            
               @param level new energy level
               
               @see getEnergyLevel()
               @see getEnergyPercent())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setHidden(System.String,System.Boolean)">
            <summary>
            @brief Add or remove this object from the scene.
               When removed from the scene, the object will not be processed or rendered.
               @param show False to hide the object, true to re-show it )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setImageAltTrigger(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Set the alt trigger state of the Image mounted in the specified slot.
            
               @param slot Image slot to modify
               @param state new alt trigger state for the Image
               @return the Image's new alt trigger state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setImageAmmo(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Set the ammo state of the Image mounted in the specified slot.
            
               @param slot Image slot to modify
               @param state new ammo state for the Image
               @return the Image's new ammo state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setImageGenericTrigger(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            @brief Set the generic trigger state of the Image mounted in the specified slot.
            
               @param slot Image slot to modify
               @param trigger Generic trigger number
               @param state new generic trigger state for the Image
               @return the Image's new generic trigger state or -1 if there was a problem. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setImageLoaded(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Set the loaded state of the Image mounted in the specified slot.
            
               @param slot Image slot to modify
               @param state new loaded state for the Image
               @return the Image's new loaded state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setImageScriptAnimPrefix(System.String,System.Int32,System.String)">
            <summary>
            @brief Set the script animation prefix for the Image mounted in the specified slot.
               This is used to further modify the prefix used when deciding which animation sequence to 
               play while this image is mounted.
            
               @param slot Image slot to modify
               @param prefix The prefix applied to the image )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setImageTarget(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Set the target state of the Image mounted in the specified slot.
            
               @param slot Image slot to modify
               @param state new target state for the Image
               @return the Image's new target state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setImageTrigger(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Set the trigger state of the Image mounted in the specified slot.
            
               @param slot Image slot to modify
               @param state new trigger state for the Image
               @return the Image's new trigger state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setMeshHidden(System.String,System.String,System.Boolean)">
            <summary>
            @brief Set the hidden state on the named shape mesh.
            
               @param name name of the mesh to hide/show
               @param hide new hidden state for the mesh )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setRechargeRate(System.String,System.Single)">
            <summary>
            @brief Set the recharge rate.
            
               The recharge rate is added to the object's current energy level each tick, 
               up to the maxEnergy level set in the ShapeBaseData datablock.
               
               @param rate the recharge rate (per tick)
               
               @see getRechargeRate())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setRepairRate(System.String,System.Single)">
            <summary>
            @brief Set amount to repair damage by each tick.
            
               Note that this value is separate to the repairRate field in ShapeBaseData. 
               This value will be subtracted from the damage level each tick, whereas the 
               ShapeBaseData field limits how much of the applyRepair value is subtracted 
               each tick. Both repair types can be active at the same time.
               
               @param rate value to subtract from damage level each tick (must be > 0)
               
               @see getRepairRate())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setShapeName(System.String,System.String)">
            <summary>
            @brief Set the name of this shape.
            
               @note This is the name of the shape object that is sent to the client, 
               not the DTS or DAE model filename.
            
               @param name new name for the shape
               
               @see getShapeName())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setSkinName(System.String,System.String)">
            <summary>
            @brief Apply a new skin to this shape.
            
               'Skinning' the shape effectively renames the material targets, allowing 
               different materials to be used on different instances of the same model.
            
               @param name name of the skin to apply
            
               @see skin
               @see getSkinName())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setThreadDir(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Set the playback direction of an animation thread.
            
               @param slot thread slot to modify
               @param fwd true to play the animation forwards, false to play backwards
               @return true if successful, false if failed
               
               @see playThread() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setThreadPosition(System.String,System.Int32,System.Single)">
            <summary>
            @brief Set the position within an animation thread.
            
               @param slot thread slot to modify
               @param pos position within thread
               @return true if successful, false if failed
               
               @see playThread )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setThreadTimeScale(System.String,System.Int32,System.Single)">
            <summary>
            @brief Set the playback time scale of an animation thread.
            
               @param slot thread slot to modify
               @param scale new thread time scale (1=normal speed, 0.5=half speed etc)
               @return true if successful, false if failed
               
               @see playThread )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setVelocity(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            @brief Set the object's velocity.
            
               @param vel new velocity for the object
               @return true )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.setWhiteOut(System.String,System.Single)">
            <summary>
            @brief Set the white-out level.
            
               White-out may be used as a postfx effect to brighten the screen in response 
               to a game event.
            
               @note Relies on the flash postFx.
            
               @param level flash level (0-1)
               
               @see getWhiteOut())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.startFade(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            @brief Fade the object in or out without removing it from the scene.
            
               A faded out object is still in the scene and can still be collided with, 
               so if you want to disable collisions for this shape after it fades out 
               use setHidden to temporarily remove this shape from the scene.
              
               @note Items have the ability to light their surroundings. When an Item with 
               an active light is fading out, the light it emits is correspondingly 
               reduced until it goes out. Likewise, when the item fades in, the light is 
               turned-up till it reaches it's normal brightntess.
            
               @param time duration of the fade effect in ms
               @param delay delay in ms before the fade effect begins
               @param fadeOut true to fade-out to invisible, false to fade-in to full visibility )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.stopAudio(System.String,System.Int32)">
            <summary>
            @brief Stop a sound started with playAudio.
            
               @param slot audio slot index (started with playAudio)
               @return true if the sound was stopped successfully, false if failed
               
               @see playAudio())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.stopThread(System.String,System.Int32)">
            <summary>
            @brief Stop an animation thread.
            
               If restarted using playThread, the animation 
               will start from the beginning again.
               @param slot thread slot to stop
               @return true if successful, false if failed
               
               @see playThread )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseObject.unmountImage(System.String,System.Int32)">
            <summary>
            @brief Unmount the mounted Image in the specified slot.
            
               @param slot Image slot to unmount
               @return true if successful, false if failed
               
               @see mountImage())
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseDataObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseDataObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseDataObject.checkDeployPos(System.String,WinterLeaf.Engine.Containers.TransformF)">
            <summary>
            @brief Check if there is the space at the given transform is free to spawn into.
            
               The shape's bounding box volume is used to check for collisions at the given world 
               transform.  Only interior and static objects are checked for collision.
            
               @param txfm Deploy transform to check
               @return True if the space is free, false if there is already something in 
               the way.
            
               @note This is a server side only check, and is not actually limited to spawning.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ShapeBaseDataObject.getDeployTransform(System.String,WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            @brief Helper method to get a transform from a position and vector (suitable for use with setTransform).
               @param pos Desired transform position
               @param normal Vector of desired direction
               @return The deploy transform )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimComponentObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimComponentObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimComponentObject.SimComponent_getComponent(System.String,System.Int32)">
            <summary>
            (idx) Get the component corresponding to the given index.
            			  @param idx An integer index value corresponding to the desired component.
            			  @return The id of the component at the given index as an integer)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimComponentObject.SimComponent_getComponentCount(System.String)">
            <summary>
            () Get the current component count
            			  @return The number of components in the list as an integer)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimComponentObject.SimComponent_getIsTemplate(System.String)">
            <summary>
            () Check whether SimComponent is currently a template
            			  @return true if is a template and false if not)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimComponentObject.SimComponent_isEnabled(System.String)">
            <summary>
            () Check whether SimComponent is currently enabled
            			  @return true if enabled and false if not)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimComponentObject.SimComponent_setEnabled(System.String,System.Boolean)">
            <summary>
            (enabled) Sets or unsets the enabled flag
            			  @param enabled Boolean value
            			  @return No return value)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimComponentObject.SimComponent_setIsTemplate(System.String,System.Boolean)">
            <summary>
            (template) Sets or unsets the template flag
            			  @param template Boolean value
            			  @return No return value)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimComponentObject.addComponents(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( SimComponent, addComponents, bool, 3, 64, %obj.addComponents( %compObjName, %compObjName2, ... );
            			  Adds additional components to current list.
            			  @param Up to 62 component names
            			  @return Returns true on success, false otherwise.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimComponentObject.removeComponents(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( SimComponent, removeComponents, bool, 3, 64, %obj.removeComponents( %compObjName, %compObjName2, ... );
            			  Removes components by name from current list.
            			  @param objNamex Up to 62 component names
            			  @return Returns true on success, false otherwise.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimDataBlockObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimDataBlockObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimDataBlockObject.SimDataBlock_reloadOnLocalClient(System.String)">
            <summary>
            Reload the datablock.  This can only be used with a local client configuration. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_assignFieldsFrom(System.String,System.String)">
            <summary>
            Copy fields from another object onto this one.  The objects must 
               be of same type. Everything from the object will overwrite what's 
               in this object; extra fields in this object will remain. This 
               includes dynamic fields.
               @param fromObject The object from which to copy fields. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_delete(System.String)">
            <summary>
            Delete and remove the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_dumpClassHierarchy(System.String)">
            <summary>
            Dump the native C++ class hierarchy of this object's C++ class to the console. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_dumpMethods(System.String)">
            <summary>
            List the methods defined on this object.
               Each description is a newline-separated vector with the following elements:
               - Minimum number of arguments.
               - Maximum number of arguments.
               - Prototype string.
               - Full script file path (if script method).
               - Line number of method definition in script (if script method).
               - Documentation string (not including prototype).  This takes up the remainder of the vector.
               @return An ArrayObject populated with (name,description) pairs of all methods defined on the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_getCanSave(System.String)">
            <summary>
            Get whether the object will be included in saves.
               @return True if the object will be saved; false otherwise. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_getClassName(System.String)">
            <summary>
            Get the name of the C++ class which the object is an instance of.
               @return The name of the C++ class of the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_getClassNamespace(System.String)">
            <summary>
            Get the name of the class namespace assigned to this object.
               @return The name of the 'class' namespace. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_getDeclarationLine(System.String)">
            <summary>
            Get the line number at which the object is defined in its file.
               @return The line number of the object's definition in script.
               @see getFilename())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_getDynamicField(System.String,System.Int32)">
            <summary>
            Get a value of a dynamic field by index.
               @param index The index of the dynamic field.
               @return The value of the dynamic field at the given index or \"\". )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_getDynamicFieldCount(System.String)">
            <summary>
            Get the number of dynamic fields defined on the object.
               @return The number of dynamic fields defined on the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_getField(System.String,System.Int32)">
            <summary>
            Retrieve the value of a static field by index.
               @param index The index of the static field.
               @return The value of the static field with the given index or \"\". )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_getFieldCount(System.String)">
            <summary>
            Get the number of static fields on the object.
               @return The number of static fields defined on the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_getFieldType(System.String,System.String)">
            <summary>
            Get the console type code of the given field.
               @return The numeric type code for the underlying console type of the given field. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_getFieldValue(System.String,System.String,System.Int32)">
            <summary>
            Return the value of the given field on this object.
               @param fieldName The name of the field.  If it includes a field index, the index is parsed out.
               @param index Optional parameter to specify the index of an array field separately.
               @return The value of the given field or \"\" if undefined. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_getFilename(System.String)">
            <summary>
            Returns the filename the object is attached to.
               @return The name of the file the object is associated with; usually the file the object was loaded from. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_getSuperClassNamespace(System.String)">
            <summary>
            Get the name of the superclass namespace assigned to this object.
               @return The name of the 'superClass' namespace. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_isEnabled(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_isExpanded(System.String)">
            <summary>
            Get whether the object has been marked as expanded. (in editor)
               @return True if the object is marked expanded. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_isField(System.String,System.String)">
            <summary>
            Test whether the given field is defined on this object.
               @param fieldName The name of the field.
               @return True if the object implements the given field. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_isInNamespaceHierarchy(System.String,System.String)">
            <summary>
            Test whether the namespace of this object is a direct or indirect child to the given namespace.
               @param name The name of a namespace.
               @return True if the given namespace name is within the namespace hierarchy of this object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_isMemberOfClass(System.String,System.String)">
            <summary>
            Test whether this object is a member of the specified class.
               @param className Name of a native C++ class.
               @return True if this object is an instance of the given C++ class or any of its super classes. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_isMethod(System.String,System.String)">
            <summary>
            Test whether the given method is defined on this object.
               @param The name of the method.
               @return True if the object implements the given method. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_save(System.String,System.String,System.Boolean,System.String)">
            <summary>
             ),
               Save out the object to the given file.
               @param fileName The name of the file to save to.
               @param selectedOnly If true, only objects marked as selected will be saved out.
               @param preAppendString Text which will be preprended directly to the object serialization.
               @param True on success, false on failure. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_saveToXML(System.String,System.String,System.String)">
            <summary>
            Retrieve the value of a static field by index.
               @param index The index of the static field.
               @return The value of the static field with the given index or \"\". )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_setCanSave(System.String,System.Boolean)">
            <summary>
            Set whether the object will be included in saves.
               @param value If true, the object will be included in saves; if false, it will be excluded. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_setClassNamespace(System.String,System.String)">
            <summary>
            Assign a class namespace to this object.
               @param name The name of the 'class' namespace for this object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_setEnabled(System.String,System.Boolean)">
            <summary>
            (enabled))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_setFieldType(System.String,System.String,System.String)">
            <summary>
            Set the console type code for the given field.
               @param fieldName The name of the dynamic field to change to type for.
               @param type The name of the console type.
               @note This only works for dynamic fields.  Types of static fields cannot be changed. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_setFieldValue(System.String,System.String,System.String,System.Int32)">
            <summary>
            Set the value of the given field on this object.
               @param fieldName The name of the field to assign to.  If it includes an array index, the index will be parsed out.
               @param value The new value to assign to the field.
               @param index Optional argument to specify an index for an array field.
               @return True. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_setFilename(System.String,System.String)">
            <summary>
            Sets the object's file name and path
               @param fileName The name of the file to associate this object with. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_setIsExpanded(System.String,System.Boolean)">
            <summary>
            Set whether the object has been marked as expanded. (in editor)
               @param state True if the object is to be marked expanded; false if not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.SimObject_setSuperClassNamespace(System.String,System.String)">
            <summary>
            Assign a superclass namespace to this object.
               @param name The name of the 'superClass' namespace for this object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.assignPersistentId(System.String)">
            <summary>
            Assign a persistent ID to the object if it does not already have one. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.call(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( SimObject, call, const char*, 3, 0, ( string method, string args... ) Dynamically call a method on an object.
               @param method Name of method to call.
               @param args Zero or more arguments for the method.
               @return The result of the method call. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.clone(System.String)">
            <summary>
            Create a copy of this object.
               @return An exact duplicate of this object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.deepClone(System.String)">
            <summary>
            Create a copy of this object and all its subobjects.
               @return An exact duplicate of this object and all objects it references. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.dump(System.String,System.Boolean)">
            <summary>
            Dump a description of all fields and methods defined on this object to the console.
               @param detailed Whether to print detailed information about members. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.dumpGroupHierarchy(System.String)">
            <summary>
            Dump the hierarchy of this object up to RootGroup to the console. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.getDebugInfo(System.String)">
            <summary>
            Return some behind-the-scenes information on the object.
               @return An ArrayObject filled with internal information about the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.getGroup(System.String)">
            <summary>
            Get the group that this object is contained in.
               @note If not assigned to particular SimGroup, an object belongs to RootGroup.
               @return The SimGroup object to which the object belongs. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.getId(System.String)">
            <summary>
            Get the underlying unique numeric ID of the object.
               @note Object IDs are unique only during single engine runs.
               @return The unique numeric ID of the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.getInternalName(System.String)">
            <summary>
            Get the internal name of the object.
               @return The internal name of the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.getName(System.String)">
            <summary>
            Get the global name of the object.
               @return The global name assigned to the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.isChildOfGroup(System.String,System.String)">
            <summary>
            Test whether the object belongs directly or indirectly to the given group.
               @param group The SimGroup object.
               @return True if the object is a child of the given group or a child of a group that the given group is directly or indirectly a child to. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.isEditable(System.String)">
            <summary>
            Editable/Non-editable object in the game.
               @return If the object is editable or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.isEditorOnly(System.String)">
            <summary>
            Return true if the object is only used by the editor.
               @return True if this object exists only for the sake of editing. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.isNameChangeAllowed(System.String)">
            <summary>
            Get whether this object may be renamed.
               @return True if this object can be renamed; false otherwise. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.isSelected(System.String)">
            <summary>
            Get whether the object has been marked as selected. (in editor)
               @return True if the object is currently selected. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.schedule(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( SimObject,schedule, S32, 4, 0, ( float time, string method, string args... ) Delay an invocation of a method.
               @param time The number of milliseconds after which to invoke the method.  This is a soft limit.
               @param method The method to call.
               @param args The arguments with which to call the method.
               @return The numeric ID of the created schedule.  Can be used to cancel the call. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.setEditable(System.String,System.Boolean)">
            <summary>
            Editable/Non-editable object in the game.
               @param value If true, the object will be editable; if false, the object will not be editable. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.setEditorOnly(System.String,System.Boolean)">
            <summary>
            Set/clear the editor-only flag on this object.
               @param value If true, the object is marked as existing only for the editor. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.setHidden(System.String,System.Boolean)">
            <summary>
            Hide/unhide the object.
               @param value If true, the object will be hidden; if false, the object will be unhidden. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.setInternalName(System.String,System.String)">
            <summary>
            Set the internal name of the object.
               @param newInternalName The new internal name for the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.setIsSelected(System.String,System.Boolean)">
            <summary>
            Set whether the object has been marked as selected. (in editor)
               @param state True if object is to be marked selected; false if not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.setLocked(System.String,System.Boolean)">
            <summary>
            Lock/unlock the object in the editor.
               @param value If true, the object will be locked; if false, the object will be unlocked. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.setName(System.String,System.String)">
            <summary>
            Set the global name of the object.
               @param newName The new global name to assign to the object.
               @note If name changing is disallowed on the object, the method will fail with a console error. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.setNameChangeAllowed(System.String,System.Boolean)">
            <summary>
            Set whether this object can be renamed from its first name.
               @param value If true, renaming is allowed for this object; if false, trying to change the name of the object will generate a console error. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimObjectObject.signal(System.String,System.String,System.String)">
            <summary>
            (SimObject, signal, void, 3, 4, evaluates strings stored in dynamic fields take a string as parameter)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimPersistSetObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimPersistSetObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimPersistSetObject.SimPersistSet_resolvePersistentIds(System.String)">
            <summary>
            () - Try to bind unresolved persistent IDs in the set. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimResponseCurveObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimResponseCurveObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimResponseCurveObject.SimResponseCurve_addPoint(System.String,System.Single,System.Single)">
            <summary>
            addPoint( F32 value, F32 time ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimResponseCurveObject.SimResponseCurve_clear(System.String)">
            <summary>
            clear() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimResponseCurveObject.SimResponseCurve_getValue(System.String,System.Single)">
            <summary>
            getValue( F32 time ) )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimSetObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimSetObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimSetObject.SimSet_deleteAllObjects(System.String)">
            <summary>
            () Delete all objects in the set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimSetObject.SimSet_getFullCount(System.String)">
            <summary>
            () Get the number of direct and indirect child objects contained in the set.
               @return The number of objects contained in the set as well as in other sets contained directly or indirectly in the set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimSetObject.SimSet_sort(System.String,System.String)">
            <summary>
            ( string callbackFunction ) Sort the objects in the set using the given comparison function.
               @param callbackFunction Name of a function that takes two object arguments A and B and returns -1 if A is less, 1 if B is less, and 0 if both are equal. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimSetObject.acceptsAsChild(System.String,System.String)">
            <summary>
            Test whether the given object may be added to the set.
               @param obj The object to test for potential membership.
               @return True if the object may be added to the set, false otherwise. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimSetObject.add(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( SimSet, add, void, 3, 0,
               ( SimObject objects... ) Add the given objects to the set.
               @param objects The objects to add to the set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimSetObject.bringToFront(System.String,System.String)">
            <summary>
            Make the given object the first object in the set.
               @param obj The object to bring to the frontmost position.  Must be contained in the set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimSetObject.callOnChildren(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( SimSet, callOnChildren, void, 3, 0,
               ( string method, string args... ) Call a method on all objects contained in the set.
               @param method The name of the method to call.
               @param args The arguments to the method.
               @note This method recurses into all SimSets that are children to the set.
               @see callOnChildrenNoRecurse )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimSetObject.callOnChildrenNoRecurse(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( SimSet, callOnChildrenNoRecurse, void, 3, 0,
               ( string method, string args... ) Call a method on all objects contained in the set.
               @param method The name of the method to call.
               @param args The arguments to the method.
               @note This method does not recurse into child SimSets.
               @see callOnChildren )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimSetObject.clear(System.String)">
            <summary>
            Remove all objects from the set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimSetObject.findObjectByInternalName(System.String,System.String,System.Boolean)">
            <summary>
            Find an object in the set by its internal name.
               @param internalName The internal name of the object to look for.
               @param searchChildren If true, SimSets contained in the set will be recursively searched for the object.
               @return The object with the given internal name or 0 if no match was found. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimSetObject.getCount(System.String)">
            <summary>
            Get the number of objects contained in the set.
               @return The number of objects contained in the set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimSetObject.getObject(System.String,System.UInt32)">
            <summary>
            Get the object at the given index.
               @param index The object index.
               @return The object at the given index or -1 if index is out of range. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimSetObject.getObjectIndex(System.String,System.String)">
            <summary>
            Return the index of the given object in this set.
               @param obj The object for which to return the index.  Must be contained in the set.
               @return The index of the object or -1 if the object is not contained in the set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimSetObject.getRandom(System.String)">
            <summary>
            Return a random object from the set.
               @return A randomly selected object from the set or -1 if the set is empty. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimSetObject.isMember(System.String,System.String)">
            <summary>
            Test whether the given object belongs to the set.
               @param obj The object.
               @return True if the object is contained in the set; false otherwise. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimSetObject.listObjects(System.String)">
            <summary>
            Dump a list of all objects contained in the set to the console. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimSetObject.pushToBack(System.String,System.String)">
            <summary>
            Make the given object the last object in the set.
               @param obj The object to bring to the last position.  Must be contained in the set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimSetObject.remove(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( SimSet, remove, void, 3, 0,
               ( SimObject objects... ) Remove the given objects from the set.
               @param objects The objects to remove from the set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimSetObject.reorderChild(System.String,System.String,System.String)">
            <summary>
            Make sure child1 is ordered right before child2 in the set.
               @param child1 The first child.  The object must already be contained in the set.
               @param child2 The second child.  The object must already be contained in the set. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.SimXMLDocument_attributeF32(System.String,System.String)">
            <summary>
            (string attributeName)
               @brief Get float attribute from the current Element on the stack.
               @param attributeName Name of attribute to retrieve.
               @return The value of the given attribute in the form of a float.
               @deprecated Use attribute().)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.SimXMLDocument_attributeS32(System.String,System.String)">
            <summary>
            (string attributeName)
               @brief Get int attribute from the current Element on the stack.
               @param attributeName Name of attribute to retrieve.
               @return The value of the given attribute in the form of an integer.
               @deprecated Use attribute().)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.addComment(System.String,System.String)">
            <summary>
            @brief Add the given comment as a child of the document.
              @param comment String containing the comment.
            
               @tsexample
               // Create a new XML document with a header, a comment and single element.
               %x = new SimXMLDocument();
               %x.addHeader();
               %x.addComment(\"This is a test comment\");
               %x.addNewElement(\"NewElement\");
               %x.saveFile(\"test.xml\");
               // Produces the following file:
               // ?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
               // !--This is a test comment-->
               // NewElement />
               @endtsexample
               
               @see readComment())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.addData(System.String,System.String)">
            <summary>
            @brief Add the given text as a child of current Element.
            
               Use getData() to retrieve any text from the current Element.
            
               addData() and addText() may be used interchangeably.  As there is no 
               difference between data and text, you may also use removeText() to clear 
               any data from the current Element.
            
               @param text String containing the text.
            
               @tsexample
               // Create a new XML document with a header and single element
               // with some added data.
               %x = new SimXMLDocument();
               %x.addHeader();
               %x.addNewElement(\"NewElement\");
               %x.addData(\"Some text\");
               %x.saveFile(\"test.xml\");
               // Produces the following file:
               // ?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
               // NewElement>Some text/NewElement>
               @endtsexample
            
               @see getData()
               @see addText()
               @see getText()
               @see removeText())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.addHeader(System.String)">
            <summary>
            @brief Add a XML header to a document.
            
               Sometimes called a declaration, you typically add a standard header to 
               the document before adding any elements.  SimXMLDocument always produces 
               the following header:
               ?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
              
               @tsexample
               // Create a new XML document with just a header and single element.
               %x = new SimXMLDocument();
               %x.addHeader();
               %x.addNewElement(\"NewElement\");
               %x.saveFile(\"test.xml\");
               // Produces the following file:
               // ?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
               // NewElement />
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.addNewElement(System.String,System.String)">
            <summary>
            @brief Create a new element with the given name as child of current Element's 
               parent and push it onto the Element stack making it the current one.
            
               @note This differs from pushNewElement() in that it adds the new Element to the 
               current Element's parent (or document if there is no parent Element).  This makes 
               the new Element a sibling of the current one.
            
               @param name XML tag for the new Element.
               
               @see pushNewElement())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.addText(System.String,System.String)">
            <summary>
            @brief Add the given text as a child of current Element.
            
               Use getText() to retrieve any text from the current Element and removeText() 
               to clear any text.
            
               addText() and addData() may be used interchangeably.
            
               @param text String containing the text.
            
               @tsexample
               // Create a new XML document with a header and single element
               // with some added text.
               %x = new SimXMLDocument();
               %x.addHeader();
               %x.addNewElement(\"NewElement\");
               %x.addText(\"Some text\");
               %x.saveFile(\"test.xml\");
               // Produces the following file:
               // ?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
               // NewElement>Some text/NewElement>
               @endtsexample
            
               @see getText()
               @see removeText()
               @see addData()
               @see getData())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.attribute(System.String,System.String)">
            <summary>
            @brief Get a string attribute from the current Element on the stack.
               @param attributeName Name of attribute to retrieve.
               @return The attribute string if found.  Otherwise returns an empty string.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.attributeExists(System.String,System.String)">
            <summary>
            @brief Tests if the requested attribute exists.
               @param attributeName Name of attribute being queried for.
               @return True if the attribute exists.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.clear(System.String)">
            <summary>
            @brief Set this document to its default state.
               
               Clears all Elements from the documents.  Equivalent to using reset()
               
               @see reset())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.clearError(System.String)">
            <summary>
            @brief Clear the last error description.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.elementValue(System.String)">
            <summary>
            @brief Get the Element's value if it exists.
               Usually returns the text from the Element.
               @return The value from the Element, or an empty string if none is found.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.firstAttribute(System.String)">
            <summary>
            @brief Obtain the name of the current Element's first attribute.
               @return String containing the first attribute's name, or an empty string if none is found.
               @see nextAttribute()
               @see lastAttribute()
               @see prevAttribute())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.getData(System.String)">
            <summary>
            @brief Gets the text from the current Element.
            
               Use addData() to add text to the current Element.
            
               getData() and getText() may be used interchangeably.  As there is no 
               difference between data and text, you may also use removeText() to clear 
               any data from the current Element.
            
               @return String containing the text in the current Element.
            
               @tsexample
               // Using the following test.xml file as an example:
               // ?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
               // NewElement>Some data/NewElement>
            
               // Load in the file
               %x = new SimXMLDocument();
               %x.loadFile(\"test.xml\");
            
               // Make the first Element the current one
               %x.pushFirstChildElement(\"NewElement\");
            
               // Store the current Element's data ('Some data' in this example)
               // into 'result'
               %result = %x.getData();
               echo( %result );
               @endtsexample
               
               @see addData()
               @see addText()
               @see getText()
               @see removeText())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.getErrorDesc(System.String)">
            <summary>
            @brief Get last error description.
               @return A string of the last error message.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.getText(System.String)">
            <summary>
            @brief Gets the text from the current Element.
            
               Use addText() to add text to the current Element and removeText() 
               to clear any text.
            
               getText() and getData() may be used interchangeably.
            
               @return String containing the text in the current Element.
            
               @tsexample
               // Using the following test.xml file as an example:
               // ?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
               // NewElement>Some text/NewElement>
            
               // Load in the file
               %x = new SimXMLDocument();
               %x.loadFile(\"test.xml\");
            
               // Make the first Element the current one
               %x.pushFirstChildElement(\"NewElement\");
            
               // Store the current Element's text ('Some text' in this example)
               // into 'result'
               %result = %x.getText();
               echo( %result );
               @endtsexample
               
               @see addText()
               @see removeText()
               @see addData()
               @see getData())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.lastAttribute(System.String)">
            <summary>
            @brief Obtain the name of the current Element's last attribute.
               @return String containing the last attribute's name, or an empty string if none is found.
               @see prevAttribute()
               @see firstAttribute()
               @see lastAttribute())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.loadFile(System.String,System.String)">
            <summary>
            @brief Load in given filename and prepare it for use.
               @note Clears the current document's contents.
               @param fileName Name and path of XML document
               @return True if the file was loaded successfully.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.nextAttribute(System.String)">
            <summary>
            @brief Get the name of the next attribute for the current Element after a call to firstAttribute().
               @return String containing the next attribute's name, or an empty string if none is found.
               @see firstAttribute()
               @see lastAttribute()
               @see prevAttribute())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.nextSiblingElement(System.String,System.String)">
            <summary>
            @brief Put the next sibling Element with the given name on the stack, making it the current one.
               @param name String containing name of the next sibling.
               @return True if the Element was found and made the current one.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.parse(System.String,System.String)">
            <summary>
            @brief Create a document from a XML string.
               @note Clears the current document's contents.
               @param xmlString Valid XML to parse and store as a document.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.popElement(System.String)">
            <summary>
            @brief Pop the last Element off the stack.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.prevAttribute(System.String)">
            <summary>
            @brief Get the name of the previous attribute for the current Element after a call to lastAttribute().
               @return String containing the previous attribute's name, or an empty string if none is found.
               @see lastAttribute()
               @see firstAttribute()
               @see nextAttribute())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.pushChildElement(System.String,System.Int32)">
            <summary>
            @brief Push the child Element at the given index onto the stack, making it the current one.
               @param index Numerical index of Element being pushed.
               @return True if the Element was found and made the current one.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.pushFirstChildElement(System.String,System.String)">
            <summary>
            @brief Push the first child Element with the given name onto the stack, making it the current Element.
            
               @param name String containing name of the child Element.
               @return True if the Element was found and made the current one.
            
               @tsexample
               // Using the following test.xml file as an example:
               // ?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
               // NewElement>Some text/NewElement>
            
               // Load in the file
               %x = new SimXMLDocument();
               %x.loadFile(\"test.xml\");
            
               // Make the first Element the current one
               %x.pushFirstChildElement(\"NewElement\");
            
               // Store the current Element's text ('Some text' in this example)
               // into 'result'
               %result = %x.getText();
               echo( %result );
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.pushNewElement(System.String,System.String)">
            <summary>
            @brief Create a new element with the given name as child of current Element 
               and push it onto the Element stack making it the current one.
            
               @note This differs from addNewElement() in that it adds the new Element as a 
               child of the current Element (or a child of the document if no Element exists).
            
               @param name XML tag for the new Element.
            
               @see addNewElement())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.readComment(System.String,System.Int32)">
            <summary>
            Gives the comment at the specified index, if any.
            
               Unlike addComment() that only works at the document level, readComment() may read 
               comments from the document or any child Element.  The current Element (or document 
               if no Elements have been pushed to the stack) is the parent for any comments, and the 
               provided index is the number of comments in to read back.
            
               @param index Comment index number to query from the current Element stack
               @return String containing the comment, or an empty string if no comment is found.
            
               @see addComment())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.removeText(System.String)">
            <summary>
            @brief Remove any text on the current Element.
            
               Use getText() to retrieve any text from the current Element and addText() 
               to add text to the current Element.  As getData() and addData() are equivalent 
               to getText() and addText(), removeText() will also remove any data from the 
               current Element.
               
               @see addText()
               @see getText()
               @see addData()
               @see getData())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.reset(System.String)">
            <summary>
            @brief Set this document to its default state.
               
               Clears all Elements from the documents.  Equivalent to using clear()
               
               @see clear())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.saveFile(System.String,System.String)">
            <summary>
            @brief Save document to the given file name.
               @param fileName Path and name of XML file to save to.
               @return True if the file was successfully saved.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.setAttribute(System.String,System.String,System.String)">
            <summary>
            @brief Set the attribute of the current Element on the stack to the given value.
               @param attributeName Name of attribute being changed
               @param value New value to assign to the attribute)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SimXMLDocumentObject.setObjectAttributes(System.String,System.String)">
            <summary>
            @brief Add the given SimObject's fields as attributes of the current Element on the stack.
               @param objectID ID of SimObject being copied.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.SkyBoxObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SkyBoxObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SkyBoxObject.SkyBox_postApply(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.SpawnSphereObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SpawnSphereObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SpawnSphereObject.SpawnSphere_spawnObject(System.String,System.String)">
            <summary>
            ([string additionalProps]) Spawns the object based on the SpawnSphere's 
               class, datablock, properties, and script settings. Allows you to pass in 
               extra properties.
               @hide )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.StaticShapeObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.StaticShapeObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.StaticShapeObject.StaticShape_getPoweredState(System.String)">
            <summary>
            @internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.StaticShapeObject.StaticShape_setPoweredState(System.String,System.Boolean)">
            <summary>
            (bool isPowered)
            			  @internal)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.StreamObjectObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.StreamObjectObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.StreamObjectObject.copyFrom(System.String,System.String)">
            <summary>
            @brief Copy from another StreamObject into this StreamObject
               @param other The StreamObject to copy from.
               @return True if the copy was successful.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.StreamObjectObject.getPosition(System.String)">
            <summary>
            @brief Gets the position in the stream
               
               The easiest way to visualize this is to think of a cursor in a text file. If you have moved the cursor by 
               five characters, the current position is 5. If you move ahead 10 more characters, the position is now 15. 
               For StreamObject, when you read in the line the position is increased by the number of characters parsed, 
               the null terminator, and a newline.
               
               @tsexample
               // Create a file stream object for reading
               %fsObject = new FileStreamObject();
               // Open a file for reading
               // This file contains two lines of text repeated:
               // Hello World
               // Hello World
               %fsObject.open(\"./test.txt\", \"read\");
               // Read in the first line
               %line = %fsObject.readLine();
               // Get the position of the stream
               %position = %fsObject.getPosition();
               // Print the current position
               // Should be 13, 10 for the words, 1 for the space, 1 for the null terminator, and 1 for the newline
               echo(%position);
               // Always remember to close a file stream when finished
               %fsObject.close();
               @endtsexample
            
               @return Number of bytes which stream has parsed so far, null terminators and newlines are included
               
               @see setPosition())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.StreamObjectObject.getStatus(System.String)">
            <summary>
            @brief Gets a printable string form of the stream's status
               
               @tsexample
               // Create a file stream object for reading
               %fsObject = new FileStreamObject();
               // Open a file for reading
               %fsObject.open(\"./test.txt\", \"read\");
               // Get the status and print it
               %status = %fsObject.getStatus();
               echo(%status);
               // Always remember to close a file stream when finished
               %fsObject.close();
               @endtsexample
            
               @return String containing status constant, one of the following:
            
               	OK - Stream is active and no file errors
            
               	IOError - Something went wrong during read or writing the stream
            
               	EOS - End of Stream reached (mostly for reads)
            
               	IllegalCall - An unsupported operation used.  Always w/ accompanied by AssertWarn
            
                 Closed - Tried to operate on a closed stream (or detached filter)
            
               	UnknownError - Catch all for an error of some kind
            
               	Invalid - Entire stream is invalid)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.StreamObjectObject.getStreamSize(System.String)">
            <summary>
            @brief Gets the size of the stream
               
               The size is dependent on the type of stream being used. If it is a file stream, returned value will 
               be the size of the file. If it is a memory stream, it will be the size of the allocated buffer.
                  
               @tsexample
               // Create a file stream object for reading
               %fsObject = new FileStreamObject();
               // Open a file for reading
               // This file contains the following two lines:
               // HelloWorld
               // HelloWorld
               %fsObject.open(\"./test.txt\", \"read\");
               // Found out how large the file stream is
               // Then print it to the console
               // Should be 22
               %streamSize = %fsObject.getStreamSize();
               echo(%streamSize);
               // Always remember to close a file stream when finished
               %fsObject.close();
               @endtsexample
            
               @return Size of stream, in bytes)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.StreamObjectObject.isEOF(System.String)">
            <summary>
            @brief Tests if the stream has reached the end of the file
               
               This is an alternative name for isEOS. Both functions are interchangeable. This simply exists 
               for those familiar with some C++ file I/O standards.
               
               @tsexample
               // Create a file stream object for reading
               %fsObject = new FileStreamObject();
               // Open a file for reading
               %fsObject.open(\"./test.txt\", \"read\");
               // Keep reading until we reach the end of the file
               while( !%fsObject.isEOF() )
               {
                  %line = %fsObject.readLine();
                  echo(%line);
               }
               // Made it to the end
               echo(\"Finished reading file\");
               // Always remember to close a file stream when finished
               %fsObject.close();
               @endtsexample
            
               @return True if the parser has reached the end of the file, false otherwise
               
               @see isEOS())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.StreamObjectObject.isEOS(System.String)">
            <summary>
            @brief Tests if the stream has reached the end of the file
               
               This is an alternative name for isEOF. Both functions are interchangeable. This simply exists 
               for those familiar with some C++ file I/O standards.
            
               @tsexample
               // Create a file stream object for reading
               %fsObject = new FileStreamObject();
               // Open a file for reading
               %fsObject.open(\"./test.txt\", \"read\");
               // Keep reading until we reach the end of the file
               while( !%fsObject.isEOS() )
               {
                  %line = %fsObject.readLine();
                  echo(%line);
               }
               // Made it to the end
               echo(\"Finished reading file\");
               // Always remember to close a file stream when finished
               %fsObject.close();
               @endtsexample
            
               @return True if the parser has reached the end of the file, false otherwise
            
               @see isEOF())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.StreamObjectObject.readLine(System.String)">
            <summary>
            @brief Read a line from the stream.
               
               Emphasis on *line*, as in you cannot parse individual characters or chunks of data. 
               There is no limitation as to what kind of data you can read.
               
               @tsexample
               // Create a file stream object for reading
               // This file contains the following two lines:
               // HelloWorld
               // HelloWorld
               %fsObject = new FileStreamObject();
               %fsObject.open(\"./test.txt\", \"read\");
               // Read in the first line
               %line = %fsObject.readLine();
               // Print the line we just read
               echo(%line);
               // Always remember to close a file stream when finished
               %fsObject.close();
               @endtsexample
            
               @return String containing the line of data that was just read
               
               @see writeLine())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.StreamObjectObject.readLongString(System.String,System.Int32)">
            <summary>
            @brief Read in a string up to the given maximum number of characters.
               @param maxLength The maximum number of characters to read in.
               @return The string that was read from the stream.
               @see writeLongString()
               
               @note When working with these particular string reading and writing methods, the stream 
               begins with the length of the string followed by the string itself, and does not include 
               a NULL terminator.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.StreamObjectObject.readString(System.String)">
            <summary>
            @brief Read a string up to a maximum of 256 characters
               @return The string that was read from the stream.
               @see writeString()
               
               @note When working with these particular string reading and writing methods, the stream 
               begins with the length of the string followed by the string itself, and does not include 
               a NULL terminator.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.StreamObjectObject.readSTString(System.String,System.Boolean)">
            <summary>
            @brief Read in a string and place it on the string table.
               @param caseSensitive If false then case will not be taken into account when attempting 
               to match the read in string with what is already in the string table.
               @return The string that was read from the stream.
               @see writeString()
               
               @note When working with these particular string reading and writing methods, the stream 
               begins with the length of the string followed by the string itself, and does not include 
               a NULL terminator.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.StreamObjectObject.setPosition(System.String,System.Int32)">
            <summary>
            @brief Gets the position in the stream
               
               The easiest way to visualize this is to think of a cursor in a text file. If you have moved the cursor by 
               five characters, the current position is 5. If you move ahead 10 more characters, the position is now 15. 
               For StreamObject, when you read in the line the position is increased by the number of characters parsed, 
               the null terminator, and a newline. Using setPosition allows you to skip to specific points of the file.
               
               @tsexample
               // Create a file stream object for reading
               %fsObject = new FileStreamObject();
               // Open a file for reading
               // This file contains the following two lines:
               // 11111111111
               // Hello World
               %fsObject.open(\"./test.txt\", \"read\");
               // Skip ahead by 12, which will bypass the first line entirely
               %fsObject.setPosition(12);
               // Read in the next line
               %line = %fsObject.readLine();
               // Print the line just read in, should be \"Hello World\"
               echo(%line);
               // Always remember to close a file stream when finished
               %fsObject.close();
               @endtsexample
            
               @return Number of bytes which stream has parsed so far, null terminators and newlines are included
               
               @see getPosition())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.StreamObjectObject.writeLine(System.String,System.String)">
            <summary>
            @brief Write a line to the stream, if it was opened for writing.
               
               There is no limit as to what kind of data you can write. Any format and data is allowable, not just text. 
               Be careful of what you write, as whitespace, current values, and literals will be preserved.
            
               @param line The data we are writing out to file.
               
               @tsexample
               // Create a file stream
               %fsObject = new FileStreamObject();
               // Open the file for writing
               // If it does not exist, it is created. If it does exist, the file is cleared
               %fsObject.open(\"./test.txt\", \"write\");
               // Write a line to the file
               %fsObject.writeLine(\"Hello World\");
               // Write another line to the file
               %fsObject.writeLine(\"Documentation Rocks!\");
               // Always remember to close a file stream when finished
               %fsObject.close();
               @endtsexample
               
               @see readLine())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.StreamObjectObject.writeLongString(System.String,System.Int32,System.String)">
            <summary>
            @brief Write out a string up to the maximum number of characters.
               @param maxLength The maximum number of characters that will be written.
               @param string The string to write out to the stream.
               @see readLongString()
               
               @note When working with these particular string reading and writing methods, the stream 
               begins with the length of the string followed by the string itself, and does not include 
               a NULL terminator.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.StreamObjectObject.writeString(System.String,System.String,System.Int32)">
            <summary>
            @brief Write out a string with a default maximum length of 256 characters.
               @param string The string to write out to the stream
               @param maxLength The maximum string length to write out with a default of 256 characters.  This 
               value should not be larger than 256 as it is written to the stream as a single byte.
               @see readString()
               
               @note When working with these particular string reading and writing methods, the stream 
               begins with the length of the string followed by the string itself, and does not include 
               a NULL terminator.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.SunObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SunObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SunObject.Sun_animate(System.String,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            animate( F32 duration, F32 startAzimuth, F32 endAzimuth, F32 startElevation, F32 endElevation ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.SunObject.Sun_apply(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.TCPObjectObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TCPObjectObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TCPObjectObject.connect(System.String,System.String)">
            <summary>
            @brief Connect to the given address.
            
               @param address Server address (including port) to connect to.
            
               @tsexample
                  // Set the address.
                  %address = \"www.garagegames.com:80\";
            
                  // Inform this TCPObject to connect to the specified address.
                  %thisTCPObj.connect(%address);
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TCPObjectObject.disconnect(System.String)">
            <summary>
            @brief Disconnect from whatever this TCPObject is currently connected to, if anything.
            
               @tsexample
                  // Inform this TCPObject to disconnect from anything it is currently connected to.
                  %thisTCPObj.disconnect();
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TCPObjectObject.listen(System.String,System.UInt32)">
            <summary>
            @brief Start listening on the specified port for connections.
            
               This method starts a listener which looks for incoming TCP connections to a port.  
               You must overload the onConnectionRequest callback to create a new TCPObject to 
               read, write, or reject the new connection.
            
               @param port Port for this TCPObject to start listening for connections on.
            
               @tsexample
            
                // Create a listener on port 8080.
                new TCPObject( TCPListener );
                TCPListener.listen( 8080 );
            
                function TCPListener::onConnectionRequest( %this, %address, %id )
                {
                   // Create a new object to manage the connection.
                   new TCPObject( TCPClient, %id );
                }
            
                function TCPClient::onLine( %this, %line )
                {
                   // Print the line of text from client.
                   echo( %line );
                }
            
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TCPObjectObject.send(System.String,System.String)">
            <summary>
            @brief Transmits the data string to the connected computer.
            
               This method is used to send text data to the connected computer regardless if we initiated the 
               connection using connect(), or listening to a port using listen().
            
               @param data The data string to send.
            
               @tsexample
                  // Set the command data
                  %data = \"GET \" @ $RSSFeed::serverURL @ \" HTTP/1.0\\r\\";
                  %data = %data @ \"Host: \" @ $RSSFeed::serverName @ \"\\r\\";
                  %data = %data @ \"User-Agent: \" @ $RSSFeed::userAgent @ \"\\r\\\r\\"
            
                  // Send the command to the connected server.
                  %thisTCPObj.send(%data);
               @endtsexample)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainBlockObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainBlockObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainBlockObject.TerrainBlock_exportHeightMap(System.String,System.String,System.String)">
            <summary>
            png), (string filename, [string format]) - export the terrain block's heightmap to a bitmap file (default: png) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainBlockObject.TerrainBlock_exportLayerMaps(System.String,System.String,System.String)">
            <summary>
            png), (string filePrefix, [string format]) - export the terrain block's layer maps to bitmap files (default: png) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainBlockObject.save(System.String,System.String)">
            <summary>
            @brief Saves the terrain block's terrain file to the specified file name.
            
            				   @param fileName Name and path of file to save terrain data to.
            
            				   @return True if file save was successful, false otherwise)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_addMaterial(System.String,System.String)">
            <summary>
            ( string matName )
               Adds a new material. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_attachTerrain(System.String,System.String)">
            <summary>
            ), (TerrainBlock terrain))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_autoMaterialLayer(System.String,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            (F32 minHeight, F32 maxHeight, F32 minSlope, F32 maxSlope , F32 coverage))  
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_clearSelection(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_getActionName(System.String,System.UInt32)">
            <summary>
            (int num))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_getActiveTerrain(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_getBrushPos(System.String)">
            <summary>
            Returns a Point2I.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_getBrushPressure(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_getBrushSize(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_getBrushSoftness(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_getBrushType(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_getCurrentAction(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_getMaterialCount(System.String)">
            <summary>
            Returns the current material count. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_getMaterialIndex(System.String,System.String)">
            <summary>
            ( string name ) - Returns the index of the material with the given name or -1. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_getMaterialName(System.String,System.Int32)">
            <summary>
            ( int index ) - Returns the name of the material at the given index. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_getMaterials(System.String)">
            <summary>
            () gets the list of current terrain materials.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_getNumActions(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_getNumTextures(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_getSlopeLimitMaxAngle(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_getSlopeLimitMinAngle(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_getTerrainBlock(System.String,System.Int32)">
            <summary>
            (S32 index))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_getTerrainBlockCount(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_getTerrainBlocksMaterialList(System.String)">
            <summary>
            () gets the list of current terrain materials for all terrain blocks.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_getTerrainUnderWorldPoint(System.String,System.String,System.String,System.String)">
            <summary>
            , , ), 
                                                                                       (x/y/z) Gets the terrain block that is located under the given world point.
                                                                                       @param x/y/z The world coordinates (floating point values) you wish to query at.  
                                                                                       These can be formatted as either a string (\"x y z\") or separately as (x, y, z)
                                                                                       @return Returns the ID of the requested terrain block (0 if not found).)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_markEmptySquares(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_mirrorTerrain(System.String,System.Int32)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_processAction(System.String,System.String)">
            <summary>
            ), (string action=NULL))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_removeMaterial(System.String,System.Int32)">
            <summary>
            ( int index ) - Remove the material at the given index. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_reorderMaterial(System.String,System.Int32,System.Int32)">
            <summary>
            ( int index, int order ) 
              - Reorder material at the given index to the new position, changing the order in which it is rendered / blended. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_resetSelWeights(System.String,System.Boolean)">
            <summary>
            (bool clear))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_setAction(System.String,System.String)">
            <summary>
            (string action_name))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_setBrushPos(System.String,WinterLeaf.Engine.Containers.Point2I)">
            <summary>
            Location)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_setBrushPressure(System.String,System.Single)">
            <summary>
            (float pressure))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_setBrushSize(System.String,System.Int32,System.Int32)">
            <summary>
            (int w [, int h]))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_setBrushSoftness(System.String,System.Single)">
            <summary>
            (float softness))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_setBrushType(System.String,System.String)">
            <summary>
            (string type)
                          One of box, ellipse, selection.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_setSlopeLimitMaxAngle(System.String,System.Single)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_setSlopeLimitMinAngle(System.String,System.Single)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_setTerraformOverlay(System.String,System.Boolean)">
            <summary>
            (bool overlayEnable) - sets the terraformer current heightmap to draw as an overlay over the current terrain.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainEditorObject.TerrainEditor_updateMaterial(System.String,System.UInt32,System.String)">
            <summary>
            ( int index, string matName )
               Changes the material name at the index. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainSmoothActionObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainSmoothActionObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainSmoothActionObject.TerrainSmoothAction_smooth(System.String,System.String,System.Single,System.UInt32)">
            <summary>
            ( TerrainBlock obj, F32 factor, U32 steps ))
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainSolderEdgesActionObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainSolderEdgesActionObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TerrainSolderEdgesActionObject.TerrainSolderEdgesAction_solder(System.String)">
            <summary>
            () )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.TheoraTextureObjectObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TheoraTextureObjectObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TheoraTextureObjectObject.TheoraTextureObject_pause(System.String)">
            <summary>
            Pause playback of the video. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TheoraTextureObjectObject.TheoraTextureObject_play(System.String)">
            <summary>
            Start playback of the video. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TheoraTextureObjectObject.TheoraTextureObject_stop(System.String)">
            <summary>
            Stop playback of the video. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.TimeOfDayObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TimeOfDayObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TimeOfDayObject.addTimeOfDayEvent(System.String,System.Single,System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TimeOfDayObject.animate(System.String,System.Single,System.Single)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TimeOfDayObject.setDayLength(System.String,System.Single)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TimeOfDayObject.setPlay(System.String,System.Boolean)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TimeOfDayObject.setTimeOfDay(System.String,System.Single)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.TriggerObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TriggerObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TriggerObject.getNumObjects(System.String)">
            <summary>
            @brief Get the number of objects that are within the Trigger's bounds.
               @see getObject())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TriggerObject.getObject(System.String,System.Int32)">
            <summary>
            @brief Retrieve the requested object that is within the Trigger's bounds.
               @param index Index of the object to get (range is 0 to getNumObjects()-1)
               @returns The SimObjectID of the object, or -1 if the requested index is invalid.
               @see getNumObjects())
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSAttachableObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSAttachableObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSAttachableObject.attachObject(System.String,System.String)">
            <summary>
            Attaches an object to this one.
                  @param obj The scene object to attach to us
                  @return true if successful, false if failed. This function will fail if the object passed 
                  is invalid or is not located directly above and within RayLength of this shape.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSAttachableObject.detachAll(System.String)">
            <summary>
            Detaches all attached objects. Note: if UseAutoAttach is true when this is called, all of
                   the objects may be re-attached on the next tick.
                  @tsexample
                     // Dump all riders
                     %attachableObj.UseAutoAttach = false
                     %attachableObj.detachAll(); = false
                  @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSAttachableObject.detachObject(System.String,System.String)">
            <summary>
            Detaches an object from this one.
                  @param obj The scene object to be detached
                  @return true if successful, false if failed. This function will fail if the object passed 
                  is invalid or is not currently attached to this shape.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSAttachableObject.getAttachment(System.String,System.Int32)">
            <summary>
            Returns the attachment at the passed index value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSAttachableObject.getNumAttachments(System.String)">
            <summary>
            Returns the number of objects that are currently attached.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSDynamicObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSDynamicObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSDynamicObject.changeMaterial(System.String,System.String,System.String,System.String)">
            <summary>
            ,NULL,NULL),
               @brief Change one of the materials on the shape.
            
               This method changes materials per mapTo with others. The material that 
               is being replaced is mapped to unmapped_mat as a part of this transition.
            
               @note Warning, right now this only sort of works. It doesn't do a live 
               update like it should.
            
               @param mapTo the name of the material target to remap (from getTargetName)
               @param oldMat the old Material that was mapped 
               @param newMat the new Material to map
            
               @tsexample
                  // remap the first material in the shape
                  %mapTo = %obj.getTargetName( 0 );
                  %obj.changeMaterial( %mapTo, 0, MyMaterial );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSDynamicObject.getModelFile(System.String)">
            <summary>
            @brief Get the model filename used by this shape.
            
               @return the shape filename
               @tsexample
            		// Acquire the model filename used on this shape.
            		%modelFilename = %obj.getModelFile();
               @endtsexample
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSDynamicObject.getTargetCount(System.String)">
            <summary>
            Get the number of materials in the shape.
               @return the number of materials in the shape.
               @see getTargetName())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSDynamicObject.getTargetName(System.String,System.Int32)">
            <summary>
            Get the name of the indexed shape material.
               @param index index of the material to get (valid range is 0 - getTargetCount()-1).
               @return the name of the indexed material.
               @see getTargetCount())
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSPathShapeObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSPathShapeObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSPathShapeObject.getLooping(System.String)">
            <summary>
            Returns the looping state for the shape.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSPathShapeObject.getNodeCount(System.String)">
            <summary>
            Returns the number of nodes on the shape's path.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSPathShapeObject.getPathPosition(System.String)">
            <summary>
            Get the current position of the shape along the path (0.0 - lastNode - 1).)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSPathShapeObject.popFront(System.String)">
            <summary>
            Removes the knot at the front of the shape's path.
            													@tsexample
            														// Remove the first knot in the shape's path.
            														%pathShape.popFront();
            													@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSPathShapeObject.pushBack(System.String,WinterLeaf.Engine.Containers.TransformF,System.Single,System.String,System.String)">
            <summary>
            Normal, Linear), 
            											      @brief Adds a new knot to the back of a shape's path.
            													@param transform Transform for the new knot.  In the form of \"x y z ax ay az aa\" such as returned by SceneObject::getTransform()
            													@param speed Speed setting for this knot.
            													@param type Knot type (Normal, Position Only, Kink).
            													@param path %Path type (Linear, Spline).
            													@tsexample
            														// Transform vector for new knot. (Pos_X Pos_Y Pos_Z Rot_X Rot_Y Rot_Z Angle)
            														%transform = \"15.0 5.0 5.0 1.4 1.0 0.2 1.0\"
            														// Speed setting for knot.
            														%speed = \"1.0\"
            														// Knot type. (Normal, Position Only, Kink)
            														%type = \"Normal\";
            														// Path Type. (Linear, Spline)
            														%path = \"Linear\";
            														// Inform the shape to add a new knot to the back of its path
            														%pathShape.pushBack(%transform,%speed,%type,%path);
            													@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSPathShapeObject.pushFront(System.String,WinterLeaf.Engine.Containers.TransformF,System.Single,System.String,System.String)">
            <summary>
            Normal, Linear), 
            											      @brief Adds a new knot to the front of a path shape's path.
            													@param transform Transform for the new knot. In the form of \"x y z ax ay az aa\" such as returned by SceneObject::getTransform()
            													@param speed Speed setting for this knot.
            													@param type Knot type (Normal, Position Only, Kink).
            													@param path %Path type (Linear, Spline).
            													@tsexample
            														// Transform vector for new knot. (Pos_X,Pos_Y,Pos_Z,Rot_X,Rot_Y,Rot_Z,Angle)
            														%transform = \"15.0 5.0 5.0 1.4 1.0 0.2 1.0\"
            														// Speed setting for knot.
            														%speed = \"1.0\";
            														// Knot type. (Normal, Position Only, Kink)
            														%type = \"Normal\";
            														// Path Type. (Linear, Spline)
            														%path = \"Linear\";
            														// Inform the shape to add a new knot to the front of its path
            														%pathShape.pushFront(%transform, %speed, %type, %path);
            													@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSPathShapeObject.reset(System.String,System.Single,System.Boolean,System.Boolean)">
            <summary>
            @brief Clear the shapes's path and optionally initializes the first node with the shapes current transform and speed.
                     The shapes movement is stopped and any current path is cleared. The target and position values are both reset to 0. 
                     When makeFirstKnot is true a new knot is created and pushed onto the path.
                     @param speed Speed for the first knot if created.
                     @param makeFirstKnot Initialize a new path with the current shape transform.
                     @param initFromPath Initialize the knot type and smoothing values from the current path.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSPathShapeObject.setLooping(System.String,System.Boolean)">
            <summary>
            Sets whether the path should loop or stop at the last node.
            													@param isLooping New loop flag true/false.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSPathShapeObject.setMoveState(System.String,WinterLeaf.Engine.Enums.TypePathShapeState)">
            <summary>
            Set the movement state for this shape.
            													@param newState New movement state type for this shape. Forward, Backward or Stop.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSPathShapeObject.setPathPosition(System.String,System.Single)">
            <summary>
            Set the current position of the shape along the path.
            													@param position Position along the path, from 0.0 (path start) - 1.0 (path end), to place the shape.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSPathShapeObject.setTarget(System.String,System.Single)">
            <summary>
            @brief Set the movement target for this shape along its path.
                                                   The shape will attempt to move along the path to the given target without going past the loop node. 
                                                   Once the shape arrives at the target,the onTargetReached() callback will be triggered and the target 
                                                   state will be cleared.
            													@param position Target position, between 0.0 (path start) and nodeCount - 1 (path end), for the 
                                                   shape to move to along its path.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.addCollisionDetail(System.String,System.Int32,System.String,System.String,System.Int32,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Autofit a mesh primitive or set of convex hulls to the shape geometry. Hulls 
               may optionally be converted to boxes, spheres and/or capsules based on their 
               volume.
               @param size size for this detail level
               @param type one of: box, sphere, capsule, 10-dop x, 10-dop y, 10-dop z, 18-dop, 
                  26-dop, convex hulls. See the Shape Editor documentation for more details 
                  about these types.
               @param target geometry to fit collision mesh(es) to; either \"bounds\" (for the 
                  whole shape), or the name of an object in the shape
               @param depth maximum split recursion depth (hulls only)
               @param merge volume % threshold used to merge hulls together (hulls only)
               @param concavity volume % threshold used to detect concavity (hulls only)
               @param maxVerts maximum number of vertices per hull (hulls only)
               @param boxMaxError max % volume difference for a hull to be converted to a 
                  box (hulls only)
               @param sphereMaxError max % volume difference for a hull to be converted to 
                  a sphere (hulls only)
               @param capsuleMaxError max % volume difference for a hull to be converted to 
                  a capsule (hulls only)
               @return true if successful, false otherwise
               @tsexample
               %this.addCollisionDetail( -1, \"box\", \"bounds\" );
               %this.addCollisionDetail( -1, \"convex hulls\", \"bounds\", 4, 30, 30, 32, 0, 0, 0 );
               %this.addCollisionDetail( -1, \"convex hulls\", \"bounds\", 4, 30, 30, 32, 50, 50, 50 );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.addImposter(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Single)">
            <summary>
            Add (or edit) an imposter detail level to the shape.
               If the shape already contains an imposter detail level, this command will 
               simply change the imposter settings
               @param size size of the imposter detail level
               @param equatorSteps defines the number of snapshots to take around the 
               equator. Imagine the object being rotated around the vertical axis, then 
               a snapshot taken at regularly spaced intervals.
               @param polarSteps defines the number of snapshots taken between the poles 
               (top and bottom), at each equator step. eg. At each equator snapshot, 
               snapshots are taken at regular intervals between the poles.
               @param dl the detail level to use when generating the snapshots. Note that 
               this is an array index rather than a detail size. So if an object has detail 
               sizes of: 200, 150, and 40, then setting @a dl to 1 will generate the snapshots 
               using detail size 150.
               @param dim defines the size of the imposter images in pixels. The larger the 
               number, the more detailed the billboard will be.
               @param includePoles flag indicating whether to include the \"pole\" snapshots. 
               ie. the views from the top and bottom of the object.
               @param polar_angle if pole snapshots are active (@a includePoles is true), this 
               parameter defines the camera angle (in degrees) within which to render the 
               pole snapshot. eg. if polar_angle is set to 25 degrees, then the snapshot 
               taken at the pole (looking directly down or up at the object) will be rendered 
               when the camera is within 25 degrees of the pole.
               @return true if successful, false otherwise
               @tsexample
               %this.addImposter( 2, 4, 0, 0, 64, false, 0 );
               %this.addImposter( 2, 4, 2, 0, 64, true, 10 );   // this command would edit the existing imposter detail level
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.addMesh(System.String,System.String,System.String,System.String)">
            <summary>
            Add geometry from another DTS or DAE shape file into this shape.
               Any materials required by the source mesh are also copied into this shape.br>
               @param meshName full name (object name + detail size) of the new mesh. If 
                  no detail size is present at the end of the name, a value of 2 is used.br>
                  An underscore before the number at the end of the name will be interpreted as 
                  a negative sign. eg. \"MyMesh_4\" will be interpreted as \"MyMesh-4\".
               @param srcShape name of a shape file (DTS or DAE) that contains the mesh
               @param srcMesh the full name (object name + detail size) of the mesh to 
                  copy from the DTS/DAE file into this shape/li>
               @return true if successful, false otherwise
               @tsexample
               %this.addMesh( \"ColMesh-1\", \"./collision.dts\", \"ColMesh\", \"Col-1\" );
               %this.addMesh( \"SimpleShape10\", \"./testShape.dae\", \"MyMesh2\",  );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.addNode(System.String,System.String,System.String,WinterLeaf.Engine.Containers.TransformF,System.Boolean)">
            <summary>
            Add a new node.
               @param name name for the new node (must not already exist)
               @param parentName name of an existing node to be the parent of the new node. 
               If empty (\"\"), the new node will be at the root level of the node hierarchy.
               @param txfm (optional) transform string of the form: \"pos.x pos.y pos.z rot.x rot.y rot.z rot.angle\"
               @param isworld (optional) flag to set the local-to-parent or the global 
               transform. If false, or not specified, the position and orientation are 
               treated as relative to the node's parent.
               @return true if successful, false otherwise
               @tsexample
               %this.addNode( \"Nose\", \"Bip01 Head\", \"0 2 2 0 0 1 0\" );
               %this.addNode( \"myRoot\", \"\", \"0 0 4 0 0 1 1.57\" );
               %this.addNode( \"Nodes\", \"Bip01 Head\", \"0 2 0 0 0 1 0\", true );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.addPrimitive(System.String,System.String,System.String,System.String,WinterLeaf.Engine.Containers.TransformF,System.String)">
            <summary>
            Add a new mesh primitive to the shape.
               @param meshName full name (object name + detail size) of the new mesh. If 
                  no detail size is present at the end of the name, a value of 2 is used.br>
                  An underscore before the number at the end of the name will be interpreted as 
                  a negative sign. eg. \"MyMesh_4\" will be interpreted as \"MyMesh-4\".
               @param type one of: \"box\", \"sphere\", \"capsule\"
               @param params mesh primitive parameters:
                  ul>
                     li>for box: \"size_x size_y size_z\"/li>
                     li>for sphere: \"radius\"/li>
                     li>for capsule: \"height radius\"/li>
                  /ul>
               /ul>
               @param txfm local transform offset from the node for this mesh
               @param nodeName name of the node to attach the new mesh to (will change the 
               object's node if adding a new mesh to an existing object)
               @return true if successful, false otherwise
               @tsexample
               %this.addMesh( \"Box4\", \"box\", \"2 4 2\", \"0 2 0 0 0 1 0\", \"eye\" );
               %this.addMesh( \"Sphere256\", \"sphere\", \"2\", \"0 0 0 0 0 1 0\", \"root\" );
               %this.addMesh( \"MyCapsule-1\", \"capsule\", \"2 5\", \"0 0 2 0 0 1 0\", \"base01\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.addSequence(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Add a new sequence to the shape.
               @param source the name of an existing sequence, or the name of a DTS or DAE 
               shape or DSQ sequence file. When the shape file contains more than one 
               sequence, the desired sequence can be specified by appending the name to the 
               end of the shape file. eg. \"myShape.dts run\" would select the \"run\" 
               sequence from the \"myShape.dts\" file.
               @param name name of the new sequence
               @param start (optional) first frame to copy. Defaults to 0, the first frame in the sequence.
               @param end (optional) last frame to copy. Defaults to -1, the last frame in the sequence.
               @param padRot (optional) copy root-pose rotation keys for non-animated nodes. This is useful if 
               the source sequence data has a different root-pose to the target shape, such as if one character was 
               in the T pose, and the other had arms at the side. Normally only nodes that are actually rotated by 
               the source sequence have keyframes added, but setting this flag will also add keyframes for nodes 
               that are not animated, but have a different root-pose rotation to the target shape root pose.
               @param padTrans (optional) copy root-pose translation keys for non-animated nodes.  This is useful if 
               the source sequence data has a different root-pose to the target shape, such as if one character was 
               in the T pose, and the other had arms at the side. Normally only nodes that are actually moved by 
               the source sequence have keyframes added, but setting this flag will also add keyframes for nodes 
               that are not animated, but have a different root-pose position to the target shape root pose.
               @return true if successful, false otherwise
               @tsexample
               %this.addSequence( \"./testShape.dts ambient\", \"ambient\" );
               %this.addSequence( \"./myPlayer.dae run\", \"run\" );
               %this.addSequence( \"./player_look.dsq\", \"look\", 0, -1 );     // start to end
               %this.addSequence( \"walk\", \"walk_shortA\", 0, 4 );            // start to frame 4
               %this.addSequence( \"walk\", \"walk_shortB\", 4, -1 );           // frame 4 to end
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.addTrigger(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Add a new trigger to the sequence.
               @param name name of the sequence to modify
               @param keyframe keyframe of the new trigger
               @param state of the new trigger
               @return true if successful, false otherwise
               @tsexample
               %this.addTrigger( \"walk\", 3, 1 );
               %this.addTrigger( \"walk\", 5, -1 );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.dumpShape(System.String,System.String)">
            <summary>
            Dump the shape hierarchy to the console or to a file. Useful for reviewing 
               the result of a series of construction commands.
               @param filename Destination filename. If not specified, dump to console.
               @tsexample
               %this.dumpShape();               // dump to console
               %this.dumpShape( \"./dump.txt\" ); // dump to file
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getBounds(System.String)">
            <summary>
            Get the bounding box for the shape.
               @return Bounding box \"minX minY minZ maxX maxY maxZ\" )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getDetailLevelCount(System.String)">
            <summary>
            Get the total number of detail levels in the shape.
               @return the number of detail levels in the shape )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getDetailLevelIndex(System.String,System.Int32)">
            <summary>
            Get the index of the detail level with a given size.
               @param size size of the detail level to lookup
               @return index of the detail level with the desired size, or -1 if no such 
               detail exists
               @tsexample
               if ( %this.getDetailLevelSize( 32 ) == -1 )
                  echo( \"Error: This shape does not have a detail level at size 32\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getDetailLevelName(System.String,System.Int32)">
            <summary>
            Get the name of the indexed detail level.
               @param index detail level index (valid range is 0 - getDetailLevelCount()-1)
               @return the detail level name
               @tsexample
               // print the names of all detail levels in the shape
               %count = %this.getDetailLevelCount();
               for ( %i = 0; %i  %count; %i++ )
                  echo( %i SPC %this.getDetailLevelName( %i ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getDetailLevelSize(System.String,System.Int32)">
            <summary>
            Get the size of the indexed detail level.
               @param index detail level index (valid range is 0 - getDetailLevelCount()-1)
               @return the detail level size
               @tsexample
               // print the sizes of all detail levels in the shape
               %count = %this.getDetailLevelCount();
               for ( %i = 0; %i  %count; %i++ )
                  echo( \"Detail\" @ %i @ \" has size \" @ %this.getDetailLevelSize( %i ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getImposterDetailLevel(System.String)">
            <summary>
            Get the index of the imposter (auto-billboard) detail level (if any).
               @return imposter detail level index, or -1 if the shape does not use 
               imposters. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getImposterSettings(System.String,System.Int32)">
            <summary>
            Get the settings used to generate imposters for the indexed detail level.
               @param index index of the detail level to query (does not need to be an 
               imposter detail level
               @return string of the form: \"valid eqSteps pSteps dl dim poles angle\", where:
               dl>
                  dt>valid/dt>dd>1 if this detail level generates imposters, 0 otherwise/dd>
                  dt>eqSteps/dt>dd>number of steps around the equator/dd>
                  dt>pSteps/dt>dd>number of steps between the poles/dd>
                  dt>dl/dt>dd>index of the detail level used to generate imposters/dd>
                  dt>dim/dt>dd>size (in pixels) of each imposter image/dd>
                  dt>poles/dt>dd>1 to include pole images, 0 otherwise/dd>
                  dt>angle/dt>dd>angle at which to display pole images/dd>
               /dl>
               @tsexample
               // print the imposter detail level settings
               %index = %this.getImposterDetailLevel();
               if ( %index != -1 )
                  echo( \"Imposter settings: \" @ %this.getImposterSettings( %index ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getMeshCount(System.String,System.String)">
            <summary>
            Get the number of meshes (detail levels) for the specified object.
               @param name name of the object to query
               @return the number of meshes for this object.
               @tsexample
               %count = %this.getMeshCount( \"SimpleShape\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getMeshMaterial(System.String,System.String)">
            <summary>
            Get the name of the material attached to a mesh. Note that only the first 
               material used by the mesh is returned.
               @param name full name (object name + detail size) of the mesh to query
               @return name of the material attached to the mesh (suitable for use with the Material mapTo field)
               @tsexample
               echo( \"Mesh material is \" @ %this.sgetMeshMaterial( \"SimpleShape128\" ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getMeshName(System.String,System.String,System.Int32)">
            <summary>
            Get the name of the indexed mesh (detail level) for the specified object.
               @param name name of the object to query
               @param index index of the mesh (valid range is 0 - getMeshCount()-1)
               @return the mesh name.
               @tsexample
               // print the names of all meshes in the shape
               %objCount = %this.getObjectCount();
               for ( %i = 0; %i  %objCount; %i++ )
               {
                  %objName = %this.getObjectName( %i );
                  %meshCount = %this.getMeshCount( %objName );
                  for ( %j = 0; %j  %meshCount; %j++ )
                     echo( %this.getMeshName( %objName, %j ) );
               }
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getMeshSize(System.String,System.String,System.Int32)">
            <summary>
            Get the detail level size of the indexed mesh for the specified object.
               @param name name of the object to query
               @param index index of the mesh (valid range is 0 - getMeshCount()-1)
               @return the mesh detail level size.
               @tsexample
               // print sizes for all detail levels of this object
               %objName = \"trunk\";
               %count = %this.getMeshCount( %objName );
               for ( %i = 0; %i  %count; %i++ )
                  echo( %this.getMeshSize( %objName, %i ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getMeshType(System.String,System.String)">
            <summary>
            Get the display type of the mesh.
               @param name name of the mesh to query
               @return the string returned is one of:
               dl>dt>normal/dt>dd>a normal 3D mesh/dd>
               dt>billboard/dt>dd>a mesh that always faces the camera/dd>
               dt>billboardzaxis/dt>dd>a mesh that always faces the camera in the Z-axis/dd>/dl>
               @tsexample
               echo( \"Mesh type is \" @ %this.getMeshType( \"SimpleShape128\" ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getNodeChildCount(System.String,System.String)">
            <summary>
            Get the number of children of this node.
               @param name name of the node to query.
               @return the number of child nodes.
               @tsexample
               %count = %this.getNodeChildCount( \"Bip01 Pelvis\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getNodeChildName(System.String,System.String,System.Int32)">
            <summary>
            Get the name of the indexed child node.
               @param name name of the parent node to query.
               @param index index of the child node (valid range is 0 - getNodeChildName()-1).
               @return the name of the indexed child node.
               @tsexample
               function dumpNode( %shape, %name, %indent )
               {
                  echo( %indent @ %name );
                  %count = %shape.getNodeChildCount( %name );
                  for ( %i = 0; %i  %count; %i++ )
                     dumpNode( %shape, %shape.getNodeChildName( %name, %i ), %indent @ \"   \" );
               }
               function dumpShape( %shape )
               {
                  // recursively dump node hierarchy
                  %count = %shape.getNodeCount();
                  for ( %i = 0; %i  %count; %i++ )
                  {
                     // dump top level nodes
                     %name = %shape.getNodeName( %i );
                     if ( %shape.getNodeParentName( %name ) $=  )
                        dumpNode( %shape, %name, \"\" );
                  }
               }
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getNodeCount(System.String)">
            <summary>
            Get the total number of nodes in the shape.
               @return the number of nodes in the shape.
               @tsexample
               %count = %this.getNodeCount();
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getNodeIndex(System.String,System.String)">
            <summary>
            Get the index of the node.
               @param name name of the node to lookup.
               @return the index of the named node, or -1 if no such node exists.
               @tsexample
               // get the index of Bip01 Pelvis node in the shape
               %index = %this.getNodeIndex( \"Bip01 Pelvis\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getNodeName(System.String,System.Int32)">
            <summary>
            Get the name of the indexed node.
               @param index index of the node to lookup (valid range is 0 - getNodeCount()-1).
               @return the name of the indexed node, or \"\" if no such node exists.
               @tsexample
               // print the names of all the nodes in the shape
               %count = %this.getNodeCount();
               for (%i = 0; %i  %count; %i++)
                  echo(%i SPC %this.getNodeName(%i));
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getNodeObjectCount(System.String,System.String)">
            <summary>
            Get the number of geometry objects attached to this node.
               @param name name of the node to query.
               @return the number of attached objects.
               @tsexample
               %count = %this.getNodeObjectCount( \"Bip01 Head\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getNodeObjectName(System.String,System.String,System.Int32)">
            <summary>
            Get the name of the indexed object.
               @param name name of the node to query.
               @param index index of the object (valid range is 0 - getNodeObjectCount()-1).
               @return the name of the indexed object.
               @tsexample
               // print the names of all objects attached to the node
               %count = %this.getNodeObjectCount( \"Bip01 Head\" );
               for ( %i = 0; %i  %count; %i++ )
                  echo( %this.getNodeObjectName( \"Bip01 Head\", %i ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getNodeParentName(System.String,System.String)">
            <summary>
            Get the name of the node's parent. If the node has no parent (ie. it is at 
               the root level), return an empty string.
               @param name name of the node to query.
               @return the name of the node's parent, or \"\" if the node is at the root level
               @tsexample
               echo( \"Bip01 Pelvis parent = \" @ %this.getNodeParentName( \"Bip01 Pelvis \") );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getNodeTransform(System.String,System.String,System.Boolean)">
            <summary>
            Get the base (ie. not animated) transform of a node.
               @param name name of the node to query.
               @param isWorld true to get the global transform, false (or omitted) to get 
               the local-to-parent transform.
               @return the node transform in the form \"pos.x pos.y pos.z rot.x rot.y rot.z rot.angle\".
               @tsexample
               %ret = %this.getNodeTransform( \"mount0\" );
               %this.setNodeTransform( \"mount4\", %ret );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getObjectCount(System.String)">
            <summary>
            Get the total number of objects in the shape.
               @return the number of objects in the shape.
               @tsexample
               %count = %this.getObjectCount();
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getObjectIndex(System.String,System.String)">
            <summary>
            Get the index of the first object with the given name.
               @param name name of the object to get.
               @return the index of the named object.
               @tsexample
               %index = %this.getObjectIndex( \"Head\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getObjectName(System.String,System.Int32)">
            <summary>
            Get the name of the indexed object.
               @param index index of the object to get (valid range is 0 - getObjectCount()-1).
               @return the name of the indexed object.
               @tsexample
               // print the names of all objects in the shape
               %count = %this.getObjectCount();
               for ( %i = 0; %i  %count; %i++ )
                  echo( %i SPC %this.getObjectName( %i ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getObjectNode(System.String,System.String)">
            <summary>
            Get the name of the node this object is attached to.
               @param name name of the object to get.
               @return the name of the attached node, or an empty string if this 
               object is not attached to a node (usually the case for skinned meshes).
               @tsexample
               echo( \"Hand is attached to \" @ %this.getObjectNode( \"Hand\" ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getSequenceBlend(System.String,System.String)">
            <summary>
            Get information about blended sequences.
               @param name name of the sequence to query
               @return TAB delimited string of the form: \"isBlend blendSeq blendFrame\", where:
               dl>
               dt>blend_flag/dt>dd>a boolean flag indicating whether this sequence is a blend/dd>
               dt>blend_seq_name/dt>dd>the name of the sequence that contains the reference 
               frame (empty for blend sequences embedded in DTS files)/dd>
               dt>blend_seq_frame/dt>dd>the blend reference frame (empty for blend sequences 
               embedded in DTS files)/dd>
               /dl>
               @note Note that only sequences set to be blends using the setSequenceBlend 
               command will contain the blendSeq and blendFrame information.
               @tsexample
               %blendData = %this.getSequenceBlend( \"look\" );
               if ( getField( %blendData, 0 ) )
                  echo( \"look is a blend, reference: \" @ getField( %blendData, 1 ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getSequenceCount(System.String)">
            <summary>
            Get the total number of sequences in the shape.
               @return the number of sequences in the shape )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getSequenceCyclic(System.String,System.String)">
            <summary>
            Check if this sequence is cyclic (looping).
               @param name name of the sequence to query
               @return true if this sequence is cyclic, false if not
               @tsexample
               if ( !%this.getSequenceCyclic( \"ambient\" ) )
                  error( \"ambient sequence is not cyclic!\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getSequenceFrameCount(System.String,System.String)">
            <summary>
            Get the number of keyframes in the sequence.
               @param name name of the sequence to query
               @return number of keyframes in the sequence
               @tsexample
               echo( \"Run has \" @ %this.getSequenceFrameCount( \"run\" ) @ \" keyframes\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getSequenceGroundSpeed(System.String,System.String)">
            <summary>
            Get the ground speed of the sequence.
               @note Note that only the first 2 ground frames of the sequence are 
               examined; the speed is assumed to be constant throughout the sequence.
               @param name name of the sequence to query
               @return string of the form: \"trans.x trans.y trans.z rot.x rot.y rot.z\"
               @tsexample
               %speed = VectorLen( getWords( %this.getSequenceGroundSpeed( \"run\" ), 0, 2 ) );
                  echo( \"Run moves at \" @ %speed @ \" units per frame\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getSequenceIndex(System.String,System.String)">
            <summary>
            Find the index of the sequence with the given name.
               @param name name of the sequence to lookup
               @return index of the sequence with matching name, or -1 if not found
               @tsexample
               // Check if a given sequence exists in the shape
               if ( %this.getSequenceIndex( \"walk\" ) == -1 )
                  echo( \"Could not find 'walk' sequence\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getSequenceName(System.String,System.Int32)">
            <summary>
            Get the name of the indexed sequence.
               @param index index of the sequence to query (valid range is 0 - getSequenceCount()-1)
               @return the name of the sequence
               @tsexample
               // print the name of all sequences in the shape
               %count = %this.getSequenceCount();
               for ( %i = 0; %i  %count; %i++ )
                  echo( %i SPC %this.getSequenceName( %i ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getSequencePriority(System.String,System.String)">
            <summary>
            Get the priority setting of the sequence.
               @param name name of the sequence to query
               @return priority value of the sequence )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getSequenceSource(System.String,System.String)">
            <summary>
            Get information about where the sequence data came from.
               For example, whether it was loaded from an external DSQ file.
               @param name name of the sequence to query
               @return TAB delimited string of the form: \"from reserved start end total\", where:
               dl>
                  dt>from/dt>dd>the source of the animation data, such as the path to 
                  a DSQ file, or the name of an existing sequence in the shape. This field 
                  will be empty for sequences already embedded in the DTS or DAE file./dd>
                  dt>reserved/dt>dd>reserved value/dd>
                  dt>start/dt>dd>the first frame in the source sequence used to create this sequence/dd>
                  dt>end/dt>dd>the last frame in the source sequence used to create this sequence/dd>
                  dt>total/dt>dd>the total number of frames in the source sequence/dd>
               /dl>
               @tsexample
               // print the source for the walk animation
               echo( \"walk source:\" SPC getField( %this.getSequenceSource( \"walk\" ), 0 ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getTargetCount(System.String)">
            <summary>
            Get the number of materials in the shape.
               @return the number of materials in the shape.
               @tsexample
               %count = %this.getTargetCount();
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getTargetName(System.String,System.Int32)">
            <summary>
            Get the name of the indexed shape material.
               @param index index of the material to get (valid range is 0 - getTargetCount()-1).
               @return the name of the indexed material.
               @tsexample
               %count = %this.getTargetCount();
               for ( %i = 0; %i  %count; %i++ )
                  echo( \"Target \" @ %i @ \": \" @ %this.getTargetName( %i ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getTrigger(System.String,System.String,System.Int32)">
            <summary>
            Get information about the indexed trigger
               @param name name of the sequence to query
               @param index index of the trigger (valid range is 0 - getTriggerCount()-1)
               @return string of the form \"frame state\"
               @tsexample
               // print all triggers in the sequence
               %count = %this.getTriggerCount( \"back\" );
               for ( %i = 0; %i  %count; %i++ )
                  echo( %i SPC %this.getTrigger( \"back\", %i ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.getTriggerCount(System.String,System.String)">
            <summary>
            Get the number of triggers in the specified sequence.
               @param name name of the sequence to query
               @return number of triggers in the sequence )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.notifyShapeChanged(System.String)">
            <summary>
            Notify game objects that this shape file has changed, allowing them to update 
               internal data if needed. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.removeDetailLevel(System.String,System.Int32)">
            <summary>
            Remove the detail level (including all meshes in the detail level)
               @param size size of the detail level to remove
               @return true if successful, false otherwise
               @tsexample
               %this.removeDetailLevel( 2 );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.removeImposter(System.String)">
            <summary>
            () Remove the imposter detail level (if any) from the shape.
               @return true if successful, false otherwise )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.removeMesh(System.String,System.String)">
            <summary>
            Remove a mesh from the shape.
               If all geometry is removed from an object, the object is also removed.
               @param name full name (object name + detail size) of the mesh to remove
               @return true if successful, false otherwise
               @tsexample
               %this.removeMesh( \"SimpleShape128\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.removeNode(System.String,System.String)">
            <summary>
            Remove a node from the shape.
               The named node is removed from the shape, including from any sequences that 
               use the node. Child nodes and objects attached to the node are re-assigned 
               to the node's parent.
               @param name name of the node to remove.
               @return true if successful, false otherwise.
               @tsexample
               %this.removeNode( \"Nose\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.removeObject(System.String,System.String)">
            <summary>
            Remove an object (including all meshes for that object) from the shape.
               @param name name of the object to remove.
               @return true if successful, false otherwise.
               @tsexample
               // clear all objects in the shape
               %count = %this.getObjectCount();
               for ( %i = %count-1; %i >= 0; %i-- )
                  %this.removeObject( %this.getObjectName(%i) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.removeSequence(System.String,System.String)">
            <summary>
            Remove the sequence from the shape.
               @param name name of the sequence to remove
               @return true if successful, false otherwise )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.removeTrigger(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Remove a trigger from the sequence.
               @param name name of the sequence to modify
               @param keyframe keyframe of the trigger to remove
               @param state of the trigger to remove
               @return true if successful, false otherwise
               @tsexample
               %this.removeTrigger( \"walk\", 3, 1 );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.renameDetailLevel(System.String,System.String,System.String)">
            <summary>
            Rename a detail level.
               @note Note that detail level names must be unique, so this command will 
               fail if there is already a detail level with the desired name
               @param oldName current name of the detail level
               @param newName new name of the detail level
               @return true if successful, false otherwise
               @tsexample
               %this.renameDetailLevel( \"detail-1\", \"collision-1\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.renameNode(System.String,System.String,System.String)">
            <summary>
            Rename a node.
               @note Note that node names must be unique, so this command will fail if 
               there is already a node with the desired name
               @param oldName current name of the node
               @param newName new name of the node
               @return true if successful, false otherwise
               @tsexample
               %this.renameNode( \"Bip01 L Hand\", \"mount5\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.renameObject(System.String,System.String,System.String)">
            <summary>
            Rename an object.
               @note Note that object names must be unique, so this command will fail if 
               there is already an object with the desired name
               @param oldName current name of the object
               @param newName new name of the object
               @return true if successful, false otherwise
               @tsexample
               %this.renameObject( \"MyBox\", \"Box\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.renameSequence(System.String,System.String,System.String)">
            <summary>
            Rename a sequence.
               @note Note that sequence names must be unique, so this command will fail 
               if there is already a sequence with the desired name
               @param oldName current name of the sequence
               @param newName new name of the sequence
               @return true if successful, false otherwise
               @tsexample
               %this.renameSequence( \"walking\", \"walk\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.saveShape(System.String,System.String)">
            <summary>
            Save the shape (with all current changes) to a new DTS file.
               @param filename Destination filename.
               @tsexample
               %this.saveShape( \"./myShape.dts\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.setBounds(System.String,WinterLeaf.Engine.Containers.Box3F)">
            <summary>
            Set the shape bounds to the given bounding box.
               @param Bounding box \"minX minY minZ maxX maxY maxZ\"
               @return true if successful, false otherwise )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.setDetailLevelSize(System.String,System.Int32,System.Int32)">
            <summary>
            Change the size of a detail level.
               @note Note that detail levels are always sorted in decreasing size order, 
               so this command may cause detail level indices to change.
               @param index index of the detail level to modify
               @param newSize new size for the detail level
               @return new index for this detail level
               @tsexample
               %this.setDetailLevelSize( 2, 256 );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.setMeshMaterial(System.String,System.String,System.String)">
            <summary>
            Set the name of the material attached to the mesh.
               @param meshName full name (object name + detail size) of the mesh to modify
               @param matName name of the material to attach. This could be the base name of 
               the diffuse texture (eg. \"test_mat\" for \"test_mat.jpg\"), or the name of a 
               Material object already defined in script.
               @return true if successful, false otherwise
               @tsexample
               // set the mesh material
               %this.setMeshMaterial( \"SimpleShape128\", \"test_mat\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.setMeshSize(System.String,System.String,System.Int32)">
            <summary>
            Change the detail level size of the named mesh.
               @param name full name (object name + current size ) of the mesh to modify
               @param size new detail level size
               @return true if successful, false otherwise.
               @tsexample
               %this.setMeshSize( \"SimpleShape128\", 64 );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.setMeshType(System.String,System.String,System.String)">
            <summary>
            Set the display type for the mesh.
               @param name full name (object name + detail size) of the mesh to modify
               @param type the new type for the mesh: \"normal\", \"billboard\" or \"billboardzaxis\"
               @return true if successful, false otherwise
               @tsexample
               // set the mesh to be a billboard
               %this.setMeshType( \"SimpleShape64\", \"billboard\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.setNodeParent(System.String,System.String,System.String)">
            <summary>
            Set the parent of a node.
              @param name name of the node to modify
              @param parentName name of the parent node to set (use \"\" to move the node to the root level)
              @return true if successful, false if failed
              @tsexample
              %this.setNodeParent( \"Bip01 Pelvis\", \"start01\" );
              @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.setNodeTransform(System.String,System.String,WinterLeaf.Engine.Containers.TransformF,System.Boolean)">
            <summary>
            Set the base transform of a node. That is, the transform of the node when 
               in the root (not-animated) pose.
               @param name name of the node to modify
               @param txfm transform string of the form: \"pos.x pos.y pos.z rot.x rot.y rot.z rot.angle\"
               @param isworld (optional) flag to set the local-to-parent or the global 
               transform. If false, or not specified, the position and orientation are 
               treated as relative to the node's parent.
               @return true if successful, false otherwise
               @tsexample
               %this.setNodeTransform( \"mount0\", \"0 0 1 0 0 1 0\" );
               %this.setNodeTransform( \"mount0\", \"0 0 0 0 0 1 1.57\" );
               %this.setNodeTransform( \"mount0\", \"1 0 0 0 0 1 0\", true );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.setObjectNode(System.String,System.String,System.String)">
            <summary>
            Set the node an object is attached to.
               When the shape is rendered, the object geometry is rendered at the node's 
               current transform.
               @param objName name of the object to modify
               @param nodeName name of the node to attach the object to
               @return true if successful, false otherwise
               @tsexample
               %this.setObjectNode( \"Hand\", \"Bip01 LeftHand\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.setSequenceBlend(System.String,System.String,System.Boolean,System.String,System.Int32)">
            <summary>
            Mark a sequence as a blend or non-blend.
               A blend sequence is one that will be added on top of any other playing 
               sequences. This is done by storing the animated node transforms relative 
               to a reference frame, rather than as absolute transforms.
               @param name name of the sequence to modify
               @param blend true to make the sequence a blend, false for a non-blend
               @param blendSeq the name of the sequence that contains the blend reference frame
               @param blendFrame the reference frame in the blendSeq sequence
               @return true if successful, false otherwise
               @tsexample
               %this.setSequenceBlend( \"look\", true, \"root\", 0 );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.setSequenceCyclic(System.String,System.String,System.Boolean)">
            <summary>
            Mark a sequence as cyclic or non-cyclic.
               @param name name of the sequence to modify
               @param cyclic true to make the sequence cyclic, false for non-cyclic
               @return true if successful, false otherwise
               @tsexample
               %this.setSequenceCyclic( \"ambient\", true );
               %this.setSequenceCyclic( \"shoot\", false );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.setSequenceGroundSpeed(System.String,System.String,WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            Set the translation and rotation ground speed of the sequence.
               The ground speed of the sequence is set by generating ground transform 
               keyframes. The ground translational and rotational speed is assumed to 
               be constant for the duration of the sequence. Existing ground frames for 
               the sequence (if any) will be replaced.
               @param name name of the sequence to modify
               @param transSpeed translational speed (trans.x trans.y trans.z) in 
               Torque units per frame
               @param rotSpeed (optional) rotational speed (rot.x rot.y rot.z) in 
               radians per frame. Default is \"0 0 0\"
               @return true if successful, false otherwise
               @tsexample
               %this.setSequenceGroundSpeed( \"run\", \"5 0 0\" );
               %this.setSequenceGroundSpeed( \"spin\", \"0 0 0\", \"4 0 0\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.setSequencePriority(System.String,System.String,System.Single)">
            <summary>
            Set the sequence priority.
               @param name name of the sequence to modify
               @param priority new priority value
               @return true if successful, false otherwise )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSShapeConstructorObject.writeChangeSet(System.String)">
            <summary>
            Write the current change set to a TSShapeConstructor script file. The 
               name of the script file is the same as the model, but with .cs extension. 
               eg. myShape.cs for myShape.dts or myShape.dae. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSStaticObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSStaticObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSStaticObject.changeMaterial(System.String,System.String,System.String,System.String)">
            <summary>
            ,NULL,NULL),
               @brief Change one of the materials on the shape.
            
               This method changes materials per mapTo with others. The material that 
               is being replaced is mapped to unmapped_mat as a part of this transition.
            
               @note Warning, right now this only sort of works. It doesn't do a live 
               update like it should.
            
               @param mapTo the name of the material target to remap (from getTargetName)
               @param oldMat the old Material that was mapped 
               @param newMat the new Material to map
            
               @tsexample
                  // remap the first material in the shape
                  %mapTo = %obj.getTargetName( 0 );
                  %obj.changeMaterial( %mapTo, 0, MyMaterial );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSStaticObject.getModelFile(System.String)">
            <summary>
            @brief Get the model filename used by this shape.
            
               @return the shape filename
               @tsexample
            		// Acquire the model filename used on this shape.
            		%modelFilename = %obj.getModelFile();
               @endtsexample
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSStaticObject.getTargetCount(System.String)">
            <summary>
            Get the number of materials in the shape.
               @return the number of materials in the shape.
               @see getTargetName())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TSStaticObject.getTargetName(System.String,System.Int32)">
            <summary>
            Get the name of the indexed shape material.
               @param index index of the material to get (valid range is 0 - getTargetCount()-1).
               @return the name of the indexed material.
               @see getTargetCount())
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.TurretShapeObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TurretShapeObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TurretShapeObject.doRespawn(System.String)">
            <summary>
            @brief Does the turret respawn after it has been destroyed.
               @returns True if the turret respawns.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TurretShapeObject.getAllowManualFire(System.String)">
            <summary>
            @brief Get if the turret is allowed to fire through moves.
               @return True if the turret is allowed to fire through moves. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TurretShapeObject.getAllowManualRotation(System.String)">
            <summary>
            @brief Get if the turret is allowed to rotate through moves.
               @return True if the turret is allowed to rotate through moves. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TurretShapeObject.getState(System.String)">
            <summary>
            @brief Get the name of the turret's current state.
            
               The state is one of the following:ul>
               li>Dead - The TurretShape is destroyed./li>
               li>Mounted - The TurretShape is mounted to an object such as a vehicle./li>
               li>Ready - The TurretShape is free to move.  The usual state./li>/ul>
            
               @return The current state; one of: \"Dead\", \"Mounted\", \"Ready\" )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TurretShapeObject.getTurretEulerRotation(System.String)">
            <summary>
            @brief Get Euler rotation of this turret's heading and pitch nodes.
               @return the orientation of the turret's heading and pitch nodes in the 
               form of rotations around the X, Y and Z axes in degrees. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TurretShapeObject.setAllowManualFire(System.String,System.Boolean)">
            <summary>
            @brief Set if the turret is allowed to fire through moves.
               @param allow If true then the turret may be fired through moves.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TurretShapeObject.setAllowManualRotation(System.String,System.Boolean)">
            <summary>
            @brief Set if the turret is allowed to rotate through moves.
               @param allow If true then the turret may be rotated through moves.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.TurretShapeObject.setTurretEulerRotation(System.String,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            @brief Set Euler rotation of this turret's heading and pitch nodes in degrees.
               @param rot The rotation in degrees.  The pitch is the X component and the 
               heading is the Z component.  The Y component is ignored.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.UndoActionObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UndoActionObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UndoActionObject.UndoAction_addToManager(System.String,System.String)">
            <summary>
            ), action.addToManager([undoManager]))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UndoActionObject.UndoAction_redo(System.String)">
            <summary>
            () - Reo action contained in undo. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UndoActionObject.UndoAction_undo(System.String)">
            <summary>
            () - Undo action contained in undo. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.UndoManagerObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UndoManagerObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UndoManagerObject.UndoManager_clearAll(System.String)">
            <summary>
            Clears the undo manager.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UndoManagerObject.UndoManager_getNextRedoName(System.String)">
            <summary>
            UndoManager.getNextRedoName();)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UndoManagerObject.UndoManager_getNextUndoName(System.String)">
            <summary>
            UndoManager.getNextUndoName();)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UndoManagerObject.UndoManager_getRedoAction(System.String,System.Int32)">
            <summary>
            (index))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UndoManagerObject.UndoManager_getRedoCount(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UndoManagerObject.UndoManager_getRedoName(System.String,System.Int32)">
            <summary>
            (index))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UndoManagerObject.UndoManager_getUndoAction(System.String,System.Int32)">
            <summary>
            (index))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UndoManagerObject.UndoManager_getUndoCount(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UndoManagerObject.UndoManager_getUndoName(System.String,System.Int32)">
            <summary>
            (index))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UndoManagerObject.UndoManager_popCompound(System.String,System.Boolean)">
            <summary>
            ( bool discard=false ) - Pop the current CompoundUndoAction off the stack. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UndoManagerObject.UndoManager_pushCompound(System.String,System.String)">
            <summary>
            \"\"), ( string name=\"\" ) - Push a CompoundUndoAction onto the compound stack for assembly. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UndoManagerObject.UndoManager_redo(System.String)">
            <summary>
            UndoManager.redo();)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.UndoManagerObject.UndoManager_undo(System.String)">
            <summary>
            UndoManager.undo();)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.VolumetricFogObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.VolumetricFogObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.VolumetricFogObject.SetFogColor(System.String,WinterLeaf.Engine.Containers.ColorI)">
            <summary>
            @brief Changes the color of the fog.
            	@params new_color the new fog color (rgb 0-255, a is ignored.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.VolumetricFogObject.SetFogColorF(System.String,WinterLeaf.Engine.Containers.ColorF)">
            <summary>
            @brief Changes the color of the fog.
            	@params new_color the new fog color (rgb 0.0 - 1.0, a is ignored.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.VolumetricFogObject.SetFogDensity(System.String,System.Single)">
            <summary>
            @brief Changes the density of the fog.
            	@params new_density the new fog density.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.VolumetricFogObject.SetFogModulation(System.String,System.Single,WinterLeaf.Engine.Containers.Point2F,WinterLeaf.Engine.Containers.Point2F)">
            <summary>
            @brief Changes the modulation of the fog.
            	@params new_strenght the new strength of the modulation.
            	@params new_speed1 the new speed (x y) of the modulation layer 1.
            	@params new_speed2 the new speed (x y) of the modulation layer 2.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.WalkableShapeObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WalkableShapeObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WalkableShapeObject.attachObject(System.String,System.String)">
            <summary>
            Attaches an object to this one.
                  @param obj The scene object to attach to us
                  @return true if successful, false if failed. This function will fail if the object passed 
                  is invalid or is not located directly above and within RayLength of this shape.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WalkableShapeObject.detachAll(System.String)">
            <summary>
            Detaches all attached objects. Note: if UseAutoAttach is true when this is called, all of
                   the objects may be re-attached on the next tick.
                  @tsexample
                     // Dump all riders
                     %attachableObj.UseAutoAttach = false
                     %attachableObj.detachAll(); = false
                  @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WalkableShapeObject.detachObject(System.String,System.String)">
            <summary>
            Detaches an object from this one.
                  @param obj The scene object to be detached
                  @return true if successful, false if failed. This function will fail if the object passed 
                  is invalid or is not currently attached to this shape.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WalkableShapeObject.getAttachment(System.String,System.Int32)">
            <summary>
            Returns the attachment at the passed index value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WalkableShapeObject.getNumAttachments(System.String)">
            <summary>
            Returns the number of objects that are currently attached.)
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.WheeledVehicleObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WheeledVehicleObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WheeledVehicleObject.getWheelCount(System.String)">
            <summary>
            @brief Get the number of wheels on this vehicle.
               @return the number of wheels (equal to the number of hub nodes defined in the model) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WheeledVehicleObject.setWheelPowered(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Set whether the wheel is powered (has torque applied from the engine).
               A rear wheel drive car for example would set the front wheels to false, 
               and the rear wheels to true.
               @param wheel index of the wheel to set (hub node #)
               @param powered flag indicating whether to power the wheel or not
               @return true if successful, false if failed )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WheeledVehicleObject.setWheelSpring(System.String,System.Int32,System.String)">
            <summary>
            @brief Set the WheeledVehicleSpring datablock for this wheel.
               @param wheel index of the wheel to set (hub node #)
               @param spring WheeledVehicleSpring datablock
               @return true if successful, false if failed
               @tsexample
               %obj.setWheelSpring( 0, FrontSpring );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WheeledVehicleObject.setWheelSteering(System.String,System.Int32,System.Single)">
            <summary>
            @brief Set how much the wheel is affected by steering.
               The steering factor controls how much the wheel is rotated by the vehicle 
               steering. For example, most cars would have their front wheels set to 1.0, 
               and their rear wheels set to 0 since only the front wheels should turn.
               Negative values will turn the wheel in the opposite direction to the steering 
               angle.
               @param wheel index of the wheel to set (hub node #)
               @param steering steering factor from -1 (full inverse) to 1 (full)
               @return true if successful, false if failed )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WheeledVehicleObject.setWheelTire(System.String,System.Int32,System.String)">
            <summary>
            @brief Set the WheeledVehicleTire datablock for this wheel.
               @param wheel index of the wheel to set (hub node #)
               @param tire WheeledVehicleTire datablock
               @return true if successful, false if failed
               @tsexample
               %obj.setWheelTire( 0, FrontTire );
               @endtsexample )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_addUndoState(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_alignByAxis(System.String,System.Int32)">
            <summary>
            (int axis)
                          Align all selected objects along the given axis.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_alignByBounds(System.String,System.Int32)">
            <summary>
            (int boundsAxis)
                          Align all selected objects against the given bounds axis.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_canPasteSelection(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_clearIgnoreList(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_clearSelection(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_colladaExportSelection(System.String,System.String)">
            <summary>
            ( String path ) - Export the combined geometry of all selected objects to the specified path in collada format. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_copySelection(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_cutSelection(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_dropSelection(System.String,System.Boolean)">
            <summary>
            ( bool skipUndo = false ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_explodeSelectedPrefab(System.String)">
            <summary>
            () - Replace selected Prefab objects with a SimGroup containing all children objects defined in the .prefab. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_getActiveSelection(System.String)">
            <summary>
            () - Return the currently active WorldEditorSelection object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_getSelectedObject(System.String,System.Int32)">
            <summary>
            (int index))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_getSelectionCentroid(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_getSelectionExtent(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_getSelectionRadius(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_getSelectionSize(System.String)">
            <summary>
            () - Return the number of objects currently selected in the editor.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_getSoftSnap(System.String)">
            <summary>
            getSoftSnap()
                          Is soft snapping always on?)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_getSoftSnapBackfaceTolerance(System.String)">
            <summary>
            getSoftSnapBackfaceTolerance()
                          The fraction of the soft snap radius that backfaces may be included.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_getSoftSnapSize(System.String)">
            <summary>
            getSoftSnapSize()
                          Get the absolute size to trigger a soft snap.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_hideObject(System.String,System.String,System.Boolean)">
            <summary>
            (Object obj, bool hide))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_hideSelection(System.String,System.Boolean)">
            <summary>
            (bool hide))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_invalidateSelectionCentroid(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_lockSelection(System.String,System.Boolean)">
            <summary>
            (bool lock))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_makeSelectionPrefab(System.String,System.String)">
            <summary>
            ( string filename ) - Save selected objects to a .prefab file and replace them in the level with a Prefab object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_mountRelative(System.String,System.String,System.String)">
            <summary>
            ( Object A, Object B ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_pasteSelection(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_redirectConsole(System.String,System.Int32)">
            <summary>
            ( int objID ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_resetSelectedRotation(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_resetSelectedScale(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_selectObject(System.String,System.String)">
            <summary>
            (SimObject obj))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_setActiveSelection(System.String,System.String)">
            <summary>
            ( id set ) - Set the currently active WorldEditorSelection object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_setSoftSnap(System.String,System.Boolean)">
            <summary>
            setSoftSnap(bool)
                          Allow soft snapping all of the time.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_setSoftSnapBackfaceTolerance(System.String,System.Single)">
            <summary>
            setSoftSnapBackfaceTolerance(F32 with range of 0..1)
                          The fraction of the soft snap radius that backfaces may be included.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_setSoftSnapSize(System.String,System.Single)">
            <summary>
            setSoftSnapSize(F32)
                          Set the absolute size to trigger a soft snap.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_softSnapDebugRender(System.String,System.Boolean)">
            <summary>
            softSnapDebugRender(bool)
                          Toggle soft snapping debug rendering.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_softSnapRender(System.String,System.Boolean)">
            <summary>
            softSnapRender(bool)
                          Render the soft snapping bounds.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_softSnapRenderTriangle(System.String,System.Boolean)">
            <summary>
            softSnapRenderTriangle(bool)
                          Render the soft snapped triangle.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_softSnapSizeByBounds(System.String,System.Boolean)">
            <summary>
            softSnapSizeByBounds(bool)
                          Use selection bounds size as soft snap bounds.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_transformSelection(System.String,System.Boolean,WinterLeaf.Engine.Containers.Point3F,System.Boolean,System.Boolean,WinterLeaf.Engine.Containers.Point3F,System.Boolean,System.Boolean,System.Int32,WinterLeaf.Engine.Containers.Point3F,System.Boolean,System.Boolean)">
            <summary>
            transformSelection(...)
                          Transform selection by given parameters.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.WorldEditor_unselectObject(System.String,System.String)">
            <summary>
            (SimObject obj))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.createConvexShapeFrom(System.String,System.String)">
            <summary>
            Create a ConvexShape from the given polyhedral object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.createPolyhedralObject(System.String,System.String,System.String)">
            <summary>
            Grab the geometry from @a geometryProvider, create a @a className object, and assign it the extracted geometry. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.getSoftSnapAlignment(System.String)">
            <summary>
            Get the soft snap alignment. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.getTerrainSnapAlignment(System.String)">
            <summary>
            Get the terrain snap alignment.  )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.ignoreObjClass(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( WorldEditor, ignoreObjClass, void, 3, 0, (string class_name, ...))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.setSoftSnapAlignment(System.String,WinterLeaf.Engine.Enums.TypeWorldEditorAlignmentType)">
            <summary>
            Set the soft snap alignment. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorObject.setTerrainSnapAlignment(System.String,WinterLeaf.Engine.Enums.TypeWorldEditorAlignmentType)">
            <summary>
            Set the terrain snap alignment. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorSelectionObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorSelectionObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorSelectionObject.containsGlobalBounds(System.String)">
            <summary>
            ( WorldEditorSelection, containsGlobalBounds, bool, 2, 2, () - True if an object with global bounds is contained in the selection. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorSelectionObject.getBoxCentroid(System.String)">
            <summary>
            ( WorldEditorSelection, getBoxCentroid, const char*, 2, 2, () - Return the center of the bounding box around the selection. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorSelectionObject.getCentroid(System.String)">
            <summary>
            ( WorldEditorSelection, getCentroid, const char*, 2, 2, () - Return the median of all object positions in the selection. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorSelectionObject.offset(System.String,System.String,System.String)">
            <summary>
            ( WorldEditorSelection, offset, void, 3, 4, ( vector delta, float gridSnap=0 ) - Move all objects in the selection by the given delta. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorSelectionObject.subtract(System.String,System.String)">
            <summary>
            ( WorldEditorSelection, subtract, void, 3, 3, ( SimSet ) - Remove all objects in the given set from this selection. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.WorldEditorSelectionObject.union(System.String,System.String)">
            <summary>
            ( WorldEditorSelection, union, void, 3, 3, ( SimSet set ) - Add all objects in the given set to this selection. )
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ZipObjectObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ZipObjectObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ZipObjectObject.addFile(System.String,System.String,System.String,System.Boolean)">
            <summary>
            @brief Add a file to the zip archive
               
               @param filename The path and name of the file to add to the zip archive.
               @param pathInZip The path and name to be given to the file within the zip archive.
               @param replace If a file already exists within the zip archive at the same location as this 
               new file, this parameter indicates if it should be replaced.  By default, it will be replaced.
               @return True if the file was successfully added to the zip archive.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ZipObjectObject.closeArchive(System.String)">
            <summary>
            @brief Close an already opened zip archive.
               @see openArchive())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ZipObjectObject.closeFile(System.String,System.String)">
            <summary>
            @brief Close a previously opened file within the zip archive.
               @param stream The StreamObject of a previously opened file within the zip archive.
               @see openFileForRead()
               @see openFileForWrite())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ZipObjectObject.deleteFile(System.String,System.String)">
            <summary>
            @brief Deleted the given file from the zip archive
               @param pathInZip The path and name of the file to be deleted from the zip archive.
               @return True of the file was successfully deleted.
            
               @note Files that have been deleted from the archive will still show up with a 
               getFileEntryCount() until you close the archive.  If you need to have the file 
               count up to date with only valid files within the archive, you could close and then 
               open the archive again.
            
               @see getFileEntryCount()
               @see closeArchive()
               @see openArchive())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ZipObjectObject.extractFile(System.String,System.String,System.String)">
            <summary>
            @brief Extact a file from the zip archive and save it to the requested location.
               @param pathInZip The path and name of the file to be extracted within the zip archive.
               @param filename The path and name to give the extracted file.
               @return True if the file was successfully extracted.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ZipObjectObject.getFileEntry(System.String,System.Int32)">
            <summary>
            @brief Get information on the requested file within the zip archive.
            
               This methods provides five different pieces of information for the requested file:
               ul>li>filename - The path and name of the file within the zip archive/li>
               li>uncompressed size/li>
               li>compressed size/li>
               li>compression method/li>
               li>CRC32/li>/ul>
            
               Use getFileEntryCount() to obtain the total number of files within the archive.
            
               @param index The index of the file within the zip archive.  Use getFileEntryCount() to determine the number of files.
               @return A tab delimited list of information on the requested file, or an empty string if the file could not be found.
            
               @see getFileEntryCount())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ZipObjectObject.getFileEntryCount(System.String)">
            <summary>
            @brief Get the number of files within the zip archive.
            
               Use getFileEntry() to retrive information on each file within the archive.
            
               @return The number of files within the zip archive.
            
               @note The returned count will include any files that have been deleted from 
               the archive using deleteFile().  To clear out all deleted files, you could 
               close and then open the archive again.
            
               @see getFileEntry()
               @see closeArchive()
               @see openArchive())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ZipObjectObject.openArchive(System.String,System.String,System.String)">
            <summary>
            read ),
               @brief Open a zip archive for manipulation.
            
               Once a zip archive is opened use the various ZipObject methods for 
               working with the files within the archive.  Be sure to close the archive when 
               you are done with it.
            
               @param filename The path and file name of the zip archive to open.
               @param accessMode One of read, write or readwrite
            
               @return True is the archive was successfully opened.
               
               @note If you wish to make any changes to the archive, be sure to open it 
               with a write or readwrite access mode.
            
               @see closeArchive())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ZipObjectObject.openFileForRead(System.String,System.String)">
            <summary>
            @brief Open a file within the zip archive for reading.
            
               Be sure to close the file when you are done with it.
            
               @param filename The path and name of the file to open within the zip archive.
            
               @return A standard StreamObject is returned for working with the file.
               @note You must first open the zip archive before working with files within it.
            
               @see closeFile()
               @see openArchive())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ZipObjectObject.openFileForWrite(System.String,System.String)">
            <summary>
            @brief Open a file within the zip archive for writing to.
               
               Be sure to close the file when you are done with it.
            
               @param filename The path and name of the file to open within the zip archive.
            
               @return A standard StreamObject is returned for working with the file.
               @note You must first open the zip archive before working with files within it.
            
               @see closeFile()
               @see openArchive())
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Interopt.pInvokes.ZoneObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ZoneObject.#ctor(WinterLeaf.Engine.Omni@)">
            <summary>
            
            </summary>
            <param name="ts"></param> 
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ZoneObject.dumpZoneState(System.String,System.Boolean)">
            <summary>
            Dump a list of all objects assigned to the zone to the console as well as a list 
               of all connected zone spaces.
               @param updateFirst Whether to update the contents of the zone before dumping.  Since zoning states of 
                  objects are updated on demand, the zone contents can be outdated. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Interopt.pInvokes.ZoneObject.getZoneId(System.String)">
            <summary>
            Get the unique numeric ID of the zone in its scene.
               @return The ID of the zone. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.GetTypeCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.ToBoolean(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.ToChar(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.ToSByte(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.ToByte(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.ToInt16(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.ToUInt16(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.ToInt32(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.ToUInt32(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.ToInt64(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.ToUInt64(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.ToSingle(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.ToDouble(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.ToDecimal(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.ToDateTime(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.ToString(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.ToType(System.Type,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="conversionType"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.getCount">
            <summary>
            Gets the count of objects in the SimSet
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.getObject(System.UInt32)">
            <summary>
            Gets the object X in the SimSet
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.OnFunctionNotFoundCallTorqueScript">
            <summary>
            If the CSharp callback isn't found this flag determines whether OMNI will look in TorqueScript.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.delete">
            <summary>
            Deletes the object from the simulation
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.GetID">
            <summary>
            Returns the ID of the object as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.isObject">
            <summary>
            Returns true if T3D object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.getClassName">
            <summary>
            Gets the Classname of the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.getName">
            <summary>
            Gets the name of the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.isField(System.String)">
            <summary>
            returns if the field specified exists
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.isMethod(System.String)">
            <summary>
            Checks if the method specified exists
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.getDataBlock">
            <summary>
            Returns the datablock to the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.call(System.String,System.String[])">
            <summary>
            Calls the member function on the object with parameters.
            </summary>
            <param name="function"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.callScript(System.String,System.String[])">
            <summary>
            Calls the Torque script function directly w/ parameters by passing the CSharp.
            </summary>
            <param name="function"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.op_Equality(WinterLeaf.Engine.Classes.ModelBase,System.String)">
            <summary>
            
            </summary>
            <param name="ts"></param>
            <param name="simobjectid"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.op_Inequality(WinterLeaf.Engine.Classes.ModelBase,System.String)">
            <summary>
            
            </summary>
            <param name="ts"></param>
            <param name="simobjectid"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.op_Implicit(WinterLeaf.Engine.Classes.ModelBase)~System.String">
            <summary>
            
            </summary>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.resolveobject(System.String)">
            <summary>
            Resolves the string passed to a simobject.
            </summary>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.op_Implicit(System.String)~WinterLeaf.Engine.Classes.ModelBase">
            <summary>
            
            </summary>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.op_Implicit(WinterLeaf.Engine.Classes.ModelBase)~System.Int32">
            <summary>
            
            </summary>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.op_Implicit(System.Int32)~WinterLeaf.Engine.Classes.ModelBase">
            <summary>
            
            </summary>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.op_Implicit(WinterLeaf.Engine.Classes.ModelBase)~System.UInt32">
            <summary>
            
            </summary>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.op_Implicit(System.UInt32)~WinterLeaf.Engine.Classes.ModelBase">
            <summary>
            
            </summary>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.ModelBase.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.ModelBase.ID">
            <summary>
            The T3D SimObject ID
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.ModelBase.Item(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.Helpers.TypeConverterGeneric`1">
            <summary>
            This class provides a generic template for setting up a type converter for casting.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Helpers.TypeConverterGeneric`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.Helpers.TypeConverterGeneric`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.LiveScripts.xmlOverrideData">
            <summary>
            Contains the Override Definition
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.LiveScripts.xmlOverrideData.Compile">
            <summary>
            Compiles the C# code into a in memory DLL.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.LiveScripts.xmlOverrideData.NameSpace">
            <summary>
            The Namespace to Override (ONLY Used for MemberFunction)
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.LiveScripts.xmlOverrideData.ReferencedAssemblies">
            <summary>
            List of all the DLL's to include
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.LiveScripts.xmlOverrideData.FunctionOverrides">
            <summary>
            List of the functions to override in the class (ONLY Used for MemberFunction)
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.LiveScripts.xmlOverrideData.ClassName">
            <summary>
            Name of the new class.  (ONLY Used for MemberFunction)
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.LiveScripts.xmlOverrideData.XmlFileName">
            <summary>
            Name of the XML Config file.
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.LiveScripts.xmlOverrideData.ScriptType">
            <summary>
            The Type of XML File.
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.LiveScripts.xmlOverrideData.CsFileNames">
            <summary>
            The C# files to compile into the DLL
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.LiveScripts.xmlOverrideData.IResult">
            <summary>
            The results of the compilation (Only Used for Classes)
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Classes.LiveScripts.xmlOverrideData.CompiledAssembly">
            <summary>
            The compiled assembly.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisFIConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisFIConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisF.#ctor(System.String)">
            <summary>
            Constructor From String
            </summary>
            <param name="angaxisf"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisF.#ctor(WinterLeaf.Engine.Containers.Point3F,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="axis"></param>
            <param name="angle"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Contructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="angle"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisF.GetTypeCode">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisF.ToBoolean(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisF.ToChar(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisF.ToSByte(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisF.ToByte(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisF.ToInt16(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisF.ToUInt16(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisF.ToInt32(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisF.ToUInt32(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisF.ToInt64(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisF.ToUInt64(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisF.ToSingle(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisF.ToDouble(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisF.ToDecimal(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisF.ToDateTime(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisF.ToString(System.IFormatProvider)">
            <summary>
            Converts To String
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisF.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisF.op_Inequality(WinterLeaf.Engine.Containers.AngAxisF,WinterLeaf.Engine.Containers.AngAxisF)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_test"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisF.AsString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.AngAxisF.ToString">
            <summary>
            
            </summary>
            <returns></returns>
            
        </member>
        <member name="P:WinterLeaf.Engine.Containers.AngAxisF.mAngle">
            <summary>
            Angle
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.AngAxisF.x">
            <summary>
            X
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.AngAxisF.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.AngAxisF.z">
            <summary>
            Z
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsAngAxisF(System.String)">
            <summary>
            Converts a string to a AngAxisF
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsBox3F(System.String)">
            <summary>
            Returns string as Box3F
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsColorF(System.String)">
            <summary>
            Returns string as ColorF
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsColorI(System.String)">
            <summary>
            Returns String as ColorI
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsEaseF(System.String)">
            <summary>
            Converts string to an EaseF
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsMatrixF(System.String)">
            <summary>
            Converts a string to a MatrixF
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsMatrixPosition(System.String)">
            <summary>
            Converts a string to a Matrix Position
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsPoint2F(System.String)">
            <summary>
            Returns string as Point2F
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsPoint2I(System.String)">
            <summary>
            Returns string as Point2I
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsPoint3F(System.String)">
            <summary>
            Returns string as Point3F
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsPoint3I(System.String)">
            <summary>
            Returns string as Point3F
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsPoint4F(System.String)">
            <summary>
            Returns string as Point4F
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsPolyhedron(WinterLeaf.Engine.Containers.Polyhedron)">
            <summary>
            Converts a Polyhedron to a string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsPolyhedron(System.String)">
            <summary>
            Converts string to a Polyhedron
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsRectF(System.String)">
            <summary>
            Converts String to a RectF
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsString(WinterLeaf.Engine.Containers.RectF)">
            <summary>
            Converts RectF to a string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsRectI(System.String)">
            <summary>
            Converts string to a RectI
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsRectSpacingI(System.String)">
            <summary>
            Returns string as RectSpacingI
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsTransformF(System.String)">
            <summary>
            Returns string as TransformF
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsTypeCubemapName(System.String)">
            <summary>
            Converts a string to a CubeMapName
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsTypeImageFilename(System.String)">
            <summary>
            Converts a string to a Image Filename
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsTypeMaterialName(System.String)">
            <summary>
            Converts a string to a Material Name
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsTypeName(System.String)">
            <summary>
            Converts a string to a Type Name
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsTypePrefabFilename(System.String)">
            <summary>
            Converts a string to a PreFame Filename
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsTypeSFXAmbienceName(System.String)">
            <summary>
            Converts a string to a SFX Ambience Name
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsTypeSFXDescriptionName(System.String)">
            <summary>
            Converts a string to SFX Description Name
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsTypeSFXEnvironmentName(System.String)">
            <summary>
            Converts a string to a SFX Enviroment Name
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsTypeSFXParameterName(System.String)">
            <summary>
            Converts a string toa SFX Parameter Name
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsTypeSFXSourceName(System.String)">
            <summary>
            Converts a string to a SFX Source Name
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsTypeSFXStateName(System.String)">
            <summary>
            Converts a string to a SFX State Name
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsTypeSFXTrackName(System.String)">
            <summary>
            Converts a string to a SFX Track Name
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsTypeShapeFilename(System.String)">
            <summary>
            Converts a string to a ShapeFilename
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.asTypeTerrainMaterialName(System.String)">
            <summary>
            Converts a string to a Terrain Material Name
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsVectorBool(System.String)">
            <summary>
            Converts string to a Vector of Bools
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsVectorInt(System.String)">
            <summary>
            Converts string to a Vector of Ints
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Extension.AsVectorFloat(System.String)">
            <summary>
            Converts string to a Vector of Floats.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3FIConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3FIConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Containers.Box3F">
            <summary>
            Used to hold the CSharp Equiv of the Box3F Torque Class.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="box"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="minExtens_x"></param>
            <param name="minExtens_y"></param>
            <param name="minExtens_z"></param>
            <param name="maxExtens_x"></param>
            <param name="maxExtens_y"></param>
            <param name="maxExtens_z"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.GetTypeCode">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.ToBoolean(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.ToByte(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.ToChar(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.ToDateTime(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.ToDecimal(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.ToDouble(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.ToInt16(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.ToInt32(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.ToInt64(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.ToSByte(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.ToSingle(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.ToString(System.IFormatProvider)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.ToType(System.Type,System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.ToUInt16(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.ToUInt32(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.ToUInt64(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.op_Inequality(WinterLeaf.Engine.Containers.Box3F,WinterLeaf.Engine.Containers.Box3F)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_test"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.Get_MaxExtents">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.Get_MinExtents">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.AsString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Box3F.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Box3F.mMaxExtentsX">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Box3F.mMaxExtentsY">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Box3F.mMaxExtentsZ">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Box3F.mMinExtentsX">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Box3F.mMinExtentsY">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Box3F.mMinExtentsZ">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorFIConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorFIConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Containers.ColorF">
            <summary>
            Used to hold the CSharp equiv of the ColorF torque class.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="a"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorF.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorF.GetTypeCode">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorF.ToBoolean(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorF.ToByte(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorF.ToChar(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorF.ToDateTime(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorF.ToDecimal(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorF.ToDouble(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorF.ToInt16(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorF.ToInt32(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorF.ToInt64(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorF.ToSByte(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorF.ToSingle(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorF.ToString(System.IFormatProvider)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorF.ToType(System.Type,System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorF.ToUInt16(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorF.ToUInt32(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorF.ToUInt64(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorF.op_Inequality(WinterLeaf.Engine.Containers.ColorF,WinterLeaf.Engine.Containers.ColorF)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_test"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorF.AsString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorF.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.ColorF.Red">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.ColorF.Green">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.ColorF.Blue">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.ColorF.Alpha">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorIIConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorIIConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Containers.ColorI">
            <summary>
            Used to hold the CSharp Equiv of the ColorI torque class.
            </summary>
            
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorI.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="a"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorI.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorI.GetTypeCode">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorI.ToBoolean(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorI.ToByte(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorI.ToChar(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorI.ToDateTime(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorI.ToDecimal(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorI.ToDouble(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorI.ToInt16(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorI.ToInt32(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorI.ToInt64(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorI.ToSByte(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorI.ToSingle(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorI.ToString(System.IFormatProvider)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorI.ToType(System.Type,System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorI.ToUInt16(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorI.ToUInt32(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorI.ToUInt64(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorI.op_Inequality(WinterLeaf.Engine.Containers.ColorI,WinterLeaf.Engine.Containers.ColorI)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_test"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorI.AsString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.ColorI.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.ColorI.Red">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.ColorI.Green">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.ColorI.Blue">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.ColorI.Alpha">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseFIConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseFIConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Containers.EaseF">
            <summary>
            EaseF Implementation
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.#ctor(System.String)">
            <summary>
            Parse EaseF from string
            </summary>
            <param name="easef"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.#ctor(System.Int32,System.Int32)">
            <summary>
            Create EaseF
            </summary>
            <param name="direction"></param>
            <param name="type"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create EaseF
            </summary>
            <param name="direction"></param>
            <param name="type"></param>
            <param name="param1"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            create EaseF
            </summary>
            <param name="direction"></param>
            <param name="type"></param>
            <param name="param1"></param>
            <param name="param2"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.GetTypeCode">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.ToBoolean(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.ToChar(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.ToSByte(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.ToByte(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.ToInt16(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.ToUInt16(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.ToInt32(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.ToUInt32(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.ToInt64(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.ToUInt64(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.ToSingle(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.ToDouble(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.ToDecimal(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.ToDateTime(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.ToString(System.IFormatProvider)">
            <summary>
            Converts to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.op_Inequality(WinterLeaf.Engine.Containers.EaseF,WinterLeaf.Engine.Containers.EaseF)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_test"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.AsString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.EaseF.ToString">
            <summary>
            
            </summary>
            <returns></returns>
            
        </member>
        <member name="P:WinterLeaf.Engine.Containers.EaseF.mDirection">
            <summary>
            Direction
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.EaseF.mType">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.EaseF.mParam1">
            <summary>
            Param 1
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.EaseF.mParam2">
            <summary>
            Param 2
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.MatrixFIConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.MatrixFIConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.MatrixF.op_Inequality(WinterLeaf.Engine.Containers.MatrixF,WinterLeaf.Engine.Containers.MatrixF)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_test"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.MatrixPositionIConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.MatrixPositionIConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.MatrixPosition.op_Inequality(WinterLeaf.Engine.Containers.MatrixPosition,WinterLeaf.Engine.Containers.MatrixPosition)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_test"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2FIConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2FIConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Containers.Point2F">
            <summary>
            Used to hold the CSharp Equiv of the Point2F class.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2F.#ctor(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="mx"></param>
            <param name="my"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2F.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2F.GetTypeCode">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2F.ToBoolean(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2F.ToByte(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2F.ToChar(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2F.ToDateTime(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2F.ToDecimal(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2F.ToDouble(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2F.ToInt16(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2F.ToInt32(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2F.ToInt64(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2F.ToSByte(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2F.ToSingle(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2F.ToString(System.IFormatProvider)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2F.ToType(System.Type,System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2F.ToUInt16(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2F.ToUInt32(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2F.ToUInt64(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2F.op_Inequality(WinterLeaf.Engine.Containers.Point2F,WinterLeaf.Engine.Containers.Point2F)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_test"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2F.AsString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2F.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Point2F.x">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Point2F.y">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2IIConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2IIConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Containers.Point2I">
            <summary>
            Used to hold CSharp equiv of the Point2I Torque Class.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2I.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="mx"></param>
            <param name="my"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2I.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2I.GetTypeCode">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2I.ToBoolean(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2I.ToByte(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2I.ToChar(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2I.ToDateTime(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2I.ToDecimal(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2I.ToDouble(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2I.ToInt16(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2I.ToInt32(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2I.ToInt64(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2I.ToSByte(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2I.ToSingle(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2I.ToString(System.IFormatProvider)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2I.ToType(System.Type,System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2I.ToUInt16(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2I.ToUInt32(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2I.ToUInt64(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2I.op_Inequality(WinterLeaf.Engine.Containers.Point2I,WinterLeaf.Engine.Containers.Point2I)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_test"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2I.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2I.AsString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point2I.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Point2I.x">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Point2I.y">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3FIConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3FIConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:WinterLeaf.Engine.Containers.Point3F.POINT_EPSILON">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="Empty"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.#ctor(WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.#ctor(System.Single)">
            <summary>
            
            </summary>
            <param name="xyz"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="in_x"></param>
            <param name="in_y"></param>
            <param name="in_z"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.GetTypeCode">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.ToBoolean(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.ToByte(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.ToChar(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.ToDateTime(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.ToDecimal(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.ToDouble(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.ToInt16(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.ToInt32(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.ToInt64(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.ToSByte(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.ToSingle(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.ToString(System.IFormatProvider)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.ToType(System.Type,System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.ToUInt16(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.ToUInt32(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.ToUInt64(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.AsString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.ToString">
            <summary>
            
            </summary>
            <returns></returns>
            
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.SetMin(WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            
            </summary>
            <param name="_test"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.SetMax(WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            
            </summary>
            <param name="_test"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.neg">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="_testo"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.op_Equality(WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_test"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.op_Inequality(WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_test"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.op_Addition(WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_add"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.op_Subtraction(WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_rSub"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.op_Multiply(WinterLeaf.Engine.Containers.Point3F,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_mul"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.op_Division(WinterLeaf.Engine.Containers.Point3F,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_div"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.op_UnaryNegation(WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.getMin(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.getMax(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.mDegToRad(System.Double)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.mRadToDeg(System.Double)">
            <summary>
            
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.vectorScale(WinterLeaf.Engine.Containers.Point3F,System.Single)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.vectorDot(WinterLeaf.Engine.Containers.Point3F,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.vecotrScale(System.Single)">
            <summary>
            
            </summary>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.vectorDot(WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            
            </summary>
            <param name="velocity"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.zero">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.isZero">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.isUnitLength">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.equal(WinterLeaf.Engine.Containers.Point3F,System.Double)">
            <summary>
            
            </summary>
            <param name="compare"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.getLeastcomponentIndex">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.getGreatestComponentIndex">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.least">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.most">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.convolve(WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.convolveInverse(WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.lenSquared">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.len">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.normalizeSafe">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.magnitudeSafe">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.copy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3F.vectorScale(System.Single)">
            <summary>
            
            </summary>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Point3F.x">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Point3F.y">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Point3F.z">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3IIConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3IIConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Containers.Point3I">
            <summary>
            Used to hold the CSharp equiv of the Point3F class.
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Containers.Point3I.POINT_EPSILON">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="Empty"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.#ctor(WinterLeaf.Engine.Containers.Point3I)">
            <summary>
            
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="xyz"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="in_x"></param>
            <param name="in_y"></param>
            <param name="in_z"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.GetTypeCode">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.ToBoolean(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.ToByte(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.ToChar(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.ToDateTime(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.ToDecimal(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.ToDouble(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.ToInt16(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.ToInt32(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.ToInt64(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.ToSByte(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.ToSingle(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.ToString(System.IFormatProvider)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.ToType(System.Type,System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.ToUInt16(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.ToUInt32(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.ToUInt64(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.op_Inequality(WinterLeaf.Engine.Containers.Point3I,WinterLeaf.Engine.Containers.Point3I)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_test"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.AsString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.ToString">
            <summary>
            
            </summary>
            <returns></returns>
            
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.SetMin(WinterLeaf.Engine.Containers.Point3I)">
            <summary>
            
            </summary>
            <param name="_test"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.SetMax(WinterLeaf.Engine.Containers.Point3I)">
            <summary>
            
            </summary>
            <param name="_test"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.neg">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="_testo"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.op_Addition(WinterLeaf.Engine.Containers.Point3I,WinterLeaf.Engine.Containers.Point3I)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_add"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.op_Subtraction(WinterLeaf.Engine.Containers.Point3I,WinterLeaf.Engine.Containers.Point3I)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_rSub"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.op_Multiply(WinterLeaf.Engine.Containers.Point3I,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_mul"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.op_Division(WinterLeaf.Engine.Containers.Point3I,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_div"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.op_UnaryNegation(WinterLeaf.Engine.Containers.Point3I)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.getMin(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.getMax(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.mDegToRad(System.Double)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.mRadToDeg(System.Int32)">
            <summary>
            
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.vectorScale(WinterLeaf.Engine.Containers.Point3I,System.Int32)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.vectorDot(WinterLeaf.Engine.Containers.Point3I,WinterLeaf.Engine.Containers.Point3I)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point3I.vecotrScale(System.Int32)">
            <summary>
            
            </summary>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Point3I.x">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Point3I.y">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Point3I.z">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4FIConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4FIConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Containers.Point4F">
            <summary>
            Point4F Container
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4F.#ctor(System.String)">
            <summary>
            Creates a Point4F from a string.
            </summary>
            <param name="point4f"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4F.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a Point4F
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4F.GetTypeCode">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4F.ToBoolean(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4F.ToChar(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4F.ToSByte(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4F.ToByte(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4F.ToInt16(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4F.ToUInt16(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4F.ToInt32(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4F.ToUInt32(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4F.ToInt64(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4F.ToUInt64(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4F.ToSingle(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4F.ToDouble(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4F.ToDecimal(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4F.ToDateTime(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4F.ToString(System.IFormatProvider)">
            <summary>
            Converts To String
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4F.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4F.op_Inequality(WinterLeaf.Engine.Containers.Point4F,WinterLeaf.Engine.Containers.Point4F)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_test"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4F.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4F.AsString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Point4F.ToString">
            <summary>
            
            </summary>
            <returns></returns>
            
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Point4F.X">
            <summary>
            X
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Point4F.Y">
            <summary>
            Y
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Point4F.Z">
            <summary>
            Z
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Point4F.W">
            <summary>
            W
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.PolyhedronIConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.PolyhedronIConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Containers.Polyhedron">
            <summary>
            Polyhedron Container
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Containers.Polyhedron._mOrigin">
            <summary>
            Initializes a new instance of the Polyhedron class.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Polyhedron.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Polyhedron.#ctor(System.String)">
            <summary>
            Constructor Taking String
            </summary>
            <param name="poly"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Polyhedron.GetTypeCode">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Polyhedron.ToBoolean(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Polyhedron.ToChar(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Polyhedron.ToSByte(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Polyhedron.ToByte(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Polyhedron.ToInt16(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Polyhedron.ToUInt16(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Polyhedron.ToInt32(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Polyhedron.ToUInt32(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Polyhedron.ToInt64(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Polyhedron.ToUInt64(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Polyhedron.ToSingle(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Polyhedron.ToDouble(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Polyhedron.ToDecimal(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Polyhedron.ToDateTime(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Polyhedron.ToString(System.IFormatProvider)">
            <summary>
            Converts to string
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Polyhedron.ToType(System.Type,System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Polyhedron.op_Inequality(WinterLeaf.Engine.Containers.Polyhedron,WinterLeaf.Engine.Containers.Polyhedron)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_test"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Polyhedron.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Polyhedron.ToString">
            <summary>
            Converts Polyhedron to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.Polyhedron.AsString">
            <summary>
            Converts Polyhedron to string
            </summary>
            <returns></returns>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Polyhedron.mVector1">
            <summary>
            Vector 1
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Polyhedron.mVector2">
            <summary>
            Vector 2
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Polyhedron.mVector3">
            <summary>
            Vector 3
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.Polyhedron.mOrigin">
            <summary>
            Origin
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectFIConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectFIConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Containers.RectF">
            <summary>
            RectF Container
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectF.#ctor(System.String)">
            <summary>
            Creates RectF from string
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectF.#ctor(WinterLeaf.Engine.Containers.Point2F,WinterLeaf.Engine.Containers.Point2F)">
            <summary>
            Constructor
            </summary>
            <param name="point"></param>
            <param name="extent"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectF.GetTypeCode">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectF.ToBoolean(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectF.ToChar(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectF.ToSByte(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectF.ToByte(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectF.ToInt16(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectF.ToUInt16(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectF.ToInt32(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectF.ToUInt32(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectF.ToInt64(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectF.ToUInt64(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectF.ToSingle(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectF.ToDouble(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectF.ToDecimal(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectF.ToDateTime(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectF.ToString(System.IFormatProvider)">
            <summary>
            Returns String
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectF.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectF.op_Inequality(WinterLeaf.Engine.Containers.RectF,WinterLeaf.Engine.Containers.RectF)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_test"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectF.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectF.AsString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectF.ToString">
            <summary>
            
            </summary>
            <returns></returns>
            
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectIIConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectIIConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Containers.RectI">
            <summary>
            RectI container
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectI.#ctor(System.String)">
            <summary>
            Creates RectI from string
            </summary>
            <param name="recti"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectI.#ctor(WinterLeaf.Engine.Containers.Point2I,WinterLeaf.Engine.Containers.Point2I)">
            <summary>
            Creates RectI
            </summary>
            <param name="point"></param>
            <param name="extent"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectI.GetTypeCode">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectI.ToBoolean(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectI.ToChar(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectI.ToSByte(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectI.ToByte(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectI.ToInt16(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectI.ToUInt16(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectI.ToInt32(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectI.ToUInt32(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectI.ToInt64(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectI.ToUInt64(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectI.ToSingle(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectI.ToDouble(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectI.ToDecimal(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectI.ToDateTime(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectI.ToString(System.IFormatProvider)">
            <summary>
            Returns String
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectI.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectI.op_Inequality(WinterLeaf.Engine.Containers.RectI,WinterLeaf.Engine.Containers.RectI)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_test"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectI.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectI.AsString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectI.ToString">
            <summary>
            
            </summary>
            <returns></returns>
            
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingIConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingIConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Containers.RectSpacingI">
            <summary>
            Used to hold the CSharp equiv of the RectSpacingI torque class.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingI.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="t"></param>
            <param name="b"></param>
            <param name="r"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingI.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingI.GetTypeCode">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingI.ToBoolean(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingI.ToByte(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingI.ToChar(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingI.ToDateTime(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingI.ToDecimal(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingI.ToDouble(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingI.ToInt16(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingI.ToInt32(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingI.ToInt64(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingI.ToSByte(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingI.ToSingle(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingI.ToString(System.IFormatProvider)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingI.ToType(System.Type,System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingI.ToUInt16(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingI.ToUInt32(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingI.ToUInt64(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingI.op_Inequality(WinterLeaf.Engine.Containers.RectSpacingI,WinterLeaf.Engine.Containers.RectSpacingI)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_test"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingI.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingI.AsString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.RectSpacingI.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.RectSpacingI.left">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.RectSpacingI.top">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.RectSpacingI.bottom">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.RectSpacingI.right">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformFIConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformFIConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Containers.TransformF">
            <summary>
            The CSharp equiv to the TransformF torque class.
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Containers.TransformF.POINT_EPSILON">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Containers.TransformF._mOrientation_x">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Containers.TransformF._mPosition_x">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Containers.TransformF.mAngle">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="axis_x"></param>
            <param name="axis_y"></param>
            <param name="axis_z"></param>
            <param name="angle"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.#ctor(WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.GetTypeCode">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.ToBoolean(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.ToByte(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.ToChar(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.ToDateTime(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.ToDecimal(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.ToDouble(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.ToInt16(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.ToInt32(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.ToInt64(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.ToSByte(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.ToSingle(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.ToString(System.IFormatProvider)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.ToType(System.Type,System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.ToUInt16(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.ToUInt32(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.ToUInt64(System.IFormatProvider)">
            <summary>
            NotImplementedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.op_Inequality(WinterLeaf.Engine.Containers.TransformF,WinterLeaf.Engine.Containers.TransformF)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_test"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.GetPosition">
            <summary>
            Returns the Position part of the transform
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.GetOrientation">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.AsString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="_testo"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.op_Addition(WinterLeaf.Engine.Containers.TransformF,WinterLeaf.Engine.Containers.TransformF)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_add"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.op_Subtraction(WinterLeaf.Engine.Containers.TransformF,WinterLeaf.Engine.Containers.TransformF)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_rSub"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.op_Multiply(WinterLeaf.Engine.Containers.TransformF,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_mul"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.op_Division(WinterLeaf.Engine.Containers.TransformF,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="_div"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.op_UnaryNegation(WinterLeaf.Engine.Containers.TransformF)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.copy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.normalizeSafe">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.magnitudeSafe">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.isZero">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.len">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.vectorScale(System.Single)">
            <summary>
            
            </summary>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.getMin(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.getMax(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.mDegToRad(System.Double)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.mRadToDeg(System.Double)">
            <summary>
            
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.vectorScale(WinterLeaf.Engine.Containers.TransformF,System.Single)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TransformF.vectorDot(WinterLeaf.Engine.Containers.TransformF,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.TransformF.MAngle">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.TransformF.mOrientationX">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.TransformF.mOrientationY">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.TransformF.mOrientationZ">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.TransformF.mPositionX">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.TransformF.mPositionY">
            <summary>
            
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.TransformF.mPositionZ">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Containers.TypeGuiControlIConverter">
            <summary>
            Required for converting this object type to a string and back.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TypeGuiControlIConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TypeGuiControlIConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Containers.TypeGuiControl">
            <summary>
            The actual class that hold data.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TypeImageFilenameIConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TypeImageFilenameIConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TypeConverterGenericString`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.TypeConverterGenericString`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Containers.VectorIntIConverter">
            <summary>
            
            </summary>
            
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorIntIConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorIntIConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Containers.VectorInt">
            <summary>
            Supports Vectors of Ints
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorInt.#ctor(System.Int32[])">
            <summary>
            Loads an array into the object
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorInt.#ctor(System.String)">
            <summary>
            Loads a space delimited string into the vector
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorInt.GetTypeCode">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorInt.ToBoolean(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorInt.ToChar(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorInt.ToSByte(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorInt.ToByte(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorInt.ToInt16(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorInt.ToUInt16(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorInt.ToInt32(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorInt.ToUInt32(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorInt.ToInt64(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorInt.ToUInt64(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorInt.ToSingle(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorInt.ToDouble(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorInt.ToDecimal(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorInt.ToDateTime(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorInt.ToString(System.IFormatProvider)">
            <summary>
            Converts To String
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorInt.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorInt.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorInt.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorInt.AsString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.VectorInt.vector">
            <summary>
            The data represented as an array
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.VectorInt.list">
            <summary>
            The data represented as a list
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.VectorInt.Item(System.Int32)">
            <summary>
            Gets or sets value at index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Containers.VectorFloatIConverter">
            <summary>
            
            </summary>
            
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloatIConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloatIConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Containers.VectorFloat">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloat.#ctor(System.Single[])">
            <summary>
            Loads an array into the object
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloat.#ctor(System.String)">
            <summary>
            Loads a space delimited string into the vector
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloat.GetTypeCode">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloat.ToBoolean(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloat.ToChar(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloat.ToSByte(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloat.ToByte(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloat.ToInt16(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloat.ToUInt16(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloat.ToInt32(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloat.ToUInt32(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloat.ToInt64(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloat.ToUInt64(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloat.ToSingle(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloat.ToDouble(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloat.ToDecimal(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloat.ToDateTime(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloat.ToString(System.IFormatProvider)">
            <summary>
            Returns String
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloat.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloat.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloat.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorFloat.AsString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.VectorFloat.vector">
            <summary>
            The data represented as an array
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.VectorFloat.list">
            <summary>
            The data represented as a list
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Containers.VectorBoolIConverter">
            <summary>
            
            </summary>
            
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBoolIConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBoolIConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Containers.VectorBool">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBool.#ctor(System.Boolean[])">
            <summary>
            Loads an array into the object
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBool.#ctor(System.String)">
            <summary>
            Loads a space delimited string into the vector
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBool.GetTypeCode">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBool.ToBoolean(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBool.ToChar(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBool.ToSByte(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBool.ToByte(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBool.ToInt16(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBool.ToUInt16(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBool.ToInt32(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBool.ToUInt32(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBool.ToInt64(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBool.ToUInt64(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBool.ToSingle(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBool.ToDouble(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBool.ToDecimal(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBool.ToDateTime(System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBool.ToString(System.IFormatProvider)">
            <summary>
            Returns String
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBool.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Not Implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBool.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBool.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Containers.VectorBool.AsString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.VectorBool.vector">
            <summary>
            The data represented as an array
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Containers.VectorBool.list">
            <summary>
            The data represented as a list
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TSStatic__MaskBits">
            <summary>
            TSStatic__MaskBits
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.TSStatic__MaskBits.InitialUpdateMask">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.TSStatic__MaskBits.ScaleMask">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.TSStatic__MaskBits.FlagMask">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.TSStatic__MaskBits.MountedMask">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.TSStatic__MaskBits.TransformMask">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.TSStatic__MaskBits.AdvancedStaticOptionsMask">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.TSStatic__MaskBits.UpdateCollisionMask">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.TSStatic__MaskBits.SkinMask">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.TSStatic__MaskBits.LightObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.GuiGraphType">
            <summary>
            GuiGraph Enum
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.GuiGraphType.Point">
            <summary>
            Point
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.GuiGraphType.Polyline">
            <summary>
            Polyline
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.GuiGraphType.Filled">
            <summary>
            Filled
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.GuiGraphType.Bar">
            <summary>
            Bar
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__Camera__CameraMotionMode">
            <summary>
            R__Camera__CameraMotionMode
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Camera__CameraMotionMode.StationaryMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Camera__CameraMotionMode.FreeRotateMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Camera__CameraMotionMode.FlyMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Camera__CameraMotionMode.OrbitObjectMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Camera__CameraMotionMode.OrbitPointMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Camera__CameraMotionMode.TrackObjectMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Camera__CameraMotionMode.OverheadMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Camera__CameraMotionMode.EditOrbitMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Camera__CameraMotionMode.CameraFirstMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Camera__CameraMotionMode.CameraLastMode">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__ColladaUtils__ImportOptions__eLodType">
            <summary>
            R__ColladaUtils__ImportOptions__eLodType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ColladaUtils__ImportOptions__eLodType.DetectDTS">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ColladaUtils__ImportOptions__eLodType.SingleSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ColladaUtils__ImportOptions__eLodType.TrailingNumber">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ColladaUtils__ImportOptions__eLodType.NumLodTypes">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__ConsoleLogEntry__Level">
            <summary>
            R__ConsoleLogEntry__Level
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ConsoleLogEntry__Level.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ConsoleLogEntry__Level.Warning">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ConsoleLogEntry__Level.Error">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ConsoleLogEntry__Level.NUM_CLASS">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__CoverPoint__Size">
            <summary>
            R__CoverPoint__Size
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__CoverPoint__Size.Prone">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__CoverPoint__Size.Crouch">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__CoverPoint__Size.Stand">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__CoverPoint__Size.NumSizes">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__Docking__DockingType">
            <summary>
            R__Docking__DockingType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Docking__DockingType.dockNone">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Docking__DockingType.dockClient">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Docking__DockingType.dockTop">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Docking__DockingType.dockBottom">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Docking__DockingType.dockLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Docking__DockingType.dockRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Docking__DockingType.dockInvalid">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Docking__DockingType.dockAny">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__domUpAxisType">
            <summary>
            R__domUpAxisType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__domUpAxisType.UPAXISTYPE_X_UP">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__domUpAxisType.UPAXISTYPE_Y_UP">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__domUpAxisType.UPAXISTYPE_Z_UP">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__domUpAxisType.UPAXISTYPE_COUNT">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__FontCharset">
            <summary>
            R__FontCharset
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__FontCharset.TGE_ANSI_CHARSET">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__FontCharset.TGE_SYMBOL_CHARSET">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__FontCharset.TGE_SHIFTJIS_CHARSET">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__FontCharset.TGE_HANGEUL_CHARSET">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__FontCharset.TGE_HANGUL_CHARSET">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__FontCharset.TGE_GB2312_CHARSET">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__FontCharset.TGE_CHINESEBIG5_CHARSET">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__FontCharset.TGE_OEM_CHARSET">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__FontCharset.TGE_JOHAB_CHARSET">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__FontCharset.TGE_HEBREW_CHARSET">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__FontCharset.TGE_ARABIC_CHARSET">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__FontCharset.TGE_GREEK_CHARSET">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__FontCharset.TGE_TURKISH_CHARSET">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__FontCharset.TGE_VIETNAMESE_CHARSET">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__FontCharset.TGE_THAI_CHARSET">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__FontCharset.TGE_EASTEUROPE_CHARSET">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__FontCharset.TGE_RUSSIAN_CHARSET">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__FontCharset.TGE_MAC_CHARSET">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__FontCharset.TGE_BALTIC_CHARSET">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__ForestBrushTool__BrushMode">
            <summary>
            R__ForestBrushTool__BrushMode
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ForestBrushTool__BrushMode.Paint">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ForestBrushTool__BrushMode.Erase">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ForestBrushTool__BrushMode.EraseSelected">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ForestBrushTool__BrushMode.DropToGround">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GFXAdapterType">
            <summary>
            R__GFXAdapterType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXAdapterType.OpenGL">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXAdapterType.Direct3D9">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXAdapterType.Direct3D8">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXAdapterType.NullDevice">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXAdapterType.Direct3D9_360">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXAdapterType.GFXAdapterType_Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GFXBlend">
            <summary>
            R__GFXBlend
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXBlend.GFXBlend_FIRST">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXBlend.GFXBlendZero">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXBlend.GFXBlendOne">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXBlend.GFXBlendSrcColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXBlend.GFXBlendInvSrcColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXBlend.GFXBlendSrcAlpha">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXBlend.GFXBlendInvSrcAlpha">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXBlend.GFXBlendDestAlpha">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXBlend.GFXBlendInvDestAlpha">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXBlend.GFXBlendDestColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXBlend.GFXBlendInvDestColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXBlend.GFXBlendSrcAlphaSat">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXBlend.GFXBlend_COUNT">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GFXBlendOp">
            <summary>
            R__GFXBlendOp
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXBlendOp.GFXBlendOp_FIRST">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXBlendOp.GFXBlendOpAdd">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXBlendOp.GFXBlendOpSubtract">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXBlendOp.GFXBlendOpRevSubtract">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXBlendOp.GFXBlendOpMin">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXBlendOp.GFXBlendOpMax">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXBlendOp.GFXBlendOp_COUNT">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GFXCmpFunc">
            <summary>
            R__GFXCmpFunc
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXCmpFunc.GFXCmp_FIRST">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXCmpFunc.GFXCmpNever">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXCmpFunc.GFXCmpLess">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXCmpFunc.GFXCmpEqual">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXCmpFunc.GFXCmpLessEqual">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXCmpFunc.GFXCmpGreater">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXCmpFunc.GFXCmpNotEqual">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXCmpFunc.GFXCmpGreaterEqual">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXCmpFunc.GFXCmpAlways">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXCmpFunc.GFXCmp_COUNT">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GFXCullMode">
            <summary>
            R__GFXCullMode
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXCullMode.GFXCull_FIRST">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXCullMode.GFXCullNone">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXCullMode.GFXCullCW">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXCullMode.GFXCullCCW">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXCullMode.GFXCull_COUNT">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GFXFormat">
            <summary>
            R__GFXFormat
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormat_FIRST">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatA8">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatL8">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatA4L4">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatR5G6B5">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatR5G5B5A1">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatR5G5B5X1">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatA8L8">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatL16">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatR16F">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatD16">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatR8G8B8">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatR8G8B8A8">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatR8G8B8X8">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatR32F">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatR16G16">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatR16G16F">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatR10G10B10A2">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatD32">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatD24X8">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatD24S8">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatD24FS8">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatR16G16B16A16">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatR16G16B16A16F">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatR32G32B32A32F">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatDXT1">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatDXT2">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatDXT3">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatDXT4">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormatDXT5">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormat_COUNT">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormat_8BIT">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormat_16BIT">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormat_24BIT">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormat_32BIT">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormat_64BIT">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormat_128BIT">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXFormat.GFXFormat_UNKNOWNSIZE">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GFXStencilOp">
            <summary>
            R__GFXStencilOp
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXStencilOp.GFXStencilOp_FIRST">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXStencilOp.GFXStencilOpKeep">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXStencilOp.GFXStencilOpZero">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXStencilOp.GFXStencilOpReplace">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXStencilOp.GFXStencilOpIncrSat">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXStencilOp.GFXStencilOpDecrSat">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXStencilOp.GFXStencilOpInvert">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXStencilOp.GFXStencilOpIncr">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXStencilOp.GFXStencilOpDecr">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXStencilOp.GFXStencilOp_COUNT">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GFXTextureAddressMode">
            <summary>
            R__GFXTextureAddressMode
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureAddressMode.GFXAddress_FIRST">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureAddressMode.GFXAddressWrap">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureAddressMode.GFXAddressMirror">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureAddressMode.GFXAddressClamp">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureAddressMode.GFXAddressBorder">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureAddressMode.GFXAddressMirrorOnce">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureAddressMode.GFXAddress_COUNT">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GFXTextureArgument">
            <summary>
            R__GFXTextureArgument
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureArgument.GFXTA_FIRST">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureArgument.GFXTADiffuse">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureArgument.GFXTACurrent">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureArgument.GFXTATexture">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureArgument.GFXTATFactor">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureArgument.GFXTASpecular">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureArgument.GFXTATemp">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureArgument.GFXTAConstant">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureArgument.GFXTA_COUNT">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureArgument.GFXTAComplement">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureArgument.GFXTAAlphaReplicate">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GFXTextureFilterType">
            <summary>
            R__GFXTextureFilterType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureFilterType.GFXTextureFilter_FIRST">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureFilterType.GFXTextureFilterNone">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureFilterType.GFXTextureFilterPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureFilterType.GFXTextureFilterLinear">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureFilterType.GFXTextureFilterAnisotropic">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureFilterType.GFXTextureFilterPyramidalQuad">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureFilterType.GFXTextureFilterGaussianQuad">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureFilterType.GFXTextureFilter_COUNT">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GFXTextureOp">
            <summary>
            R__GFXTextureOp
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOP_FIRST">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPDisable">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPSelectARG1">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPSelectARG2">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPModulate">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPModulate2X">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPModulate4X">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPAdd">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPAddSigned">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPAddSigned2X">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPSubtract">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPAddSmooth">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPBlendDiffuseAlpha">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPBlendTextureAlpha">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPBlendFactorAlpha">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPBlendTextureAlphaPM">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPBlendCURRENTALPHA">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPPreModulate">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPModulateAlphaAddColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPModulateColorAddAlpha">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPModulateInvAlphaAddColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPModulateInvColorAddAlpha">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPBumpEnvMap">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPBumpEnvMapLuminance">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPDotProduct3">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOPLERP">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureOp.GFXTOP_COUNT">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GFXTextureTransformFlags">
            <summary>
            R__GFXTextureTransformFlags
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureTransformFlags.GFXTTFFDisable">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureTransformFlags.GFXTTFFCoord1D">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureTransformFlags.GFXTTFFCoord2D">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureTransformFlags.GFXTTFFCoord3D">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureTransformFlags.GFXTTFFCoord4D">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GFXTextureTransformFlags.GFXTTFFProjected">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GizmoAlignment">
            <summary>
            R__GizmoAlignment
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GizmoAlignment.World">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GizmoAlignment.Object">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GizmoAlignment.AlignEnumCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GizmoMode">
            <summary>
            R__GizmoMode
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GizmoMode.NoneMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GizmoMode.MoveMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GizmoMode.RotateMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GizmoMode.ScaleMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GizmoMode.ModeEnumCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GuiAutoScrollCtrl__Direction">
            <summary>
            R__GuiAutoScrollCtrl__Direction
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiAutoScrollCtrl__Direction.Up">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiAutoScrollCtrl__Direction.Down">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiAutoScrollCtrl__Direction.Left">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiAutoScrollCtrl__Direction.Right">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GuiBitmapButtonCtrl__BitmapMode">
            <summary>
            R__GuiBitmapButtonCtrl__BitmapMode
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiBitmapButtonCtrl__BitmapMode.BitmapStretched">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiBitmapButtonCtrl__BitmapMode.BitmapCentered">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GuiButtonBaseCtrl__ButtonType">
            <summary>
            R__GuiButtonBaseCtrl__ButtonType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiButtonBaseCtrl__ButtonType.ButtonTypePush">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiButtonBaseCtrl__ButtonType.ButtonTypeCheck">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiButtonBaseCtrl__ButtonType.ButtonTypeRadio">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GuiColorPickerCtrl__PickMode">
            <summary>
            R__GuiColorPickerCtrl__PickMode
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiColorPickerCtrl__PickMode.pPallet">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiColorPickerCtrl__PickMode.pHorizColorRange">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiColorPickerCtrl__PickMode.pVertColorRange">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiColorPickerCtrl__PickMode.pHorizColorBrightnessRange">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiColorPickerCtrl__PickMode.pVertColorBrightnessRange">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiColorPickerCtrl__PickMode.pBlendColorRange">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiColorPickerCtrl__PickMode.pHorizAlphaRange">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiColorPickerCtrl__PickMode.pVertAlphaRange">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiColorPickerCtrl__PickMode.pDropperBackground">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GuiControl__horizSizingOptions">
            <summary>
            R__GuiControl__horizSizingOptions
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiControl__horizSizingOptions.horizResizeRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiControl__horizSizingOptions.horizResizeWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiControl__horizSizingOptions.horizResizeLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiControl__horizSizingOptions.horizResizeCenter">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiControl__horizSizingOptions.horizResizeRelative">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiControl__horizSizingOptions.horizResizeWindowRelative">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GuiControl__vertSizingOptions">
            <summary>
            R__GuiControl__vertSizingOptions
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiControl__vertSizingOptions.vertResizeBottom">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiControl__vertSizingOptions.vertResizeHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiControl__vertSizingOptions.vertResizeTop">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiControl__vertSizingOptions.vertResizeCenter">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiControl__vertSizingOptions.vertResizeRelative">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiControl__vertSizingOptions.vertResizeWindowRelative">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GuiControlProfile__AlignmentType">
            <summary>
            R__GuiControlProfile__AlignmentType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiControlProfile__AlignmentType.LeftJustify">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiControlProfile__AlignmentType.RightJustify">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiControlProfile__AlignmentType.CenterJustify">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiControlProfile__AlignmentType.TopJustify">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiControlProfile__AlignmentType.BottomJustify">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GuiFrameSetCtrl__FrameState">
            <summary>
            R__GuiFrameSetCtrl__FrameState
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiFrameSetCtrl__FrameState.FRAME_STATE_ON">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiFrameSetCtrl__FrameState.FRAME_STATE_OFF">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiFrameSetCtrl__FrameState.FRAME_STATE_AUTO">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiFrameSetCtrl__FrameState.NO_HIT">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiFrameSetCtrl__FrameState.DEFAULT_BORDER_WIDTH">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiFrameSetCtrl__FrameState.DEFAULT_COLUMNS">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiFrameSetCtrl__FrameState.DEFAULT_ROWS">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiFrameSetCtrl__FrameState.DEFAULT_MIN_FRAME_EXTENT">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GuiGradientCtrl__PickMode">
            <summary>
            R__GuiGradientCtrl__PickMode
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiGradientCtrl__PickMode.pHorizColorRange">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiGradientCtrl__PickMode.pHorizAlphaRange">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GuiGraphCtrl__GraphType">
            <summary>
            R__GuiGraphCtrl__GraphType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiGraphCtrl__GraphType.Point">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiGraphCtrl__GraphType.Polyline">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiGraphCtrl__GraphType.Filled">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiGraphCtrl__GraphType.Bar">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GuiIconButtonCtrl__IconLocation">
            <summary>
            R__GuiIconButtonCtrl__IconLocation
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiIconButtonCtrl__IconLocation.IconLocNone">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiIconButtonCtrl__IconLocation.IconLocLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiIconButtonCtrl__IconLocation.IconLocRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiIconButtonCtrl__IconLocation.IconLocCenter">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GuiIconButtonCtrl__TextLocation">
            <summary>
            R__GuiIconButtonCtrl__TextLocation
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiIconButtonCtrl__TextLocation.TextLocNone">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiIconButtonCtrl__TextLocation.TextLocBottom">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiIconButtonCtrl__TextLocation.TextLocRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiIconButtonCtrl__TextLocation.TextLocTop">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiIconButtonCtrl__TextLocation.TextLocLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiIconButtonCtrl__TextLocation.TextLocCenter">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GuiParticleGraphCtrl__GraphType">
            <summary>
            R__GuiParticleGraphCtrl__GraphType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiParticleGraphCtrl__GraphType.Point">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiParticleGraphCtrl__GraphType.Polyline">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiParticleGraphCtrl__GraphType.Filled">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiParticleGraphCtrl__GraphType.Bar">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GuiScrollCtrl__ScrollBarBehavior">
            <summary>
            R__GuiScrollCtrl__ScrollBarBehavior
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiScrollCtrl__ScrollBarBehavior.ScrollBarAlwaysOn">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiScrollCtrl__ScrollBarBehavior.ScrollBarAlwaysOff">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiScrollCtrl__ScrollBarBehavior.ScrollBarDynamic">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GuiSeparatorCtrl__separatorTypeOptions">
            <summary>
            R__GuiSeparatorCtrl__separatorTypeOptions
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiSeparatorCtrl__separatorTypeOptions.separatorTypeVertical">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiSeparatorCtrl__separatorTypeOptions.separatorTypeHorizontal">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GuiSplitContainer__FixedPanel">
            <summary>
            R__GuiSplitContainer__FixedPanel
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiSplitContainer__FixedPanel.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiSplitContainer__FixedPanel.FirstPanel">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiSplitContainer__FixedPanel.SecondPanel">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GuiSplitContainer__Orientation">
            <summary>
            R__GuiSplitContainer__Orientation
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiSplitContainer__Orientation.Vertical">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiSplitContainer__Orientation.Horizontal">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GuiStackControl__HorizontalType">
            <summary>
            R__GuiStackControl__HorizontalType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiStackControl__HorizontalType.horizStackLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiStackControl__HorizontalType.horizStackRight">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GuiStackControl__StackingType">
            <summary>
            R__GuiStackControl__StackingType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiStackControl__StackingType.stackingTypeVert">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiStackControl__StackingType.stackingTypeHoriz">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiStackControl__StackingType.stackingTypeDyn">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GuiStackControl__VerticalType">
            <summary>
            R__GuiStackControl__VerticalType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiStackControl__VerticalType.vertStackTop">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiStackControl__VerticalType.vertStackBottom">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GuiTabBookCtrl__TabPosition">
            <summary>
            R__GuiTabBookCtrl__TabPosition
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiTabBookCtrl__TabPosition.AlignTop">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiTabBookCtrl__TabPosition.AlignBottom">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiTabBookCtrl__TabPosition.AlignRight">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__GuiTSCtrl__RenderStyles">
            <summary>
            R__GuiTSCtrl__RenderStyles
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiTSCtrl__RenderStyles.RenderStyleStandard">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__GuiTSCtrl__RenderStyles.RenderStyleStereoSideBySide">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__Item__LightType">
            <summary>
            R__Item__LightType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Item__LightType.NoLight">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Item__LightType.ConstantLight">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Item__LightType.PulsingLight">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Item__LightType.NumLightTypes">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__Marker__KnotType">
            <summary>
            R__Marker__KnotType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Marker__KnotType.KnotTypeNormal">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Marker__KnotType.KnotTypePositionOnly">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Marker__KnotType.KnotTypeKink">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__Marker__SmoothingType">
            <summary>
            R__Marker__SmoothingType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Marker__SmoothingType.SmoothingTypeLinear">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Marker__SmoothingType.SmoothingTypeSpline">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Marker__SmoothingType.SmoothingTypeAccelerate">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__Material__AnimType">
            <summary>
            R__Material__AnimType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Material__AnimType.Scroll">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Material__AnimType.Rotate">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Material__AnimType.Wave">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Material__AnimType.Scale">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Material__AnimType.Sequence">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__Material__BlendOp">
            <summary>
            R__Material__BlendOp
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Material__BlendOp.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Material__BlendOp.Mul">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Material__BlendOp.Add">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Material__BlendOp.AddAlpha">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Material__BlendOp.Sub">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Material__BlendOp.LerpAlpha">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Material__BlendOp.ToneMap">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Material__BlendOp.NumBlendTypes">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__Material__WaveType">
            <summary>
            R__Material__WaveType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Material__WaveType.Sin">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Material__WaveType.Triangle">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Material__WaveType.Square">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__MBButtons">
            <summary>
            R__MBButtons
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__MBButtons.MBOk">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__MBButtons.MBOkCancel">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__MBButtons.MBRetryCancel">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__MBButtons.MBSaveDontSave">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__MBButtons.MBSaveDontSaveCancel">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__MBIcons">
            <summary>
            R__MBIcons
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__MBIcons.MIWarning">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__MBIcons.MIInformation">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__MBIcons.MIQuestion">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__MBIcons.MIStop">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__MBReturnVal">
            <summary>
            R__MBReturnVal
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__MBReturnVal.MROk">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__MBReturnVal.MRCancel">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__MBReturnVal.MRRetry">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__MBReturnVal.MRDontSave">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__NavMesh__WaterMethod">
            <summary>
            R__NavMesh__WaterMethod
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__NavMesh__WaterMethod.Ignore">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__NavMesh__WaterMethod.Solid">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__NavMesh__WaterMethod.Impassable">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__OggTheoraDecoder__ETranscoder">
            <summary>
            R__OggTheoraDecoder__ETranscoder
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__OggTheoraDecoder__ETranscoder.TRANSCODER_Auto">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__OggTheoraDecoder__ETranscoder.TRANSCODER_Generic">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__OggTheoraDecoder__ETranscoder.TRANSCODER_SSE2420RGBA">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__ParticleRenderInst__BlendStyle">
            <summary>
            R__ParticleRenderInst__BlendStyle
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ParticleRenderInst__BlendStyle.BlendUndefined">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ParticleRenderInst__BlendStyle.BlendNormal">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ParticleRenderInst__BlendStyle.BlendAdditive">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ParticleRenderInst__BlendStyle.BlendSubtractive">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ParticleRenderInst__BlendStyle.BlendPremultAlpha">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ParticleRenderInst__BlendStyle.BlendGreyscale">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ParticleRenderInst__BlendStyle.BlendStyle_COUNT">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__PFXRenderTime">
            <summary>
            R__PFXRenderTime
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__PFXRenderTime.PFXBeforeBin">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__PFXRenderTime.PFXAfterBin">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__PFXRenderTime.PFXAfterDiffuse">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__PFXRenderTime.PFXEndOfFrame">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__PFXRenderTime.PFXTexGenOnDemand">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__PFXTargetClear">
            <summary>
            R__PFXTargetClear
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__PFXTargetClear.PFXTargetClear_None">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__PFXTargetClear.PFXTargetClear_OnCreate">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__PFXTargetClear.PFXTargetClear_OnDraw">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__PFXTargetViewport">
            <summary>
            R__PFXTargetViewport
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__PFXTargetViewport.PFXTargetViewport_TargetSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__PFXTargetViewport.PFXTargetViewport_GFXViewport">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__PFXTargetViewport.PFXTargetViewport_NamedInTexture0">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__PhysicsShapeData__SimType">
            <summary>
            R__PhysicsShapeData__SimType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__PhysicsShapeData__SimType.SimType_ClientOnly">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__PhysicsShapeData__SimType.SimType_ServerOnly">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__PhysicsShapeData__SimType.SimType_ClientServer">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__PhysicsShapeData__SimType.SimType_Bits">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__Player__Pose">
            <summary>
            R__Player__Pose
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Player__Pose.StandPose">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Player__Pose.SprintPose">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Player__Pose.CrouchPose">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Player__Pose.PronePose">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Player__Pose.SwimPose">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__Player__Pose.NumPoseBits">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__RenderTexTargetBinManager__TargetSizeType">
            <summary>
            R__RenderTexTargetBinManager__TargetSizeType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__RenderTexTargetBinManager__TargetSizeType.WindowSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__RenderTexTargetBinManager__TargetSizeType.WindowSizeScaled">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__RenderTexTargetBinManager__TargetSizeType.FixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__SFXChannel">
            <summary>
            R__SFXChannel
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFXChannelVolume">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFXChannelPitch">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFXChannelPriority">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFXChannelPositionX">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFXChannelPositionY">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFXChannelPositionZ">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFXChannelRotationX">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFXChannelRotationY">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFXChannelRotationZ">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFXChannelVelocityX">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFXChannelVelocityY">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFXChannelVelocityZ">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFXChannelMinDistance">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFXChannelMaxDistance">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFXChannelConeInsideAngle">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFXChannelConeOutsideAngle">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFXChannelConeOutsideVolume">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFXChannelCursor">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFXChannelStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFXChannelUser0">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFXChannelUser1">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFXChannelUser2">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFXChannelUser3">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXChannel.SFX_NUM_CHANNELS">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__SFXDistanceModel">
            <summary>
            R__SFXDistanceModel
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXDistanceModel.SFXDistanceModelLinear">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXDistanceModel.SFXDistanceModelLogarithmic">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__SFXPlayList__ELoopMode">
            <summary>
            R__SFXPlayList__ELoopMode
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXPlayList__ELoopMode.LOOP_All">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXPlayList__ELoopMode.LOOP_Single">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__SFXPlayList__ERandomMode">
            <summary>
            R__SFXPlayList__ERandomMode
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXPlayList__ERandomMode.RANDOM_NotRandom">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXPlayList__ERandomMode.RANDOM_StrictRandom">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXPlayList__ERandomMode.RANDOM_OrderedRandom">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__SFXPlayList__EReplayMode">
            <summary>
            R__SFXPlayList__EReplayMode
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXPlayList__EReplayMode.REPLAY_IgnorePlaying">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXPlayList__EReplayMode.REPLAY_RestartPlaying">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXPlayList__EReplayMode.REPLAY_KeepPlaying">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXPlayList__EReplayMode.REPLAY_StartNew">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXPlayList__EReplayMode.REPLAY_SkipIfPlaying">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__SFXPlayList__EStateMode">
            <summary>
            R__SFXPlayList__EStateMode
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXPlayList__EStateMode.STATE_StopInactive">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXPlayList__EStateMode.STATE_PauseInactive">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXPlayList__EStateMode.STATE_IgnoreInactive">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__SFXPlayList__ETransitionMode">
            <summary>
            R__SFXPlayList__ETransitionMode
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXPlayList__ETransitionMode.TRANSITION_None">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXPlayList__ETransitionMode.TRANSITION_Wait">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXPlayList__ETransitionMode.TRANSITION_WaitAll">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXPlayList__ETransitionMode.TRANSITION_Stop">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXPlayList__ETransitionMode.TRANSITION_StopAll">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__SFXStatus">
            <summary>
            R__SFXStatus
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXStatus.SFXStatusNull">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXStatus.SFXStatusPlaying">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXStatus.SFXStatusStopped">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXStatus.SFXStatusPaused">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXStatus.SFXStatusBlocked">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__SFXStatus.SFXStatusTransition">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__ShadowFilterMode">
            <summary>
            R__ShadowFilterMode
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShadowFilterMode.ShadowFilterMode_None">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShadowFilterMode.ShadowFilterMode_SoftShadow">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShadowFilterMode.ShadowFilterMode_SoftShadowHighQuality">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__ShadowType">
            <summary>
            R__ShadowType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShadowType.ShadowType_None">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShadowType.ShadowType_Spot">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShadowType.ShadowType_PSSM">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShadowType.ShadowType_Paraboloid">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShadowType.ShadowType_DualParaboloidSinglePass">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShadowType.ShadowType_DualParaboloid">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShadowType.ShadowType_CubeMap">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShadowType.ShadowType_Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__LightType">
            <summary>
            R__ShapeBaseImageData__LightType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__LightType.NoLight">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__LightType.ConstantLight">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__LightType.SpotLight">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__LightType.PulsingLight">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__LightType.WeaponFireLight">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__LightType.NumLightTypes">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__StateData__LoadedState">
            <summary>
            R__ShapeBaseImageData__StateData__LoadedState
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__StateData__LoadedState.IgnoreLoaded">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__StateData__LoadedState.Loaded">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__StateData__LoadedState.NotLoaded">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__StateData__LoadedState.NumLoadedBits">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__StateData__RecoilState">
            <summary>
            R__ShapeBaseImageData__StateData__RecoilState
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__StateData__RecoilState.NoRecoil">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__StateData__RecoilState.LightRecoil">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__StateData__RecoilState.MediumRecoil">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__StateData__RecoilState.HeavyRecoil">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__StateData__RecoilState.NumRecoilBits">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__StateData__SpinState">
            <summary>
            R__ShapeBaseImageData__StateData__SpinState
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__StateData__SpinState.IgnoreSpin">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__StateData__SpinState.NoSpin">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__StateData__SpinState.SpinUp">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__StateData__SpinState.SpinDown">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__StateData__SpinState.FullSpin">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__ShapeBaseImageData__StateData__SpinState.NumSpinBits">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__TSPathShape__MoveState">
            <summary>
            R__TSPathShape__MoveState
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__TSPathShape__MoveState.Forward">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__TSPathShape__MoveState.Backward">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__TSPathShape__MoveState.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__TSStatic__MeshType">
            <summary>
            R__TSStatic__MeshType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__TSStatic__MeshType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__TSStatic__MeshType.Bounds">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__TSStatic__MeshType.CollisionMesh">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__TSStatic__MeshType.VisibleMesh">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__TurretShapeData__FireLinkType">
            <summary>
            R__TurretShapeData__FireLinkType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__TurretShapeData__FireLinkType.FireTogether">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__TurretShapeData__FireLinkType.GroupedFire">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__TurretShapeData__FireLinkType.IndividualFire">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__TurretShapeData__FireLinkType.NumFireLinkTypeBits">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__WorldEditor__AlignmentType">
            <summary>
            R__WorldEditor__AlignmentType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__WorldEditor__AlignmentType.AlignNone">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__WorldEditor__AlignmentType.AlignPosX">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__WorldEditor__AlignmentType.AlignPosY">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__WorldEditor__AlignmentType.AlignPosZ">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__WorldEditor__AlignmentType.AlignNegX">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__WorldEditor__AlignmentType.AlignNegY">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__WorldEditor__AlignmentType.AlignNegZ">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.R__WorldEditor__DropType">
            <summary>
            R__WorldEditor__DropType
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__WorldEditor__DropType.DropAtOrigin">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__WorldEditor__DropType.DropAtCamera">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__WorldEditor__DropType.DropAtCameraWithRot">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__WorldEditor__DropType.DropBelowCamera">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__WorldEditor__DropType.DropAtScreenCenter">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__WorldEditor__DropType.DropAtCentroid">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__WorldEditor__DropType.DropToTerrain">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.R__WorldEditor__DropType.DropBelowSelection">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeCameraMotionMode">
            <summary>
            TypeCameraMotionMode
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Interfaces.iEnum">
            <summary>
            Class used for custom interface to custom enumerations.
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeCoverPointSize">
            <summary>
            TypeCoverPointSize
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeForestBrushMode">
            <summary>
            TypeForestBrushMode
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGFXAdapterType">
            <summary>
            TypeGFXAdapterType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGFXBlend">
            <summary>
            TypeGFXBlend
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGFXBlendOp">
            <summary>
            TypeGFXBlendOp
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGFXCmpFunc">
            <summary>
            TypeGFXCmpFunc
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGFXCullMode">
            <summary>
            TypeGFXCullMode
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGFXFormat">
            <summary>
            TypeGFXFormat
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGFXStencilOp">
            <summary>
            TypeGFXStencilOp
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGFXTextureAddressMode">
            <summary>
            TypeGFXTextureAddressMode
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGFXTextureArgument">
            <summary>
            TypeGFXTextureArgument
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGFXTextureFilterType">
            <summary>
            TypeGFXTextureFilterType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGFXTextureOp">
            <summary>
            TypeGFXTextureOp
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGFXTextureTransformFlags">
            <summary>
            TypeGFXTextureTransformFlags
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGizmoAlignment">
            <summary>
            TypeGizmoAlignment
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGizmoMode">
            <summary>
            TypeGizmoMode
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiAlignmentType">
            <summary>
            TypeGuiAlignmentType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiAutoScrollDirection">
            <summary>
            TypeGuiAutoScrollDirection
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiBitmapMode">
            <summary>
            TypeGuiBitmapMode
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiButtonType">
            <summary>
            TypeGuiButtonType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiColorPickMode">
            <summary>
            TypeGuiColorPickMode
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiDockingType">
            <summary>
            TypeGuiDockingType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiFontCharset">
            <summary>
            TypeGuiFontCharset
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiFrameState">
            <summary>
            TypeGuiFrameState
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiGradientPickMode">
            <summary>
            TypeGuiGradientPickMode
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiGraphType">
            <summary>
            TypeGuiGraphType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiHorizontalSizing">
            <summary>
            TypeGuiHorizontalSizing
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiHorizontalStackingType">
            <summary>
            TypeGuiHorizontalStackingType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiIconButtonIconLocation">
            <summary>
            TypeGuiIconButtonIconLocation
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiIconButtonTextLocation">
            <summary>
            TypeGuiIconButtonTextLocation
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiParticleGraphType">
            <summary>
            TypeGuiParticleGraphType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiScrollBarBehavior">
            <summary>
            TypeGuiScrollBarBehavior
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiSeparatorType">
            <summary>
            TypeGuiSeparatorType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiSplitFixedPanel">
            <summary>
            TypeGuiSplitFixedPanel
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiSplitOrientation">
            <summary>
            TypeGuiSplitOrientation
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiStackingType">
            <summary>
            TypeGuiStackingType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiTabPosition">
            <summary>
            TypeGuiTabPosition
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiTheoraTranscoder">
            <summary>
            TypeGuiTheoraTranscoder
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiTSRenderStyles">
            <summary>
            TypeGuiTSRenderStyles
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiVerticalSizing">
            <summary>
            TypeGuiVerticalSizing
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeGuiVerticalStackingType">
            <summary>
            TypeGuiVerticalStackingType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeItemLightType">
            <summary>
            TypeItemLightType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeLogLevel">
            <summary>
            TypeLogLevel
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeMarkerKnotType">
            <summary>
            TypeMarkerKnotType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeMarkerSmoothingType">
            <summary>
            TypeMarkerSmoothingType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeMaterialAnimType">
            <summary>
            TypeMaterialAnimType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeMaterialBlendOp">
            <summary>
            TypeMaterialBlendOp
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeMaterialWaveType">
            <summary>
            TypeMaterialWaveType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeMBButtons">
            <summary>
            TypeMBButtons
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeMBIcons">
            <summary>
            TypeMBIcons
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeMBReturnVal">
            <summary>
            TypeMBReturnVal
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeNavMeshWaterMethod">
            <summary>
            TypeNavMeshWaterMethod
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeParticleBlendStyle">
            <summary>
            TypeParticleBlendStyle
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypePathShapeState">
            <summary>
            TypePathShapeState
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypePFXRenderTime">
            <summary>
            TypePFXRenderTime
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypePFXTargetClear">
            <summary>
            TypePFXTargetClear
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypePFXTargetViewport">
            <summary>
            TypePFXTargetViewport
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypePhysicsSimType">
            <summary>
            TypePhysicsSimType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypePlayerPose">
            <summary>
            TypePlayerPose
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeRenderTexTargetSize">
            <summary>
            TypeRenderTexTargetSize
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeSFXChannel">
            <summary>
            TypeSFXChannel
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeSFXDistanceModel">
            <summary>
            TypeSFXDistanceModel
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeSFXPlayListLoopMode">
            <summary>
            TypeSFXPlayListLoopMode
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeSFXPlayListRandomMode">
            <summary>
            TypeSFXPlayListRandomMode
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeSFXPlayListReplayMode">
            <summary>
            TypeSFXPlayListReplayMode
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeSFXPlayListStateMode">
            <summary>
            TypeSFXPlayListStateMode
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeSFXPlayListTransitionMode">
            <summary>
            TypeSFXPlayListTransitionMode
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeSFXStatus">
            <summary>
            TypeSFXStatus
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeShadowFilterMode">
            <summary>
            TypeShadowFilterMode
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeShadowType">
            <summary>
            TypeShadowType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeShapeBaseImageLightType">
            <summary>
            TypeShapeBaseImageLightType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeShapeBaseImageLoadedState">
            <summary>
            TypeShapeBaseImageLoadedState
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeShapeBaseImageRecoilState">
            <summary>
            TypeShapeBaseImageRecoilState
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeShapeBaseImageSpinState">
            <summary>
            TypeShapeBaseImageSpinState
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeTSMeshType">
            <summary>
            TypeTSMeshType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeTSShapeConstructorLodType">
            <summary>
            TypeTSShapeConstructorLodType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeTSShapeConstructorUpAxis">
            <summary>
            TypeTSShapeConstructorUpAxis
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeTurretShapeFireLinkType">
            <summary>
            TypeTurretShapeFireLinkType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeWorldEditorAlignmentType">
            <summary>
            TypeWorldEditorAlignmentType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.TypeWorldEditorDropType">
            <summary>
            TypeWorldEditorDropType
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Classes.View.Creators.ObjectCreator">
            <summary>
            This is a helper class to attempt to clean up the code
            when creating a object inside of torque.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.View.Creators.ObjectCreator.#ctor(System.String,System.String,System.Type)">
            <summary>
              Creates an object to template a torquescript class with.
            </summary>
            <param name="className"> The name of the object type </param>
            <param name="instanceName"> The name of this instance of the object </param>
            <param name="model">The C# proxy class to use for this singleton(Optional)</param>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.View.Creators.ObjectCreator.ToString">
            <summary>
              This will return the TorqueScript code that will be executed when Create is called.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Classes.View.Creators.ObjectCreator.Create">
            <summary>
              Passes the ToString() TorqueScript to the Eval statement capturing the id of the object created
            </summary>
            <returns> </returns>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint">
            <summary>
            The Scene Object type flags.
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.DefaultObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.StaticObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.EnvironmentObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.TerrainObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.WaterObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.TriggerObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.MarkerObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.LightObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.ZoneObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.StaticShapeObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.DynamicShapeObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.GameBaseObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.GameBaseHiFiObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.ShapeBaseObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.CameraObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.PlayerObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.ItemObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.VehicleObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.VehicleBlockerObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.ProjectileObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.ExplosionObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.CorpseObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.DebrisObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.PhysicalZoneObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.Flag24">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.Flag25">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.Flag26">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.Flag27">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.Flag28">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.Flag29">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.Flag30">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsUint.Flag31">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt">
            <summary>
            The Scene Object type flags.
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.DefaultObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.StaticObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.EnvironmentObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.TerrainObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.WaterObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.TriggerObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.MarkerObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.LightObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.ZoneObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.StaticShapeObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.DynamicShapeObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.GameBaseObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.GameBaseHiFiObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.ShapeBaseObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.CameraObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.PlayerObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.ItemObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.VehicleObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.VehicleBlockerObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.ProjectileObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.ExplosionObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.CorpseObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.DebrisObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.PhysicalZoneObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.Flag24">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.Flag25">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.Flag26">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.Flag27">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.Flag28">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.Flag29">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.Flag30">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Enums.SceneObjectTypesAsInt.Flag31">
            <summary>
            
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Omni">
            <summary>
            Core Controller Class.  This class provides all the binding between the Models (C#) and the Views C++
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Omni.SimDictSize">
            <summary>
                The max number of proxy items allowed.
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Omni._mSelf">
            <summary>
                Static reference to itself.
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Omni._mDll">
            <summary>
                The name of the T3D dll.
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Omni._mStop">
            <summary>
                Flag to stop dnTorque
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Omni._mCmdParams">
            <summary>
                Paramets for the T3D dll.
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Omni.MCustomClassDef">
            <summary>
                Class Name, class info.
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Omni.MObjectCreateDefs">
            <summary>
                Dictionary of constructors for creating new T3D objects.
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Omni._mLocalhandleRegisterSimObjectCallback">
            <summary>
                Callback used by T3D to call back to the C# when a new simobject is registered with the simDictionary
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Omni._mLocalhandleWleEngineCallBack">
            <summary>
                Callback used by T3D to call back to the C# when a object needs to call a member function.
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Omni._mWLE_ExportVariablesAsSettings">
            <summary>
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Omni._mWLE_GlobalFunctionCallBack">
            <summary>
                Callback used by T3D to call back to the C# when a global function call occurs
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Omni._mAvailable">
            <summary>
                A queue used to track available slots in the array used to map T3D simobjects to tsObjects.
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Omni._mGlobalFuncts">
            <summary>
                A dictionary of all static functions in this project prefixed with "event_"
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Omni._mhinstance">
            <summary>
                Handle to the window
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Omni._msimdict">
            <summary>
                A array which tracks all the proxy objects for the T3D objects.
            </summary>
        </member>
        <member name="F:WinterLeaf.Engine.Omni._tick">
            <summary>
                Object used for locking the T3D dll.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.#ctor(System.IntPtr)">
            <summary>
            Default constructor.
            </summary>
            <param name="hinstance">Window Handle for harness application</param>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.getSimObject(System.UInt32,System.Type)">
            <summary>
                Fetches a proxy from the proxy array.
            </summary>
            <param name="simobjectid"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.IndexAssembly(System.Reflection.Assembly)">
            <summary>
            This function reads the passed in Assembly and parses all of the Omni Decorations out and makes them available in the engine.
            Used mainly for internal purposes.
            </summary>
            <param name="mAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.Stop">
            <summary>
                Stops T3D
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.Initialize(System.String[],System.String,System.String,System.String,System.String)">
            <summary>
                Starts the T3D dll.
            </summary>
            <param name="cmdParams"></param>
            <param name="dllName"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.DeIndexClass(WinterLeaf.Engine.Classes.Helpers.IndexingResult)">
            <summary>
            Removes all linkage from the OMNI Framework for the passed in Assembly.
            </summary>
            <param name="iResult"></param>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.StopEngine">
            <summary>
            Shuts down the Engine.
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn__aiConnect(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            (aiConnect, S32 , 2, 20, (...)
               @brief Creates a new AIConnection, and passes arguments to its onConnect script callback.
               @returns The newly created AIConnection
               @see GameConnection for parameter information
               @ingroup AI)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn__buildTaggedString(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( buildTaggedString, const char*, 2, 11, (string format, ...)
               @brief Build a string using the specified tagged string format.
            
               This function takes an already tagged string (passed in as a tagged string ID) and one 
               or more additional strings.  If the tagged string contains argument tags that range from 
               %%1 through %%9, then each additional string will be substituted into the tagged string.  
               The final (non-tagged) combined string will be returned.  The maximum length of the tagged 
               string plus any inserted additional strings is 511 characters.
            
               @param format A tagged string ID that contains zero or more argument tags, in the form of 
               %%1 through %%9.
               @param ... A variable number of arguments that are insterted into the tagged string 
               based on the argument tags within the format string.
            
               @returns An ordinary string that is a combination of the original tagged string with any additional 
               strings passed in inserted in place of each argument tag.
            
               @tsexample
                  // Create a tagged string with argument tags
                  %taggedStringID = addTaggedString(\"Welcome %1 to the game!\");
            
                  // Some point later, combine the tagged string with some other string
                  %string = buildTaggedString(%taggedStringID, %playerName);
                  echo(%string);
            	@endtsexample
            
               @see \\ref syntaxDataTypes under Tagged %Strings
               @see addTaggedString()
               @see getTaggedString()
               @ingroup Networking)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn__call(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( call, const char *, 2, 0, ( string functionName, string args... ) 
               Apply the given arguments to the specified global function and return the result of the call.
               @param functionName The name of the function to call.  This function must be in the global namespace, i.e. 
                  you cannot call a function in a namespace through #call.  Use eval() for that.
               @return The result of the function call.
               @tsexample
                  function myFunction( %arg )
                  {
                    return ( %arg SPC \"World!\" );
                  }
                  
                  echo( call( \"myFunction\", \"Hello\" ) ); // Prints \"Hello World!\" to the console.
               @endtsexample
               @ingroup Scripting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn__commandToClient(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( commandToClient, void, 3, 22, (NetConnection client, string func, ...)
               @brief Send a command from the server to the client
            
               @param client The numeric ID of a client GameConnection
               @param func Name of the client function being called
               @param ... Various parameters being passed to client command
            
               @tsexample
                  // Set up the client command.  Needs to be executed on the client, such as
                  // within scripts/client/client.cs
                  // Update the Ammo Counter with current ammo, if not any then hide the counter.
                  function clientCmdSetAmmoAmountHud(%amount)
                  {
                     if (!%amount)
                  	  AmmoAmount.setVisible(false);
                     else
                     {
                  	  AmmoAmount.setVisible(true);
                  	  AmmoAmount.setText(\"Ammo: \"@%amount);
                     }
                  }
                  // Call it from a server function.  Needs to be executed on the server, 
                  //such as within scripts/server/game.cs
                  function GameConnection::setAmmoAmountHud(%client, %amount)
                  {
                     commandToClient(%client, 'SetAmmoAmountHud', %amount);
                  }
               @endtsexample
            
               @ingroup Networking)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn__commandToServer(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( commandToServer, void, 2, 21, (string func, ...)
            	@brief Send a command to the server.
            
               @param func Name of the server command being called
               @param ... Various parameters being passed to server command
            
               @tsexample
                  // Create a standard function.  Needs to be executed on the client, such 
                  // as within scripts/client/default.bind.cs
                  function toggleCamera(%val)
                  {
                  	// If key was down, call a server command named 'ToggleCamera'
                  	if (%val)
                  		commandToServer('ToggleCamera');
                  }
                  // Server command being called from above.  Needs to be executed on the 
                  // server, such as within scripts/server/commands.cs
                  function serverCmdToggleCamera(%client)
                  {
                     if (%client.getControlObject() == %client.player)
                     {
                  	  %client.camera.setVelocity(\"0 0 0\");
                  	  %control = %client.camera;
                     }
                     else
                     {
                  	  %client.player.setVelocity(\"0 0 0\");
                  	  %control = %client.player;
                    }
                     %client.setControlObject(%control);
                     clientCmdSyncEditorGui();
                  }
               @endtsexample
            
               @ingroup Networking)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn__echo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( echo, void, 2, 0, ( string message... ) 
               @brief Logs a message to the console.
               Concatenates all given arguments to a single string and prints the string to the console. 
               A newline is added automatically after the text.
               @param message Any number of string arguments.
               @ingroup Logging )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn__error(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( error, void, 2, 0, ( string message... ) 
               @brief Logs an error message to the console.
               Concatenates all given arguments to a single string and prints the string to the console as an error 
               message (in the in-game console, these will show up using a red font by default). 
               A newline is added automatically after the text.
               @param message Any number of string arguments.
               @ingroup Logging )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn__execPrefs(System.String,System.String,System.String)">
            <summary>
            ( execPrefs, bool, 2, 4, ( string relativeFileName, bool noCalls=false, bool journalScript=false )
            				@brief Manually execute a special script file that contains game or editor preferences
            				@param relativeFileName Name and path to file from project folder
            				@param noCalls Deprecated
            				@param journalScript Deprecated
            				@return True if script was successfully executed
            				@note Appears to be useless in Torque 3D, should be deprecated
            				@ingroup Scripting)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn__expandFilename(System.String)">
            <summary>
            (expandFilename, const char*, 2, 2, (string filename)
            				@brief Grabs the full path of a specified file
            				@param filename Name of the local file to locate
            				@return String containing the full filepath on disk
            				@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn__expandOldFilename(System.String)">
            <summary>
            (expandOldFilename, const char*, 2, 2, (string filename)
            				@brief Retrofits a filepath that uses old Torque style
            				@return String containing filepath with new formatting
            				@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn__getStockColorCount">
            <summary>
            ( getStockColorCount, S32, 1, 1, () - Gets a count of available stock colors.
               @return A count of available stock colors. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn__getStockColorF(System.String)">
            <summary>
            ( getStockColorF, const char*, 2, 2, (stockColorName) - Gets a floating-point-based stock color by name.
               @param stockColorName - The stock color name to retrieve.
               @return The stock color that matches the specified color name.  Returns nothing if the color name is not found. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn__getStockColorI(System.String)">
            <summary>
            ( getStockColorI, const char*, 2, 2, (stockColorName) - Gets a byte-based stock color by name.
               @param stockColorName - The stock color name to retrieve.
               @return The stock color that matches the specified color name.  Returns nothing if the color name is not found. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn__getStockColorName(System.String)">
            <summary>
            ( getStockColorName, const char*, 2, 2,  (stockColorIndex) - Gets the stock color name at the specified index.
               @param stockColorIndex The zero-based index of the stock color name to retrieve.
               @return The stock color name at the specified index or nothing if the string is invalid. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn__isStockColor(System.String)">
            <summary>
            ( isStockColor, bool, 2, 2,  (stockColorName) - Gets whether the specified name is a stock color or not.
               @param stockColorName - The stock color name to test for.
               @return Whether the specified name is a stock color or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn__mathInit(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( mathInit, void, 1, 10, ( ... )
                            @brief Install the math library with specified extensions.
                            Possible parameters are:
                                - 'DETECT' Autodetect math lib settings.
                                - 'C' Enable the C math routines. C routines are always enabled.
                                - 'FPU' Enable floating point unit routines.
                                - 'MMX' Enable MMX math routines.
                                - '3DNOW' Enable 3dNow! math routines.
                                - 'SSE' Enable SSE math routines.
            				@ingroup Math)
            
            
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn__resourceDump">
            <summary>
            (resourceDump, void, 1, 1, ()
            				@brief List the currently managed resources
            				Currently used by editors only, internal
            				@ingroup Editors
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn__schedule(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            (schedule, S32, 4, 0, schedule(time, refobject|0, command, arg1...argN>))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn__TestFunction2Args(System.String,System.String)">
            <summary>
            (TestFunction2Args, const char *, 3, 3, testFunction(arg1, arg2))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn__warn(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( warn, void, 2, 0, ( string message... ) 
               @brief Logs a warning message to the console.
               Concatenates all given arguments to a single string and prints the string to the console as a warning 
               message (in the in-game console, these will show up using a turquoise font by default). 
               A newline is added automatically after the text.
               @param message Any number of string arguments.
               @ingroup Logging )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_activateDirectInput">
            <summary>
            ()
                        @brief Activates DirectInput.
                        Also activates any connected joysticks.
            			@ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_activatePackage(System.String)">
            <summary>
            @brief Activates an existing package.
               The activation occurs by updating the namespace linkage of existing functions and methods. 
               If the package is already activated the function does nothing.
               @ingroup Packages)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_addBadWord(System.String)">
            <summary>
            @brief Add a string to the bad word filter
            
               The bad word filter is a table containing words which will not be 
               displayed in chat windows. Instead, a designated replacement string will be displayed.  
               There are already a number of bad words automatically defined.
            
               @param badWord Exact text of the word to restrict.
               @return True if word was successfully added, false if the word or a subset of it already exists in the table
            
               @see filterString()
            
               @tsexample
                  // In this game, \"Foobar\" is banned
                  %badWord = \"Foobar\";
                  // Returns true, word was successfully added
                  addBadWord(%badWord);
                  // Returns false, word has already been added
                  addBadWord(\"Foobar\");
               @endtsexample
            
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_addGlobalShaderMacro(System.String,System.String)">
            <summary>
            Adds a global shader macro which will be merged with the script defined 
               macros on every shader.  The macro will replace the value of an existing 
               macro of the same name.  For the new macro to take effect all the shaders 
               in the system need to be reloaded.
               @see resetLightManager, removeGlobalShaderMacro
               @ingroup Rendering )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_addMaterialMapping(System.String,System.String)">
            <summary>
            (string texName, string matName)
               @brief Maps the given texture to the given material.
               Generates a console warning before overwriting.
               Material maps are used by terrain and interiors for triggering 
               effects when an object moves onto a terrain 
               block or interior surface using the associated texture.
               @ingroup Materials)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_addTaggedString(System.String)">
            <summary>
            ),
               @brief Use the addTaggedString function to tag a new string and add it to the NetStringTable
            
               @param str The string to be tagged and placed in the NetStringTable. Tagging ignores case, 
               so tagging the same string (excluding case differences) will be ignored as a duplicated tag.
            
               @return Returns a string( containing a numeric value) equivalent to the string ID for the newly tagged string
            
               @see \\ref syntaxDataTypes under Tagged %Strings
               @see removeTaggedString()
               @see getTaggedString()
               @ingroup Networking)
            	
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_aiAddPlayer(System.String,System.String)">
            <summary>
            ), 'playerName'[, 'AIClassType'] );)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_AIClient_getAimLocation(System.String)">
            <summary>
            ai.getAimLocation(); ) 
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_AIClient_getLocation(System.String)">
            <summary>
            ai.getLocation(); ) 
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_AIClient_getMoveDestination(System.String)">
            <summary>
            ai.getMoveDestination(); ) 
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_AIClient_getTargetObject(System.String)">
            <summary>
            ai.getTargetObject(); ) 
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_AIClient_missionCycleCleanup(System.String)">
            <summary>
            ai.missionCycleCleanup(); ) 
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_AIClient_move(System.String)">
            <summary>
            ai.move(); ) 
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_AIClient_moveForward(System.String)">
            <summary>
            ai.moveForward(); ) 
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_AIClient_setAimLocation(System.String,System.String)">
            <summary>
            ai.setAimLocation( x y z ); ) 
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_AIClient_setMoveDestination(System.String,System.String)">
            <summary>
            ai.setMoveDestination( x y z ); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_AIClient_setMoveSpeed(System.String,System.Single)">
            <summary>
            ai.setMoveSpeed( float ); ) 
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_AIClient_setTargetObject(System.String,System.String)">
            <summary>
            ai.setTargetObject( obj ); ) 
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_AIClient_stop(System.String)">
            <summary>
            ai.stop(); ) 
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_AIConnection_getAddress(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_AIConnection_getFreeLook(System.String)">
            <summary>
            getFreeLook()
                          Is freelook on for the current move?)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_AIConnection_getMove(System.String,System.String)">
            <summary>
            (string field)
                          Get the given field of a move.
                          @param field One of {'x','y','z','yaw','pitch','roll'}
                          @returns The requested field on the current move.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_AIConnection_getTrigger(System.String,System.Int32)">
            <summary>
            (int trigger)
                          Is the given trigger set?)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_AIConnection_setFreeLook(System.String,System.Boolean)">
            <summary>
            (bool isFreeLook)
                          Enable/disable freelook on the current move.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_AIConnection_setMove(System.String,System.String,System.Single)">
            <summary>
            (string field, float value)
                          Set a field on the current move.
                          @param   field One of {'x','y','z','yaw','pitch','roll'}
                          @param   value Value to set field to.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_AIConnection_setTrigger(System.String,System.Int32,System.Boolean)">
            <summary>
            (int trigger, bool set)
                          Set a trigger.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_AIPlayer_setAimObject(System.String,System.String,System.String)">
            <summary>
            ( GameBase obj, [Point3F offset] )
                          Sets the bot's target object. Optionally set an offset from target location.
            			  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_allowConnections(System.Boolean)">
            <summary>
            allowConnections(bool allow)
               @brief Sets whether or not the global NetInterface allows connections from remote hosts.
            
               @param allow Set to true to allow remote connections.
            
               @ingroup Networking)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_backtrace">
            <summary>
            @brief Prints the scripting call stack to the console log.
               Used to trace functions called from within functions. Can help discover what functions were called 
               (and not yet exited) before the current point in scripts.
               @ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_beginSampling(System.String,System.String)">
            <summary>
            CSV), (location, [backend]) -
            				@brief Takes a string informing the backend where to store 
            				sample data and optionally a name of the specific logging 
            				backend to use.  The default is the CSV backend. In most 
            				cases, the logging store will be a file name.
            				@tsexample
            				beginSampling( \"mysamples.csv\" );
            				@endtsexample
            				@ingroup Rendering)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_calcExplosionCoverage(System.String,System.Int32,System.UInt32)">
            <summary>
            @brief Calculates how much an explosion effects a specific object.
               Use this to determine how much damage to apply to objects based on their 
               distance from the explosion's center point, and whether the explosion is 
               blocked by other objects.
               @param pos Center position of the explosion.
               @param id Id of the object of which to check coverage.
               @param covMask Mask of object types that may block the explosion.
               @return Coverage value from 0 (not affected by the explosion) to 1 (fully affected)
               @tsexample
               // Get the position of the explosion.
               %position = %explosion.getPosition();
               // Set a list of TypeMasks (defined in gameFunctioncs.cpp), seperated by the | character.
               %TypeMasks = $TypeMasks::StaticObjectType | $TypeMasks::ItemObjectType
               // Acquire the damage value from 0.0f - 1.0f.
               %coverage = calcExplosionCoverage( %position, %sceneObject, %TypeMasks );
               // Apply damage to object 
               %sceneObject.applyDamage( %coverage * 20 );
               @endtsexample
               @ingroup FX)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_cancel(System.Int32)">
            <summary>
            cancel(eventId))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_cancelAll(System.String)">
            <summary>
            cancelAll(objectId): cancel pending events on the specified object.  Events will be automatically cancelled if object is deleted.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_cancelServerQuery">
            <summary>
            cancelServerQuery(...); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_cleanupTexturePool">
            <summary>
            Release the unused pooled textures in texture manager freeing up video memory.
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_clearClientPaths">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_clearGFXResourceFlags">
            <summary>
            Clears the flagged state on all allocated GFX resources. 
               See flagCurrentGFXResources for usage details.
               @ingroup GFX
               @see flagCurrentGFXResources, listGFXResources, describeGFXResources )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_clearServerPaths">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_CloseAllPopOuts">
            <summary>
            ()
            	Returns all pop'd out windows to the main canvas.
            	)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_closeNetPort">
            <summary>
            () 
               @brief Closes the current network port
               @ingroup Networking)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_closeSplashWindow">
            <summary>
            Close our startup splash window.
               @note This is currently only implemented on Windows.
               @ingroup Platform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_collapseEscape(System.String)">
            <summary>
            Replace all escape sequences in @a text with their respective character codes.
               This function replaces all escape sequences (\\\, \\\\t, etc) in the given string 
               with the respective characters they represent.
               The primary use of this function is for converting strings from their literal form into 
               their compiled/translated form, as is normally done by the TorqueScript compiler.
               @param text A string.
               @return A duplicate of @a text with all escape sequences replaced by their respective character codes.
               @tsexample
                  // Print:
                  //
                  //    str
                  //    ing
                  //
                  // to the console.  Note how the backslash in the string must be escaped here
                  // in order to prevent the TorqueScript compiler from collapsing the escape
                  // sequence in the resulting string.
                  echo( collapseEscape( \"str\ing\" ) );
               @endtsexample
               @see expandEscape
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_compile(System.String,System.Boolean)">
            <summary>
            Compile a file to bytecode.
               This function will read the TorqueScript code in the specified file, compile it to internal bytecode, and, 
               if DSO generation is enabled or @a overrideNoDDSO is true, will store the compiled code in a .dso file 
               in the current DSO path mirrorring the path of @a fileName.
               @param fileName Path to the file to compile to bytecode.
               @param overrideNoDSO If true, force generation of DSOs even if the engine is compiled to not 
                  generate write compiled code to DSO files.
               @return True if the file was successfully compiled, false if not.
               @note The definitions contained in the given file will not be made available and no code will actually 
                  be executed.  Use exec() for that.
               @see getDSOPath
               @see exec
               @ingroup Scripting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_CompoundUndoAction_addAction(System.String,System.String)">
            <summary>
            addAction( UndoAction ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_consoleExportXML">
            <summary>
            Exports console definition XML representation )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_ConsoleLogger_attach(System.String)">
            <summary>
            () Attaches the logger to the console and begins writing to file
            			  @tsexample
            			  // Create the logger
            			  // Will automatically start writing to testLogging.txt with normal priority
            			  new ConsoleLogger(logger, \"testLogging.txt\", false);
            			  // Send something to the console, with the logger consumes and writes to file
            			  echo(\"This is logged to the file\");
            			  // Stop logging, but do not delete the logger
            			  logger.detach();
            			  echo(\"This is not logged to the file\");
            			  // Attach the logger to the console again
            			  logger.attach();
            			  // Logging has resumed
            			  echo(\"Logging has resumed\");
            			  @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_ConsoleLogger_detach(System.String)">
            <summary>
            () Detaches the logger from the console and stops writing to file
            			  @tsexample
            			  // Create the logger
            			  // Will automatically start writing to testLogging.txt with normal priority
            			  new ConsoleLogger(logger, \"testLogging.txt\", false);
            			  // Send something to the console, with the logger consumes and writes to file
            			  echo(\"This is logged to the file\");
            			  // Stop logging, but do not delete the logger
            			  logger.detach();
            			  echo(\"This is not logged to the file\");
            			  // Attach the logger to the console again
            			  logger.attach();
            			  // Logging has resumed
            			  echo(\"Logging has resumed\");
            			  @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_containerBoxEmpty(System.UInt32,System.String,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            @brief See if any objects of the given types are present in box of given extent.
               @note Extent parameter is last since only one radius is often needed.  If 
               one radius is provided, the yRadius and zRadius are assumed to be the same.  Unfortunately, 
               if you need to use the client container, you'll need to set all of the radius parameters.  
               Fortunately, this function is mostly used on the server.
               @param  mask   Indicates the type of objects we are checking against.
               @param  center Center of box.
               @param  xRadius Search radius in the x-axis. See note above.
               @param  yRadius Search radius in the y-axis. See note above.
               @param  zRadius Search radius in the z-axis. See note above.
               @param useClientContainer Optionally indicates the search should be within the 
               client container.
               @return true if the box is empty, false if any object is found.
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_containerFindFirst(System.UInt32,System.String,System.String)">
            <summary>
            (int mask, Point3F point, float x, float y, float z)
               @brief Find objects matching the bitmask type within a box centered at point, with extents x, y, z.
               @returns The first object found, or an empty string if nothing was found.  Thereafter, you can get more 
               results using containerFindNext().
               @see containerFindNext
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_containerFindNext">
            <summary>
            ()
               @brief Get more results from a previous call to containerFindFirst().
               @note You must call containerFindFirst() to begin the search.
               @returns The next object found, or an empty string if nothing else was found.
               @see containerFindFirst()
            	@ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_containerRayCast(System.String,System.String,System.UInt32,System.String,System.Boolean)">
            <summary>
            @brief Cast a ray from start to end, checking for collision against items matching mask.
            
               If pExempt is specified, then it is temporarily excluded from collision checks (For 
               instance, you might want to exclude the player if said player was firing a weapon.)
            
               @param start An XYZ vector containing the tail position of the ray.
               @param end An XYZ vector containing the head position of the ray
               @param mask A bitmask corresponding to the type of objects to check for
               @param pExempt An optional ID for a single object that ignored for this raycast
               @param useClientContainer Optionally indicates the search should be within the 
               client container.
            
               @returns A string containing either null, if nothing was struck, or these fields:
               ul>li>The ID of the object that was struck./li>
               li>The x, y, z position that it was struck./li>
               li>The x, y, z of the normal of the face that was struck./li>
               li>The distance between the start point and the position we hit./li>/ul> 
            
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_containerSearchCurrDist(System.Boolean)">
            <summary>
            @brief Get distance of the center of the current item from the center of the 
               current initContainerRadiusSearch.
            
               @param useClientContainer Optionally indicates the search should be within the 
               client container.
               @return distance from the center of the current object to the center of 
               the search
            
               @see containerSearchNext
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_containerSearchCurrRadiusDist(System.Boolean)">
            <summary>
            @brief Get the distance of the closest point of the current item from the center 
               of the current initContainerRadiusSearch.
            
               @param useClientContainer Optionally indicates the search should be within the 
               client container.
               @return distance from the closest point of the current object to the 
               center of the search
            
               @see containerSearchNext 
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_containerSearchNext(System.Boolean)">
            <summary>
            @brief Get next item from a search started with initContainerRadiusSearch() or 
               initContainerTypeSearch().
            
               @param useClientContainer Optionally indicates the search should be within the 
               client container.
               @return the next object found in the search, or null if no more
            
               @tsexample
               // print the names of all nearby ShapeBase derived objects
               %position = %obj.getPosition;
               %radius = 20;
               %mask = $TypeMasks::ShapeBaseObjectType;
               initContainerRadiusSearch( %position, %radius, %mask );
               while ( (%targetObject = containerSearchNext()) != 0 )
               {
                  echo( \"Found: \" @ %targetObject.getName() );
               }
               @endtsexample
            
               @see initContainerRadiusSearch()
               @see initContainerTypeSearch()
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_containsBadWords(System.String)">
            <summary>
            @brief Checks to see if text is a bad word
            
               The text is considered to be a bad word if it has been added to the bad word filter.
            
               @param text Text to scan for bad words
               @return True if the text has bad word(s), false if it is clean
            
               @see addBadWord()
               @see filterString()
            
               @tsexample
                  // In this game, \"Foobar\" is banned
                  %badWord = \"Foobar\";
                  // Add a banned word to the bad word filter
                  addBadWord(%badWord);
                  // Create the base string, can come from anywhere like user chat
                  %userText = \"Foobar\";
                  // Create a string of random letters
                  %replacementChars = \"knqwrtlzs\";
                  // If the text contains a bad word, filter it before printing
                  // Otherwise print the original text
                  if(containsBadWords(%userText))
                  {
                  	// Filter the string
                  	%filteredText = filterString(%userText, %replacementChars);
                  	// Print filtered text
                  	echo(%filteredText);
                  }
                  else
                  	echo(%userText);
               @endtsexample
            
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_countBits(System.Int32)">
            <summary>
            Count the number of bits that are set in the given 32 bit integer.
               @param v An integer value.
               @return The number of bits that are set in @a v.
               @ingroup Utilities )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_createPath(System.String)">
            <summary>
            @brief Create the given directory or the path leading to the given filename.
               If @a path ends in a trailing slash, then all components in the given path will be created as directories (if not already in place).  If @a path, 
               does @b not end in a trailing slash, then the last component of the path is taken to be a file name and only the directory components 
               of the path will be created.
               @param path The path to create.
               @note Only present in a Tools build of Torque.
               @ingroup FileSystem )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_CreatorTree_addGroup(System.String,System.Int32,System.String,System.String)">
            <summary>
            (string group, string name, string value))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_CreatorTree_addItem(System.String,System.Int32,System.String,System.String)">
            <summary>
            (Node group, string name, string value))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_CreatorTree_clear(System.String)">
            <summary>
            Clear the tree.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_CreatorTree_fileNameMatch(System.String,System.String,System.String,System.String)">
            <summary>
            (string world, string type, string filename))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_CreatorTree_getName(System.String,System.String)">
            <summary>
            (Node item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_CreatorTree_getParent(System.String,System.Int32)">
            <summary>
            (Node n))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_CreatorTree_getSelected(System.String)">
            <summary>
            Return a handle to the currently selected item.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_CreatorTree_getValue(System.String,System.Int32)">
            <summary>
            (Node n))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_CreatorTree_isGroup(System.String,System.String)">
            <summary>
            (Group g))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dbgDisconnect">
            <summary>
            ()
                            Forcibly disconnects any attached script debugging client.
            				@internal Primarily used for Torsion and other debugging tools)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_DbgFileView_clearBreakPositions(System.String)">
            <summary>
            ()
                          Clear all break points in the current file.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_DbgFileView_findString(System.String,System.String)">
            <summary>
            (string findThis)
                          Find the specified string in the currently viewed file and 
                          scroll it into view.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_DbgFileView_getCurrentLine(System.String)">
            <summary>
            ()
                          Get the currently executing file and line, if any.
                          @returns A string containing the file, a tab, and then the line number.
                           Use getField() with this.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_DbgFileView_open(System.String,System.String)">
            <summary>
            (string filename)
                          Open a file for viewing.
                          @note This loads the file from the local system.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_DbgFileView_removeBreak(System.String,System.UInt32)">
            <summary>
            (int line)
                          Remove a breakpoint from the specified line.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_DbgFileView_setBreak(System.String,System.UInt32)">
            <summary>
            (int line)
                          Set a breakpoint at the specified line.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_DbgFileView_setBreakPosition(System.String,System.UInt32)">
            <summary>
            (int line)
                          Set a breakpoint at the specified line.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_DbgFileView_setCurrentLine(System.String,System.Int32,System.Boolean)">
            <summary>
            (int line, bool selected)
                          Set the current highlighted line.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dbgIsConnected">
            <summary>
            ()
                            Returns true if a script debugging client is connected else return false.
            				@internal Primarily used for Torsion and other debugging tools)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dbgSetParameters(System.Int32,System.String,System.Boolean)">
            <summary>
            ( int port, string password, bool waitForClient )
                            Open a debug server port on the specified port, requiring the specified password, 
            				and optionally waiting for the debug client to connect.
            				@internal Primarily used for Torsion and other debugging tools)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_deactivateDirectInput">
            <summary>
            ()
                        @brief Disables DirectInput.
                        Also deactivates any connected joysticks.
            			@ingroup Input )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_deactivatePackage(System.String)">
            <summary>
            @brief Deactivates a previously activated package.
               The package is deactivated by removing its namespace linkages to any function or method. 
               If there are any packages above this one in the stack they are deactivated as well. 
               If the package is not on the stack this function does nothing.
               @ingroup Packages)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_debug">
            <summary>
            Drops the engine into the native C++ debugger.
               This function triggers a debug break and drops the process into the IDE's debugger.  If the process is not 
               running with a debugger attached it will generate a runtime error on most platforms.
               @note This function is not available in shipping builds.
               @ingroup Debugging )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_debugDumpAllObjects">
            <summary>
            @brief Dumps all current EngineObject instances to the console.
               @note This function is only available in debug builds.
               @ingroup Debugging )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_debugEnumInstances(System.String,System.String)">
            <summary>
            Call the given function for each instance of the given class.
               @param className Name of the class for which to enumerate instances.
               @param functionName Name of function to call and pass each instance of the given class.
               @note This function is only available in debug builds and primarily meant as an aid in debugging.
               @ingroup Console)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_debugv(System.String)">
            <summary>
            @brief Logs the value of the given variable to the console.
               Prints a string of the form \"variableName> = variable value>\" to the console.
               @param variableName Name of the local or global variable to print.
               @tsexample
                  %var = 1;
                  debugv( \"%var\" ); // Prints \"%var = 1\"
               @endtsexample
               @ingroup Debugging )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_decalManagerAddDecal(System.String,System.String,System.Single,System.Single,System.String,System.Boolean)">
            <summary>
            Adds a new decal to the decal manager.
               @param position World position for the decal.
               @param normal Decal normal vector (if the decal was a tire lying flat on a 
               surface, this is the vector pointing in the direction of the axle).
               @param rot Angle (in radians) to rotate this decal around its normal vector.
               @param scale Scale factor applied to the decal.
               @param decalData DecalData datablock to use for the new decal.
               @param isImmortal Whether or not this decal is immortal. If immortal, it 
               does not expire automatically and must be removed explicitly.
               @return Returns the ID of the new Decal object or -1 on failure.
               @tsexample
               // Specify the decal position
               %position = \"1.0 1.0 1.0\";
               // Specify the up vector
               %normal = \"0.0 0.0 1.0\";
               // Add the new decal.
               %decalObj = decalManagerAddDecal( %position, %normal, 0.5, 0.35, ScorchBigDecal, false );
               @endtsexample
               @ingroup Decals )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_decalManagerClear">
            <summary>
            Removes all decals currently loaded in the decal manager.
               @tsexample
               // Tell the decal manager to remove all existing decals.
               decalManagerClear();
               @endtsexample
               @ingroup Decals )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_decalManagerDirty">
            <summary>
            Returns whether the decal manager has unsaved modifications.
               @return True if the decal manager has unsaved modifications, false if 
               everything has been saved.
               @tsexample
               // Ask the decal manager if it has unsaved modifications.
               %hasUnsavedModifications = decalManagerDirty();
               @endtsexample
               @ingroup Decals )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_decalManagerLoad(System.String)">
            <summary>
            Clears existing decals and replaces them with decals loaded from the specified file.
               @param fileName Filename to load the decals from.
               @return True if the decal manager was able to load the requested file, 
               false if it could not.
               @tsexample
               // Set the filename to load the decals from.
               %fileName = \"./missionDecals.mis.decals\";
               // Inform the decal manager to load the decals from the entered filename.
               decalManagerLoad( %fileName );
               @endtsexample
               @ingroup Decals )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_decalManagerRemoveDecal(System.Int32)">
            <summary>
            Remove specified decal from the scene.
               @param decalID ID of the decal to remove.
               @return Returns true if successful, false if decal ID not found.
               @tsexample
               // Specify a decal ID to be removed
               %decalID = 1;
               // Tell the decal manager to remove the specified decal ID.
               decalManagerRemoveDecal( %decalId )
               @endtsexample
               @ingroup Decals )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_decalManagerSave(System.String)">
            <summary>
             ),
               Saves the decals for the active mission in the entered filename.
               @param decalSaveFile Filename to save the decals to.
               @tsexample
               // Set the filename to save the decals in. If no filename is set, then the
               // decals will default to activeMissionName>.mis.decals
               %fileName = \"./missionDecals.mis.decals\";
               // Inform the decal manager to save the decals for the active mission.
               decalManagerSave( %fileName );
               @endtsexample
               @ingroup Decals )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_deleteDataBlocks">
            <summary>
            Delete all the datablocks we've downloaded.
               This is usually done in preparation of downloading a new set of datablocks, 
               such as occurs on a mission change, but it's also good post-mission cleanup. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_deleteFile(System.String)">
            <summary>
            @brief Deletes the given @a file.
               @param file %Path of the file to delete.
               @note Only present in a Tools build of Torque.
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_deleteVariables(System.String)">
            <summary>
            Undefine all global variables matching the given name @a pattern.
               @param pattern A global variable name pattern.  Must begin with '$'.
               @tsexample
                  // Define a global variable in the \"My\" namespace.
                  $My::Variable = \"value\";
                  // Undefine all variable in the \"My\" namespace.
                  deleteVariables( \"$My::*\" );
               @endtsexample
               @see strIsMatchExpr
               @ingroup Scripting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_describeGFXResources(System.String,System.String,System.Boolean)">
            <summary>
            @brief Dumps a description of GFX resources to a file or the console.
               @param resourceTypes A space seperated list of resource types or an empty string for all resources.
               @param filePath A file to dump the list to or an empty string to write to the console.
               @param unflaggedOnly If true only unflagged resources are dumped. See flagCurrentGFXResources.
               @note The resource types can be one or more of the following:
                 - texture
                 - texture target
                 - window target
                 - vertex buffers
                 - primitive buffers
                 - fences
                 - cubemaps
                 - shaders
                 - stateblocks
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_describeGFXStateBlocks(System.String)">
            <summary>
            Dumps a description of all state blocks.     
               @param filePath A file to dump the state blocks to or an empty string to write to the console.
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_detag(System.String)">
            <summary>
            @brief Returns the string from a tag string.
            
               Should only be used within the context of a function that receives a tagged 
               string, and is not meant to be used outside of this context.  Use getTaggedString() 
               to convert a tagged string ID back into a regular string at any time.
            
               @tsexample
                  // From scripts/client/message.cs
                  function clientCmdChatMessage(%sender, %voice, %pitch, %msgString, %a1, %a2, %a3, %a4, %a5, %a6, %a7, %a8, %a9, %a10)
                  {
                     onChatMessage(detag(%msgString), %voice, %pitch);
                  }
            	@endtsexample
            
               @see \\ref syntaxDataTypes under Tagged %Strings
               @see getTag()
               @see getTaggedString()
            
               @ingroup Networking)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_disableJoystick">
            <summary>
            ()
                         @brief Disables use of the joystick.
                         @note DirectInput must be enabled and active to use this function.
                         @ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_disableXInput">
            <summary>
            ()
                        @brief Disables XInput for Xbox 360 controllers.
                        @ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dispatchMessage(System.String,System.String,System.String)">
            <summary>
            ), (string queueName, string message, string data)
            				@brief Dispatch a message to a queue
            				@param queueName Queue to dispatch the message to
            				@param message Message to dispatch
            				@param data Data for message
            				@return True for success, false for failure
            				@see dispatchMessageObject
            				@ingroup Messaging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dispatchMessageObject(System.String,System.String)">
            <summary>
            , ), (string queueName, string message)
            				@brief Dispatch a message object to a queue
            				@param queueName Queue to dispatch the message to
            				@param message Message to dispatch
            				@return true for success, false for failure
            				@see dispatchMessage
            				@ingroup Messaging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_displaySplashWindow(System.String)">
            <summary>
            art/gui/splash.bmp),
               Display a startup splash window suitable for showing while the engine still starts up.
               @note This is currently only implemented on Windows.
               @return True if the splash window could be successfully initialized.
               @ingroup Platform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_DNetSetLogging(System.Boolean)">
            <summary>
            (bool enabled)
               @brief Enables logging of the connection protocols
               When enabled a lot of network debugging information is sent to the console.
               @param enabled True to enable, false to disable
               @ingroup Networking)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dnt_testcase_1(System.String)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dnt_testcase_10(System.String)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dnt_testcase_12(System.String)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dnt_testcase_13(System.String)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dnt_testcase_14(System.String)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dnt_testcase_15(System.String)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dnt_testcase_2(System.String)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dnt_testcase_3(System.String)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dnt_testcase_4(System.String)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dnt_testcase_5(System.String)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dnt_testcase_6(System.String)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dnt_testcase_7(System.String)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dnt_testcase_8(System.String)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dnt_testcase_9(System.String)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dumpConsoleClasses(System.Boolean,System.Boolean)">
            <summary>
            @brief Dumps all declared console classes to the console.
                        @param dumpScript Optional parameter specifying whether or not classes defined in script should be dumped.
                        @param dumpEngine Optional parameter specifying whether or not classes defined in the engine should be dumped.
            			@ingroup Logging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dumpConsoleFunctions(System.Boolean,System.Boolean)">
            <summary>
            @brief Dumps all declared console functions to the console.
                        @param dumpScript Optional parameter specifying whether or not functions defined in script should be dumped.
                        @param dumpEngine Optional parameter specitying whether or not functions defined in the engine should be dumped.
            			@ingroup Logging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dumpEngineDocs(System.String)">
            <summary>
            Dumps the engine scripting documentation to the specified file overwriting any existing content.
                                 @param outputFile The relative or absolute output file path and name.
                                 @return Returns true if successful.
                                 @ingroup Console)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dumpFontCacheStatus">
            <summary>
            Dumps to the console a full description of all cached fonts, along with 
               info on the codepoints each contains.
               @ingroup Font )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dumpMaterialInstances">
            <summary>
            @brief Dumps a formatted list of currently allocated material instances to the console.
               @ingroup Materials)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dumpNetStats">
            <summary>
            @brief Dumps network statistics for each class to the console.
            
               The returned i>avg/i>, i>min/i> and i>max/i> values are in bits sent per update.  
               The i>num/i> value is the total number of events collected.
            
               @note This method only works when TORQUE_NET_STATS is defined in torqueConfig.h.
               @ingroup Networking )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dumpNetStringTable">
            <summary>
            @brief Dump the current contents of the networked string table to the console.
               The results are returned in three columns.  The first column is the network string ID.  
               The second column is the string itself.  The third column is the reference count to the 
               network string.
               @note This function is available only in debug builds.
               @ingroup Networking )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dumpProcessList(System.Boolean)">
            <summary>
            Dumps all ProcessObjects in ServerProcessList and ClientProcessList to the console. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dumpRandomNormalMap">
            <summary>
            Creates a 64x64 normal map texture filled with noise. The texture is saved 
               to randNormTex.png in the location of the game executable.
               @ingroup GFX)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dumpSoCount">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dumpStringMemStats">
            <summary>
            ()
            				@brief Dumps information about String memory usage
            				@ingroup Debugging
            				@ingroup Strings)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_dumpTextureObjects">
            <summary>
            Dumps a list of all active texture objects to the console.
               @note This function is only available in debug builds.
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_duplicateCachedFont(System.String,System.Int32,System.String)">
            <summary>
            Copy the specified old font to a new name. The new copy will not have a 
               platform font backing it, and so will never have characters added to it. 
               But this is useful for making copies of fonts to add postprocessing effects 
               to via exportCachedFont.
               @param oldFontName The name of the font face to copy.
               @param oldFontSize The size of the font to copy.
               @param newFontName The name of the new font face.
               @ingroup Font )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_echoInputState">
            <summary>
            ()
                        @brief Prints information to the console stating if DirectInput and a Joystick are enabled and active.
                        @ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_EditManager_editorDisabled(System.String)">
            <summary>
            Perform the onEditorDisabled callback on all SimObjects and set gEditingMission false )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_EditManager_editorEnabled(System.String)">
            <summary>
            Perform the onEditorEnabled callback on all SimObjects and set gEditingMission true )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_EditManager_gotoBookmark(System.String,System.Int32)">
            <summary>
            (int slot))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_EditManager_isEditorEnabled(System.String)">
            <summary>
            Return the value of gEditingMission. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_EditManager_setBookmark(System.String,System.Int32)">
            <summary>
            (int slot))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_enableJoystick">
            <summary>
            ()
                         @brief Enables use of the joystick.
                         @note DirectInput must be enabled and active to use this function.
                         @ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_enableSamples(System.String,System.Boolean)">
            <summary>
            (pattern, [state]) -
            				@brief Enable sampling for all keys that match the given name 
            				pattern. Slashes are treated as separators.
            				@ingroup Rendering)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_enableWinConsole(System.Boolean)">
            <summary>
            enableWinConsole(bool);)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_enableXInput">
            <summary>
            ()
                        @brief Enables XInput for Xbox 360 controllers.
                        @note XInput is enabled by default. Disable to use an Xbox 360 
                        Controller as a joystick device.
            				@ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_endsWith(System.String,System.String,System.Boolean)">
            <summary>
            @brief Test whether the given string ends with the given suffix.
               @param str The string to test.
               @param suffix The potential suffix of @a str.
               @param caseSensitive If true, the comparison will be case-sensitive; if false, differences in casing will 
                  not be taken into account.
               @return True if the last characters in @a str match the complete contents of @a suffix; false otherwise.
               @tsexample
               startsWith( \"TEST123\", \"123\" ) // Returns true.
               @endtsexample
               @see startsWith
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_enumColladaForImport(System.String,System.String)">
            <summary>
            (string shapePath, GuiTreeViewCtrl ctrl) Collect scene information from 
               a COLLADA file and store it in a GuiTreeView control. This function is 
               used by the COLLADA import gui to show a preview of the scene contents 
               prior to import, and is probably not much use for anything else.
               @param shapePath COLLADA filename
               @param ctrl GuiTreeView control to add elements to
               @return true if successful, false otherwise
               @ingroup Editors
               @internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_enumerateConsoleClasses(System.String)">
            <summary>
             ),
            				@brief Returns a list of classes that derive from the named class.
                        If the named class is omitted this dumps all the classes.
                        @param className The optional base class name.
            				@return A tab delimited list of classes.
                        @ingroup Editors
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_enumerateConsoleClassesByCategory(System.String)">
            <summary>
            @brief Provide a list of classes that belong to the given category.
            				@param category The category name.
            				@return A tab delimited list of classes.
            				@ingroup Editors
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_eval(System.String)">
            <summary>
            eval(consoleString) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_EventManager_dumpEvents(System.String)">
            <summary>
            ()
                          Print all registered events to the console. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_EventManager_dumpSubscribers(System.String,System.String)">
            <summary>
            ), ( String event )
                          Print all subscribers to an event to the console.
                          @param event The event whose subscribers are to be printed. If this parameter isn't specified, all events will be dumped. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_EventManager_isRegisteredEvent(System.String,System.String)">
            <summary>
            ( String event )
                          Check if an event is registered or not.
                          @param event The event to check.
                          @return Whether or not the event exists. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_EventManager_postEvent(System.String,System.String,System.String)">
            <summary>
            ), ( String event, String data )
                          ~Trigger an event.
                          @param event The event to trigger.
                          @param data The data associated with the event.
                          @return Whether or not the event was dispatched successfully. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_EventManager_registerEvent(System.String,System.String)">
            <summary>
            ( String event )
                          Register an event with the event manager.
                          @param event The event to register.
                          @return Whether or not the event was registered successfully. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_EventManager_remove(System.String,System.String,System.String)">
            <summary>
            ( SimObject listener, String event )
                          Remove a listener from an event.
                          @param listener The listener to remove.
                          @param event The event to be removed from.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_EventManager_removeAll(System.String,System.String)">
            <summary>
            ( SimObject listener )
                          Remove a listener from all events.
                          @param listener The listener to remove.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_EventManager_subscribe(System.String,System.String,System.String,System.String)">
            <summary>
            ), ( SimObject listener, String event, String callback )
                          Subscribe a listener to an event.
                          @param listener The listener to subscribe.
                          @param event The event to subscribe to.
                          @param callback Optional method name to receive the event notification. If this is not specified, \"on[event]\" will be used.
                          @return Whether or not the subscription was successful. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_EventManager_unregisterEvent(System.String,System.String)">
            <summary>
            ( String event )
                          Remove an event from the EventManager.
                          @param event The event to remove. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_excludeOtherInstance(System.String)">
            <summary>
            @brief Used to exclude/prevent all other instances using the same identifier specified
            
            					 @note Not used on OSX, Xbox, or in Win debug builds
            
            					 @param appIdentifier Name of the app set up for exclusive use.
            
            					 @return False if another app is running that specified the same appIdentifier
            
            					 @ingroup Platform
            					 @ingroup GuiCore)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_exec(System.String,System.Boolean,System.Boolean)">
            <summary>
            Execute the given script file.
               @param fileName Path to the file to execute
               @param noCalls Deprecated
               @param journalScript Deprecated
               @return True if the script was successfully executed, false if not.
               @tsexample
                  // Execute the init.cs script file found in the same directory as the current script file.
                  exec( \"./init.cs\" );
               @endtsexample
               @see compile
               @see eval
               @ingroup Scripting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_expandEscape(System.String)">
            <summary>
            @brief Replace all characters in @a text that need to be escaped for the string to be a valid string literal with their 
               respective escape sequences.
               All characters in @a text that cannot appear in a string literal will be replaced by an escape sequence (\\\, \\\\t, etc).
               The primary use of this function is for converting strings suitable for being passed as string literals 
               to the TorqueScript compiler.
               @param text A string
               @return A duplicate of the text parameter with all unescaped characters that cannot appear in string literals replaced by their respective 
               escape sequences.
               @tsxample
               expandEscape( \"str\" NL \"ing\" ) // Returns \"str\ing\".
               @endtsxample
               @see collapseEscape
               @ingroup Strings)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_export(System.String,System.String,System.Boolean)">
            <summary>
            , false ),
               Write out the definitions of all global variables matching the given name @a pattern.
               If @a fileName is not \"\", the variable definitions are written to the specified file.  Otherwise the 
               definitions will be printed to the console.
               The output are valid TorqueScript statements that can be executed to restore the global variable 
               values.
               @param pattern A global variable name pattern.  Must begin with '$'.
               @param filename %Path of the file to which to write the definitions or \"\" to write the definitions 
                  to the console.
               @param append If true and @a fileName is not \"\", then the definitions are appended to the specified file. 
                  Otherwise existing contents of the file (if any) will be overwritten.
               @tsexample
                  // Write out all preference variables to a prefs.cs file.
                  export( \"$prefs::*\", \"prefs.cs\" );
               @endtsexample
               @ingroup Scripting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_exportCachedFont(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Export specified font to the specified filename as a PNG. The 
               image can then be processed in Photoshop or another tool and 
               reimported using importCachedFont. Characters in the font are 
               exported as one long strip.
               @param faceName The name of the font face.
               @param fontSize The size of the font in pixels.
               @param fileName The file name and path for the output PNG.
               @param padding The padding between characters.   
               @param kerning The kerning between characters.   
               @ingroup Font )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_exportEngineAPIToXML">
            <summary>
            Create a XML document containing a dump of the entire exported engine API.
               @return A SimXMLDocument containing a dump of the engine's export information or NULL if the operation failed.
               @ingroup Console )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_exportToSettings(System.String,System.String,System.Boolean)">
            <summary>
            , false ),
               Write out the definitions of all global variables matching the given name @a pattern.
               If @a fileName is not \"\", the variable definitions are written to the specified file.  Otherwise the 
               definitions will be printed to the console.
               The output are valid TorqueScript statements that can be executed to restore the global variable 
               values.
               @param pattern A global variable name pattern.  Must begin with '$'.
               @param filename %Path of the file to which to write the definitions or \"\" to write the definitions 
                  to the console.
               @param append If true and @a fileName is not \"\", then the definitions are appended to the specified file. 
                  Otherwise existing contents of the file (if any) will be overwritten.
               @tsexample
                  // Write out all preference variables to a prefs.cs file.
                  export( \"$prefs::*\", \"prefs.cs\" );
               @endtsexample
               @ingroup Scripting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_FieldBrushObject_copyFields(System.String,System.String,System.String)">
            <summary>
            ), (simObject, [fieldList]) Copy selected static-fields for selected object./
                                                                    @param simObject Object to copy static-fields from.
                                                                    @param fieldList fields to filter static-fields against.
            			                                            @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_FieldBrushObject_pasteFields(System.String,System.String)">
            <summary>
            (simObject) Paste copied static-fields to selected object./
                                                                    @param simObject Object to paste static-fields to.
            			                                            @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_FieldBrushObject_queryFields(System.String,System.String,System.String)">
            <summary>
            ), (simObject, [groupList]) Query available static-fields for selected object./
                                                                            @param simObject Object to query static-fields on.
                                                                            @param groupList groups to filter static-fields against.
            			                                                    @return Space-seperated static-field list.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_FieldBrushObject_queryGroups(System.String,System.String)">
            <summary>
            (simObject) Query available static-field groups for selected object./
                                                                            @param simObject Object to query static-field groups on.
            			                                                    @return Space-seperated static-field group list.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_fileBase(System.String)">
            <summary>
            @brief Get the base of a file name (removes extension and path)
            
               @param fileName Name and path of file to check
               @return String containing the file name, minus extension and path
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_fileCreatedTime(System.String)">
            <summary>
            @brief Returns a platform specific formatted string with the creation time for the file.
            
               @param fileName Name and path of file to check
               @return Formatted string (OS specific) containing created time, \"9/3/2010 12:33:47 PM\" for example
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_fileDelete(System.String)">
            <summary>
            @brief Delete a file from the hard drive
            
            	@param path Name and path of the file to delete
            	@note THERE IS NO RECOVERY FROM THIS. Deleted file is gone for good.
            	@return True if file was successfully deleted
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_fileExt(System.String)">
            <summary>
            @brief Get the extension of a file
            
            	@param fileName Name and path of file
            	@return String containing the extension, such as \".exe\" or \".cs\"
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_fileModifiedTime(System.String)">
            <summary>
            @brief Returns a platform specific formatted string with the last modified time for the file.
            
            	@param fileName Name and path of file to check
            	@return Formatted string (OS specific) containing modified time, \"9/3/2010 12:33:47 PM\" for example
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_fileName(System.String)">
            <summary>
            @brief Get only the file name of a path and file name string (removes path)
            
            	@param fileName Name and path of file to check
            	@return String containing the file name, minus the path
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_FileObject_writeObject(System.String,System.String,System.String)">
            <summary>
            ), FileObject.writeObject(SimObject, object prepend) 
            			  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_filePath(System.String)">
            <summary>
            @brief Get the path of a file (removes name and extension)
            
            	@param fileName Name and path of file to check
            	@return String containing the path, minus name and extension
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_fileSize(System.String)">
            <summary>
            @brief Determines the size of a file on disk
            
            	@param fileName Name and path of the file to check
            	@return Returns filesize in KB, or -1 if no file
            
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_filterString(System.String,System.String)">
            <summary>
            @brief Replaces the characters in a string with designated text
            
               Uses the bad word filter to determine which characters within the string will be replaced.
            
               @param baseString  The original string to filter.
               @param replacementChars A string containing letters you wish to swap in the baseString.
               @return The new scrambled string 
            
               @see addBadWord()
               @see containsBadWords()
            
               @tsexample
                  // Create the base string, can come from anywhere
                  %baseString = \"Foobar\";
                  // Create a string of random letters
                  %replacementChars = \"knqwrtlzs\";
                  // Filter the string
                  %newString = filterString(%baseString, %replacementChars);
                  // Print the new string to console
                  echo(%newString);
               @endtsexample
            
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_findFirstFile(System.String,System.Boolean)">
            <summary>
            @brief Returns the first file in the directory system matching the given pattern.
            
               Use the corresponding findNextFile() to step through 
               the results.  If you're only interested in the number of files returned by the 
               pattern match, use getFileCount().
            
               This function differs from findFirstFileMultiExpr() in that it supports a single search 
               pattern being passed in.
            
               @note You cannot run multiple simultaneous file system searches with these functions.  Each 
               call to findFirstFile() and findFirstFileMultiExpr() initiates a new search and renders 
               a previous search invalid.
            
               @param pattern The path and file name pattern to match against.
               @param recurse If true, the search will exhaustively recurse into subdirectories of the given path and match the given filename pattern.
               @return The path of the first file matched by the search or an empty string if no matching file could be found.
            
               @tsexample
                  // Execute all .cs files in a subdirectory and its subdirectories.
                  for( %file = findFirstFile( \"subdirectory/*.cs\" ); %file !$= \"\"; %file = findNextFile() )
                     exec( %file );
               @endtsexample
            
               @see findNextFile()
               @see getFileCount()
               @see findFirstFileMultiExpr()
               @ingroup FileSearches )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_findFirstFileMultiExpr(System.String,System.Boolean)">
            <summary>
            @brief Returns the first file in the directory system matching the given patterns.
            
               Use the corresponding findNextFileMultiExpr() to step through 
               the results.  If you're only interested in the number of files returned by the 
               pattern match, use getFileCountMultiExpr().
            
               This function differs from findFirstFile() in that it supports multiple search patterns 
               to be passed in.
            
               @note You cannot run multiple simultaneous file system searches with these functions.  Each 
               call to findFirstFile() and findFirstFileMultiExpr() initiates a new search and renders 
               a previous search invalid.
            
            	@param pattern The path and file name pattern to match against, such as *.cs.  Separate 
               multiple patterns with TABs.  For example: \"*.cs\" TAB \"*.dso\"
            	@param recurse If true, the search will exhaustively recurse into subdirectories 
            	of the given path and match the given filename patterns.
               @return String of the first matching file path, or an empty string if no matching 
               files were found.
            
               @tsexample
                  // Find all DTS or Collada models
                  %filePatterns = \"*.dts\" TAB \"*.dae\";
                  %fullPath = findFirstFileMultiExpr( %filePatterns );
                  while ( %fullPath !$= \"\" )
                  {
                     echo( %fullPath );
                     %fullPath = findNextFileMultiExpr( %filePatterns );
                  }
               @endtsexample
            
               @see findNextFileMultiExpr()
               @see getFileCountMultiExpr()
               @see findFirstFile()
            	@ingroup FileSearches)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_findNextFile(System.String)">
            <summary>
             ),
               @brief Returns the next file matching a search begun in findFirstFile().
            
               @param pattern The path and file name pattern to match against.  This is optional 
               and may be left out as it is not used by the code.  It is here for legacy reasons.
               @return The path of the next filename matched by the search or an empty string if no more files match.
            
               @tsexample
                  // Execute all .cs files in a subdirectory and its subdirectories.
                  for( %file = findFirstFile( \"subdirectory/*.cs\" ); %file !$= \"\"; %file = findNextFile() )
                     exec( %file );
               @endtsexample
            
               @see findFirstFile()
               @ingroup FileSearches )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_findNextFileMultiExpr(System.String)">
            <summary>
            ),
               @brief Returns the next file matching a search begun in findFirstFileMultiExpr().
            
            	@param pattern The path and file name pattern to match against.  This is optional 
               and may be left out as it is not used by the code.  It is here for legacy reasons.
               @return String of the next matching file path, or an empty string if no matching 
               files were found.
            
               @tsexample
                  // Find all DTS or Collada models
                  %filePatterns = \"*.dts\" TAB \"*.dae\";
                  %fullPath = findFirstFileMultiExpr( %filePatterns );
                  while ( %fullPath !$= \"\" )
                  {
                     echo( %fullPath );
                     %fullPath = findNextFileMultiExpr( %filePatterns );
                  }
               @endtsexample
            
               @see findFirstFileMultiExpr()
            	@ingroup FileSearches)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_firstWord(System.String)">
            <summary>
            Return the first word in @a text.
               @param text A list of words separated by newlines, spaces, and/or tabs.
               @return The word at index 0 in @a text or \"\" if @a text is empty.
               @note This is equal to 
               @tsexample_nopar
                  getWord( text, 0 )
               @endtsexample
               @see getWord
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_flagCurrentGFXResources">
            <summary>
            @brief Flags all currently allocated GFX resources.
               Used for resource allocation and leak tracking by flagging 
               current resources then dumping a list of unflagged resources 
               at some later point in execution.
               @ingroup GFX
               @see listGFXResources, clearGFXResourceFlags, describeGFXResources )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_flushTextureCache">
            <summary>
            Releases all textures and resurrects the texture manager.
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Forest_clear(System.String)">
            <summary>
            () )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Forest_isDirty(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Forest_regenCells(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Forest_saveDataFile(System.String,System.String)">
            <summary>
            saveDataFile( [path] ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_ForestBrush_containsItemData(System.String,System.String)">
            <summary>
            ( ForestItemData obj ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_ForestBrushTool_collectElements(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_ForestEditorCtrl_deleteMeshSafe(System.String,System.String)">
            <summary>
            ( ForestItemData obj ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_ForestEditorCtrl_getActiveTool(System.String)">
            <summary>
            () )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_ForestEditorCtrl_isDirty(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_ForestEditorCtrl_setActiveTool(System.String,System.String)">
            <summary>
            ( ForestTool tool ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_ForestEditorCtrl_updateActiveForest(System.String)">
            <summary>
            () )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_ForestSelectionTool_clearSelection(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_ForestSelectionTool_copySelection(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_ForestSelectionTool_cutSelection(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_ForestSelectionTool_deleteSelection(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_ForestSelectionTool_getSelectionCount(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_ForestSelectionTool_pasteSelection(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getActiveDDSFiles">
            <summary>
            Returns the count of active DDSs files in memory.
               @ingroup Rendering )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getActiveLightManager">
            <summary>
            Returns the active light manager name.
               @ingroup Lighting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getAppVersionNumber">
            <summary>
            Get the version of the application build, as a string. 
                        @ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getAppVersionString">
            <summary>
            Get the version of the aplication build, as a human readable string. 
                        @ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getBestHDRFormat">
            <summary>
            Returns the best texture format for storage of HDR data for the active device.
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getBitmapInfo(System.String)">
            <summary>
            Returns image info in the following format: width TAB height TAB bytesPerPixel. 
               It will return an empty string if the file is not found.
               @ingroup Rendering )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getBoxCenter(System.String)">
            <summary>
            Get the center point of an axis-aligned box.
               @param b A Box3F, in string format using \"minExtentX minExtentY minExtentZ maxExtentX maxExtentY maxExtentZ\"
               @return Center of the box.
               @ingroup Math)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getBuildString">
            <summary>
            Get the type of build, \"Debug\" or \"Release\".
            				@ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getCategoryOfClass(System.String)">
            <summary>
            @brief Returns the category of the given class.
            				@param className The name of the class.
            				@ingroup Console)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getClipboard">
            <summary>
            ()
            				@brief Get text from the clipboard.
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getCompileTimeString">
            <summary>
            Get the time of compilation. 
            				@ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getCoreLangTable">
            <summary>
            ()
            				@brief Gets the primary LangTable used by the game
            				@return ID of the core LangTable
            				@ingroup Localization)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getCurrentActionMap">
            <summary>
            @brief Returns the current %ActionMap.
               @see ActionMap
            	@ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getCurrentDirectory">
            <summary>
            @brief Return the current working directory.
               @return The absolute path of the current working directory.
               @note Only present in a Tools build of Torque.
               @see getWorkingDirectory()
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getDescriptionOfClass(System.String)">
            <summary>
            @brief Returns the description string for the named class.
            				@param className The name of the class.
            				@return The class description in string format.
            				@ingroup Console)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getDesktopResolution">
            <summary>
            Returns the width, height, and bitdepth of the screen/desktop.@ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getDirectoryList(System.String,System.Int32)">
            <summary>
            @brief Gathers a list of directories starting at the given path.
            
            	@param path String containing the path of the directory
            	@param depth Depth of search, as in how many subdirectories to parse through
            	@return Tab delimited string containing list of directories found during search, \"\" if no files were found
            
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getDisplayDeviceInformation">
            <summary>
            Get the string describing the active GFX device.
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getDisplayDeviceList">
            <summary>
            Returns a tab-seperated string of the detected devices across all adapters.
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getDSOPath(System.String)">
            <summary>
            Get the absolute path to the file in which the compiled code for the given script file will be stored.
               @param scriptFileName %Path to the .cs script file.
               @return The absolute path to the .dso file for the given script file.
               @note The compiler will store newly compiled DSOs in the prefs path but pre-existing DSOs will be loaded 
                  from the current paths.
               @see compile
               @see getPrefsPath
               @ingroup Scripting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getEngineName">
            <summary>
            Get the name of the engine product that this is running from, as a string. 
            				@ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getEventTimeLeft(System.Int32)">
            <summary>
            getEventTimeLeft(scheduleId) Get the time left in ms until this event will trigger.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getExecutableName">
            <summary>
            @brief Gets the name of the game's executable
            
            	@return String containing this game's executable name
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getFarClippingDistance">
            <summary>
            Gets the clients far clipping.
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getField(System.String,System.Int32)">
            <summary>
            Extract the field at the given @a index in the newline and/or tab separated list in @a text.
               Fields in @a text must be separated by newlines and/or tabs.
               @param text A list of fields separated by newlines and/or tabs.
               @param index The zero-based index of the field to extract.
               @return The field at the given index or \"\" if the index is out of range.
               @tsexample
                  getField( \"a b\" TAB \"c d\" TAB \"e f\", 1 ) // Returns \"c d\"
               @endtsexample
               @see getFields
               @see getFieldCount
               @see getWord
               @see getRecord
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getFieldCount(System.String)">
            <summary>
            Return the number of newline and/or tab separated fields in @a text.
               @param text A list of fields separated by newlines and/or tabs.
               @return The number of newline and/or tab sepearated elements in @a text.
               @tsexample
                  getFieldCount( \"a b\" TAB \"c d\" TAB \"e f\" ) // Returns 3
               @endtsexample
               @see getWordCount
               @see getRecordCount
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getFields(System.String,System.Int32,System.Int32)">
            <summary>
            Extract a range of fields from the given @a startIndex onwards thru @a endIndex.
               Fields in @a text must be separated by newlines and/or tabs.
               @param text A list of fields separated by newlines and/or tabs.
               @param startIndex The zero-based index of the first field to extract from @a text.
               @param endIndex The zero-based index of the last field to extract from @a text.  If this is -1, all fields beginning 
                  with @a startIndex are extracted from @a text.
               @return A string containing the specified range of fields from @a text or \"\" if @a startIndex 
                  is out of range or greater than @a endIndex.
               @tsexample
                  getFields( \"a b\" TAB \"c d\" TAB \"e f\", 1 ) // Returns \"c d\" TAB \"e f\"
               @endtsexample
               @see getField
               @see getFieldCount
               @see getWords
               @see getRecords
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getFileCount(System.String,System.Boolean)">
            <summary>
            @brief Returns the number of files in the directory tree that match the given patterns
            
               This function differs from getFileCountMultiExpr() in that it supports a single search 
               pattern being passed in.
            
               If you're interested in a list of files that match the given pattern and not just 
               the number of files, use findFirstFile() and findNextFile().
            
               @param pattern The path and file name pattern to match against.
               @param recurse If true, the search will exhaustively recurse into subdirectories of the given path and match the given filename pattern 
                  counting files in subdirectories.
               @return Number of files located using the pattern
            
               @tsexample
                  // Count the number of .cs files in a subdirectory and its subdirectories.
                  getFileCount( \"subdirectory/*.cs\" );
               @endtsexample
            
               @see findFirstFile()
               @see findNextFile()
               @see getFileCountMultiExpr()
               @ingroup FileSearches )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getFileCountMultiExpr(System.String,System.Boolean)">
            <summary>
            @brief Returns the number of files in the directory tree that match the given patterns
            
               If you're interested in a list of files that match the given patterns and not just 
               the number of files, use findFirstFileMultiExpr() and findNextFileMultiExpr().
            
            	@param pattern The path and file name pattern to match against, such as *.cs.  Separate 
               multiple patterns with TABs.  For example: \"*.cs\" TAB \"*.dso\"
            	@param recurse If true, the search will exhaustively recurse into subdirectories 
            	of the given path and match the given filename pattern.
            	@return Number of files located using the patterns
            
               @tsexample
                  // Count all DTS or Collada models
                  %filePatterns = \"*.dts\" TAB \"*.dae\";
                  echo( \"Nunmer of shape files:\" SPC getFileCountMultiExpr( %filePatterns ) );
               @endtsexample
            
               @see findFirstFileMultiExpr()
               @see findNextFileMultiExpr()
            	@ingroup FileSearches)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getFileCRC(System.String)">
            <summary>
            @brief Provides the CRC checksum of the given file.
               
               @param fileName The path to the file.
               @return The calculated CRC checksum of the file, or -1 if the file 
               could not be found.
               
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getFormatExtensions">
            <summary>
            Returns a list of supported shape format extensions separated by tabs.
              Example output: *.dsq TAB *.dae TAB)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getFormatFilters">
            <summary>
            Returns a list of supported shape formats in filter form.
              Example output: DSQ Files|*.dsq|COLLADA Files|*.dae|)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getFrustumOffset">
            <summary>
            @brief .)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getFunctionPackage(System.String)">
            <summary>
            (string funcName) 
            	@brief Provides the name of the package the function belongs to
            	@param funcName String containing name of the function
            	@return The name of the function's package
            	@ingroup Packages)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getJoystickAxes(System.UInt32)">
            <summary>
            getJoystickAxes( instance ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getLightManagerNames">
            <summary>
            Returns a tab seperated list of light manager names.
               @ingroup Lighting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getMainDotCsDir">
            <summary>
            @brief Get the absolute path to the directory that contains the main.cs script from which the engine was started.
            
               This directory will usually contain all the game assets and, in a user-side game installation, will usually be 
               read-only.
               @return The path to the main game assets.
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getMapEntry(System.String)">
            <summary>
            @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getMaterialMapping(System.String)">
            <summary>
            (string texName)
               @brief Returns the name of the material mapped to this texture.
               If no materials are found, an empty string is returned.
               @param texName Name of the texture
               @ingroup Materials)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getMax(System.Single,System.Single)">
            <summary>
            Calculate the greater of two specified numbers.
                @param v1 Input value.
                @param v2 Input value.
                @returns The greater value of the two specified values.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getMaxFrameAllocation">
            <summary>
            getMaxFrameAllocation(); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getMethodPackage(System.String,System.String)">
            <summary>
            (string namespace, string method) 
            	@brief Provides the name of the package the method belongs to
            	@param namespace Class or namespace, such as Player
            	@param method Name of the funciton to search for
            	@return The name of the method's package
            	@ingroup Packages)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getMin(System.Single,System.Single)">
            <summary>
            Calculate the lesser of two specified numbers.
                @param v1 Input value.
                @param v2 Input value.
                @returns The lesser value of the two specified values.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getMissionAreaServerObject">
            <summary>
            Get the MissionArea object, if any.
            					 @ingroup enviroMisc)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getModNameFromPath(System.String)">
            <summary>
            (string path) 
            				@brief Attempts to extract a mod directory from path. Returns empty string on failure.
            				@param File path of mod folder
            				@note This is no longer relevant in Torque 3D (which does not use mod folders), should be deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getNavMeshEventManager">
            <summary>
            @brief Get the EventManager object for all NavMesh updates.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getPackageList">
            <summary>
            @brief Returns a space delimited list of the active packages in stack order.
               @ingroup Packages)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getPixelShaderVersion">
            <summary>
            Returns the pixel shader version for the active device.
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getPrefsPath(System.String)">
            <summary>
            ([relativeFileName]) 
            				@note Appears to be useless in Torque 3D, should be deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getRandom(System.Int32,System.Int32)">
            <summary>
            ( int a, int b ) 
               @brief Returns a random number based on parameters passed in..
               If no parameters are passed in, getRandom() will return a float between 0.0 and 1.0. If one 
               parameter is passed an integer between 0 and the passed in value will be returned. Two parameters will 
               return an integer between the specified numbers.
               @param a If this is the only parameter, a number between 0 and a is returned. Elsewise represents the lower bound.
               @param b Upper bound on the random number.  The random number will be = @a b.
               @return A pseudo-random integer between @a a and @a b, between 0 and a, or a 
               float between 0.0 and 1.1 depending on usage.
               @note All parameters are optional.
               @see setRandomSeed
               @ingroup Random )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getRandomSeed">
            <summary>
            Get the current seed used by the random number generator.
               @return The current random number generator seed value.
               @ingroup Random )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getRealTime">
            <summary>
            () 
            				@brief Return the current real time in milliseconds.
                            Real time is platform defined; typically time since the computer booted.
            				@ingroup Platform)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getRecord(System.String,System.Int32)">
            <summary>
            Extract the record at the given @a index in the newline-separated list in @a text.
               Records in @a text must be separated by newlines.
               @param text A list of records separated by newlines.
               @param index The zero-based index of the record to extract.
               @return The record at the given index or \"\" if @a index is out of range.
               @tsexample
                  getRecord( \"a b\" NL \"c d\" NL \"e f\", 1 ) // Returns \"c d\"
               @endtsexample
               @see getRecords
               @see getRecordCount
               @see getWord
               @see getField
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getRecordCount(System.String)">
            <summary>
            Return the number of newline-separated records in @a text.
               @param text A list of records separated by newlines.
               @return The number of newline-sepearated elements in @a text.
               @tsexample
                  getRecordCount( \"a b\" NL \"c d\" NL \"e f\" ) // Returns 3
               @endtsexample
               @see getWordCount
               @see getFieldCount
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getRecords(System.String,System.Int32,System.Int32)">
            <summary>
            Extract a range of records from the given @a startIndex onwards thru @a endIndex.
               Records in @a text must be separated by newlines.
               @param text A list of records separated by newlines.
               @param startIndex The zero-based index of the first record to extract from @a text.
               @param endIndex The zero-based index of the last record to extract from @a text.  If this is -1, all records beginning 
                  with @a startIndex are extracted from @a text.
               @return A string containing the specified range of records from @a text or \"\" if @a startIndex 
                  is out of range or greater than @a endIndex.
               @tsexample
                  getRecords( \"a b\" NL \"c d\" NL \"e f\", 1 ) // Returns \"c d\" NL \"e f\"
               @endtsexample
               @see getRecord
               @see getRecordCount
               @see getWords
               @see getFields
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getScheduleDuration(System.Int32)">
            <summary>
            getScheduleDuration(%scheduleId); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getServerCount">
            <summary>
            getServerCount(...); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getSimTime">
            <summary>
            () 
            				Return the current sim time in milliseconds.
                            @brief Sim time is time since the game started.
            				@ingroup Platform)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getSubStr(System.String,System.Int32,System.Int32)">
            <summary>
            @brief Return a substring of @a str starting at @a start and continuing either through to the end of @a str 
               (if @a numChars is -1) or for @a numChars characters (except if this would exceed the actual source 
               string length).
               @param str The string from which to extract a substring.
               @param start The offset at which to start copying out characters.
               @param numChars Optional argument to specify the number of characters to copy.  If this is -1, all characters up the end 
                  of the input string are copied.
               @return A string that contains the given portion of the input string.
               @tsexample
               getSubStr( \"foobar\", 1, 2 ) // Returns \"oo\".
               @endtsexample
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getTag(System.String)">
            <summary>
            ( string textTagString ) 
               @brief Extracts the tag from a tagged string
            
               Should only be used within the context of a function that receives a tagged 
               string, and is not meant to be used outside of this context.
            
               @param textTagString The tagged string to extract.
            
               @returns The tag ID of the string.
            
               @see \\ref syntaxDataTypes under Tagged %Strings
               @see detag()
               @ingroup Networking)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getTaggedString(System.String)">
            <summary>
            ),
               @brief Use the getTaggedString function to convert a tag to a string.
            
               This is not the same as detag() which can only be used within the context 
               of a function that receives a tag. This function can be used any time and 
               anywhere to convert a tag to a string.
            
               @param tag A numeric tag ID.
            
               @returns The string as found in the Net String table.
            
               @see \\ref syntaxDataTypes under Tagged %Strings
               @see addTaggedString()
               @see removeTaggedString()
               @ingroup Networking)
            	
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getTemporaryDirectory">
            <summary>
            @brief Returns the OS temporary directory, \"C:/Users/Mich/AppData/Local/Temp\" for example
            				@note This can be useful to adhering to OS standards and practices, 
            				but not really used in Torque 3D right now.
            				@note Be very careful when getting into OS level File I/O.
            				@return String containing path to OS temp directory
            				@note This is legacy function brought over from TGB, and does not appear 
            				to have much use. Possibly deprecate?
            				@ingroup FileSystem
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getTemporaryFileName">
            <summary>
            @brief Creates a name and extension for a potential temporary file
            				This does not create the actual file. It simply creates a random name 
            				for a file that does not exist.
            				@note This is legacy function brought over from TGB, and does not appear 
            				to have much use. Possibly deprecate?
            				@ingroup FileSystem
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getTerrainHeight(System.String)">
            <summary>
            (Point2 pos) - gets the terrain height at the specified position.
            				@param pos The world space point, minus the z (height) value Can be formatted as either (\"x y\") or (x,y)
            				@return Returns the terrain height at the given point as an F32 value.
            				@hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getTerrainHeightBelowPosition(System.String)">
            <summary>
            (Point3F pos) - gets the terrain height at the specified position.
            				@param pos The world space point. Can be formatted as either (\"x y z\") or (x,y,z)
            				@note This function is useful if you simply want to grab the terrain height underneath an object.
            				@return Returns the terrain height at the given point as an F32 value.
            				@hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getTerrainUnderWorldPoint(System.String)">
            <summary>
            (Point3F x/y/z) Gets the terrain block that is located under the given world point.
                                                                  @param x/y/z The world coordinates (floating point values) you wish to query at.  
                                                                  These can be formatted as either a string (\"x y z\") or separately as (x, y, z)
                                                                  @return Returns the ID of the requested terrain block (0 if not found).
            													  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getTextureProfileStats">
            <summary>
            Returns a list of texture profiles in the format: ProfileName TextureCount TextureMB
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getTimeSinceStart(System.Int32)">
            <summary>
            getTimeSinceStart(%scheduleId); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getTrailingNumber(System.String)">
            <summary>
            Get the numeric suffix of the given input string.
               @param str The string from which to read out the numeric suffix.
               @return The numeric value of the number suffix of @a str or -1 if @a str has no such suffix.
               @tsexample
               getTrailingNumber( \"test123\" ) // Returns '123'.
               @endtsexample
               @see stripTrailingNumber
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getUniqueInternalName(System.String,System.String,System.Boolean)">
            <summary>
            ( String baseName, SimSet set, bool searchChildren )
               @brief Returns a unique unused internal name within the SimSet/Group based on a given base name.
               @note Currently only used by editors
               @ingroup Editors
               @internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getUniqueName(System.String)">
            <summary>
            ( String baseName )
            	@brief Returns a unique unused SimObject name based on a given base name.
            	@baseName Name to conver to a unique string if another instance exists
            	@note Currently only used by editors
            	@ingroup Editors
            	@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getUserDataDirectory">
            <summary>
            getUserDataDirectory())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getUserHomeDirectory">
            <summary>
            getUserHomeDirectory())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getVariable(System.String)">
            <summary>
            (string varName) 
               @brief Returns the value of the named variable or an empty string if not found.
               @varName Name of the variable to search for
               @return Value contained by varName, \"\" if the variable does not exist
               @ingroup Scripting)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getVersionNumber">
            <summary>
            Get the version of the engine build, as a string. 
            				@ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getVersionString">
            <summary>
            Get the version of the engine build, as a human readable string. 
            				@ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getWebDeployment">
            <summary>
            Test whether Torque is running in web-deployment mode.
               In this mode, Torque will usually run within a browser and certain restrictions apply (e.g. Torque will not 
               be able to enter fullscreen exclusive mode).
               @return True if Torque is running in web-deployment mode.
               @ingroup Platform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getWord(System.String,System.Int32)">
            <summary>
            Extract the word at the given @a index in the whitespace-separated list in @a text.
               Words in @a text must be separated by newlines, spaces, and/or tabs.
               @param text A whitespace-separated list of words.
               @param index The zero-based index of the word to extract.
               @return The word at the given index or \"\" if the index is out of range.
               @tsexample
                  getWord( \"a b c\", 1 ) // Returns \"b\"
               @endtsexample
               @see getWords
               @see getWordCount
               @see getField
               @see getRecord
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getWordCount(System.String)">
            <summary>
            Return the number of whitespace-separated words in @a text.
               Words in @a text must be separated by newlines, spaces, and/or tabs.
               @param text A whitespace-separated list of words.
               @return The number of whitespace-separated words in @a text.
               @tsexample
                  getWordCount( \"a b c d e\" ) // Returns 5
               @endtsexample
               @see getFieldCount
               @see getRecordCount
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getWords(System.String,System.Int32,System.Int32)">
            <summary>
            Extract a range of words from the given @a startIndex onwards thru @a endIndex.
               Words in @a text must be separated by newlines, spaces, and/or tabs.
               @param text A whitespace-separated list of words.
               @param startIndex The zero-based index of the first word to extract from @a text.
               @param endIndex The zero-based index of the last word to extract from @a text.  If this is -1, all words beginning 
                  with @a startIndex are extracted from @a text.
               @return A string containing the specified range of words from @a text or \"\" if @a startIndex 
                  is out of range or greater than @a endIndex.
               @tsexample
                  getWords( \"a b c d\", 1, 2, ) // Returns \"b c\"
               @endtsexample
               @see getWord
               @see getWordCount
               @see getFields
               @see getRecords
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getWorkingDirectory">
            <summary>
            @brief Reports the current directory
            
            	@return String containing full file path of working directory
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_getXInputState(System.Int32,System.String,System.Boolean)">
            <summary>
            ( int controllerID, string property, bool currentD )
            				@brief Queries the current state of a connected Xbox 360 controller.
                        XInput Properties:
                         - XI_THUMBLX, XI_THUMBLY - X and Y axes of the left thumbstick. 
                         - XI_THUMBRX, XI_THUMBRY - X and Y axes of the right thumbstick. 
                         - XI_LEFT_TRIGGER, XI_RIGHT_TRIGGER - Left and Right triggers. 
                         - SI_UPOV, SI_DPOV, SI_LPOV, SI_RPOV - Up, Down, Left, and Right on the directional pad.
                         - XI_START, XI_BACK - The Start and Back buttons.
                         - XI_LEFT_THUMB, XI_RIGHT_THUMB - Clicking in the left and right thumbstick.
                         - XI_LEFT_SHOULDER, XI_RIGHT_SHOULDER - Left and Right bumpers.
                         - XI_A, XI_B , XI_X, XI_Y - The A, B, X, and Y buttons.
                        @param controllerID Zero-based index of the controller to return information about.
                        @param property Name of input action being queried, such as \"XI_THUMBLX\".
                        @param current True checks current device in action.
                        @return Button queried - 1 if the button is pressed, 0 if it's not.
                        @return Thumbstick queried - Int representing displacement from rest position.
                        @return %Trigger queried - Int from 0 to 255 representing how far the trigger is displaced.
                        @ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_gotoWebPage(System.String)">
            <summary>
            Open the given URL or file in the user's web browser.
               @param address The address to open.  If this is not prefixed by a protocol specifier (\"...://\"), then 
                  the function checks whether the address refers to a file or directory and if so, prepends \"file://\" 
                  to @a adress; if the file check fails, \"http://\" is prepended to @a address.
               @tsexample
                  gotoWebPage( \"http://www.garagegames.com\" );
               @endtsexample
               @ingroup Platform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiBitmapCtrl_setBitmap(System.String,System.String,System.Boolean)">
            <summary>
            ( String filename | String filename, bool resize ) Assign an image to the control.
               @hide )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiCanvas_isFullscreen(System.String)">
            <summary>
            () - Is this canvas currently fullscreen? )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiCanvas_isMaximized(System.String)">
            <summary>
            () )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiCanvas_isMinimized(System.String)">
            <summary>
            () )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiCanvas_maximizeWindow(System.String)">
            <summary>
            () - maximize this canvas' window. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiCanvas_minimizeWindow(System.String)">
            <summary>
            () - minimize this canvas' window. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiCanvas_popDialog(System.String,System.String)">
            <summary>
            (GuiControl ctrl=NULL)
            			  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiCanvas_popLayer(System.String,System.Int32)">
            <summary>
            (int layer) 
            			  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiCanvas_pushDialog(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            (GuiControl ctrl, int layer=0, bool center=false)
            			  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiCanvas_restoreWindow(System.String)">
            <summary>
            () - restore this canvas' window. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiCanvas_setCursorPos(System.String,System.String)">
            <summary>
            (Point2I pos)
            			  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiCanvas_setFocus(System.String)">
            <summary>
            () - Claim OS input focus for this canvas' window.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiCanvas_setVideoMode(System.String,System.UInt32,System.UInt32,System.Boolean,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            (int width, int height, bool fullscreen, [int bitDepth], [int refreshRate], [int antialiasLevel] )
                           Change the video mode of this canvas. This method has the side effect of setting the $pref::Video::mode to the new values.
                           \\param width The screen width to set.
                           \\param height The screen height to set.
                           \\param fullscreen Specify true to run fullscreen or false to run in a window
                           \\param bitDepth [optional] The desired bit-depth. Defaults to the current setting. This parameter is ignored if you are running in a window.
                           \\param refreshRate [optional] The desired refresh rate. Defaults to the current setting. This parameter is ignored if you are running in a window
            					\\param antialiasLevel [optional] The level of anti-aliasing to apply 0 = none )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiColorPickerCtrl_getSelectorPos(System.String)">
            <summary>
            Gets the current position of the selector)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiColorPickerCtrl_setSelectorPos(System.String,System.String)">
            <summary>
            Sets the current position of the selector)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiColorPickerCtrl_updateColor(System.String)">
            <summary>
            Forces update of pick color)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiControl_getBounds(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiControl_getValue(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiControl_isActive(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiControl_makeFirstResponder(System.String,System.Boolean)">
            <summary>
            (bool isFirst))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiControl_setExtent(System.String,System.String)">
            <summary>
             Set the width and height of the control.
               @hide )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiControlProfile_getStringWidth(System.String,System.String)">
            <summary>
            ( pString ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiConvexEditorCtrl_dropSelectionAtScreenCenter(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiConvexEditorCtrl_handleDelete(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiConvexEditorCtrl_handleDeselect(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiConvexEditorCtrl_hasSelection(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiConvexEditorCtrl_hollowSelection(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiConvexEditorCtrl_recenterSelection(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiConvexEditorCtrl_selectConvex(System.String,System.String)">
            <summary>
            ( ConvexShape ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiConvexEditorCtrl_splitSelectedFace(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiDecalEditorCtrl_deleteDecalDatablock(System.String,System.String)">
            <summary>
            deleteSelectedDecalDatablock( String datablock ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiDecalEditorCtrl_deleteSelectedDecal(System.String)">
            <summary>
            deleteSelectedDecal() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiDecalEditorCtrl_editDecalDetails(System.String,System.UInt32,System.String,System.String,System.Single)">
            <summary>
            editDecalDetails( S32 )() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiDecalEditorCtrl_getDecalCount(System.String)">
            <summary>
            getDecalCount() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiDecalEditorCtrl_getDecalLookupName(System.String,System.UInt32)">
            <summary>
            getDecalLookupName( S32 )() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiDecalEditorCtrl_getDecalTransform(System.String,System.UInt32)">
            <summary>
            getDecalTransform() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiDecalEditorCtrl_getMode(System.String)">
            <summary>
            getMode() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiDecalEditorCtrl_getSelectionCount(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiDecalEditorCtrl_retargetDecalDatablock(System.String,System.String,System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiDecalEditorCtrl_selectDecal(System.String,System.UInt32)">
            <summary>
            selectDecal( S32 )() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiDecalEditorCtrl_setMode(System.String,System.String)">
            <summary>
            setMode( String mode )() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_addNewCtrl(System.String,System.String)">
            <summary>
            (GuiControl ctrl))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_addSelection(System.String,System.Int32)">
            <summary>
            selects a control.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_bringToFront(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_clearGuides(System.String,System.Int32)">
            <summary>
            ( [ int axis ] ) - Clear all currently set guide lines. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_clearSelection(System.String)">
            <summary>
            Clear selected controls list.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_deleteSelection(System.String)">
            <summary>
            () - Delete the selected controls.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_fitIntoParents(System.String,System.Boolean,System.Boolean)">
            <summary>
            ( bool width=true, bool height=true ) - Fit selected controls into their parents. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_getContentControl(System.String)">
            <summary>
            () - Return the toplevel control edited inside the GUI editor. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_getCurrentAddSet(System.String)">
            <summary>
            Returns the set to which new controls will be added)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_getMouseMode(System.String)">
            <summary>
            () - Return the current mouse mode. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_getNumSelected(System.String)">
            <summary>
            () - Return the number of controls currently selected. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_getSelectionGlobalBounds(System.String)">
            <summary>
            () - Returns global bounds of current selection as vector 'x y width height'. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_justify(System.String,System.UInt32)">
            <summary>
            (int mode) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_loadSelection(System.String,System.String)">
            <summary>
            ( string fileName=null ) - Load selection from file or clipboard.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_moveSelection(System.String,System.String)">
            <summary>
            Move all controls in the selection by (dx,dy) pixels.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_pushToBack(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_readGuides(System.String,System.String,System.Int32)">
            <summary>
            ( GuiControl ctrl [, int axis ] ) - Read the guides from the given control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_removeSelection(System.String,System.Int32)">
            <summary>
            deselects a control.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_saveSelection(System.String,System.String)">
            <summary>
            ( string fileName=null ) - Save selection to file or clipboard.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_select(System.String,System.String)">
            <summary>
            (GuiControl ctrl))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_selectAll(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_selectChildren(System.String,System.Boolean)">
            <summary>
            ( bool addToSelection=false ) - Select children of currently selected controls. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_selectParents(System.String,System.Boolean)">
            <summary>
            ( bool addToSelection=false ) - Select parents of currently selected controls. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_setContentControl(System.String,System.String)">
            <summary>
            ( GuiControl ctrl ) - Set the toplevel control to edit in the GUI editor. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_setCurrentAddSet(System.String,System.String)">
            <summary>
            (GuiControl ctrl))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_setSnapToGrid(System.String,System.UInt32)">
            <summary>
            GuiEditCtrl.setSnapToGrid(gridsize))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_toggle(System.String)">
            <summary>
            Toggle activation.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiEditCtrl_writeGuides(System.String,System.String,System.Int32)">
            <summary>
            ( GuiControl ctrl [, int axis ] ) - Write the guides to the given control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiFileTreeCtrl_getSelectedPath(System.String)">
            <summary>
            getSelectedPath() - returns the currently selected path in the tree)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiFileTreeCtrl_reload(System.String)">
            <summary>
            () - Reread the directory tree hierarchy. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiFileTreeCtrl_setSelectedPath(System.String,System.String)">
            <summary>
            setSelectedPath(path) - expands the tree to the specified path)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiFilterCtrl_getValue(System.String)">
            <summary>
            Return a tuple containing all the values in the filter.
            			  @internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiFilterCtrl_identity(System.String)">
            <summary>
            Reset the filtering.
            			  @internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiGradientCtrl_getColor(System.String,System.Int32)">
            <summary>
            Get color value)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiGradientCtrl_getColorCount(System.String)">
            <summary>
            Get color count)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiIdleCamFadeBitmapCtrl_fadeIn(System.String)">
            <summary>
            ()
            			  @internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiIdleCamFadeBitmapCtrl_fadeOut(System.String)">
            <summary>
            ()
            			  @internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiInspector_addInspect(System.String,System.String,System.Boolean)">
            <summary>
            ( id object, (bool autoSync = true) ) - Add the object to the list of objects being inspected. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiInspector_apply(System.String)">
            <summary>
            apply() - Force application of inspected object's attributes )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiInspector_getInspectObject(System.String,System.UInt32)">
            <summary>
            getInspectObject( int index=0 ) - Returns currently inspected object )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiInspector_getNumInspectObjects(System.String)">
            <summary>
            () - Return the number of objects currently being inspected. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiInspector_inspect(System.String,System.String)">
            <summary>
            Inspect(Object))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiInspector_refresh(System.String)">
            <summary>
            Reinspect the currently selected object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiInspector_removeInspect(System.String,System.String)">
            <summary>
            ( id object ) - Remove the object from the list of objects being inspected. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiInspector_setName(System.String,System.String)">
            <summary>
            setName(NewObjectName))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiInspector_setObjectField(System.String,System.String,System.String)">
            <summary>
            setObjectField( fieldname, data ) - Set a named fields value on the inspected object if it exists. This triggers all the usual callbacks that would occur if the field had been changed through the gui. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiInspectorDynamicField_renameField(System.String,System.String)">
            <summary>
            field.renameField(newDynamicFieldName); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiInspectorDynamicGroup_addDynamicField(System.String)">
            <summary>
            obj.addDynamicField(); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiInspectorDynamicGroup_inspectGroup(System.String)">
            <summary>
            Refreshes the dynamic fields in the inspector.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiInspectorDynamicGroup_removeDynamicField(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiInspectorField_apply(System.String,System.String,System.Boolean)">
            <summary>
            , true), ( string newValue, bool callbacks=true ) - Set the field's value. Suppress callbacks for undo if callbacks=false. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiInspectorField_applyWithoutUndo(System.String,System.String)">
            <summary>
            () - Set field value without recording undo (same as 'apply( value, false )'). )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiInspectorField_getData(System.String)">
            <summary>
            () - Return the value currently displayed on the field. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiInspectorField_getInspectedFieldName(System.String)">
            <summary>
            () - Return the name of the field edited by this inspector field. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiInspectorField_getInspectedFieldType(System.String)">
            <summary>
            () - Return the type of the field edited by this inspector field. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiInspectorField_getInspector(System.String)">
            <summary>
            () - Return the GuiInspector to which this field belongs. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiInspectorField_reset(System.String)">
            <summary>
            () - Reset to default value. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiMaterialCtrl_setMaterial(System.String,System.String)">
            <summary>
            ( string materialName )
                           Set the material to be displayed in the control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiMeshRoadEditorCtrl_deleteNode(System.String)">
            <summary>
            deleteNode() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiMeshRoadEditorCtrl_getMode(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiMeshRoadEditorCtrl_getNodeDepth(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiMeshRoadEditorCtrl_getNodeNormal(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiMeshRoadEditorCtrl_getNodePosition(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiMeshRoadEditorCtrl_getNodeWidth(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiMeshRoadEditorCtrl_getSelectedRoad(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiMeshRoadEditorCtrl_matchTerrainToRoad(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiMeshRoadEditorCtrl_regenerate(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiMeshRoadEditorCtrl_setMode(System.String,System.String)">
            <summary>
            setMode( String mode ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiMeshRoadEditorCtrl_setNodeDepth(System.String,System.Single)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiMeshRoadEditorCtrl_setNodeNormal(System.String,System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiMeshRoadEditorCtrl_setNodePosition(System.String,System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiMeshRoadEditorCtrl_setNodeWidth(System.String,System.Single)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiMeshRoadEditorCtrl_setSelectedRoad(System.String,System.String)">
            <summary>
            ),  )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiMissionAreaEditorCtrl_getSelectedMissionArea(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiMissionAreaEditorCtrl_setSelectedMissionArea(System.String,System.String)">
            <summary>
            ),  )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiNavEditorCtrl_getMode(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiNavEditorCtrl_setMode(System.String,System.String)">
            <summary>
            setMode(String mode))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_addPlotPoint(System.String,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            (int plotID, float x, float y, bool setAdded = true;)
                          Add a data point to the given plot.
            			  @return)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_changePlotPoint(System.String,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            (int plotID, int i, float x, float y)
                          Change a data point to the given plot and plot position.
            			  @param plotID The plot you want to access
            			  @param i The data point.
            			  @param x,y The plot position.
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_clearAllGraphs(System.String)">
            <summary>
            ()
                          Clear all of the graphs.
            			  @return No return value)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_clearGraph(System.String,System.Int32)">
            <summary>
            (int plotID)
                          Clear the graph of the given plot.
            			  @return No return value)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_getGraphColor(System.String,System.Int32)">
            <summary>
            (int plotID)
                          Get the color of the graph passed.
            			  @return Returns the color of the graph as a string of RGB values formatted as \"R G B\")
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_getGraphMax(System.String,System.Int32)">
            <summary>
            (int plotID) 
            			  Get the maximum values of the graph ranges.
            			  @return Returns the maximum of the range formatted as \"x-max y-max\")
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_getGraphMin(System.String,System.Int32)">
            <summary>
            (int plotID) 
                          Get the minimum values of the graph ranges.
            			  @return Returns the minimum of the range formatted as \"x-min y-min\")
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_getGraphName(System.String,System.Int32)">
            <summary>
            (int plotID) 
                          Get the name of the graph passed.
            			  @return Returns the name of the plot)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_getPlotIndex(System.String,System.Int32,System.Single,System.Single)">
            <summary>
            (int plotID, float x, float y)
                          Gets the index of the point passed on the plotID passed (graph ID).
            			  @param plotID The plot you wish to check.
            			  @param x,y The coordinates of the point to get.
            			  @return Returns the index of the point.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_getPlotPoint(System.String,System.Int32,System.Int32)">
            <summary>
            (int plotID, int samples)
                          Get a data point from the plot specified, samples from the start of the graph.
            			  @return The data point ID)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_getSelectedPlot(System.String)">
            <summary>
            () 
                          Gets the selected Plot (a.k.a. graph).
            			  @return The plot's ID.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_getSelectedPoint(System.String)">
            <summary>
            ()
                          Gets the selected Point on the Plot (a.k.a. graph).
            			  @return The last selected point ID)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_insertPlotPoint(System.String,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            (int plotID, int i, float x, float y)
                          Insert a data point to the given plot and plot position.
            			  @param plotID The plot you want to access
            			  @param i The data point.
            			  @param x,y The plot position.
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_isExistingPoint(System.String,System.Int32,System.Int32)">
            <summary>
            (int plotID, int samples)
                          @return Returns true or false whether or not the point in the plot passed is an existing point.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_resetSelectedPoint(System.String)">
            <summary>
            ()
            			  This will reset the currently selected point to nothing.
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_setAutoGraphMax(System.String,System.Boolean)">
            <summary>
            (bool autoMax) 
            			  Set whether the max will automatically be set when adding points 
            			  (ie if you add a value over the current max, the max is increased to that value).
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_setAutoRemove(System.String,System.Boolean)">
            <summary>
            (bool autoRemove) 
            			  Set whether or not a point should be deleted when you drag another one over it.
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_setGraphHidden(System.String,System.Int32,System.Boolean)">
            <summary>
            (int plotID, bool isHidden)
            			  Set whether the graph number passed is hidden or not.
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_setGraphMax(System.String,System.Int32,System.Single,System.Single)">
            <summary>
            (int plotID, float maxX, float maxY) 
            			  Set the max values of the graph of plotID.
            			  @param plotID The plot to modify
            			  @param maxX,maxY The maximum bound of the value range.
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_setGraphMaxX(System.String,System.Int32,System.Single)">
            <summary>
            (int plotID, float maxX)
            			  Set the max X value of the graph of plotID.
            			  @param plotID The plot to modify.
            			  @param maxX The maximum x value.
            			  @return No return Value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_setGraphMaxY(System.String,System.Int32,System.Single)">
            <summary>
            (int plotID, float maxY)
            			  Set the max Y value of the graph of plotID.
            			  @param plotID The plot to modify.
            			  @param maxY The maximum y value.
            			  @return No return Value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_setGraphMin(System.String,System.Int32,System.Single,System.Single)">
            <summary>
            (int plotID, float minX, float minY) 
            			  Set the min values of the graph of plotID.
            			  @param plotID The plot to modify
            			  @param minX,minY The minimum bound of the value range.
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_setGraphMinX(System.String,System.Int32,System.Single)">
            <summary>
            (int plotID, float minX) 
            			  Set the min X value of the graph of plotID.
            			  @param plotID The plot to modify.
            			  @param minX The minimum x value.
            			  @return No return Value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_setGraphMinY(System.String,System.Int32,System.Single)">
            <summary>
            (int plotID, float minY) 
            			  Set the min Y value of the graph of plotID.
            			  @param plotID The plot to modify.
            			  @param minY The minimum y value.
            			  @return No return Value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_setGraphName(System.String,System.Int32,System.String)">
            <summary>
            (int plotID, string graphName) 
            			  Set the name of the given plot.
            			  @param plotID The plot to modify.
            			  @param graphName The name to set on the plot.
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_setPointXMovementClamped(System.String,System.Boolean)">
            <summary>
            (bool clamped)
            			  Set whether the x position of the selected graph point should be clamped
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_setRenderAll(System.String,System.Boolean)">
            <summary>
            (bool renderAll)
            			  Set whether or not a position should be rendered on every point or just the last selected.
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_setRenderGraphTooltip(System.String,System.Boolean)">
            <summary>
            (bool renderGraphTooltip)
            			  Set whether or not to render the graph tooltip.
            			  @return No return value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_setSelectedPlot(System.String,System.Int32)">
            <summary>
            (int plotID)
                          Set the selected plot (a.k.a. graph).
            			  @return No return value )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiParticleGraphCtrl_setSelectedPoint(System.String,System.Int32)">
            <summary>
            (int point)
                          Set the selected point on the graph.
            			  @return No return value)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrl_add(System.String,System.String,System.Int32,System.UInt32)">
            <summary>
            , -1, 0), (string name, int idNum, int scheme=0))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrl_addScheme(System.String,System.UInt32,System.String,System.String,System.String)">
            <summary>
            (int id, ColorI fontColor, ColorI fontColorHL, ColorI fontColorSEL))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrl_changeTextById(System.String,System.Int32,System.String)">
            <summary>
            ( int id, string text ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrl_clear(System.String)">
            <summary>
            Clear the popup list.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrl_clearEntry(System.String,System.Int32)">
            <summary>
            (S32 entry))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrl_findText(System.String,System.String)">
            <summary>
            (string text)
                          Returns the position of the first entry containing the specified text.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrl_forceClose(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrl_forceOnAction(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrl_getSelected(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrl_getText(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrl_getTextById(System.String,System.Int32)">
            <summary>
            (int id))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrl_replaceText(System.String,System.Boolean)">
            <summary>
            (bool doReplaceText))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrl_setEnumContent(System.String,System.String,System.String)">
            <summary>
            (string class, string enum)
                          This fills the popup with a classrep's field enumeration type info.
                          More of a helper function than anything.   If console access to the field list is added, 
                          at least for the enumerated types, then this should go away..)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrl_setFirstSelected(System.String,System.Boolean)">
            <summary>
            ([scriptCallback=true]))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrl_setNoneSelected(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrl_setSelected(System.String,System.Int32,System.Boolean)">
            <summary>
            (int id, [scriptCallback=true]))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrl_size(System.String)">
            <summary>
            Get the size of the menu - the number of entries in it.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrl_sort(System.String)">
            <summary>
            Sort the list alphabetically.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrl_sortID(System.String)">
            <summary>
            Sort the list by ID.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrlEx_add(System.String,System.String,System.Int32,System.UInt32)">
            <summary>
            , -1, 0), (string name, int idNum, int scheme=0))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrlEx_clearEntry(System.String,System.Int32)">
            <summary>
            (S32 entry))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrlEx_findText(System.String,System.String)">
            <summary>
            (string text)
                          Returns the id of the first entry containing the specified text or -1 if not found.
            			  @param text String value used for the query
            			  @return Numerical ID of entry containing the text.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrlEx_getColorById(System.String,System.Int32)">
            <summary>
            @brief Get color of an entry's box
            			  @param id ID number of entry to query
            			  @return ColorI in the format of \"Red Green Blue Alpha\", each of with is a value between 0 - 255)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrlEx_replaceText(System.String,System.Int32)">
            <summary>
            @brief Flag that causes each new text addition to replace the current entry
            			  @param True to turn on replacing, false to disable it)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrlEx_setEnumContent(System.String,System.String,System.String)">
            <summary>
            @brief This fills the popup with a classrep's field enumeration type info.
                          More of a helper function than anything.   If console access to the field list is added, 
                          at least for the enumerated types, then this should go away.
            			  @param class Name of the class containing the enum
            			  @param enum Name of the enum value to acces)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrlEx_setFirstSelected(System.String,System.Boolean)">
            <summary>
            ([scriptCallback=true])
            			  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrlEx_setSelected(System.String,System.Int32,System.Boolean)">
            <summary>
            (int id, [scriptCallback=true])
            			  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiPopUpMenuCtrlEx_size(System.String)">
            <summary>
            @brief Get the size of the menu
            			  @return Number of entries in the menu)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRiverEditorCtrl_deleteNode(System.String)">
            <summary>
            deleteNode() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRiverEditorCtrl_getMode(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRiverEditorCtrl_getNodeDepth(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRiverEditorCtrl_getNodeNormal(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRiverEditorCtrl_getNodePosition(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRiverEditorCtrl_getNodeWidth(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRiverEditorCtrl_getSelectedRiver(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRiverEditorCtrl_regenerate(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRiverEditorCtrl_setMode(System.String,System.String)">
            <summary>
            setMode( String mode ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRiverEditorCtrl_setNodeDepth(System.String,System.Single)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRiverEditorCtrl_setNodeNormal(System.String,System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRiverEditorCtrl_setNodePosition(System.String,System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRiverEditorCtrl_setNodeWidth(System.String,System.Single)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRiverEditorCtrl_setSelectedRiver(System.String,System.String)">
            <summary>
            ),  )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRoadEditorCtrl_deleteNode(System.String)">
            <summary>
            deleteNode() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRoadEditorCtrl_deleteRoad(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRoadEditorCtrl_getMode(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRoadEditorCtrl_getNodePosition(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRoadEditorCtrl_getNodeWidth(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRoadEditorCtrl_getSelectedNode(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRoadEditorCtrl_getSelectedRoad(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRoadEditorCtrl_setMode(System.String,System.String)">
            <summary>
            setMode( String mode ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRoadEditorCtrl_setNodePosition(System.String,System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRoadEditorCtrl_setNodeWidth(System.String,System.Single)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiRoadEditorCtrl_setSelectedRoad(System.String,System.String)">
            <summary>
            ),  )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTerrPreviewCtrl_getOrigin(System.String)">
            <summary>
            Return a Point2F containing the position of the origin.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTerrPreviewCtrl_getRoot(System.String)">
            <summary>
            Return a Point2F representing the position of the root.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTerrPreviewCtrl_getValue(System.String)">
            <summary>
            Returns a 4-tuple containing: root_x root_y origin_x origin_y)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTerrPreviewCtrl_reset(System.String)">
            <summary>
            Reset the view of the terrain.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTerrPreviewCtrl_setOrigin(System.String,System.String)">
            <summary>
            (float x, float y)
                          Set the origin of the view.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTerrPreviewCtrl_setRoot(System.String)">
            <summary>
            Add the origin to the root and reset the origin.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTerrPreviewCtrl_setValue(System.String,System.String)">
            <summary>
            Accepts a 4-tuple in the same form as getValue returns.
                          @see GuiTerrPreviewCtrl::getValue())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTextEditCtrl_selectText(System.String,System.Int32,System.Int32)">
            <summary>
            textEditCtrl.selectText( %startBlock, %endBlock ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTickCtrl_setProcessTicks(System.String,System.Boolean)">
            <summary>
            ( [tick = true] ) - This will set this object to either be processing ticks or not )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiToolboxButtonCtrl_setHoverBitmap(System.String,System.String)">
            <summary>
            ( filepath name ) sets the bitmap that shows when the button is disabled)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiToolboxButtonCtrl_setLoweredBitmap(System.String,System.String)">
            <summary>
            ( filepath name ) sets the bitmap that shows when the button is disabled)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiToolboxButtonCtrl_setNormalBitmap(System.String,System.String)">
            <summary>
            ( filepath name ) sets the bitmap that shows when the button is active)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_addChildSelectionByValue(System.String,System.Int32,System.String)">
            <summary>
            addChildSelectionByValue(TreeItemId parent, value))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_buildIconTable(System.String,System.String)">
            <summary>
            (builds an icon table))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_buildVisibleTree(System.String,System.Boolean)">
            <summary>
            Build the visible tree)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_cancelRename(System.String)">
            <summary>
            For internal use. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_clear(System.String)">
            <summary>
            () - empty tree)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_editItem(System.String,System.Int32,System.String,System.String)">
            <summary>
            (TreeItemId item, string newText, string newValue))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_expandItem(System.String,System.Int32,System.Boolean)">
            <summary>
            (TreeItemId item, bool expand=true))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_findItemByObjectId(System.String,System.Int32)">
            <summary>
            (find item by object id and returns the mId))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_getChild(System.String,System.Int32)">
            <summary>
            (TreeItemId item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_getFirstRootItem(System.String)">
            <summary>
            Get id for root item.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_getItemCount(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_getItemText(System.String,System.Int32)">
            <summary>
            (TreeItemId item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_getItemValue(System.String,System.Int32)">
            <summary>
            (TreeItemId item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_getNextSibling(System.String,System.Int32)">
            <summary>
            (TreeItemId item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_getParentItem(System.String,System.Int32)">
            <summary>
            (TreeItemId item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_getPrevSibling(System.String,System.Int32)">
            <summary>
            (TreeItemId item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_getSelectedItem(System.String,System.Int32)">
            <summary>
            ( int index=0 ) - Return the selected item at the given index.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_getSelectedItemList(System.String)">
            <summary>
            returns a space seperated list of mulitple item ids)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_getSelectedItemsCount(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_getSelectedObject(System.String,System.Int32)">
            <summary>
            ( int index=0 ) - Return the currently selected SimObject at the given index in inspector mode or -1)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_getSelectedObjectList(System.String)">
            <summary>
            Returns a space sperated list of all selected object ids.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_getTextToRoot(System.String,System.Int32,System.String)">
            <summary>
            (TreeItemId item,Delimiter=none) gets the text from the current node to the root, concatenating at each branch upward, with a specified delimiter optionally)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_isParentItem(System.String,System.Int32)">
            <summary>
            ( int id ) - Returns true if the given item contains child items. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_markItem(System.String,System.Int32,System.Boolean)">
            <summary>
            (TreeItemId item, bool mark=true))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_moveItemDown(System.String,System.Int32)">
            <summary>
            (TreeItemId item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_moveItemUp(System.String,System.Int32)">
            <summary>
            (TreeItemId item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_onRenameValidate(System.String)">
            <summary>
            For internal use. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_open(System.String,System.String,System.Boolean)">
            <summary>
            (SimSet obj, bool okToEdit=true) Set the root of the tree view to the specified object, or to the root set.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_removeAllChildren(System.String,System.Int32)">
            <summary>
            removeAllChildren(TreeItemId parent))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_removeChildSelectionByValue(System.String,System.Int32,System.String)">
            <summary>
            removeChildSelectionByValue(TreeItemId parent, value))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_removeItem(System.String,System.Int32)">
            <summary>
            (TreeItemId item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_removeSelection(System.String,System.Int32)">
            <summary>
            (deselects an item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_scrollVisible(System.String,System.Int32)">
            <summary>
            (TreeItemId item))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_scrollVisibleByObjectId(System.String,System.Int32)">
            <summary>
            (show item by object id. returns true if sucessful.))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_selectItem(System.String,System.Int32,System.Boolean)">
            <summary>
            (TreeItemId item, bool select=true))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_setDebug(System.String,System.Boolean)">
            <summary>
            ( bool value=true ) - Enable/disable debug output. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_setItemImages(System.String,System.Int32,System.SByte,System.SByte)">
            <summary>
            ( int id, int normalImage, int expandedImage ) - Sets the normal and expanded images to show for the given item. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_setItemTooltip(System.String,System.Int32,System.String)">
            <summary>
            ( int id, string text ) - Set the tooltip to show for the given item. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_showItemRenameCtrl(System.String,System.Int32)">
            <summary>
            ( TreeItemId id ) - Show the rename text field for the given item (only one at a time). )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiTreeViewCtrl_sort(System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            ( int parent, bool traverseHierarchy=false, bool parentsFirst=false, bool caseSensitive=true ) - Sorts all items of the given parent (or root).  With 'hierarchy', traverses hierarchy. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_GuiVariableInspector_loadVars(System.String,System.String)">
            <summary>
            loadVars( searchString ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_importCachedFont(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Import an image strip from exportCachedFont. Call with the 
               same parameters you called exportCachedFont.
               @param faceName The name of the font face.
               @param fontSize The size of the font in pixels.
               @param fileName The file name and path for the input PNG.
               @param padding The padding between characters.   
               @param kerning The kerning between characters.   
               @ingroup Font )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_initContainerRadiusSearch(System.String,System.Single,System.UInt32,System.Boolean)">
            <summary>
            @brief Start a search for items at the given position and within the given radius, filtering by mask.
            
               @param pos Center position for the search
               @param radius Search radius
               @param mask Bitmask of object types to include in the search
               @param useClientContainer Optionally indicates the search should be within the 
               client container.
            
               @see containerSearchNext 
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_initContainerTypeSearch(System.UInt32,System.Boolean)">
            <summary>
            @brief Start a search for all items of the types specified by the bitset mask.
            
               @param mask Bitmask of object types to include in the search
               @param useClientContainer Optionally indicates the search should be within the 
               client container.
            
               @see containerSearchNext 
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_initDisplayDeviceInfo">
            <summary>
            ()
            				@brief Initializes variables that track device and vendor information/IDs
            				@ingroup Rendering)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isalnum(System.String,System.Int32)">
            <summary>
            Test whether the character at the given position is an alpha-numeric character.
               Alpha-numeric characters are characters that are either alphabetic (a-z, A-Z) or numbers (0-9).
               @param str The string to test.
               @param index The index of a character in @a str.
               @return True if the character at the given index in @a str is an alpha-numeric character; false otherwise.
               @see isspace
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isClass(System.String)">
            <summary>
            @brief Returns true if the passed identifier is the name of a declared class.
            				@ingroup Console)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isCurrentScriptToolScript">
            <summary>
            () 
               Returns true if the calling script is a tools script.
               @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isDebugBuild">
            <summary>
            Test whether the engine has been compiled with TORQUE_DEBUG, i.e. if it includes debugging functionality.
               @return True if this is a debug build; false otherwise.
               @ingroup Platform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isDefined(System.String,System.String)">
            <summary>
            ) , (string varName) 
            	@brief Determines if a variable exists and contains a value
            	@param varName Name of the variable to search for
            	@return True if the variable was defined in script, false if not
               @tsexample
                  isDefined( \"$myVar\" );
               @endtsexample
            	@ingroup Scripting)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isDemo">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_IsDirectory(System.String)">
            <summary>
            @brief Determines if a specified directory exists or not
            
            	@param directory String containing path in the form of \"foo/bar\"
               @return Returns true if the directory was found.
            
            	@note Do not include a trailing slash '/'.
            
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isEventPending(System.Int32)">
            <summary>
            isEventPending(%scheduleId);)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isFile(System.String)">
            <summary>
            @brief Determines if the specified file exists or not
               
               @param fileName The path to the file.
               @return Returns true if the file was found.
               
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isFunction(System.String)">
            <summary>
            (string funcName) 
            	@brief Determines if a function exists or not
            	@param funcName String containing name of the function
            	@return True if the function exists, false if not
            	@ingroup Scripting)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isJoystickDetected">
            <summary>
            isJoystickDetected())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isJoystickEnabled">
            <summary>
            ()
            				@brief Queries input manager to see if a joystick is enabled
            				@return 1 if a joystick exists and is enabled, 0 if it's not.
            				@ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isKoreanBuild">
            <summary>
            isKoreanBuild())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isMemberOfClass(System.String,System.String)">
            <summary>
            @brief Returns true if the class is derived from the super class.
               If either class doesn't exist this returns false.
               @param className The class name.
               @param superClassName The super class to look for.
               @ingroup Console)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isMethod(System.String,System.String)">
            <summary>
            (string namespace, string method) 
            	@brief Determines if a class/namespace method exists
            	@param namespace Class or namespace, such as Player
            	@param method Name of the function to search for
            	@return True if the method exists, false if not
            	@ingroup Scripting)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isObject(System.String)">
            <summary>
            isObject(object))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isPackage(System.String)">
            <summary>
            @brief Returns true if the identifier is the name of a declared package.
               @ingroup Packages)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isQueueRegistered(System.String)">
            <summary>
            (string queueName)
            				@brief Determines if a dispatcher queue exists
            				@param queueName String containing the name of queue
            				@ingroup Messaging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isShippingBuild">
            <summary>
            Test whether the engine has been compiled with TORQUE_SHIPPING, i.e. in a form meant for final release.
               @return True if this is a shipping build; false otherwise.
               @ingroup Platform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isspace(System.String,System.Int32)">
            <summary>
            Test whether the character at the given position is a whitespace character.
               Characters such as tab, space, or newline are considered whitespace.
               @param str The string to test.
               @param index The index of a character in @a str.
               @return True if the character at the given index in @a str is a whitespace character; false otherwise.
               @see isalnum
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isToolBuild">
            <summary>
            Test whether the engine has been compiled with TORQUE_TOOLS, i.e. if it includes tool-related functionality.
               @return True if this is a tool build; false otherwise.
               @ingroup Platform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isValidObjectName(System.String)">
            <summary>
            ( string name )
            				@brief Return true if the given name makes for a valid object name.
            				@param name Name of object
            				@return True if name is allowed, false if denied (usually because it starts with a number, _, or invalid character
            				@ingroup Console)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isWebDemo">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isWriteableFileName(System.String)">
            <summary>
            @brief Determines if a file name can be written to using File I/O
            
            	@param fileName Name and path of file to check
            	@return Returns true if the file can be written to.
            
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_isXInputConnected(System.Int32)">
            <summary>
            ( int controllerID )
            				@brief Checks to see if an Xbox 360 controller is connected
            				@param controllerID Zero-based index of the controller to check.
                        @return 1 if the controller is connected, 0 if it isn't, and 205 if XInput 
                        hasn't been initialized.
            				@ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_LangTable_addLanguage(System.String,System.String,System.String)">
            <summary>
            , ), 
            			  (string filename, [string languageName])
            			  @brief Adds a language to the table
            			  @param filename Name and path to the language file
            			  @param languageName Optional name to assign to the new language entry
            			  @return True If file was successfully found and language created
            			  )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_LangTable_getCurrentLanguage(System.String)">
            <summary>
            ()
            			  @brief Get the ID of the current language table
            			  @return Numerical ID of the current language table)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_LangTable_getLangName(System.String,System.Int32)">
            <summary>
            (int language)
            			  @brief Return the readable name of the language table
            			  @param language Numerical ID of the language table to access
            			  @return String containing the name of the table, NULL if ID was invalid or name was never specified)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_LangTable_getNumLang(System.String)">
            <summary>
            ()
            			  @brief Used to find out how many languages are in the table
            			  @return Size of the vector containing the languages, numerical)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_LangTable_getString(System.String,System.UInt32)">
            <summary>
            (string filename)
            			  @brief Grabs a string from the specified table
            			  If an invalid is passed, the function will attempt to 
            			  to grab from the default table
            			  @param filename Name of the language table to access
            			  @return Text from the specified language table, \"\" if ID was invalid and default table is not set)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_LangTable_setCurrentLanguage(System.String,System.Int32)">
            <summary>
            (int language)
            			  @brief Sets the current language table for grabbing text
            			  @param language ID of the table)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_LangTable_setDefaultLanguage(System.String,System.Int32)">
            <summary>
            (int language)
            			  @brief Sets the default language table
            			  @param language ID of the table)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_LightBase_pauseAnimation(System.String)">
            <summary>
            Stops the light animation. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_LightBase_playAnimation(System.String,System.String)">
            <summary>
            ), ( [LightAnimData anim] )\t
               Plays a light animation on the light.  If no LightAnimData is passed the 
               existing one is played.
               @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_lightScene(System.String,System.String)">
            <summary>
            Will generate static lighting for the scene if supported by the active light manager.
               If mode is \"forceAlways\", the lightmaps will be regenerated regardless of whether 
               lighting cache files can be written to. If mode is \"forceWritable\", then the lightmaps 
               will be regenerated only if the lighting cache files can be written.
               @param completeCallbackFn The name of the function to execute when the lighting is complete.
               @param mode One of \"forceAlways\",  \"forceWritable\" or \"loadOnly\".
               @return Returns true if the scene lighting process was started.
               @ingroup Lighting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_listGFXResources(System.Boolean)">
            <summary>
            Returns a list of the unflagged GFX resources. See flagCurrentGFXResources for usage details.
               @ingroup GFX
               @see flagCurrentGFXResources, clearGFXResourceFlags, describeGFXResources )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_loadColladaLights(System.String,System.String,System.String)">
            <summary>
            , ), 
               (string filename, SimGroup parentGroup=MissionGroup, SimObject baseObject=-1)
               Load all light instances from a COLLADA (.dae) file and add to the scene.
               @param filename COLLADA filename to load lights from
               @param parentGroup (optional) name of an existing simgroup to add the new 
               lights to (defaults to MissionGroup)
               @param baseObject (optional) name of an object to use as the origin (useful 
               if you are loading the lights for a collada scene and have moved or rotated 
               the geometry)
               @return true if successful, false otherwise
               @tsexample
               // load the lights in room.dae
               loadColladaLights( \"art/shapes/collada/room.dae\" );
               // load the lights in room.dae and add them to the RoomLights group
               loadColladaLights( \"art/shapes/collada/room.dae\", \"RoomLights\" );
               // load the lights in room.dae and use the transform of the \"Room\"
               object as the origin
               loadColladaLights( \"art/shapes/collada/room.dae\", \"\", \"Room\" );
               @endtsexample
               @note Currently for editor use only
               @ingroup Editors
               @internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_loadObject(System.String)">
            <summary>
            @brief Loads a serialized object from a file.
            				@param Name and path to text file containing the object
            				@ingroup Console)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_lockMouse(System.Boolean)">
            <summary>
            (bool isLocked) 
                        @brief Lock or unlock the mouse to the window.
                        When true, prevents the mouse from leaving the bounds of the game window.
                        @ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_log(System.String)">
            <summary>
            @brief Logs a message to the console.
               @param message The message text.
               @note By default, messages will appear white in the console.
               @ingroup Logging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_logError(System.String)">
            <summary>
            @brief Logs an error message to the console.
               @param message The message text.
               @note By default, errors will appear red in the console.
               @ingroup Logging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_logWarning(System.String)">
            <summary>
            @brief Logs a warning message to the console.
               @param message The message text.
               @note By default, warnings will appear turquoise in the console.
               @ingroup Logging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_ltrim(System.String)">
            <summary>
            Remove leading whitespace from the string.
               @param str A string.
               @return A string that is the same as @a str but with any leading (i.e. leftmost) whitespace removed.
               @tsexample
               ltrim( \"   string  \" ); // Returns \"string  \".
               @endtsexample
               @see rtrim
               @see trim
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_m2Pi">
            <summary>
            Return the value of 2*PI (full-circle in radians).
                @returns The value of 2*PI.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mAbs(System.Single)">
            <summary>
            Calculate absolute value of specified value.
                @param v Input Value.
                @returns Absolute value of specified value.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mAcos(System.Single)">
            <summary>
            Calculate the arc-cosine of v.
                @param v Input Value (in radians).
                @returns The arc-cosine of the input value.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_makeFullPath(System.String,System.String)">
            <summary>
            ),
            	@brief Converts a relative file path to a full path
            
            	For example, \"./console.log\" becomes \"C:/Torque/t3d/examples/FPS Example/game/console.log\"
            	@param path Name of file or path to check
               @param cwd Optional current working directory from which to build the full path.
            	@return String containing non-relative directory of path
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_makeRelativePath(System.String,System.String)">
            <summary>
            ),
            	@brief Turns a full or local path to a relative one
            
               For example, \"./game/art\" becomes \"game/art\"
               @param path Full path (may include a file) to convert
               @param to Optional base path used for the conversion.  If not supplied the current 
               working directory is used.
            	@returns String containing relative path
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mAsin(System.Single)">
            <summary>
            Calculate the arc-sine of v.
                @param v Input Value (in radians).
                @returns The arc-sine of the input value.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mAtan(System.Single,System.Single)">
            <summary>
            Calculate the arc-tangent (slope) of a line defined by rise and run.
                @param rise of line.
                @param run of line.
                @returns The arc-tangent (slope) of a line defined by rise and run.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Material_dumpInstances(System.String)">
            <summary>
            Dumps a formatted list of the currently allocated material instances for this material to the console. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Material_flush(System.String)">
            <summary>
            Flushes all material instances that use this material. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Material_getAnimFlags(System.String,System.UInt32)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Material_getFilename(System.String)">
            <summary>
            Get filename of material)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Material_isAutoGenerated(System.String)">
            <summary>
            Returns true if this Material was automatically generated by MaterialList::mapMaterials() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Material_reload(System.String)">
            <summary>
            Reloads all material instances that use this material. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Material_setAutoGenerated(System.String,System.Boolean)">
            <summary>
            setAutoGenerated(bool isAutoGenerated): Set whether or not the Material is autogenerated. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_MatrixCreate(System.String,System.String)">
            <summary>
            Create a transform from the given translation and orientation.
               @param position The translation vector for the transform.
               @param orientation The axis and rotation that orients the transform.
               @return A transform based on the given position and orientation.
               @ingroup Matrices )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_MatrixCreateFromEuler(System.String)">
            <summary>
            @Create a matrix from the given rotations.
               @param Vector3F X, Y, and Z rotation in *radians*.
               @return A transform based on the given orientation.
               @ingroup Matrices )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_MatrixMulPoint(System.String,System.String)">
            <summary>
            @brief Multiply the given point by the given transform assuming that w=1.
               This function will multiply the given vector such that translation with take effect.
               @param transform A transform.
               @param point A vector.
               @return The transformed vector.
               @ingroup Matrices)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_MatrixMultiply(System.String,System.String)">
            <summary>
            @brief Multiply the two matrices.
               @param left First transform.
               @param right Right transform.
               @return Concatenation of the two transforms.
               @ingroup Matrices )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_MatrixMulVector(System.String,System.String)">
            <summary>
            @brief Multiply the vector by the transform assuming that w=0.
               This function will multiply the given vector by the given transform such that translation will 
               not affect the vector.
               @param transform A transform.
               @param vector A vector.
               @return The transformed vector.
               @ingroup Matrices)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mCeil(System.Single)">
            <summary>
            Round v up to the nearest integer.
                @param v Number to convert to integer.
                @returns Number converted to integer.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mClamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamp the specified value between two bounds.
                @param v Input value.
                @param min Minimum Bound.
                @param max Maximum Bound.
                @returns The specified value clamped to the specified bounds.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mCos(System.Single)">
            <summary>
            Calculate the cosine of v.
                @param v Input Value (in radians).
                @returns The cosine of the input value.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mDegToRad(System.Single)">
            <summary>
            Convert specified degrees into radians.
                @param degrees Input Value (in degrees).
                @returns The specified degrees value converted to radians.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_MECreateUndoAction_addObject(System.String,System.String)">
            <summary>
            ( SimObject obj ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_MEDeleteUndoAction_deleteObject(System.String,System.String)">
            <summary>
            ( SimObject obj ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_MenuBar_attachToCanvas(System.String,System.String,System.Int32)">
            <summary>
            (GuiCanvas, pos))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_MenuBar_insert(System.String,System.String,System.Int32)">
            <summary>
            (object, pos) insert object at position)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_MenuBar_removeFromCanvas(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Message_addReference(System.String)">
            <summary>
            () Increment the reference count for this message)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Message_freeReference(System.String)">
            <summary>
            () Decrement the reference count for this message)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Message_getType(System.String)">
            <summary>
            () Get message type (script class name or C++ class name if no script defined class))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_messageBox(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Display a modal message box using the platform's native message box implementation.
               @param title The title to display on the message box window.
               @param message The text message to display in the box.
               @param buttons Which buttons to put on the message box.
               @param icons Which icon to show next to the message.
               @return One of $MROK, $MRCancel, $MRRetry, and $MRDontSave identifying the button that the user pressed.
               @tsexample
                  messageBox( \"Error\", \"\" );    @endtsexample
               @ingroup Platform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_MessageVector_dump(System.String,System.String,System.String)">
            <summary>
            ), (string filename, string header=NULL)
                          Dump the message vector to a file, optionally prefixing a header.
            			  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mFloatLength(System.Single,System.UInt32)">
            <summary>
            Formats the specified number to the given number of decimal places.
                @param v Number to format.
                @param precision Number of decimal places to format to (1-9).
                @returns Number formatted to the specified number of decimal places.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mFloor(System.Single)">
            <summary>
            Round v down to the nearest integer.
                @param v Number to convert to integer.
                @returns Number converted to integer.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mFMod(System.Single,System.Single)">
            <summary>
            Calculate the remainder of v/d.
                @param v Input Value.
                @param d Divisor Value.
                @returns The remainder of v/d.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mIsPow2(System.Int32)">
            <summary>
            Returns whether the value is an exact power of two.
                @param v Input value.
                @returns Whether the specified value is an exact power of two.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mLerp(System.Single,System.Single,System.Single)">
            <summary>
            Calculate linearly interpolated value between two specified numbers using specified normalized time.
                @param v1 Interpolate From Input value.
                @param v2 Interpolate To Input value.
                @param time Normalized time used to interpolate values (0-1).
                @returns The interpolated value between the two specified values at normalized time t.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mLog(System.Single)">
            <summary>
            Calculate the natural logarithm of v.
                @param v Input Value.
                @returns The natural logarithm of the input value.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mPi">
            <summary>
            Return the value of PI (half-circle in radians).
                @returns The value of PI.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mPow(System.Single,System.Single)">
            <summary>
            Calculate b raised to the p-th power.
                @param v Input Value.
                @param p Power to raise value by.
                @returns v raised to the p-th power.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mRadToDeg(System.Single)">
            <summary>
            Convert specified radians into degrees.
                @param radians Input Value (in radians).
                @returns The specified radians value converted to degrees.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mRound(System.Single,System.Int32)">
            <summary>
            Round v to the nth decimal place or the nearest whole number by default.  
                @param v Value to roundn  
                @param n Number of decimal places to round to, 0 by defaultn  
                @return The rounded value as a S32.  
                @ingroup Math )  
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mSaturate(System.Single)">
            <summary>
            Clamp the specified value between 0 and 1 (inclusive).
                @param v Input value.
                @returns The specified value clamped between 0 and 1 (inclusive).
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mSin(System.Single)">
            <summary>
            Calculate the sine of v.
                @param v Input Value (in radians).
                @returns The sine of the input value.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mSolveCubic(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Solve a cubic equation (3rd degree polynomial) of form a*x^3 + b*x^2 + c*x + d = 0.
                @param a First Coefficient.
                @param b Second Coefficient.
                @param c Third Coefficient.
                @param d Fourth Coefficient.
                @returns A 4-tuple, containing: (sol x0 x1 x2). (sol) is the number of solutions
                (being 0, 1, 2 or 3), and (x0), (x1) and (x2) are the solutions, if any.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mSolveQuadratic(System.Single,System.Single,System.Single)">
            <summary>
            Solve a quadratic equation (2nd degree polynomial) of form a*x^2 + b*x + c = 0.
                @param a First Coefficient.
                @param b Second Coefficient.
                @param c Third Coefficient.
                @returns A triple, containing: (sol x0 x1). (sol) is the number of solutions
                (being 0, 1, or 2), and (x0) and (x1) are the solutions, if any.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mSolveQuartic(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Solve a quartic equation (4th degree polynomial) of form a*x^4 + b*x^3 + c*x^2 + d*x + e = 0.
                @param a First Coefficient.
                @param b Second Coefficient.
                @param c Third Coefficient.
                @param d Fourth Coefficient.
                @param e Fifth Coefficient.
                @returns A 5-tuple, containing: (sol x0 x1 x2 c3). (sol) is the number of solutions
                (being 0, 1, 2, 3 or 4), and (x0), (x1), (x2) and (x3) are the solutions, if any.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mSqrt(System.Single)">
            <summary>
            Calculate the square-root of v.
                @param v Input Value.
                @returns The square-root of the input value.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_mTan(System.Single)">
            <summary>
            Calculate the tangent of v.
                @param v Input Value (in radians).
                @returns The tangent of the input value.
                @ingroup Math )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_nameToID(System.String)">
            <summary>
            nameToID(object))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_nextToken(System.String,System.String,System.String)">
            <summary>
            ( string str, string token, string delimiters ) 
               Tokenize a string using a set of delimiting characters.
               This function first skips all leading charaters in @a str that are contained in @a delimiters. 
               From that position, it then scans for the next character in @a str that is contained in @a delimiters and stores all characters 
               from the starting position up to the first delimiter in a variable in the current scope called @a token.  Finally, it 
               skips all characters in @a delimiters after the token and then returns the remaining string contents in @a str.
               To scan out all tokens in a string, call this function repeatedly by passing the result it returns each time as the new @a str 
               until the function returns \"\".
               @param str A string.
               @param token The name of the variable in which to store the current token.  This variable is set in the 
                  scope in which nextToken is called.
               @param delimiters A string of characters.  Each character is considered a delimiter.
               @return The remainder of @a str after the token has been parsed out or \"\" if no more tokens were found in @a str.
               @tsexample
                  // Prints:
                  // a
                  // b
                  // c
                  %str = \"a   b c\";
                  while ( %str !$= \"\" )
                  {
                     // First time, stores \"a\" in the variable %token and sets %str to \"b c\".
                     %str = nextToken( %str, \"token\", \" \" );
                     echo( %token );
                  }
               @endtsexample
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_openFile(System.String)">
            <summary>
            @brief Open the given @a file through the system.  This will usually open the file in its 
               associated application.
               @param file %Path of the file to open.
               @note Only present in a Tools build of Torque.
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_openFolder(System.String)">
            <summary>
            @brief Open the given folder in the system's file manager.
               @param path full path to a directory.
               @note Only present in a Tools build of Torque.
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_pathConcat(System.String,System.String)">
            <summary>
            @brief Combines two separate strings containing a file path and file name together into a single string
            
            	@param path String containing file path
            	@param file String containing file name
            	@return String containing concatenated file name and path
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_pathCopy(System.String,System.String,System.Boolean)">
            <summary>
            @brief Copy a file to a new location.
               @param fromFile %Path of the file to copy.
               @param toFile %Path where to copy @a fromFile to.
               @param noOverwrite If true, then @a fromFile will not overwrite a file that may already exist at @a toFile.
               @return True if the file was successfully copied, false otherwise.
               @note Only present in a Tools build of Torque.
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_pathOnMissionLoadDone">
            <summary>
            @brief Load all Path information from the mission.
            
               This function is usually called from the loadMissionStage2() server-side function 
               after the mission file has loaded.  Internally it places all Paths into the server's 
               PathManager.  From this point the Paths are ready for transmission to the clients.
            
               @tsexample
                  // Inform the engine to load all Path information from the mission.
                  pathOnMissionLoadDone();
               @endtsexample
            
               @see NetConnection::transmitPaths()
               @see NetConnection::clearPaths()
               @see Path
            
               @ingroup Networking)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PersistenceManager_clearAll(System.String)">
            <summary>
            ()
                          Clears all the tracked objects without saving them. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PersistenceManager_deleteObjectsFromFile(System.String,System.String)">
            <summary>
            ( fileName )
                          Delete all of the objects that are created from the given file. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PersistenceManager_getDirtyObject(System.String,System.Int32)">
            <summary>
            ( index )
                          Returns the ith dirty object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PersistenceManager_getDirtyObjectCount(System.String)">
            <summary>
            ()
                          Returns the number of dirty objects. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PersistenceManager_hasDirty(System.String)">
            <summary>
            ()
                          Returns true if the manager has dirty objects to save. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PersistenceManager_isDirty(System.String,System.String)">
            <summary>
            (SimObject object)
                          Returns true if the SimObject is on the dirty list.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PersistenceManager_listDirty(System.String)">
            <summary>
            ()
                          Prints the dirty list to the console.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PersistenceManager_removeDirty(System.String,System.String)">
            <summary>
            (SimObject object)
                          Remove a SimObject from the dirty list.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PersistenceManager_removeField(System.String,System.String,System.String)">
            <summary>
            (SimObject object, string fieldName)
                          Remove a specific field from an object declaration.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PersistenceManager_removeObjectFromFile(System.String,System.String,System.String)">
            <summary>
            ) , (SimObject object, [filename])
                          Remove an existing SimObject from a file (can optionally specify a different file than \
                           the one it was created in.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PersistenceManager_saveDirty(System.String)">
            <summary>
            ()
                          Saves all of the SimObject's on the dirty list to their respective files.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PersistenceManager_saveDirtyObject(System.String,System.String)">
            <summary>
            (SimObject object)
                          Save a dirty SimObject to it's file.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PersistenceManager_setDirty(System.String,System.String,System.String)">
            <summary>
            ), (SimObject object, [filename])
                          Mark an existing SimObject as dirty (will be written out when saveDirty() is called).)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PhysicsDebrisData_preload(System.String)">
            <summary>
            @brief Loads some information to have readily available at simulation time.
               Forces generation of shaders, materials, and other data used by the %PhysicsDebris object. 
               This function should be used while a level is loading in order to shorten 
               the amount of time to create a PhysicsDebris in game.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_physicsDebugDraw(System.Boolean)">
            <summary>
            physicsDebugDraw( bool enable ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_physicsDestroy">
            <summary>
            physicsDestroy())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_physicsDestroyWorld(System.String)">
            <summary>
            physicsDestroyWorld( String worldName ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_physicsGetTimeScale">
            <summary>
            physicsGetTimeScale())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_physicsInit(System.String)">
            <summary>
            ), physicsInit( [string library] ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_physicsInitWorld(System.String)">
            <summary>
            physicsInitWorld( String worldName ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_physicsPluginPresent">
            <summary>
            physicsPluginPresent()
               @brief Returns true if a physics plugin exists and is initialized.
               @ingroup Physics )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_physicsRestoreState">
            <summary>
            physicsRestoreState())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_physicsSetTimeScale(System.Single)">
            <summary>
            physicsSetTimeScale( F32 scale ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_physicsSimulationEnabled">
            <summary>
            physicsStopSimulation( String worldName ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_physicsStartSimulation(System.String)">
            <summary>
            physicsStartSimulation( String worldName ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_physicsStopSimulation(System.String)">
            <summary>
            physicsStopSimulation( String worldName ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_physicsStoreState">
            <summary>
            physicsStoreState())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_playJournal(System.String)">
            <summary>
            (string filename) 
                            @brief Begin playback of a journal from a specified field.
            				@param filename Name and path of file journal file
            				@ingroup Platform)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_playJournalToVideo(System.String,System.String,System.String,System.Single,System.String)">
            <summary>
            THEORA, 30.0f, Point2I::Zero ),
               Load a journal file and capture it video.
               @ingroup Rendering )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_popInstantGroup">
            <summary>
            () 
            				@brief Pop and restore the last setting of $instantGroup off the stack.
            				@note Currently only used for editors
            				@ingroup Editors
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_populateAllFontCacheRange(System.UInt32,System.UInt32)">
            <summary>
            Populate the font cache for all fonts with Unicode code points in the specified range.
               @param rangeStart The start Unicode point.
               @param rangeEnd The end Unicode point.
               @note We only support BMP-0, so code points range from 0 to 65535.
               @ingroup Font )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_populateAllFontCacheString(System.String)">
            <summary>
            Populate the font cache for all fonts with characters from the specified string.
               @ingroup Font )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_populateFontCacheRange(System.String,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Populate the font cache for the specified font with Unicode code points in the specified range.
               @param faceName The name of the font face.
               @param fontSize The size of the font in pixels.
               @param rangeStart The start Unicode point.
               @param rangeEnd The end Unicode point.
               @note We only support BMP-0, so code points range from 0 to 65535.
               @ingroup Font )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_populateFontCacheString(System.String,System.Int32,System.String)">
            <summary>
            Populate the font cache for the specified font with characters from the specified string.
                @param faceName The name of the font face.
                @param fontSize The size of the font in pixels.
                @param string The string to populate.
                @ingroup Font )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PopupMenu_attachToMenuBar(System.String,System.String,System.Int32,System.String)">
            <summary>
            (GuiCanvas, pos, title))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PopupMenu_checkItem(System.String,System.Int32,System.Boolean)">
            <summary>
            (pos, checked))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PopupMenu_checkRadioItem(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            (firstPos, lastPos, checkPos))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PopupMenu_enableItem(System.String,System.Int32,System.Boolean)">
            <summary>
            (pos, enabled))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PopupMenu_getItemCount(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PopupMenu_insertItem(System.String,System.Int32,System.String,System.String)">
            <summary>
            , ), (pos[, title][, accelerator]))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PopupMenu_insertSubMenu(System.String,System.Int32,System.String,System.String)">
            <summary>
            (pos, title, subMenu))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PopupMenu_isItemChecked(System.String,System.Int32)">
            <summary>
            (pos))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PopupMenu_removeFromMenuBar(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PopupMenu_removeItem(System.String,System.Int32)">
            <summary>
            (pos))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PopupMenu_setItem(System.String,System.Int32,System.String,System.String)">
            <summary>
            ), (pos, title[, accelerator]))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_PopupMenu_showPopup(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            (Canvas,[x, y]))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_preloadClientDataBlocks">
            <summary>
            Preload all datablocks in client mode.
               (Server parameter is set to false).  This will take some time to complete.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_profilerDump">
            <summary>
            @brief Dumps current profiling stats to the console window.
            				@note Markers disabled with profilerMarkerEnable() will be skipped over. 
            				If the profiler is currently running, it will be disabled.
            				@ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_profilerDumpToFile(System.String)">
            <summary>
            @brief Dumps current profiling stats to a file.
            				@note If the profiler is currently running, it will be disabled.
            				@param fileName Name and path of file to save profiling stats to. Must use forward slashes (/). 
            				Will attempt to create the file if it does not already exist.
            				@tsexample
            				profilerDumpToFile( \"C:/Torque/log1.txt\" );
            				@endtsexample
            				@ingroup Debugging )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_profilerEnable(System.Boolean)">
            <summary>
            @brief Enables or disables the profiler.
            				Data is only gathered while the profiler is enabled.
            				@note Profiler is not available in shipping builds.
            				T3D has predefined profiling areas surrounded by markers, 
            				but you may need to define additional markers (in C++) around areas you wish to profile,
            				 by using the PROFILE_START( markerName ); and PROFILE_END(); macros.
            				@ingroup Debugging )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_profilerMarkerEnable(System.String,System.Boolean)">
            <summary>
            @brief Enable or disable a specific profile.
               @param enable     Optional paramater to enable or disable the profile.
               @param markerName Name of a specific marker to enable or disable.
               @note Calling this function will first call profilerReset(), clearing all data from profiler. 
               All profile markers are enabled by default.
               @ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_profilerReset">
            <summary>
            @brief Resets the profiler, clearing it of all its data.
            				If the profiler is currently running, it will first be disabled. 
            				All markers will retain their current enabled/disabled status.
            				@ingroup Debugging )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_pushInstantGroup(System.String)">
            <summary>
            ) , ([group]) 
            				@brief Pushes the current $instantGroup on a stack 
            				and sets it to the given value (or clears it).
            				@note Currently only used for editors
            				@ingroup Editors
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_queryAllServers(System.UInt32,System.UInt32,System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            queryAllServers(...); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_queryLanServers(System.UInt32,System.UInt32,System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            queryLanServers(...); )
            
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_queryMasterServer(System.UInt32,System.UInt32,System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            queryMasterServer(...); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_querySingleServer(System.String,System.Byte)">
            <summary>
            querySingleServer(...); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_quit">
            <summary>
            Shut down the engine and exit its process.
               This function cleanly uninitializes the engine and then exits back to the system with a process 
               exit status indicating a clean exit.
               @see quitWithErrorMessage
               @ingroup Platform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_quitWithErrorMessage(System.String)">
            <summary>
            Display an error message box showing the given @a message and then shut down the engine and exit its process.
               This function cleanly uninitialized the engine and then exits back to the system with a process 
               exit status indicating an error.
               @param message The message to log to the console and show in an error message box.
               @see quit
               @ingroup Platform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_ReadXML_readFile(System.String)">
            <summary>
            readXMLObj.readFile();)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_redbookClose">
            <summary>
            Close the current Redbook device.
            				@brief Deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_redbookGetDeviceCount">
            <summary>
            get the number of redbook devices.
            				@brief Deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_redbookGetDeviceName(System.Int32)">
            <summary>
            (int index) Get name of specified Redbook device.
            				@brief Deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_redbookGetLastError">
            <summary>
            Get a string explaining the last redbook error.
            				@brief Deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_redbookGetTrackCount">
            <summary>
            Return the number of tracks.
            				@brief Deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_redbookGetVolume">
            <summary>
            Get the volume.
            				@brief Deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_redbookOpen(System.String)">
            <summary>
            ), (string device=NULL)
            				@brief Deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_redbookPlay(System.Int32)">
            <summary>
            (int track) Play the selected track.
            				@brief Deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_redbookSetVolume(System.Single)">
            <summary>
            (float volume) Set playback volume.
            				@brief Deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_redbookStop">
            <summary>
            Stop playing.
            				@brief Deprecated
            				@internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_registerMessageListener(System.String,System.String)">
            <summary>
            (string queueName, string listener)
            				@brief Registers an event message
            				@param queueName String containing the name of queue to attach listener to
            				@param listener Name of event messenger
            				@ingroup Messaging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_registerMessageQueue(System.String)">
            <summary>
            (string queueName)
            				@brief Registeres a dispatcher queue
            				@param queueName String containing the name of queue
            				@ingroup Messaging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_reInitMaterials">
            <summary>
            @brief Flushes all procedural shaders and re-initializes all active material instances. 
               @ingroup Materials)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_reloadResource(System.String)">
            <summary>
            Force the resource at specified input path to be reloaded
               @param path Path to the resource to be reloaded
               @tsexample
               reloadResource( \"art/shapes/box.dts\" );
               @endtsexample
               @note Currently used by editors only
               @ingroup Editors
               @internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_reloadTextures">
            <summary>
            Reload all the textures from disk.
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_removeField(System.String,System.Int32)">
            <summary>
            Remove the field in @a text at the given @a index.
               Fields in @a text must be separated by newlines and/or tabs.
               @param text A list of fields separated by newlines and/or tabs.
               @param index The zero-based index of the field in @a text.
               @return A new string with the field at the given index removed or the original string if @a index is 
                  out of range.
               @tsexample
                  removeField( \"a b\" TAB \"c d\" TAB \"e f\", 1 ) // Returns \"a b\" TAB \"e f\"
               @endtsexample
               @see removeWord
               @see removeRecord
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_removeGlobalShaderMacro(System.String)">
            <summary>
            Removes an existing global macro by name.
               @see addGlobalShaderMacro
               @ingroup Rendering )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_removeRecord(System.String,System.Int32)">
            <summary>
            Remove the record in @a text at the given @a index.
               Records in @a text must be separated by newlines.
               @param text A list of records separated by newlines.
               @param index The zero-based index of the record in @a text.
               @return A new string with the record at the given @a index removed or the original string if @a index is 
                  out of range.
               @tsexample
                  removeRecord( \"a b\" NL \"c d\" NL \"e f\", 1 ) // Returns \"a b\" NL \"e f\"
               @endtsexample
               @see removeWord
               @see removeField
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_removeTaggedString(System.Int32)">
            <summary>
            @brief Remove a tagged string from the Net String Table
            
               @param tag The tag associated with the string
            
               @see \\ref syntaxDataTypes under Tagged %Strings
               @see addTaggedString()
               @see getTaggedString()
               @ingroup Networking)
            	
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_removeWord(System.String,System.Int32)">
            <summary>
            Remove the word in @a text at the given @a index.
               Words in @a text must be separated by newlines, spaces, and/or tabs.
               @param text A whitespace-separated list of words.
               @param index The zero-based index of the word in @a text.
               @return A new string with the word at the given index removed or the original string if @a index is 
                  out of range.
               @tsexample
                  removeWord( \"a b c d\", 2 ) // Returns \"a b d\"
               @endtsexample
               @see removeField
               @see removeRecord
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_renameFile(System.String,System.String)">
            <summary>
            @brief Renames the given @a file.
               @param from %Path of the file to rename from.
               @param frome %Path of the file to rename to.
               @note Only present in a Tools build of Torque.
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_resetFPSTracker">
            <summary>
            ()
               @brief Reset FPS stats (fps::)
               @ingroup Game)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_resetLightManager">
            <summary>
            @brief Deactivates and then activates the currently active light manager.
               This causes most shaders to be regenerated and is often used when global 
               rendering changes have occured.
               @ingroup Lighting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_resetXInput">
            <summary>
            ()
                        @brief Rebuilds the XInput section of the InputManager
                        Requests a full refresh of events for all controllers. Useful when called at the beginning 
                        of game code after actionMaps are set up to hook up all appropriate events.
                        @ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_restWords(System.String)">
            <summary>
            Return all but the first word in @a text.
               @param text A list of words separated by newlines, spaces, and/or tabs.
               @return @a text with the first word removed.
               @note This is equal to 
               @tsexample_nopar
                  getWords( text, 1 )
               @endtsexample
               @see getWords
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_rtrim(System.String)">
            <summary>
            Remove trailing whitespace from the string.
               @param str A string.
               @return A string that is the same as @a str but with any trailing (i.e. rightmost) whitespace removed.
               @tsexample
               rtrim( \"   string  \" ); // Returns \"   string\".
               @endtsexample
               @see ltrim
               @see trim
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_rumble(System.String,System.Single,System.Single)">
            <summary>
            (string device, float xRumble, float yRumble)
                  @brief Activates the vibration motors in the specified controller.
                  The controller will constantly at it's xRumble and yRumble intensities until 
                  changed or told to stop.
                  Valid inputs for xRumble/yRumble are [0 - 1].
                  @param device Name of the device to rumble.
                  @param xRumble Intensity to apply to the left motor.
                  @param yRumble Intensity to apply to the right motor.
                  @note in an Xbox 360 controller, the left motor is low-frequency, 
                  while the right motor is high-frequency.
                  @ingroup Input)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_saveJournal(System.String)">
            <summary>
            (string filename) 
                            Save the journal to the specified file.
            				@ingroup Platform)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_saveObject(System.String,System.String)">
            <summary>
            @brief Serialize the object to a file.
            				@param object The object to serialize.
            				@param filename The file name and path.
            				@ingroup Console)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_sceneDumpZoneStates(System.Boolean)">
            <summary>
            Dump the current zoning states of all zone spaces in the scene to the console.
               @param updateFirst If true, zoning states are brought up to date first; if false, the zoning states 
               are dumped as is.
               @note Only valid on the client.
               @ingroup Game )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_sceneGetZoneOwner(System.UInt32)">
            <summary>
            Return the SceneObject that contains the given zone.
               @param zoneId ID of zone.
               @return A SceneObject or NULL if the given @a zoneId is invalid.
               @note Only valid on the client.
               @ingroup Game )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_screenShot(System.String,System.String,System.UInt32,System.Single)">
            <summary>
            Takes a screenshot with optional tiling to produce huge screenshots.
               @param file The output image file path.
               @param format Either JPEG or PNG.
               @param tileCount If greater than 1 will tile the current screen size to take a large format screenshot.
               @param tileOverlap The amount of horizontal and vertical overlap between the tiles used to remove tile edge artifacts from post effects.
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_selectFile(System.String)">
            <summary>
            @brief Open the given folder in the system's file manager.
               @param path full path to a directory.
               @note Only present in a Tools build of Torque.
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_setClipboard(System.String)">
            <summary>
            (string text)
                           @brief Set the system clipboard.
            			   @internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_setCoreLangTable(System.String)">
            <summary>
            (string LangTable)
            				@brief Sets the primary LangTable used by the game
            				@param LangTable ID of the core LangTable
            				@ingroup Localization)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_setCurrentDirectory(System.String)">
            <summary>
            @brief Set the current working directory.
               @param path The absolute or relative (to the current working directory) path of the directory which should be made the new 
                  working directory.
               @return True if the working directory was successfully changed to @a path, false otherwise.
               @note Only present in a Tools build of Torque.
               @ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_setDefaultFov(System.Single)">
            <summary>
            @brief Set the default FOV for a camera.
                        @param defaultFOV The default field of view in degrees
            				@ingroup CameraSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_setFarClippingDistance(System.Single)">
            <summary>
            Sets the clients far clipping.
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_setField(System.String,System.Int32,System.String)">
            <summary>
            Replace the field in @a text at the given @a index with @a replacement.
               Fields in @a text must be separated by newlines and/or tabs.
               @param text A list of fields separated by newlines and/or tabs.
               @param index The zero-based index of the field to replace.
               @param replacement The string with which to replace the field.
               @return A new string with the field at the given @a index replaced by @a replacement or the original 
                  string if @a index is out of range.
               @tsexample
                  setField( \"a b\" TAB \"c d\" TAB \"e f\", 1, \"g h\" ) // Returns \"a b\" TAB \"g h\" TAB \"e f\"
               @endtsexample
               @see getField
               @see setWord
               @see setRecord
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SetFogVolumeQuality(System.UInt32)">
            <summary>
            @brief Resizes the rendertargets of the Volumetric Fog object.
            	If there are fogobjects in the scene then the function is postponed until
            	all fogobjects are deleted.
            	@params new_quality new quality for the rendertargets 1 = full size, 2 = halfsize, 3 = 1/3, 4 = 1/4 ...)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_setFov(System.Single)">
            <summary>
            @brief Set the FOV of the camera.
                        @param FOV The camera's new FOV in degrees
            				@ingroup CameraSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_setFrustumOffset(System.String)">
            <summary>
            @brief .)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_setLightManager(System.String)">
            <summary>
            Finds and activates the named light manager.
               @return Returns true if the light manager is found and activated.
               @ingroup Lighting )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_setLogMode(System.Int32)">
            <summary>
            @brief Determines how log files are written.
            	Sets the operational mode of the console logging system.
               @param mode Parameter specifying the logging mode.  This can be:
                  - 1: Open and close the console log file for each seperate string of output.  This will ensure that all 
                     parts get written out to disk and that no parts remain in intermediate buffers even if the process crashes.
                  - 2: Keep the log file open and write to it continuously.  This will make the system operate faster but 
                     if the process crashes, parts of the output may not have been written to disk yet and will be missing from 
                     the log.
                     
                  Additionally, when changing the log mode and thus opening a new log file, either of the two mode values may be 
                  combined by binary OR with 0x4 to cause the logging system to flush all console log messages that had already been 
                  issued to the console system into the newly created log file.
            
            	@note Xbox 360 does not support logging to a file. Use Platform::OutputDebugStr in C++ instead.
            	@ingroup Logging )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_setNetPort(System.Int32,System.Boolean)">
            <summary>
            (int port, bool bind=true) 
               @brief Set the network port for the game to use.
            
               @param port The port to use.
               @param bind True if bind() should be called on the port.
            
               @returns True if the port was successfully opened.
            
               This will trigger a windows firewall prompt.  
               If you don't have firewall tunneling tech you can set this to false to avoid the prompt.
               @ingroup Networking)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_setPixelShaderVersion(System.Single)">
            <summary>
            @brief Sets the pixel shader version for the active device.
               This can be used to force a lower pixel shader version than is supported by 
               the device for testing or performance optimization.
               @param version The floating point shader version number.
               @note This will only affect shaders/materials created after the call 
               and should be used before the game begins.
               @see $pref::Video::forcedPixVersion
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_setRandomSeed(System.Int32)">
            <summary>
            Set the current seed for the random number generator.
               Based on this seed, a repeatable sequence of numbers will be produced by getRandom().
               @param seed The seed with which to initialize the randon number generator with.  The same seed will always leed to
                  the same sequence of pseudo-random numbers.
                  If -1, the current timestamp will be used as the seed which is a good basis for randomization.
               @ingroup Random )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_setRecord(System.String,System.Int32,System.String)">
            <summary>
            Replace the record in @a text at the given @a index with @a replacement.
               Records in @a text must be separated by newlines.
               @param text A list of records separated by newlines.
               @param index The zero-based index of the record to replace.
               @param replacement The string with which to replace the record.
               @return A new string with the record at the given @a index replaced by @a replacement or the original 
                  string if @a index is out of range.
               @tsexample
                  setRecord( \"a b\" NL \"c d\" NL \"e f\", 1, \"g h\" ) // Returns \"a b\" NL \"g h\" NL \"e f\"
               @endtsexample
               @see getRecord
               @see setWord
               @see setField
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_setReflectFormat(System.Int32)">
            <summary>
            Set the reflection texture format.
               @ingroup GFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_setServerInfo(System.UInt32)">
            <summary>
            setServerInfo(...); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_setShadowManager(System.String)">
            <summary>
            ), string sShadowSystemName)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_setShadowVizLight(System.String)">
            <summary>
            ), )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Settings_beginGroup(System.String,System.String,System.Boolean)">
            <summary>
            settingObj.beginGroup(groupName, fromStart = false);)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Settings_clearGroups(System.String)">
            <summary>
            settingObj.clearGroups();)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Settings_endGroup(System.String)">
            <summary>
            settingObj.endGroup();)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Settings_findFirstValue(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            , false, false), settingObj.findFirstValue();)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Settings_findNextValue(System.String)">
            <summary>
            settingObj.findNextValue();)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Settings_getCurrentGroups(System.String)">
            <summary>
            settingObj.getCurrentGroups();)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Settings_read(System.String)">
            <summary>
            %success = settingObj.read();)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Settings_remove(System.String,System.String,System.Boolean)">
            <summary>
            settingObj.remove(settingName, includeDefaults = false);)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Settings_setDefaultValue(System.String,System.String,System.String)">
            <summary>
            settingObj.setDefaultValue(settingName, value);)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Settings_setValue(System.String,System.String,System.String)">
            <summary>
            ), settingObj.setValue(settingName, value);)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Settings_value(System.String,System.String,System.String)">
            <summary>
            ), settingObj.value(settingName, defaultValue);)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_setVariable(System.String,System.String)">
            <summary>
            (string varName, string value) 
               @brief Sets the value of the named variable.
               @param varName Name of the variable to locate
               @param value New value of the variable
               @return True if variable was successfully found and set
               @ingroup Scripting)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_setWord(System.String,System.Int32,System.String)">
            <summary>
            Replace the word in @a text at the given @a index with @a replacement.
               Words in @a text must be separated by newlines, spaces, and/or tabs.
               @param text A whitespace-separated list of words.
               @param index The zero-based index of the word to replace.
               @param replacement The string with which to replace the word.
               @return A new string with the word at the given @a index replaced by @a replacement or the original 
                  string if @a index is out of range.
               @tsexample
                  setWord( \"a b c d\", 2, \"f\" ) // Returns \"a b f d\"
               @endtsexample
               @see getWord
               @see setField
               @see setRecord
               @ingroup FieldManip )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_setZoomSpeed(System.Int32)">
            <summary>
            @brief Set the zoom speed of the camera.
                        This affects how quickly the camera changes from one field of view 
                        to another.
                        @param speed The camera's zoom speed in ms per 90deg FOV change
            				@ingroup CameraSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_sfxCreateDevice(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Try to create a new sound device using the given properties.
               If a sound device is currently initialized, it will be uninitialized first.  However, be aware that in this case, 
               if this function fails, it will not restore the previously active device but rather leave the sound system in an 
               uninitialized state.
               Sounds that are already playing while the new device is created will be temporarily transitioned to virtualized 
               playback and then resume normal playback once the device has been created.
               In the core scripts, sound is automatically set up during startup in the sfxStartup() function.
               @param provider The name of the device provider as returned by sfxGetAvailableDevices().
               @param device The name of the device as returned by sfxGetAvailableDevices().
               @param useHardware Whether to enabled hardware mixing on the device or not.  Only relevant if supported by the given device.
               @param maxBuffers The maximum number of concurrent voices for this device to use or -1 for the device to pick its own reasonable default.
               @return True if the initialization was successful, false if not.
               @note This function must be called before any of the sound playback functions can be used.
               @see sfxGetAvailableDevices
               @see sfxGetDeviceInfo
               @see sfxDeleteDevice
               @ref SFX_devices
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_sfxCreateSource(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            , , , ),
                                 ( SFXTrack track | ( SFXDescription description, string filename ) [, float x, float y, float z ] ) 
                                 Creates a new paused sound source using a profile or a description 
                                 and filename.  The return value is the source which must be 
                                 released by delete().
                                 @hide )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_sfxDeleteDevice">
            <summary>
            Delete the currently active sound device and release all its resources.
               SFXSources that are still playing will be transitioned to virtualized playback mode. 
               When creating a new device, they will automatically transition back to normal playback.
               In the core scripts, this is done automatically for you during shutdown in the sfxShutdown() function.
               @see sfxCreateDevice
               @ref SFX_devices
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_sfxDeleteWhenStopped(System.String)">
            <summary>
            Mark the given @a source for deletion as soon as it moves into stopped state.
               This function will retroactively turn the given @a source into a play-once source (see @ref SFXSource_playonce).
               @param source A sound source.
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_sfxDumpSources(System.Boolean)">
            <summary>
            Dump information about all current SFXSource instances to the console.
               The dump includes information about the playback status for each source, volume levels, virtualization, etc.
               @param includeGroups If true, direct instances of SFXSources (which represent logical sound groups) will be included. 
                  Otherwise only instances of subclasses of SFXSources are included in the dump.
               @see SFXSource
               @see sfxDumpSourcesToString
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_sfxDumpSourcesToString(System.Boolean)">
            <summary>
            Dump information about all current SFXSource instances to a string.
               The dump includes information about the playback status for each source, volume levels, virtualization, etc.
               @param includeGroups If true, direct instances of SFXSources (which represent logical sound groups) will be included. 
                  Otherwise only instances of subclasses of SFXSources are included in the dump.
               @return A string containing a dump of information about all currently instantiated SFXSources.
               @see SFXSource
               @see sfxDumpSources
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_sfxGetActiveStates">
            <summary>
            Return a newline-separated list of all active states.
               @return A list of the form
               @verbatim
                  stateName1 NL stateName2 NL stateName3 ...
               @endverbatim
               where each element is the name of an active state object.
               @tsexample
                  // Disable all active states.
                  foreach$( %state in sfxGetActiveStates() )
                     %state.disable();
               @endtsexample
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_sfxGetAvailableDevices">
            <summary>
            Get a list of all available sound devices.
               The return value will be a newline-separated list of entries where each line describes one available sound 
               device.  Each such line will have the following format:
               @verbatim
                  provider TAB device TAB hasHardware TAB numMaxBuffers
               @endverbatim
               - provider: The name of the device provider (e.g. \"FMOD\").
               - device: The name of the device as returned by the device layer.
               - hasHardware: Whether the device supports hardware mixing or not.
               - numMaxBuffers: The maximum number of concurrent voices supported by the device's mixer.  If this limit 
                  limit is exceeded, i.e. if there are more active sounds playing at any one time, then voice virtualization 
                  will start culling voices and put them into virtualized playback mode.  Voice virtualization may or may not 
                  be provided by the device itself; if not provided by the device, it will be provided by Torque's sound system.
               @return A newline-separated list of information about all available sound devices.
               @see sfxCreateDevice
               @see sfxGetDeviceInfo
               @see $SFX::DEVICE_INFO_PROVIDER
               @see $SFX::DEVICE_INFO_NAME
               @see $SFX::DEVICE_INFO_USEHARDWARE
               @see $SFX::DEVICE_INFO_MAXBUFFERS
               @ref SFX_devices
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_sfxGetDeviceInfo">
            <summary>
            Return information about the currently active sound device.
               The return value is a tab-delimited string of the following format:
               @verbatim
                  provider TAB device TAB hasHardware TAB numMaxBuffers TAB caps
               @endverbatim
               - provider: The name of the device provider (e.g. \"FMOD\").
               - device: The name of the device as returned by the device layer.
               - hasHardware: Whether the device supports hardware mixing or not.
               - numMaxBuffers: The maximum number of concurrent voices supported by the device's mixer.  If this limit 
                  limit is exceeded, i.e. if there are more active sounds playing at any one time, then voice virtualization 
                  will start culling voices and put them into virtualized playback mode.  Voice virtualization may or may not 
                  be provided by the device itself; if not provided by the device, it will be provided by Torque's sound system.
               - caps: A bitfield of capability flags.
               @return A tab-separated list of properties of the currently active sound device or the empty string if no sound device has been initialized.
               @see sfxCreateDevice
               @see sfxGetAvailableDevices
               @see $SFX::DEVICE_INFO_PROVIDER
               @see $SFX::DEVICE_INFO_NAME
               @see $SFX::DEVICE_INFO_USEHARDWARE
               @see $SFX::DEVICE_INFO_MAXBUFFERS
               @see $SFX::DEVICE_INFO_CAPS
               @see $SFX::DEVICE_CAPS_REVERB
               @see $SFX::DEVICE_CAPS_VOICEMANAGEMENT
               @see $SFX::DEVICE_CAPS_OCCLUSION
               @see $SFX::DEVICE_CAPS_DSPEFFECTS
               @see $SFX::DEVICE_CAPS_MULTILISTENER
               @see $SFX::DEVICE_CAPS_FMODDESIGNER
               @ref SFX_devices
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_sfxGetDistanceModel">
            <summary>
            Get the falloff curve type currently being applied to 3D sounds.
               @return The current distance model type.
               @ref SFXSource_volume
               @ref SFX_3d
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_sfxGetDopplerFactor">
            <summary>
            Get the current global doppler effect setting.
               @return The current global doppler effect scale factor (>=0).
               @see sfxSetDopplerFactor
               @ref SFXSource_doppler
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_sfxGetRolloffFactor">
            <summary>
            Get the current global scale factor applied to volume attenuation of 3D sounds in the logarithmic model.
               @return The current scale factor for logarithmic 3D sound falloff curves.
               @see sfxGetDistanceModel
               @see SFXDistanceModel
               @ref SFXSource_volume
               @ref SFX_3d
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_sfxPlay(System.String,System.String,System.String,System.String)">
            <summary>
            , , ),
               Start playing the given source or create a new source for the given track and play it.
               @hide )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_sfxPlayOnce(System.String,System.String,System.String,System.String,System.String,System.Single)">
            <summary>
            , , , -1.0f),
               SFXSource sfxPlayOnce( ( SFXTrack track | SFXDescription description, string filename ) [, float x, float y, float z, float fadeInTime=-1 ] ) 
               Create a new play-once source for the given profile or description+filename and start playback of the source.
               @hide )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_sfxSetDistanceModel(System.Int32)">
            <summary>
            Set the falloff curve type to use for distance-based volume attenuation of 3D sounds.
               @param model The distance model to use for 3D sound.
               @note This setting takes effect globally and is applied to all 3D sounds.
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_sfxSetDopplerFactor(System.Single)">
            <summary>
            Set the global doppler effect scale factor.
               @param value The new doppler shift scale factor.
               @pre @a value must be >= 0.
               @see sfxGetDopplerFactor
               @ref SFXSource_doppler
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_sfxSetRolloffFactor(System.Single)">
            <summary>
            Set the global scale factor to apply to volume attenuation of 3D sounds in the logarithmic model.
               @param value The new scale factor for logarithmic 3D sound falloff curves.
               @pre @a value must be > 0.
               @note This function has no effect if the currently distance model is set to SFXDistanceModel::Linear.
               @see sfxGetDistanceModel
               @see SFXDistanceModel
               @ref SFXSource_volume
               @ref SFX_3d
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SFXSource_setTransform(System.String,System.String,System.String)">
            <summary>
             ),
               ( vector position [, vector direction ] ) 
               Set the position and orientation of a 3D sound source.
               @hide )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_sfxStop(System.String)">
            <summary>
            Stop playback of the given @a source.
               This is equivalent to calling SFXSource::stop().
               @param source The source to put into stopped state.
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_sfxStopAndDelete(System.String)">
            <summary>
            Stop playback of the given @a source (if it is not already stopped) and delete the @a source.
               The advantage of this function over directly calling delete() is that it will correctly 
               handle volume fades that may be configured on the source.  Whereas calling delete() would immediately 
               stop playback and delete the source, this functionality will wait for the fade-out to play and only then 
               stop the source and delete it.
               @param source A sound source.
               @ref SFXSource_fades
               @ingroup SFX )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_shellExecute(System.String,System.String,System.String)">
            <summary>
            , ), (string executable, string args, string directory)
            				@brief Launches an outside executable or batch file
            				@param executable Name of the executable or batch file
            				@param args Optional list of arguments, in string format, to pass to the executable
            				@param directory Optional string containing path to output or shell
            				@ingroup Platform)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimComponent_getComponent(System.String,System.Int32)">
            <summary>
            (idx) Get the component corresponding to the given index.
            			  @param idx An integer index value corresponding to the desired component.
            			  @return The id of the component at the given index as an integer)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimComponent_getComponentCount(System.String)">
            <summary>
            () Get the current component count
            			  @return The number of components in the list as an integer)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimComponent_getIsTemplate(System.String)">
            <summary>
            () Check whether SimComponent is currently a template
            			  @return true if is a template and false if not)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimComponent_isEnabled(System.String)">
            <summary>
            () Check whether SimComponent is currently enabled
            			  @return true if enabled and false if not)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimComponent_setEnabled(System.String,System.Boolean)">
            <summary>
            (enabled) Sets or unsets the enabled flag
            			  @param enabled Boolean value
            			  @return No return value)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimComponent_setIsTemplate(System.String,System.Boolean)">
            <summary>
            (template) Sets or unsets the template flag
            			  @param template Boolean value
            			  @return No return value)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimDataBlock_reloadOnLocalClient(System.String)">
            <summary>
            Reload the datablock.  This can only be used with a local client configuration. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_assignFieldsFrom(System.String,System.String)">
            <summary>
            Copy fields from another object onto this one.  The objects must 
               be of same type. Everything from the object will overwrite what's 
               in this object; extra fields in this object will remain. This 
               includes dynamic fields.
               @param fromObject The object from which to copy fields. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_delete(System.String)">
            <summary>
            Delete and remove the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_dumpClassHierarchy(System.String)">
            <summary>
            Dump the native C++ class hierarchy of this object's C++ class to the console. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_dumpMethods(System.String)">
            <summary>
            List the methods defined on this object.
               Each description is a newline-separated vector with the following elements:
               - Minimum number of arguments.
               - Maximum number of arguments.
               - Prototype string.
               - Full script file path (if script method).
               - Line number of method definition in script (if script method).
               - Documentation string (not including prototype).  This takes up the remainder of the vector.
               @return An ArrayObject populated with (name,description) pairs of all methods defined on the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_getCanSave(System.String)">
            <summary>
            Get whether the object will be included in saves.
               @return True if the object will be saved; false otherwise. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_getClassName(System.String)">
            <summary>
            Get the name of the C++ class which the object is an instance of.
               @return The name of the C++ class of the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_getClassNamespace(System.String)">
            <summary>
            Get the name of the class namespace assigned to this object.
               @return The name of the 'class' namespace. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_getDeclarationLine(System.String)">
            <summary>
            Get the line number at which the object is defined in its file.
               @return The line number of the object's definition in script.
               @see getFilename())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_getDynamicField(System.String,System.Int32)">
            <summary>
            Get a value of a dynamic field by index.
               @param index The index of the dynamic field.
               @return The value of the dynamic field at the given index or \"\". )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_getDynamicFieldCount(System.String)">
            <summary>
            Get the number of dynamic fields defined on the object.
               @return The number of dynamic fields defined on the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_getField(System.String,System.Int32)">
            <summary>
            Retrieve the value of a static field by index.
               @param index The index of the static field.
               @return The value of the static field with the given index or \"\". )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_getFieldCount(System.String)">
            <summary>
            Get the number of static fields on the object.
               @return The number of static fields defined on the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_getFieldType(System.String,System.String)">
            <summary>
            Get the console type code of the given field.
               @return The numeric type code for the underlying console type of the given field. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_getFieldValue(System.String,System.String,System.Int32)">
            <summary>
            Return the value of the given field on this object.
               @param fieldName The name of the field.  If it includes a field index, the index is parsed out.
               @param index Optional parameter to specify the index of an array field separately.
               @return The value of the given field or \"\" if undefined. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_getFilename(System.String)">
            <summary>
            Returns the filename the object is attached to.
               @return The name of the file the object is associated with; usually the file the object was loaded from. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_getSuperClassNamespace(System.String)">
            <summary>
            Get the name of the superclass namespace assigned to this object.
               @return The name of the 'superClass' namespace. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_isEnabled(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_isExpanded(System.String)">
            <summary>
            Get whether the object has been marked as expanded. (in editor)
               @return True if the object is marked expanded. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_isField(System.String,System.String)">
            <summary>
            Test whether the given field is defined on this object.
               @param fieldName The name of the field.
               @return True if the object implements the given field. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_isInNamespaceHierarchy(System.String,System.String)">
            <summary>
            Test whether the namespace of this object is a direct or indirect child to the given namespace.
               @param name The name of a namespace.
               @return True if the given namespace name is within the namespace hierarchy of this object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_isMemberOfClass(System.String,System.String)">
            <summary>
            Test whether this object is a member of the specified class.
               @param className Name of a native C++ class.
               @return True if this object is an instance of the given C++ class or any of its super classes. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_isMethod(System.String,System.String)">
            <summary>
            Test whether the given method is defined on this object.
               @param The name of the method.
               @return True if the object implements the given method. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_save(System.String,System.String,System.Boolean,System.String)">
            <summary>
             ),
               Save out the object to the given file.
               @param fileName The name of the file to save to.
               @param selectedOnly If true, only objects marked as selected will be saved out.
               @param preAppendString Text which will be preprended directly to the object serialization.
               @param True on success, false on failure. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_saveToXML(System.String,System.String,System.String)">
            <summary>
            Retrieve the value of a static field by index.
               @param index The index of the static field.
               @return The value of the static field with the given index or \"\". )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_setCanSave(System.String,System.Boolean)">
            <summary>
            Set whether the object will be included in saves.
               @param value If true, the object will be included in saves; if false, it will be excluded. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_setClassNamespace(System.String,System.String)">
            <summary>
            Assign a class namespace to this object.
               @param name The name of the 'class' namespace for this object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_setEnabled(System.String,System.Boolean)">
            <summary>
            (enabled))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_setFieldType(System.String,System.String,System.String)">
            <summary>
            Set the console type code for the given field.
               @param fieldName The name of the dynamic field to change to type for.
               @param type The name of the console type.
               @note This only works for dynamic fields.  Types of static fields cannot be changed. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_setFieldValue(System.String,System.String,System.String,System.Int32)">
            <summary>
            Set the value of the given field on this object.
               @param fieldName The name of the field to assign to.  If it includes an array index, the index will be parsed out.
               @param value The new value to assign to the field.
               @param index Optional argument to specify an index for an array field.
               @return True. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_setFilename(System.String,System.String)">
            <summary>
            Sets the object's file name and path
               @param fileName The name of the file to associate this object with. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_setIsExpanded(System.String,System.Boolean)">
            <summary>
            Set whether the object has been marked as expanded. (in editor)
               @param state True if the object is to be marked expanded; false if not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimObject_setSuperClassNamespace(System.String,System.String)">
            <summary>
            Assign a superclass namespace to this object.
               @param name The name of the 'superClass' namespace for this object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimPersistSet_resolvePersistentIds(System.String)">
            <summary>
            () - Try to bind unresolved persistent IDs in the set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimResponseCurve_addPoint(System.String,System.Single,System.Single)">
            <summary>
            addPoint( F32 value, F32 time ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimResponseCurve_clear(System.String)">
            <summary>
            clear() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimResponseCurve_getValue(System.String,System.Single)">
            <summary>
            getValue( F32 time ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimSet_deleteAllObjects(System.String)">
            <summary>
            () Delete all objects in the set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimSet_getFullCount(System.String)">
            <summary>
            () Get the number of direct and indirect child objects contained in the set.
               @return The number of objects contained in the set as well as in other sets contained directly or indirectly in the set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimSet_sort(System.String,System.String)">
            <summary>
            ( string callbackFunction ) Sort the objects in the set using the given comparison function.
               @param callbackFunction Name of a function that takes two object arguments A and B and returns -1 if A is less, 1 if B is less, and 0 if both are equal. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimXMLDocument_attributeF32(System.String,System.String)">
            <summary>
            (string attributeName)
               @brief Get float attribute from the current Element on the stack.
               @param attributeName Name of attribute to retrieve.
               @return The value of the given attribute in the form of a float.
               @deprecated Use attribute().)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SimXMLDocument_attributeS32(System.String,System.String)">
            <summary>
            (string attributeName)
               @brief Get int attribute from the current Element on the stack.
               @param attributeName Name of attribute to retrieve.
               @return The value of the given attribute in the form of an integer.
               @deprecated Use attribute().)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_sizeof(System.String)">
            <summary>
            @brief Determines the memory consumption of a class or object.
            				@param objectOrClass The object or class being measured.
            				@return Returns the total size of an object in bytes.
            				@ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SkyBox_postApply(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_snapToggle">
            <summary>
            @brief Prevents mouse movement from being processed
            
            					 In the source, whenever a mouse move event occurs 
            					 GameTSCtrl::onMouseMove() is called. Whenever snapToggle() 
            					 is called, it will flag a variable that can prevent this 
            					 from happening: gSnapLine. This variable is not exposed to 
            					 script, so you need to call this function to trigger it.
            
            					 @tsexample
            					 // Snapping is off by default, so we will toggle
            					 // it on first:
            					 PlayGui.snapToggle();
            					 // Mouse movement should be disabled
            					 // Let's turn it back on
            					 PlayGui.snapToggle();
            					 @endtsexample
            
            					 @ingroup GuiGame)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_spawnObject(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ,,,,) ,spawnObject(class [, dataBlock, name, properties, script,modelName])
            				@hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_SpawnSphere_spawnObject(System.String,System.String)">
            <summary>
            ([string additionalProps]) Spawns the object based on the SpawnSphere's 
               class, datablock, properties, and script settings. Allows you to pass in 
               extra properties.
               @hide )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_StartClientReplication">
            <summary>
            Activates the shape replicator.
            													@tsexample
            														// Call the function
            														StartClientReplication()
            													@endtsexample
            													@ingroup Foliage
            					)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_startFileChangeNotifications">
            <summary>
            @brief Start watching resources for file changes
               Typically this is called during initializeCore().
               @see stopFileChangeNotifications()
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_StartFoliageReplication">
            <summary>
            Activates the foliage replicator.
            													@tsexample
            														// Call the function
            														StartFoliageReplication();
            													@endtsexample
            													@ingroup Foliage)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_startHeartbeat">
            <summary>
            startHeartbeat(...); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_startPrecisionTimer">
            <summary>
            startPrecisionTimer() - Create and start a high resolution platform timer. Returns the timer id. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_startsWith(System.String,System.String,System.Boolean)">
            <summary>
            Test whether the given string begins with the given prefix.
               @param str The string to test.
               @param prefix The potential prefix of @a str.
               @param caseSensitive If true, the comparison will be case-sensitive; if false, differences in casing will 
                  not be taken into account.
               @return True if the first characters in @a str match the complete contents of @a prefix; false otherwise.
               @tsexample
               startsWith( \"TEST123\", \"test\" ) // Returns true.
               @endtsexample
               @see endsWith
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_startVideoCapture(System.String,System.String,System.String,System.Single,System.String)">
            <summary>
            THEORA, 30.0f, Point2I::Zero ),
               Begins a video capture session.
               @see stopVideoCapture
               @ingroup Rendering )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_StaticShape_getPoweredState(System.String)">
            <summary>
            @internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_StaticShape_setPoweredState(System.String,System.Boolean)">
            <summary>
            (bool isPowered)
            			  @internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_stopFileChangeNotifications">
            <summary>
            @brief Stop watching resources for file changes
               Typically this is called during shutdownCore().
               @see startFileChangeNotifications()
            	@ingroup FileSystem)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_stopHeartbeat">
            <summary>
            stopHeartbeat(...); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_stopPrecisionTimer(System.Int32)">
            <summary>
            stopPrecisionTimer( S32 id ) - Stop and destroy timer with the passed id.  Returns the elapsed milliseconds. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_stopSampling">
            <summary>
            ()
            				@brief Stops the rendering sampler
            				@ingroup Rendering)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_stopServerQuery">
            <summary>
            stopServerQuery(...); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_stopVideoCapture">
            <summary>
            Stops the video capture session.
               @see startVideoCapture   
               @ingroup Rendering )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_strasc(System.String)">
            <summary>
            Return the integer character code value corresponding to the first character in the given string.
               @param chr a (one-character) string.
               @return the UTF32 code value for the first character in the given string.
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_strchr(System.String,System.String)">
            <summary>
            Find the first occurrence of the given character in @a str.
               @param str The string to search.
               @param chr The character to search for.  Only the first character from the string is taken.
               @return The remainder of the input string starting with the given character or the empty string if the character could not be found.
               @see strrchr
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_strchrpos(System.String,System.String,System.Int32)">
            <summary>
            Find the first occurrence of the given character in the given string.
               @param str The string to search.
               @param chr The character to look for.  Only the first character of this string will be searched for.
               @param start The index into @a str at which to start searching for the given character.
               @return The index of the first occurrence of @a chr in @a str or -1 if @a str does not contain the given character.
               @tsexample
               strchrpos( \"test\", \"s\" ) // Returns 2.
               @endtsexample
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_strcmp(System.String,System.String)">
            <summary>
            Compares two strings using case-b>sensitive/b> comparison.
               @param str1 The first string.
               @param str2 The second string.
               @return 0 if both strings are equal, a value 0 if the first character different in str1 has a smaller character code 
                  value than the character at the same position in str2, and a value >1 otherwise.
               @tsexample
               if( strcmp( %var, \"foobar\" ) == 0 )
                  echo( \"%var is equal to 'foobar'\" );
               @endtsexample
               @see stricmp
               @see strnatcmp
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_strformat(System.String,System.String)">
            <summary>
            Format the given value as a string using printf-style formatting.
               @param format A printf-style format string.
               @param value The value argument matching the given format string.
               @tsexample
               // Convert the given integer value to a string in a hex notation.
               %hex = strformat( \"%x\", %value );
               @endtsexample
               @ingroup Strings
               @see http://en.wikipedia.org/wiki/Printf )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_stricmp(System.String,System.String)">
            <summary>
            Compares two strings using case-b>insensitive/b> comparison.
               @param str1 The first string.
               @param str2 The second string.
               @return 0 if both strings are equal, a value 0 if the first character different in str1 has a smaller character code 
                  value than the character at the same position in str2, and a value >0 otherwise.
               @tsexample
               if( stricmp( \"FOObar\", \"foobar\" ) == 0 )
                  echo( \"this is always true\" );
               @endtsexample
               @see strcmp
               @see strinatcmp
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_strinatcmp(System.String,System.String)">
            <summary>
            Compares two strings using \"natural order\" case-b>insensitive/b> comparison.
               Natural order means that rather than solely comparing single character code values, strings are ordered in a 
               natural way.  For example, the string \"hello10\" is considered greater than the string \"hello2\" even though 
               the first numeric character in \"hello10\" actually has a smaller character value than the corresponding character 
               in \"hello2\".  However, since 10 is greater than 2, strnatcmp will put \"hello10\" after \"hello2\".
               @param str1 The first string.
               @param str2 The second string.
               @return 0 if the strings are equal, a value >0 if @a str1 comes after @a str2 in a natural order, and a value 
                  0 if @a str1 comes before @a str2 in a natural order.
               @tsexample
               // Bubble sort 10 elements of %array using natural order
               do
               {
                  %swapped = false;
                  for( %i = 0; %i  10 - 1; %i ++ )
                     if( strnatcmp( %array[ %i ], %array[ %i + 1 ] ) > 0 )
                     {
                        %temp = %array[ %i ];
                        %array[ %i ] = %array[ %i + 1 ];
                        %array[ %i + 1 ] = %temp;
                        %swapped = true;
                     }
               }
               while( %swapped );
               @endtsexample
               @see stricmp
               @see strnatcmp
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_stripChars(System.String,System.String)">
            <summary>
            Remove all occurrences of characters contained in @a chars from @a str.
               @param str The string to filter characters out from.
               @param chars A string of characters to filter out from @a str.
               @return A version of @a str with all occurrences of characters contained in @a chars filtered out.
               @tsexample
               stripChars( \"teststring\", \"se\" ); // Returns \"tttring\".
               @endtsexample
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_StripMLControlChars(System.String)">
            <summary>
            @brief Strip TorqueML control characters from the specified string, returning a 'clean' version.
            					 @param inString String to strip TorqueML control characters from.
            					 @tsexample
            					 // Define the string to strip TorqueML control characters from
            					 %string = \"font:Arial:24>How Now color:c43c12>Brown color:000000>Cow\";
            					 // Request the stripped version of the string
            					 %strippedString = StripMLControlChars(%string);
            					 @endtsexample
            					 @return Version of the inputted string with all TorqueML characters removed.
            					 @see References
            					 @ingroup GuiCore)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_stripTrailingNumber(System.String)">
            <summary>
            Strip a numeric suffix from the given string.
               @param str The string from which to strip its numeric suffix.
               @return The string @a str without its number suffix or the original string @a str if it has no such suffix.
               @tsexample
               stripTrailingNumber( \"test123\" ) // Returns \"test\".
               @endtsexample
               @see getTrailingNumber
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_strIsMatchExpr(System.String,System.String,System.Boolean)">
            <summary>
            Match a pattern against a string.
               @param pattern The wildcard pattern to match against.  The pattern can include characters, '*' to match 
                  any number of characters and '?' to match a single character.
               @param str The string which should be matched against @a pattern.
               @param caseSensitive If true, characters in the pattern are matched in case-sensitive fashion against 
                  this string.  If false, differences in casing are ignored.
               @return True if @a str matches the given @a pattern.
               @tsexample
               strIsMatchExpr( \"f?o*R\", \"foobar\" ) // Returns true.
               @endtsexample
               @see strIsMatchMultipleExpr
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_strIsMatchMultipleExpr(System.String,System.String,System.Boolean)">
            <summary>
            Match a multiple patterns against a single string.
               @param patterns A tab-separated list of patterns.  Each pattern can include charaters, '*' to match 
                  any number of characters and '?' to match a single character.  Each of the patterns is tried in turn.
               @param str The string which should be matched against @a patterns.
               @param caseSensitive If true, characters in the pattern are matched in case-sensitive fashion against 
                  this string.  If false, differences in casing are ignored.
               @return True if @a str matches any of the given @a patterns.
               @tsexample
               strIsMatchMultipleExpr( \"*.cs *.gui *.mis\", \"mymission.mis\" ) // Returns true.
               @endtsexample
               @see strIsMatchExpr
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_strlen(System.String)">
            <summary>
            Get the length of the given string in bytes.
               @note This does b>not/b> return a true character count for strings with multi-byte characters!
               @param str A string.
               @return The length of the given string in bytes.
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_strlwr(System.String)">
            <summary>
            Return an all lower-case version of the given string.
               @param str A string.
               @return A version of @a str with all characters converted to lower-case.
               @tsexample
               strlwr( \"TesT1\" ) // Returns \"test1\"
               @endtsexample
               @see strupr
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_strnatcmp(System.String,System.String)">
            <summary>
            Compares two strings using \"natural order\" case-b>sensitive/b> comparison.
               Natural order means that rather than solely comparing single character code values, strings are ordered in a 
               natural way.  For example, the string \"hello10\" is considered greater than the string \"hello2\" even though 
               the first numeric character in \"hello10\" actually has a smaller character value than the corresponding character 
               in \"hello2\".  However, since 10 is greater than 2, strnatcmp will put \"hello10\" after \"hello2\".
               @param str1 The first string.
               @param str2 The second string.
               @return 0 if the strings are equal, a value >0 if @a str1 comes after @a str2 in a natural order, and a value 
                  0 if @a str1 comes before @a str2 in a natural order.
               @tsexample
               // Bubble sort 10 elements of %array using natural order
               do
               {
                  %swapped = false;
                  for( %i = 0; %i  10 - 1; %i ++ )
                     if( strnatcmp( %array[ %i ], %array[ %i + 1 ] ) > 0 )
                     {
                        %temp = %array[ %i ];
                        %array[ %i ] = %array[ %i + 1 ];
                        %array[ %i + 1 ] = %temp;
                        %swapped = true;
                     }
               }
               while( %swapped );
               @endtsexample
               @see strcmp
               @see strinatcmp
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_strpos(System.String,System.String,System.Int32)">
            <summary>
            Find the start of @a needle in @a haystack searching from left to right beginning at the given offset.
               @param haystack The string to search.
               @param needle The string to search for.
               @return The index at which the first occurrence of @a needle was found in @a haystack or -1 if no match was found.
               @tsexample
               strpos( \"b ab\", \"b\", 1 ) // Returns 3.
               @endtsexample
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_strrchr(System.String,System.String)">
            <summary>
            Find the last occurrence of the given character in @a str.
               @param str The string to search.
               @param chr The character to search for.  Only the first character from the string is taken.
               @return The remainder of the input string starting with the given character or the empty string if the character could not be found.
               @see strchr
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_strrchrpos(System.String,System.String,System.Int32)">
            <summary>
            Find the last occurrence of the given character in the given string.
               @param str The string to search.
               @param chr The character to look for.  Only the first character of this string will be searched for.
               @param start The index into @a str at which to start searching for the given character.
               @return The index of the last occurrence of @a chr in @a str or -1 if @a str does not contain the given character.
               @tsexample
               strrchrpos( \"test\", \"t\" ) // Returns 3.
               @endtsexample
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_strrepeat(System.String,System.Int32,System.String)">
            <summary>
             ),
               Return a string that repeats @a str @a numTimes number of times delimiting each occurrence with @a delimiter.
               @param str The string to repeat multiple times.
               @param numTimes The number of times to repeat @a str in the result string.
               @param delimiter The string to put between each repetition of @a str.
               @return A string containing @a str repeated @a numTimes times.
               @tsexample
               strrepeat( \"a\", 5, \"b\" ) // Returns \"ababababa\".
               @endtsexample
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_strreplace(System.String,System.String,System.String)">
            <summary>
            Replace all occurrences of @a from in @a source with @a to.
               @param source The string in which to replace the occurrences of @a from.
               @param from The string to replace in @a source.
               @param to The string with which to replace occurrences of @from.
               @return A string with all occurrences of @a from in @a source replaced by @a to.
               @tsexample
               strreplace( \"aabbccbb\", \"bb\", \"ee\" ) // Returns \"aaeeccee\".
               @endtsexample
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_strstr(System.String,System.String)">
            <summary>
            Find the start of @a substring in the given @a string searching from left to right.
               @param string The string to search.
               @param substring The string to search for.
               @return The index into @a string at which the first occurrence of @a substring was found or -1 if @a substring could not be found.
               @tsexample
               strstr( \"abcd\", \"c\" ) // Returns 2.
               @endtsexample
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_strToPlayerName(System.String)">
            <summary>
            strToPlayerName(string); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_strupr(System.String)">
            <summary>
            Return an all upper-case version of the given string.
               @param str A string.
               @return A version of @a str with all characters converted to upper-case.
               @tsexample
               strupr( \"TesT1\" ) // Returns \"TEST1\"
               @endtsexample
               @see strlwr
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Sun_animate(System.String,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            animate( F32 duration, F32 startAzimuth, F32 endAzimuth, F32 startElevation, F32 endElevation ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_Sun_apply(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_telnetSetParameters(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            @brief Initializes and open the telnet console.
                            @param port        Port to listen on for console connections (0 will shut down listening).
                            @param consolePass Password for read/write access to console.
                            @param listenPass  Password for read access to console.
                            @param remoteEcho  [optional] Enable echoing back to the client, off by default.
            				@ingroup Debugging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainBlock_exportHeightMap(System.String,System.String,System.String)">
            <summary>
            png), (string filename, [string format]) - export the terrain block's heightmap to a bitmap file (default: png) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainBlock_exportLayerMaps(System.String,System.String,System.String)">
            <summary>
            png), (string filePrefix, [string format]) - export the terrain block's layer maps to bitmap files (default: png) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_addMaterial(System.String,System.String)">
            <summary>
            ( string matName )
               Adds a new material. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_attachTerrain(System.String,System.String)">
            <summary>
            ), (TerrainBlock terrain))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_autoMaterialLayer(System.String,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            (F32 minHeight, F32 maxHeight, F32 minSlope, F32 maxSlope , F32 coverage))  
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_clearSelection(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_getActionName(System.String,System.UInt32)">
            <summary>
            (int num))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_getActiveTerrain(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_getBrushPos(System.String)">
            <summary>
            Returns a Point2I.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_getBrushPressure(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_getBrushSize(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_getBrushSoftness(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_getBrushType(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_getCurrentAction(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_getMaterialCount(System.String)">
            <summary>
            Returns the current material count. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_getMaterialIndex(System.String,System.String)">
            <summary>
            ( string name ) - Returns the index of the material with the given name or -1. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_getMaterialName(System.String,System.Int32)">
            <summary>
            ( int index ) - Returns the name of the material at the given index. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_getMaterials(System.String)">
            <summary>
            () gets the list of current terrain materials.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_getNumActions(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_getNumTextures(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_getSlopeLimitMaxAngle(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_getSlopeLimitMinAngle(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_getTerrainBlock(System.String,System.Int32)">
            <summary>
            (S32 index))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_getTerrainBlockCount(System.String)">
            <summary>
            ())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_getTerrainBlocksMaterialList(System.String)">
            <summary>
            () gets the list of current terrain materials for all terrain blocks.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_getTerrainUnderWorldPoint(System.String,System.String,System.String,System.String)">
            <summary>
            , , ), 
                                                                                       (x/y/z) Gets the terrain block that is located under the given world point.
                                                                                       @param x/y/z The world coordinates (floating point values) you wish to query at.  
                                                                                       These can be formatted as either a string (\"x y z\") or separately as (x, y, z)
                                                                                       @return Returns the ID of the requested terrain block (0 if not found).)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_markEmptySquares(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_mirrorTerrain(System.String,System.Int32)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_processAction(System.String,System.String)">
            <summary>
            ), (string action=NULL))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_removeMaterial(System.String,System.Int32)">
            <summary>
            ( int index ) - Remove the material at the given index. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_reorderMaterial(System.String,System.Int32,System.Int32)">
            <summary>
            ( int index, int order ) 
              - Reorder material at the given index to the new position, changing the order in which it is rendered / blended. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_resetSelWeights(System.String,System.Boolean)">
            <summary>
            (bool clear))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_setAction(System.String,System.String)">
            <summary>
            (string action_name))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_setBrushPos(System.String,System.String)">
            <summary>
            Location)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_setBrushPressure(System.String,System.Single)">
            <summary>
            (float pressure))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_setBrushSize(System.String,System.Int32,System.Int32)">
            <summary>
            (int w [, int h]))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_setBrushSoftness(System.String,System.Single)">
            <summary>
            (float softness))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_setBrushType(System.String,System.String)">
            <summary>
            (string type)
                          One of box, ellipse, selection.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_setSlopeLimitMaxAngle(System.String,System.Single)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_setSlopeLimitMinAngle(System.String,System.Single)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_setTerraformOverlay(System.String,System.Boolean)">
            <summary>
            (bool overlayEnable) - sets the terraformer current heightmap to draw as an overlay over the current terrain.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainEditor_updateMaterial(System.String,System.UInt32,System.String)">
            <summary>
            ( int index, string matName )
               Changes the material name at the index. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainSmoothAction_smooth(System.String,System.String,System.Single,System.UInt32)">
            <summary>
            ( TerrainBlock obj, F32 factor, U32 steps ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TerrainSolderEdgesAction_solder(System.String)">
            <summary>
            () )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_testJavaScriptBridge(System.String,System.String,System.String)">
            <summary>
            testBridge(arg1, arg2, arg3))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TheoraTextureObject_pause(System.String)">
            <summary>
            Pause playback of the video. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TheoraTextureObject_play(System.String)">
            <summary>
            Start playback of the video. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_TheoraTextureObject_stop(System.String)">
            <summary>
            Stop playback of the video. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_trace(System.Boolean)">
            <summary>
            Enable or disable tracing in the script code VM.
               When enabled, the script code runtime will trace the invocation and returns 
               from all functions that are called and log them to the console. This is helpful in 
               observing the flow of the script program.
               @param enable New setting for script trace execution, on by default.
               @ingroup Debugging )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_trim(System.String)">
            <summary>
            Remove leading and trailing whitespace from the string.
               @param str A string.
               @return A string that is the same as @a str but with any leading (i.e. leftmost) and trailing (i.e. rightmost) whitespace removed.
               @tsexample
               trim( \"   string  \" ); // Returns \"string\".
               @endtsexample
               @ingroup Strings )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_tsUpdateImposterImages(System.Boolean)">
            <summary>
            tsUpdateImposterImages( bool forceupdate ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_UndoAction_addToManager(System.String,System.String)">
            <summary>
            ), action.addToManager([undoManager]))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_UndoAction_redo(System.String)">
            <summary>
            () - Reo action contained in undo. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_UndoAction_undo(System.String)">
            <summary>
            () - Undo action contained in undo. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_UndoManager_clearAll(System.String)">
            <summary>
            Clears the undo manager.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_UndoManager_getNextRedoName(System.String)">
            <summary>
            UndoManager.getNextRedoName();)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_UndoManager_getNextUndoName(System.String)">
            <summary>
            UndoManager.getNextUndoName();)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_UndoManager_getRedoAction(System.String,System.Int32)">
            <summary>
            (index))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_UndoManager_getRedoCount(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_UndoManager_getRedoName(System.String,System.Int32)">
            <summary>
            (index))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_UndoManager_getUndoAction(System.String,System.Int32)">
            <summary>
            (index))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_UndoManager_getUndoCount(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_UndoManager_getUndoName(System.String,System.Int32)">
            <summary>
            (index))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_UndoManager_popCompound(System.String,System.Boolean)">
            <summary>
            ( bool discard=false ) - Pop the current CompoundUndoAction off the stack. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_UndoManager_pushCompound(System.String,System.String)">
            <summary>
            \"\"), ( string name=\"\" ) - Push a CompoundUndoAction onto the compound stack for assembly. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_UndoManager_redo(System.String)">
            <summary>
            UndoManager.redo();)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_UndoManager_undo(System.String)">
            <summary>
            UndoManager.undo();)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_unregisterMessageListener(System.String,System.String)">
            <summary>
            (string queueName, string listener)
            				@brief Unregisters an event message
            				@param queueName String containing the name of queue
            				@param listener Name of event messenger
            				@ingroup Messaging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_unregisterMessageQueue(System.String)">
            <summary>
            (string queueName)
            				@brief Unregisters a dispatcher queue
            				@param queueName String containing the name of queue
            				@ingroup Messaging)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_VectorAdd(System.String,System.String)">
            <summary>
            Add two vectors.
               @param a The first vector.
               @param b The second vector.
               @return The vector @a a + @a b.
               @tsexample
                  //-----------------------------------------------------------------------------
                  //
                  // VectorAdd( %a, %b );
                  //
                  // The sum of vector a, (ax, ay, az), and vector b, (bx, by, bz) is:
                  //
                  //     a + b = ( ax + bx, ay + by, az + bz )
                  //
                  //-----------------------------------------------------------------------------
                  %a = \"1 0 0\";
                  %b = \"0 1 0\";
                  // %r = \"( 1 + 0, 0 + 1, 0 + 0 )\";
                  // %r = \"1 1 0\";
                  %r = VectorAdd( %a, %b );
               @endtsexample
               @ingroup Vectors)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_VectorCross(System.String,System.String)">
            <summary>
            Calculcate the cross product of two vectors.
               @param a The first vector.
               @param b The second vector.
               @return The cross product @a x @a b.
               @tsexample
            	//-----------------------------------------------------------------------------
            	//
            	// VectorCross( %a, %b );
            	//
            	// The cross product of vector a, (ax, ay, az), and vector b, (bx, by, bz), is
            	//
            	//     a x b = ( ( ay * bz ) - ( az * by ), ( az * bx ) - ( ax * bz ), ( ax * by ) - ( ay * bx ) )
            	//
            	//-----------------------------------------------------------------------------
            
            	%a = \"1 1 0\";
            	%b = \"2 0 1\";
            
            	// %r = \"( ( 1 * 1 ) - ( 0 * 0 ), ( 0 * 2 ) - ( 1 * 1 ), ( 1 * 0 ) - ( 1 * 2 ) )\";
            	// %r = \"1 -1 -2\";
            	%r = VectorCross( %a, %b );
               @endtsexample	
               @ingroup Vectors )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_VectorDist(System.String,System.String)">
            <summary>
            Compute the distance between two vectors.
               @param a The first vector.
               @param b The second vector.
               @return The length( @a b - @a a ).
               @tsexample
            	//-----------------------------------------------------------------------------
            	//
            	// VectorDist( %a, %b );
            	//
            	// The distance between vector a, (ax, ay, az), and vector b, (bx, by, bz), is
            	//
            	//     a -> b = ||( b - a )||
            	//            = ||( bx - ax, by - ay, bz - az )||
            	//            = mSqrt( ( bx - ax ) * ( bx - ax ) + ( by - ay ) * ( by - ay ) + ( bz - az ) * ( bz - az ) )
            	//
            	//-----------------------------------------------------------------------------
            
            	%a = \"1 1 0\";
            	%b = \"2 0 1\";
            
            	// %r = mSqrt( ( 2 - 1 ) * ( 2 - 1) + ( 0 - 1 ) * ( 0 - 1 ) + ( 1 - 0 ) * ( 1 - 0 ) );
            	// %r = mSqrt( 3 );
            	%r = VectorDist( %a, %b );
               @endtsexample
               @ingroup Vectors )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_VectorDot(System.String,System.String)">
            <summary>
            Compute the dot product of two vectors.
               @param a The first vector.
               @param b The second vector.
               @return The dot product @a a * @a b.
               @tsexample
            	//-----------------------------------------------------------------------------
            	//
            	// VectorDot( %a, %b );
            	//
            	// The dot product between vector a, (ax, ay, az), and vector b, (bx, by, bz), is:
            	//
            	//     a . b = ( ax * bx + ay * by + az * bz )
            	//
            	//-----------------------------------------------------------------------------
            
            	%a = \"1 1 0\";
            	%b = \"2 0 1\";
            
            	// %r = \"( 1 * 2 + 1 * 0 + 0 * 1 )\";
            	// %r = 2;
            	%r = VectorDot( %a, %b );
               @endtsexample
               @ingroup Vectors )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_VectorLen(System.String)">
            <summary>
            Calculate the magnitude of the given vector.
               @param v A vector.
               @return The length of vector @a v.
               @tsexample
            	//-----------------------------------------------------------------------------
            	//
            	// VectorLen( %a );
            	//
            	// The length or magnitude of  vector a, (ax, ay, az), is:
            	//
            	//     ||a|| = Sqrt( ax * ax + ay * ay + az * az )
            	//
            	//-----------------------------------------------------------------------------
            
            	%a = \"1 1 0\";
            
            	// %r = mSqrt( 1 * 1 + 1 * 1 + 0 * 0 );
            	// %r = mSqrt( 2 );
            	// %r = 1.414;
            	%r = VectorLen( %a );
               @endtsexample
               @ingroup Vectors )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_VectorLerp(System.String,System.String,System.Single)">
            <summary>
            Linearly interpolate between two vectors by @a t.
               @param a Vector to start interpolation from.
               @param b Vector to interpolate to.
               @param t Interpolation factor (0-1).  At zero, @a a is returned and at one, @a b is returned.  In between, an interpolated vector 
                  between @a a and @a b is returned.
               @return An interpolated vector between @a a and @a b.
               @tsexample
            	//-----------------------------------------------------------------------------
            	//
            	// VectorLerp( %a, %b );
            	//
            	// The point between vector a, (ax, ay, az), and vector b, (bx, by, bz), which is
            	// weighted by the interpolation factor, t, is
            	//
            	//     r = a + t * ( b - a )
            	//       = ( ax + t * ( bx - ax ), ay + t * ( by - ay ), az + t * ( bz - az ) )
            	//
            	//-----------------------------------------------------------------------------
            
            	%a = \"1 1 0\";
            	%b = \"2 0 1\";
            	%v = \"0.25\";
            
            	// %r = \"( 1 + 0.25 * ( 2 - 1 ), 1 + 0.25 * ( 0 - 1 ), 0 + 0.25 * ( 1 - 0 ) )\";
            	// %r = \"1.25 0.75 0.25\";
            	%r = VectorLerp( %a, %b );
               @endtsexample
               @ingroup Vectors )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_VectorNormalize(System.String)">
            <summary>
            Brings a vector into its unit form, i.e. such that it has the magnitute 1.
               @param v The vector to normalize.
               @return The vector @a v scaled to length 1.
               @tsexample
            	//-----------------------------------------------------------------------------
            	//
            	// VectorNormalize( %a );
            	//
            	// The normalized vector a, (ax, ay, az), is:
            	//
            	//     a^ = a / ||a||
            	//        = ( ax / ||a||, ay / ||a||, az / ||a|| )
            	//
            	//-----------------------------------------------------------------------------
            
            	%a = \"1 1 0\";
            	%l = 1.414;
            
            	// %r = \"( 1 / 1.141, 1 / 1.141, 0 / 1.141 )\";
            	// %r = \"0.707 0.707 0\";
            	%r = VectorNormalize( %a );
               @endtsexample
               @ingroup Vectors )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_VectorOrthoBasis(System.String)">
            <summary>
            Create an orthogonal basis from the given vector.
               @param aaf The vector to create the orthogonal basis from.
               @return A matrix representing the orthogonal basis.
               @ingroup Vectors )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_VectorRot(System.String,System.Single)">
            <summary>
            (Vector3F, float) rotate a vector in 2d)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_VectorScale(System.String,System.Single)">
            <summary>
            Scales a vector by a scalar.
               @param a The vector to scale.
               @param scalar The scale factor.
               @return The vector @a a * @a scalar.
               @tsexample
            	//-----------------------------------------------------------------------------
            	//
            	// VectorScale( %a, %v );
            	//
            	// Scaling vector a, (ax, ay, az), but the scalar, v, is:
            	//
            	//     a * v = ( ax * v, ay * v, az * v )
            	//
            	//-----------------------------------------------------------------------------
            
            	%a = \"1 1 0\";
            	%v = \"2\";
            
            	// %r = \"( 1 * 2, 1 * 2, 0 * 2 )\";
            	// %r = \"2 2 0\";
            	%r = VectorScale( %a, %v );
               @endtsexample
               @ingroup Vectors )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_VectorSub(System.String,System.String)">
            <summary>
            Subtract two vectors.
               @param a The first vector.
               @param b The second vector.
               @return The vector @a a - @a b.
               @tsexample
            	//-----------------------------------------------------------------------------
            	//
            	// VectorSub( %a, %b );
            	//
            	// The difference of vector a, (ax, ay, az), and vector b, (bx, by, bz) is:
            	//
            	//     a - b = ( ax - bx, ay - by, az - bz )
            	//
            	//-----------------------------------------------------------------------------
            
            	%a = \"1 0 0\";
            	%b = \"0 1 0\";
            
            	// %r = \"( 1 - 0, 0 - 1, 0 - 0 )\";
            	// %r = \"1 -1 0\";
            	%r = VectorSub( %a, %b );
               @endtsexample
               @ingroup Vectors )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WalkaboutUpdateAll(System.Int32,System.Boolean)">
            <summary>
            @brief Update all NavMesh tiles that intersect the given object's world box.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WalkaboutUpdateMesh(System.Int32,System.Int32,System.Boolean)">
            <summary>
            @brief Update all tiles in a given NavMesh that intersect the given object's world box.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_addUndoState(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_alignByAxis(System.String,System.Int32)">
            <summary>
            (int axis)
                          Align all selected objects along the given axis.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_alignByBounds(System.String,System.Int32)">
            <summary>
            (int boundsAxis)
                          Align all selected objects against the given bounds axis.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_canPasteSelection(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_clearIgnoreList(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_clearSelection(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_colladaExportSelection(System.String,System.String)">
            <summary>
            ( String path ) - Export the combined geometry of all selected objects to the specified path in collada format. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_copySelection(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_cutSelection(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_dropSelection(System.String,System.Boolean)">
            <summary>
            ( bool skipUndo = false ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_explodeSelectedPrefab(System.String)">
            <summary>
            () - Replace selected Prefab objects with a SimGroup containing all children objects defined in the .prefab. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_getActiveSelection(System.String)">
            <summary>
            () - Return the currently active WorldEditorSelection object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_getSelectedObject(System.String,System.Int32)">
            <summary>
            (int index))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_getSelectionCentroid(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_getSelectionExtent(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_getSelectionRadius(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_getSelectionSize(System.String)">
            <summary>
            () - Return the number of objects currently selected in the editor.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_getSoftSnap(System.String)">
            <summary>
            getSoftSnap()
                          Is soft snapping always on?)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_getSoftSnapBackfaceTolerance(System.String)">
            <summary>
            getSoftSnapBackfaceTolerance()
                          The fraction of the soft snap radius that backfaces may be included.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_getSoftSnapSize(System.String)">
            <summary>
            getSoftSnapSize()
                          Get the absolute size to trigger a soft snap.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_hideObject(System.String,System.String,System.Boolean)">
            <summary>
            (Object obj, bool hide))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_hideSelection(System.String,System.Boolean)">
            <summary>
            (bool hide))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_invalidateSelectionCentroid(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_lockSelection(System.String,System.Boolean)">
            <summary>
            (bool lock))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_makeSelectionPrefab(System.String,System.String)">
            <summary>
            ( string filename ) - Save selected objects to a .prefab file and replace them in the level with a Prefab object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_mountRelative(System.String,System.String,System.String)">
            <summary>
            ( Object A, Object B ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_pasteSelection(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_redirectConsole(System.String,System.Int32)">
            <summary>
            ( int objID ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_resetSelectedRotation(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_resetSelectedScale(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_selectObject(System.String,System.String)">
            <summary>
            (SimObject obj))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_setActiveSelection(System.String,System.String)">
            <summary>
            ( id set ) - Set the currently active WorldEditorSelection object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_setSoftSnap(System.String,System.Boolean)">
            <summary>
            setSoftSnap(bool)
                          Allow soft snapping all of the time.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_setSoftSnapBackfaceTolerance(System.String,System.Single)">
            <summary>
            setSoftSnapBackfaceTolerance(F32 with range of 0..1)
                          The fraction of the soft snap radius that backfaces may be included.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_setSoftSnapSize(System.String,System.Single)">
            <summary>
            setSoftSnapSize(F32)
                          Set the absolute size to trigger a soft snap.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_softSnapDebugRender(System.String,System.Boolean)">
            <summary>
            softSnapDebugRender(bool)
                          Toggle soft snapping debug rendering.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_softSnapRender(System.String,System.Boolean)">
            <summary>
            softSnapRender(bool)
                          Render the soft snapping bounds.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_softSnapRenderTriangle(System.String,System.Boolean)">
            <summary>
            softSnapRenderTriangle(bool)
                          Render the soft snapped triangle.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_softSnapSizeByBounds(System.String,System.Boolean)">
            <summary>
            softSnapSizeByBounds(bool)
                          Use selection bounds size as soft snap bounds.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_transformSelection(System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            transformSelection(...)
                          Transform selection by given parameters.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_WorldEditor_unselectObject(System.String,System.String)">
            <summary>
            (SimObject obj))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fn_writeFontCache">
            <summary>
            Force all cached fonts to serialize themselves to the cache.
               @ingroup Font )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnActionMap_bind(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( ActionMap, bind, bool, 5, 10, actionMap.bind( device, action, [modifier spec, mod...], command ) 
            			  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnActionMap_bindCmd(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             ),
                @brief Associates a make command and optional break command to a specified input device action.
                Must include parenthesis and semicolon in the make and break command strings.
                @param device The device to bind to. Can be a keyboard, mouse, joystick or gamepad.
                @param action The device action to bind to. The action is dependant upon the device. Specify a key for keyboards.
                @param makeCmd The command to execute when the device/action is made.
                @param breakCmd [optional] The command to execute when the device or action is unmade.
                @return True the bind was successful, false if the device was unknown or description failed.
            	@tsexample
            	// Print to the console when the spacebar is pressed
            	function onSpaceDown()
            	{
            	   echo(\"Space bar down!\");
            	}
            	// Print to the console when the spacebar is released
            	function onSpaceUp()
            	{
            	   echo(\"Space bar up!\");
            	}
               // Bind the commands onSpaceDown() and onSpaceUp() to spacebar events
            	moveMap.bindCmd(keyboard, \"space\", \"onSpaceDown();\", \"onSpaceUp();\");
            	@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnActionMap_bindObj(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( ActionMap, bindObj, bool, 6, 11, (device, action, [modifier spec, mod...], command, object)
            			  @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnActionMap_getBinding(System.String,System.String)">
            <summary>
            @brief Gets the ActionMap binding for the specified command.
               Use getField() on the return value to get the device and action of the binding.
               @param command The function to search bindings for.
               @return The binding against the specified command. Returns an empty string(\"\") 
               if a binding wasn't found.
            	@tsexample
            	// Find what the function \"jump()\" is bound to in moveMap
            	%bind = moveMap.getBinding( \"jump\" );
            	if ( %bind !$= \"\" )
            	{
            	// Find out what device is used in the binding
            		%device = getField( %bind, 0 );
            	// Find out what action (such as a key) is used in the binding
            		%action = getField( %bind, 1 );
            	}
            	@endtsexample
               @see getField)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnActionMap_getCommand(System.String,System.String,System.String)">
            <summary>
            @brief Gets ActionMap command for the device and action.
               @param device The device that was bound. Can be a keyboard, mouse, joystick or a gamepad.
               @param action The device action that was bound.  The action is dependant upon the device. Specify a key for keyboards.
               @return The command against the specified device and action.
            	@tsexample
            	// Find what function is bound to a device\'s action
            	// In this example, \"jump()\" was assigned to the space key in another script
            	%command = moveMap.getCommand(\"keyboard\", \"space\");
            	// Should print \"jump\" in the console
            	echo(%command)
            	@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnActionMap_getDeadZone(System.String,System.String,System.String)">
            <summary>
            @brief Gets the Dead zone for the specified device and action.
               @param device The device that was bound.  Can be a keyboard, mouse, joystick or a gamepad.
               @param action The device action that was bound. The action is dependant upon the device. Specify a key for keyboards.
               @return The dead zone for the specified device and action. Returns \"0 0\" if there is no dead zone  
               or an empty string(\"\") if the mapping was not found.
            	@tsexample
            	%deadZone = moveMap.getDeadZone( \"gamepad\", \"thumbrx\");
            	@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnActionMap_getScale(System.String,System.String,System.String)">
            <summary>
            @brief Get any scaling on the specified device and action.
               @param device The device that was bound. Can be keyboard, mouse, joystick or gamepad.
               @param action The device action that was bound. The action is dependant upon the device. Specify a key for keyboards.
               @return Any scaling applied to the specified device and action.
            	@tsexample
            	%scale = %moveMap.getScale( \"gamepad\", \"thumbrx\");
            	@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnActionMap_isInverted(System.String,System.String,System.String)">
            <summary>
            @brief Determines if the specified device and action is inverted.
               Should only be used for scrolling devices or gamepad/joystick axes.
               @param device The device that was bound. Can be a keyboard, mouse, joystick or a gamepad.
               @param action The device action that was bound.  The action is dependant upon the device. Specify a key for keyboards.
               @return True if the specified device and action is inverted.
            	@tsexample
               %if ( moveMap.isInverted( \"mouse\", \"xaxis\"))
                  echo(\"Mouse's xAxis is inverted\");
            	@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnActionMap_pop(System.String)">
            <summary>
            @brief Pop the ActionMap off the %ActionMap stack.
               Deactivates an %ActionMap and removes it from the @ActionMap stack.
            	@tsexample
            	// Deactivate moveMap
            	moveMap.pop();
            	@endtsexample
               @see ActionMap)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnActionMap_push(System.String)">
            <summary>
            @brief Push the ActionMap onto the %ActionMap stack.
               Activates an ActionMap and placees it at the top of the ActionMap stack.
            	@tsexample
            	// Make moveMap the active action map
            	moveMap.push();
            	@endtsexample
               @see ActionMap)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnActionMap_save(System.String,System.String,System.Boolean)">
            <summary>
            @brief Saves the ActionMap to a file or dumps it to the console.
               @param fileName The file path to save the ActionMap to. If a filename is not specified 
                the ActionMap will be dumped to the console.
               @param append Whether to write the ActionMap at the end of the file or overwrite it.
            	@tsexample
            	// Write out the actionmap into the config.cs file
               moveMap.save( \"scripts/client/config.cs\" );
            	@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnActionMap_unbind(System.String,System.String,System.String)">
            <summary>
            @brief Removes the binding on an input device and action.
               @param device The device to unbind from. Can be a keyboard, mouse, joystick or a gamepad.
               @param action The device action to unbind from. The action is dependant upon the device. Specify a key for keyboards.
               @return True if the unbind was successful, false if the device was unknown or description failed.
            	@tsexample
            	moveMap.unbind(\"keyboard\", \"space\");
            	@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnActionMap_unbindObj(System.String,System.String,System.String,System.String)">
            <summary>
            @brief Remove any object-binding on an input device and action.
               @param device The device to bind to.  Can be keyboard, mouse, joystick or gamepad.
               @param action The device action to unbind from. The action is dependant upon the device. Specify a key for keyboards.
               @param obj The object to perform unbind against.
               @return True if the unbind was successful, false if the device was unknown or description failed.
            	@tsexample
               moveMap.unbindObj(\"keyboard\", \"numpad1\", \"rangeChange\", %player);
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAIPlayer_AISearchSimSet(System.String,System.Single,System.Single,System.String,System.String)">
            <summary>
            )
            	
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAIPlayer_checkInFoV(System.String,System.String,System.Single,System.Boolean)">
            <summary>
            @brief Check whether an object is within a specified veiw cone.
               @obj Object to check. (If blank, it will check the current target).
               @fov view angle in degrees.(Defaults to 45)
               @checkEnabled check whether the object can take damage and if so is still alive.(Defaults to false))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAIPlayer_checkInLos(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            @brief Check whether an object is in line of sight.
               @obj Object to check. (If blank, it will check the current target).
               @useMuzzle Use muzzle position. Otherwise use eye position. (defaults to false).
               @checkEnabled check whether the object can take damage and if so is still alive.(Defaults to false))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAIPlayer_clearAim(System.String)">
            <summary>
            @brief Use this to stop aiming at an object or a point.
               
               @see setAimLocation()
               @see setAimObject())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAIPlayer_findCover(System.String,System.String,System.Single)">
            <summary>
            @brief Tells the AI to find cover nearby.
            
               @param from   Location to find cover from (i.e., enemy position).
               @param radius Distance to search for cover.
               @return Cover point ID if cover was found, -1 otherwise.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAIPlayer_findNavMesh(System.String)">
            <summary>
            @brief Get the NavMesh object this AIPlayer is currently using.
            
               @return The ID of the NavPath object this character is using for 
               pathfinding. This is determined by the character's location, 
               navigation type and other factors. Returns -1 if no NavMesh is 
               found.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAIPlayer_followNavPath(System.String,System.UInt32)">
            <summary>
            @brief Tell the AIPlayer to follow a path.
            
               @param obj ID of a NavPath object for the character to follow.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAIPlayer_followObject(System.String,System.UInt32,System.Single)">
            <summary>
            @brief Tell the AIPlayer to follow another object.
            
               @param obj ID of the object to follow.
               @param radius Maximum distance we let the target escape to.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAIPlayer_getAimLocation(System.String)">
            <summary>
            @brief Returns the point the AIPlayer is aiming at.
            
               This will reflect the position set by setAimLocation(), 
               or the position of the object that the bot is now aiming at.  
               If the bot is not aiming at anything, this value will 
               change to whatever point the bot's current line-of-sight intercepts.
            
               @return World space coordinates of the object AI is aiming at. Formatted as \"X Y Z\".
               
               @see setAimLocation()
               @see setAimObject())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAIPlayer_getAimObject(System.String)">
            <summary>
            @brief Gets the object the AIPlayer is targeting.
            
               @return Returns -1 if no object is being aimed at, 
               or the SimObjectID of the object the AIPlayer is aiming at.
               
               @see setAimObject())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAIPlayer_getMoveDestination(System.String)">
            <summary>
            @brief Get the AIPlayer's current destination.
            
               @return Returns a point containing the \"x y z\" position 
               of the AIPlayer's current move destination. If no move destination 
               has yet been set, this returns \"0 0 0\".
               
               @see setMoveDestination())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAIPlayer_getMoveSpeed(System.String)">
            <summary>
            @brief Gets the move speed of an AI object.
            
               @return A speed multiplier between 0.0 and 1.0.
            
               @see setMoveSpeed())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAIPlayer_getNavMesh(System.String)">
            <summary>
            @brief Return the NavMesh this AIPlayer is using to navigate.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAIPlayer_getNavSize(System.String)">
            <summary>
            @brief Return the size of NavMesh this character uses for pathfinding.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAIPlayer_getPathDestination(System.String)">
            <summary>
            @brief Get the AIPlayer's current pathfinding destination.
            
               @return Returns a point containing the \"x y z\" position 
               of the AIPlayer's current path destination. If no path destination 
               has yet been set, this returns \"0 0 0\".
            
               @see setPathDestination())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAIPlayer_repath(System.String)">
            <summary>
            @brief Tells the AI to re-plan its path. Does nothing if the character 
               has no path, or if it is following a mission path.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAIPlayer_setAimLocation(System.String,System.String)">
            <summary>
            @brief Tells the AIPlayer to aim at the location provided.
            
               @param target An \"x y z\" position in the game world to target.
               
               @see getAimLocation())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAIPlayer_setMoveDestination(System.String,System.String,System.Boolean)">
            <summary>
            @brief Tells the AI to move to the location provided
            
               @param goal Coordinates in world space representing location to move to.
               @param slowDown A boolean value. If set to true, the bot will slow down 
               when it gets within 5-meters of its move destination. If false, the bot 
               will stop abruptly when it reaches the move destination. By default, this is true.
            
               @note Upon reaching a move destination, the bot will clear its move destination and 
               calls to getMoveDestination will return \"0 0 0\".
               
               @see getMoveDestination())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAIPlayer_setMoveSpeed(System.String,System.Single)">
            <summary>
            @brief Sets the move speed for an AI object.
            
               @param speed A speed multiplier between 0.0 and 1.0.  
               This is multiplied by the AIPlayer's base movement rates (as defined in 
               its PlayerData datablock)
               
               @see getMoveDestination())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAIPlayer_setNavSize(System.String,System.String)">
            <summary>
            @brief Set the size of NavMesh this character uses. One of \"Small\", \"Regular\" or \"Large\".)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAIPlayer_setPathDestination(System.String,System.String)">
            <summary>
            @brief Tells the AI to find a path to the location provided
            
               @param goal Coordinates in world space representing location to move to.
               @return True if a path was found.
            
               @see getPathDestination()
               @see setMoveDestination())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAIPlayer_stop(System.String)">
            <summary>
            @brief Tells the AIPlayer to stop moving.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAITurretShape_activateTurret(System.String)">
            <summary>
            @brief Activate a turret from a deactive state.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAITurretShape_addToIgnoreList(System.String,System.String)">
            <summary>
            @brief Adds object to the turret's ignore list.
               All objects in this list will be ignored by the turret's targeting.
               @param obj The ShapeBase object to ignore.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAITurretShape_deactivateTurret(System.String)">
            <summary>
            @brief Deactivate a turret from an active state.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAITurretShape_getTarget(System.String)">
            <summary>
            @brief Get the turret's current target.
               @returns The object that is the target's current target, or 0 if no target.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAITurretShape_getWeaponLeadVelocity(System.String)">
            <summary>
            @brief Get the turret's defined projectile velocity that helps with target leading.
               @returns The defined weapon projectile speed, or 0 if leading is disabled.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAITurretShape_hasTarget(System.String)">
            <summary>
            @brief Indicates if the turret has a target.
               @returns True if the turret has a target.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAITurretShape_recenterTurret(System.String)">
            <summary>
            @brief Recenter the turret's weapon.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAITurretShape_removeFromIgnoreList(System.String,System.String)">
            <summary>
            @brief Removes object from the turret's ignore list.
               All objects in this list will be ignored by the turret's targeting.
               @param obj The ShapeBase object to once again allow for targeting.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAITurretShape_resetTarget(System.String)">
            <summary>
            @brief Resets the turret's target tracking.
               Only resets the internal target tracking.  Does not modify the turret's facing.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAITurretShape_setAllGunsFiring(System.String,System.Boolean)">
            <summary>
            @brief Set the firing state of the turret's guns.
               @param fire Set to true to activate all guns.  False to deactivate them.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAITurretShape_setGunSlotFiring(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Set the firing state of the given gun slot.
               @param slot The gun to modify.  Valid range is 0-3 that corresponds to the weapon mount point.
               @param fire Set to true to activate the gun.  False to deactivate it.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAITurretShape_setTurretState(System.String,System.String,System.Boolean)">
            <summary>
            @brief Set the turret's current state.
               Normally the turret's state comes from updating the state machine but this method 
               allows you to override this and jump to the requested state immediately.
               @param newState The name of the new state.
               @param force Is true then force the full processing of the new state even if it is the 
               same as the current state.  If false then only the time out value is reset and the state's 
               script method is called, if any.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAITurretShape_setWeaponLeadVelocity(System.String,System.Single)">
            <summary>
            @brief Set the turret's projectile velocity to help lead the target.
               This value normally comes from AITurretShapeData::weaponLeadVelocity but this method 
               allows you to override the datablock value.  This can be useful if the turret changes 
               ammunition, uses a different weapon than the default, is damaged, etc.
               @note Setting this to 0 will disable target leading.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAITurretShape_startScanForTargets(System.String)">
            <summary>
            @brief Begin scanning for a target.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAITurretShape_startTrackingTarget(System.String)">
            <summary>
            @brief Have the turret track the current target.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAITurretShape_stopScanForTargets(System.String)">
            <summary>
            @brief Stop scanning for targets.
               @note Only impacts the scanning for new targets.  Does not effect a turret's current 
               target lock.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnAITurretShape_stopTrackingTarget(System.String)">
            <summary>
            @brief Stop the turret from tracking the current target.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_add(System.String,System.String,System.String)">
            <summary>
             ),
               Adds a new element to the end of an array (same as push_back()).
               @param key Key for the new element
               @param value Value for the new element )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_append(System.String,System.String)">
            <summary>
            Appends the target array to the array object.
               @param target ArrayObject to append to the end of this array )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_count(System.String)">
            <summary>
            Get the number of elements in the array. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_countKey(System.String,System.String)">
            <summary>
            Get the number of times a particular key is found in the array.
               @param key Key value to count )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_countValue(System.String,System.String)">
            <summary>
            Get the number of times a particular value is found in the array.
               @param value Array element value to count )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_crop(System.String,System.String)">
            <summary>
            Removes elements with matching keys from array.
               @param target ArrayObject containing keys to remove from this array )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_duplicate(System.String,System.String)">
            <summary>
            Alters array into an exact duplicate of the target array.
               @param target ArrayObject to duplicate )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_echo(System.String)">
            <summary>
            Echos the array contents to the console )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_empty(System.String)">
            <summary>
            Emptys all elements from an array )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_erase(System.String,System.Int32)">
            <summary>
            Removes an element at a specific position from the array.
               @param index 0-based index of the element to remove )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_getCurrent(System.String)">
            <summary>
            Gets the current pointer index )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_getIndexFromKey(System.String,System.String)">
            <summary>
            Search the array from the current position for the key 
               @param value Array key to search for
               @return Index of the first element found, or -1 if none )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_getIndexFromValue(System.String,System.String)">
            <summary>
            Search the array from the current position for the element 
               @param value Array value to search for
               @return Index of the first element found, or -1 if none )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_getKey(System.String,System.Int32)">
            <summary>
            Get the key of the array element at the submitted index.
               @param index 0-based index of the array element to get
               @return The key associated with the array element at the 
               specified index, or \"\" if the index is out of range )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_getValue(System.String,System.Int32)">
            <summary>
            Get the value of the array element at the submitted index.
               @param index 0-based index of the array element to get
               @return The value of the array element at the specified index, 
               or \"\" if the index is out of range )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_insert(System.String,System.String,System.String,System.Int32)">
            <summary>
            Adds a new element to a specified position in the array.
               - @a index = 0 will insert an element at the start of the array (same as push_front())
               - @a index = %array.count() will insert an element at the end of the array (same as push_back())
               @param key Key for the new element
               @param value Value for the new element
               @param index 0-based index at which to insert the new element )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_moveFirst(System.String)">
            <summary>
            Moves array pointer to start of array
               @return Returns the new array pointer )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_moveLast(System.String)">
            <summary>
            Moves array pointer to end of array
               @return Returns the new array pointer )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_moveNext(System.String)">
            <summary>
            Moves array pointer to next position
               @return Returns the new array pointer, or -1 if already at the end )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_movePrev(System.String)">
            <summary>
            Moves array pointer to prev position
               @return Returns the new array pointer, or -1 if already at the start )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_pop_back(System.String)">
            <summary>
            Removes the last element from the array )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_pop_front(System.String)">
            <summary>
            Removes the first element from the array )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_push_back(System.String,System.String,System.String)">
            <summary>
             ),
               Adds a new element to the end of an array.
               @param key Key for the new element
               @param value Value for the new element )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_push_front(System.String,System.String,System.String)">
            <summary>
             ),
               Adds a new element to the front of an array )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_setCurrent(System.String,System.Int32)">
            <summary>
            Sets the current pointer index.
               @param index New 0-based pointer index )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_setKey(System.String,System.String,System.Int32)">
            <summary>
            Set the key at the given index.
               @param key New key value
               @param index 0-based index of the array element to update )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_setValue(System.String,System.String,System.Int32)">
            <summary>
            Set the value at the given index.
               @param value New array element value
               @param index 0-based index of the array element to update )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_sort(System.String,System.Boolean)">
            <summary>
            Alpha sorts the array by value
               @param ascending [optional] True for ascending sort, false for descending sort )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_sorta(System.String)">
            <summary>
            Alpha sorts the array by value in ascending order )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_sortd(System.String)">
            <summary>
            Alpha sorts the array by value in descending order )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_sortf(System.String,System.String)">
            <summary>
            Sorts the array by value in ascending order using the given callback function.
               @param functionName Name of a function that takes two arguments A and B and returns -1 if A is less, 1 if B is less, and 0 if both are equal.
               @tsexample
               function mySortCallback(%a, %b)
               {
                  return strcmp( %a.name, %b.name );
               }
               %array.sortf( \"mySortCallback\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_sortfd(System.String,System.String)">
            <summary>
            Sorts the array by value in descending order using the given callback function.
               @param functionName Name of a function that takes two arguments A and B and returns -1 if A is less, 1 if B is less, and 0 if both are equal.
               @see sortf )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_sortfk(System.String,System.String)">
            <summary>
            Sorts the array by key in ascending order using the given callback function.
               @param functionName Name of a function that takes two arguments A and B and returns -1 if A is less, 1 if B is less, and 0 if both are equal.
               @see sortf )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_sortfkd(System.String,System.String)">
            <summary>
            Sorts the array by key in descending order using the given callback function.
               @param functionName Name of a function that takes two arguments A and B and returns -1 if A is less, 1 if B is less, and 0 if both are equal.
               @see sortf )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_sortk(System.String,System.Boolean)">
            <summary>
            Alpha sorts the array by key
               @param ascending [optional] True for ascending sort, false for descending sort )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_sortka(System.String)">
            <summary>
            Alpha sorts the array by key in ascending order )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_sortkd(System.String)">
            <summary>
            Alpha sorts the array by key in descending order )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_sortn(System.String,System.Boolean)">
            <summary>
            Numerically sorts the array by value
               @param ascending [optional] True for ascending sort, false for descending sort )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_sortna(System.String)">
            <summary>
            Numerically sorts the array by value in ascending order ) 
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_sortnd(System.String)">
            <summary>
            Numerically sorts the array by value in descending order )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_sortnk(System.String,System.Boolean)">
            <summary>
            Numerically sorts the array by key
               @param ascending [optional] True for ascending sort, false for descending sort )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_sortnka(System.String)">
            <summary>
            Numerical sorts the array by key in ascending order )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_sortnkd(System.String)">
            <summary>
            Numerical sorts the array by key in descending order )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_uniqueKey(System.String)">
            <summary>
            Removes any elements that have duplicated keys (leaving the first instance) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnArrayObject_uniqueValue(System.String)">
            <summary>
            Removes any elements that have duplicated values (leaving the first instance) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_autoFitRadius(System.String,System.Single)">
            <summary>
            Move the camera to fully view the given radius.
                               @note For this operation to take affect a valid edit orbit point must first be specified.  See Camera::setEditOrbitPoint().
                               @param radius The radius to view.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_getAngularVelocity(System.String)">
            <summary>
            Get the angular velocity for a Newton mode camera.
                               @returns The angular velocity in the form of \"x y z\".
                               @note Only returns useful results when Camera::newtonRotation is set to true.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_getMode(System.String)">
            <summary>
            Returns the current camera control mode.
                               @see CameraMotionMode)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_getOffset(System.String)">
            <summary>
            Get the camera's offset from its orbit or tracking point.
                               The offset is added to the camera's position when set to CameraMode::OrbitObject.
                               @returns The offset in the form of \"x y z\".)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_getPosition(System.String)">
            <summary>
            Get the camera's position in the world.
                               @returns The position in the form of \"x y z\".)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_getRotation(System.String)">
            <summary>
            Get the camera's Euler rotation in radians.
                               @returns The rotation in radians in the form of \"x y z\".)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_getVelocity(System.String)">
            <summary>
            Get the velocity for the camera.
                               @returns The camera's velocity in the form of \"x y z\".
                               @note Only useful when the Camera is in Newton mode.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_isEditOrbitMode(System.String)">
            <summary>
            Is the camera in edit orbit mode?
                               @returns true if the camera is in edit orbit mode.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_isRotationDamped(System.String)">
            <summary>
            Is this a Newton Fly mode camera with damped rotation?
                                @returns true if the camera uses a damped rotation.  i.e. Camera::newtonRotation is set to true.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_lookAt(System.String,System.String)">
            <summary>
            Point the camera at the specified position.  Does not work in Orbit or Track modes.
                               @param point The position to point the camera at.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_setAngularDrag(System.String,System.Single)">
            <summary>
            Set the angular drag for a Newton mode camera.
                               @param drag The angular drag applied while the camera is rotating.
                               @note Only takes affect when Camera::newtonRotation is set to true.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_setAngularForce(System.String,System.Single)">
            <summary>
            Set the angular force for a Newton mode camera.
                               @param force The angular force applied when attempting to rotate the camera.
                               @note Only takes affect when Camera::newtonRotation is set to true.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_setAngularVelocity(System.String,System.String)">
            <summary>
            Set the angular velocity for a Newton mode camera.
                               @param velocity The angular velocity infor form of \"x y z\".
                               @note Only takes affect when Camera::newtonRotation is set to true.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_setBrakeMultiplier(System.String,System.Single)">
            <summary>
            Set the Newton mode camera brake multiplier when trigger[1] is active.
                               @param multiplier The brake multiplier to apply.
                               @note Only used when Camera is in Newton mode.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_setDrag(System.String,System.Single)">
            <summary>
            Set the drag for a Newton mode camera.
                               @param drag The drag applied to the camera while moving.
                               @note Only used when Camera is in Newton mode.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_setEditOrbitMode(System.String)">
            <summary>
            Set the editor camera to orbit around a point set with Camera::setEditOrbitPoint().
                                @note This method is generally used only within the World Editor and other tools.  To 
                                orbit about an object or point within a game, see Camera::setOrbitMode() and its helper methods.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_setEditOrbitPoint(System.String,System.String)">
            <summary>
            Set the editor camera's orbit point.
                               @param point The point the camera will orbit in the form of \"x y z\".)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_setFlyForce(System.String,System.Single)">
            <summary>
            Set the force applied to a Newton mode camera while moving.
                               @param force The force applied to the camera while attempting to move.
                               @note Only used when Camera is in Newton mode.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_setFlyMode(System.String)">
            <summary>
            Set the camera to fly freely.
                               Allows the camera to have 6 degrees of freedom.  Provides for instantaneous motion 
                               and rotation unless one of the Newton fields has been set to true.  See Camera::newtonMode 
                               and Camera::newtonRotation.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_setMass(System.String,System.Single)">
            <summary>
            Set the mass for a Newton mode camera.
                               @param mass The mass used during ease-in and ease-out calculations.
                               @note Only used when Camera is in Newton mode.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_setNewtonFlyMode(System.String)">
            <summary>
            Set the camera to fly freely, but with ease-in and ease-out.
                                This method allows for the same 6 degrees of freedom as Camera::setFlyMode() but 
                                activates the ease-in and ease-out on the camera's movement.  To also activate 
                                Newton mode for the camera's rotation, set Camera::newtonRotation to true.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_setOffset(System.String,System.String)">
            <summary>
            Set the camera's offset.
                               The offset is added to the camera's position when set to CameraMode::OrbitObject.
                               @param offset The distance to offset the camera by in the form of \"x y z\".)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_setOrbitMode(System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Boolean,System.String,System.Boolean)">
            <summary>
            Set the camera to orbit around the given object, or if none is given, around the given point.
                                @param orbitObject The object to orbit around.  If no object is given (0 or blank string is passed in) use the orbitPoint instead
                                @param orbitPoint The point to orbit around when no object is given.  In the form of \"x y z ax ay az aa\" such as returned by SceneObject::getTransform().
                                @param minDistance The minimum distance allowed to the orbit object or point.
                                @param maxDistance The maximum distance allowed from the orbit object or point.
                                @param initDistance The initial distance from the orbit object or point.
                                @param ownClientObj [optional] Are we orbiting an object that is owned by us?  Default is false.
                                @param offset [optional] An offset added to the camera's position.  Default is no offset.
                                @param locked [optional] Indicates the camera does not receive input from the player.  Default is false.
                                @see Camera::setOrbitObject()
                                @see Camera::setOrbitPoint())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_setOrbitObject(System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Boolean,System.String,System.Boolean)">
            <summary>
            Set the camera to orbit around a given object.
                                @param orbitObject The object to orbit around.
                                @param rotation The initial camera rotation about the object in radians in the form of \"x y z\".
                                @param minDistance The minimum distance allowed to the orbit object or point.
                                @param maxDistance The maximum distance allowed from the orbit object or point.
                                @param initDistance The initial distance from the orbit object or point.
                                @param ownClientObject [optional] Are we orbiting an object that is owned by us?  Default is false.
                                @param offset [optional] An offset added to the camera's position.  Default is no offset.
                                @param locked [optional] Indicates the camera does not receive input from the player.  Default is false.
                                @returns false if the given object could not be found.
                                @see Camera::setOrbitMode())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_setOrbitPoint(System.String,System.String,System.Single,System.Single,System.Single,System.String,System.Boolean)">
            <summary>
            Set the camera to orbit around a given point.
                                @param orbitPoint The point to orbit around.  In the form of \"x y z ax ay az aa\" such as returned by SceneObject::getTransform().
                                @param minDistance The minimum distance allowed to the orbit object or point.
                                @param maxDistance The maximum distance allowed from the orbit object or point.
                                @param initDistance The initial distance from the orbit object or point.
                                @param offset [optional] An offset added to the camera's position.  Default is no offset.
                                @param locked [optional] Indicates the camera does not receive input from the player.  Default is false.
                                @see Camera::setOrbitMode())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_setRotation(System.String,System.String)">
            <summary>
            Set the camera's Euler rotation in radians.
                               @param rot The rotation in radians in the form of \"x y z\".
                               @note Rotation around the Y axis is ignored )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_setSpeedMultiplier(System.String,System.Single)">
            <summary>
            Set the Newton mode camera speed multiplier when trigger[0] is active.
                               @param multiplier The speed multiplier to apply.
                               @note Only used when Camera is in Newton mode.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_setTrackObject(System.String,System.String,System.String)">
            <summary>
            Set the camera to track a given object.
                                @param trackObject The object to track.
                                @param offset [optional] An offset added to the camera's position.  Default is no offset.
                                @returns false if the given object could not be found.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_setValidEditOrbitPoint(System.String,System.Boolean)">
            <summary>
            Set if there is a valid editor camera orbit point.
                               When validPoint is set to false the Camera operates as if it is 
                               in Fly mode rather than an Orbit mode.
                               @param validPoint Indicates the validity of the orbit point.
                               @note Only used when Camera is in Edit Orbit Mode.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCamera_setVelocity(System.String,System.String)">
            <summary>
            Set the velocity for the camera.
                               @param velocity The camera's velocity in the form of \"x y z\".
                               @note Only affects the Camera when in Newton mode.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCoverPoint_isOccupied(System.String)">
            <summary>
            @brief Returns true if someone is already using this cover point.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCubemapData_getFilename(System.String)">
            <summary>
            Returns the script filename of where the CubemapData object was 
               defined.  This is used by the material editor. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnCubemapData_updateFaces(System.String)">
            <summary>
            Update the assigned cubemaps faces. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnDebris_init(System.String,System.String,System.String)">
            <summary>
            1.0 1.0 1.0, 1.0 0.0 0.0), 
               @brief Manually set this piece of debris at the given position with the given velocity.
            
               Usually you do not manually create Debris objects as they are generated through other means, 
               such as an Explosion.  This method exists when you do manually create a Debris object and 
               want to have it start moving.
            
               @param inputPosition Position to place the debris.
               @param inputVelocity Velocity to move the debris after it has been placed.
               @return Always returns true.
            
               @tsexample
                  // Define the position
                  %position = \"1.0 1.0 1.0\";
                  // Define the velocity
                  %velocity = \"1.0 0.0 0.0\";
                  // Inform the debris object of its new position and velocity
                  %debris.init(%position,%velocity);
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnDebugDrawer_drawBox(System.String,System.String,System.String,System.String)">
            <summary>
            Draws an axis aligned box primitive within the two 3d points. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnDebugDrawer_drawLine(System.String,System.String,System.String,System.String)">
            <summary>
            Draws a line primitive between two 3d points. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnDebugDrawer_setLastTTL(System.String,System.UInt32)">
            <summary>
            Sets the \"time to live\" (TTL) for the last rendered primitive. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnDebugDrawer_setLastZTest(System.String,System.Boolean)">
            <summary>
            Sets the z buffer reading state for the last rendered primitive. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnDebugDrawer_toggleDrawing(System.String)">
            <summary>
            Toggles the rendering of DebugDrawer primitives. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnDebugDrawer_toggleFreeze(System.String)">
            <summary>
            Toggles freeze mode which keeps the currently rendered primitives from expiring. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnDecalData_postApply(System.String)">
            <summary>
            Recompute the imagemap sub-texture rectangles for this DecalData.
               @tsexample
               // Inform the decal object to reload its imagemap and frame data.
               %decalData.texRows = 4;
               %decalData.postApply();
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnDecalRoad_postApply(System.String)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               Force trigger an inspectPostApply. This will transmit 
                               the material and other fields ( not including nodes ) 
                               to client objects.
                              )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnDecalRoad_regenerate(System.String)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               Force DecalRoad to update it's spline and reclip geometry.
                              )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnDynamicConsoleMethodComponent_callMethod(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( DynamicConsoleMethodComponent, callMethod, void, 3, 64 , (methodName, argi) Calls script defined method
            			  @param methodName The method's name as a string
            			  @param argi Any arguments to pass to the method
            			  @return No return value
            			  @note %obj.callMethod( %methodName, %arg1, %arg2, ... );)
            
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnEditTSCtrl_getDisplayType(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnEditTSCtrl_getGizmo(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnEditTSCtrl_getOrthoFOV(System.String)">
            <summary>
            Return the FOV for orthographic views. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnEditTSCtrl_isMiddleMouseDown(System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnEditTSCtrl_renderBox(System.String,System.String,System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnEditTSCtrl_renderCircle(System.String,System.String,System.String,System.Single,System.Int32)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnEditTSCtrl_renderLine(System.String,System.String,System.String,System.Single)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnEditTSCtrl_renderSphere(System.String,System.String,System.Single,System.Int32)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnEditTSCtrl_renderTriangle(System.String,System.String,System.String,System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnEditTSCtrl_setDisplayType(System.String,System.Int32)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnEditTSCtrl_setOrthoFOV(System.String,System.Single)">
            <summary>
            Set the FOV for to use for orthographic views. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnFileDialog_Execute(System.String)">
            <summary>
            @brief Launches the OS file browser
            
               After an Execute() call, the chosen file name and path is available in one of two areas.  
               If only a single file selection is permitted, the results will be stored in the @a fileName 
               attribute.
            
               If multiple file selection is permitted, the results will be stored in the 
               @a files array.  The total number of files in the array will be stored in the 
               @a fileCount attribute.
            
               @tsexample
               // NOTE: This is not he preferred class to use, but this still works
               // Create the file dialog
               %baseFileDialog = new FileDialog()
               {
                  // Allow browsing of all file types
                  filters = \"*.*\";
                  // No default file
                  defaultFile = ;
                  // Set default path relative to project
                  defaultPath = \"./\";
                  // Set the title
                  title = \"Durpa\";
                  // Allow changing of path you are browsing
                  changePath = true;
               };
                // Launch the file dialog
                %baseFileDialog.Execute();
                
                // Don't forget to cleanup
                %baseFileDialog.delete();
            
                // A better alternative is to use the 
                // derived classes which are specific to file open and save
                // Create a dialog dedicated to opening files
                %openFileDlg = new OpenFileDialog()
                {
                   // Look for jpg image files
                   // First part is the descriptor|second part is the extension
                   Filters = \"Jepg Files|*.jpg\";
                   // Allow browsing through other folders
                   ChangePath = true;
                   // Only allow opening of one file at a time
                   MultipleFiles = false;
                };
                // Launch the open file dialog
                %result = %openFileDlg.Execute();
                // Obtain the chosen file name and path
                if ( %result )
                {
                   %seletedFile = %openFileDlg.file;
                }
                else
                {
                   %selectedFile = \"\";
                }
                // Cleanup
                %openFileDlg.delete();
            
                // Create a dialog dedicated to saving a file
                %saveFileDlg = new SaveFileDialog()
                {
                   // Only allow for saving of COLLADA files
                   Filters = \"COLLADA Files (*.dae)|*.dae|\";
                   // Default save path to where the WorldEditor last saved
                   DefaultPath = $pref::WorldEditor::LastPath;
                   // No default file specified
                   DefaultFile = \"\";
                   // Do not allow the user to change to a new directory
                   ChangePath = false;
                   // Prompt the user if they are going to overwrite an existing file
                   OverwritePrompt = true;
                };
                // Launch the save file dialog
                %result = %saveFileDlg.Execute();
                // Obtain the file name
                %selectedFile = \"\";
                if ( %result )
                   %selectedFile = %saveFileDlg.file;
                // Cleanup
                %saveFileDlg.delete();
               @endtsexample
            
               @return True if the file was selected was successfully found (opened) or declared (saved).)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnFileObject_close(System.String)">
            <summary>
            @brief Close the file.
               
               It is EXTREMELY important that you call this function when you are finished reading or writing to a file. 
               Failing to do so is not only a bad programming practice, but could result in bad data or corrupt files. 
               Remember: Open, Read/Write, Close, Delete...in that order!
               
               @tsexample
               // Create a file object for reading
               %fileRead = new FileObject();
               // Open a text file, if it exists
               %fileRead.OpenForRead(\"./test.txt\");
               // Peek the first line
               %line = %fileRead.peekLine();
               // Print the line we just peeked
               echo(%line);
               // If we peek again...
               %line = %fileRead.peekLine();
               // We will get the same output as the first time
               // since the stream did not move forward
               echo(%line);
               // Close the file when finished
               %fileWrite.close();
               // Cleanup the file object
               %fileWrite.delete();
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnFileObject_isEOF(System.String)">
            <summary>
            @brief Determines if the parser for this FileObject has reached the end of the file
               
               @tsexample
               // Create a file object for reading
               %fileRead = new FileObject();
               // Open a text file, if it exists
               %fileRead.OpenForRead(\"./test.txt\");
               // Keep reading until we reach the end of the file
               while( !%fileRead.isEOF() )
               {
                  %line = %fileRead.readline();
                  echo(%line);
               }
               // Made it to the end
               echo(\"Finished reading file\");
               @endtsexample
            
               @return True if the parser has reached the end of the file, false otherwise)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnFileObject_openForAppend(System.String,System.String)">
            <summary>
            @brief Open a specified file for writing, adding data to the end of the file
               
               There is no limit as to what kind of file you can write. Any format and data is allowable, not just text. Unlike openForWrite(), 
               which will erase an existing file if it is opened, openForAppend() preserves data in an existing file and adds to it.
            
               @param filename Path, name, and extension of file to append to
               
               @tsexample
               // Create a file object for writing
               %fileWrite = new FileObject();
               // Open a file to write to, if it does not exist it will be created
               // If it does exist, whatever we write will be added to the end
               %result = %fileWrite.OpenForAppend(\"./test.txt\");
               @endtsexample
            
               @return True if file was successfully opened, false otherwise)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnFileObject_openForRead(System.String,System.String)">
            <summary>
            @brief Open a specified file for reading
               
               There is no limit as to what kind of file you can read. Any format and data contained within is accessible, not just text
            
               @param filename Path, name, and extension of file to be read
               
               @tsexample
               // Create a file object for reading
               %fileRead = new FileObject();
               // Open a text file, if it exists
               %result = %fileRead.OpenForRead(\"./test.txt\");
               @endtsexample
            
               @return True if file was successfully opened, false otherwise)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnFileObject_openForWrite(System.String,System.String)">
            <summary>
            @brief Open a specified file for writing
               
               There is no limit as to what kind of file you can write. Any format and data is allowable, not just text
            
               @param filename Path, name, and extension of file to write to
               
               @tsexample
               // Create a file object for writing
               %fileWrite = new FileObject();
               // Open a file to write to, if it does not exist it will be created
               %result = %fileWrite.OpenForWrite(\"./test.txt\");
               @endtsexample
            
               @return True if file was successfully opened, false otherwise)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnFileObject_peekLine(System.String)">
            <summary>
            @brief Read a line from the file without moving the stream position.
               
               Emphasis on *line*, as in you cannot parse individual characters or chunks of data.  
               There is no limitation as to what kind of data you can read. Unlike readLine, the parser does not move forward after reading.
            
               @param filename Path, name, and extension of file to be read
               
               @tsexample
               // Create a file object for reading
               %fileRead = new FileObject();
               // Open a text file, if it exists
               %fileRead.OpenForRead(\"./test.txt\");
               // Peek the first line
               %line = %fileRead.peekLine();
               // Print the line we just peeked
               echo(%line);
               // If we peek again...
               %line = %fileRead.peekLine();
               // We will get the same output as the first time
               // since the stream did not move forward
               echo(%line);
               @endtsexample
            
               @return String containing the line of data that was just peeked)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnFileObject_readLine(System.String)">
            <summary>
            @brief Read a line from file.
               
               Emphasis on *line*, as in you cannot parse individual characters or chunks of data.  
               There is no limitation as to what kind of data you can read.
               
               @tsexample
               // Create a file object for reading
               %fileRead = new FileObject();
               // Open a text file, if it exists
               %fileRead.OpenForRead(\"./test.txt\");
               // Read in the first line
               %line = %fileRead.readline();
               // Print the line we just read
               echo(%line);
               @endtsexample
            
               @return String containing the line of data that was just read)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnFileObject_writeLine(System.String,System.String)">
            <summary>
            @brief Write a line to the file, if it was opened for writing.
               
               There is no limit as to what kind of text you can write. Any format and data is allowable, not just text. 
               Be careful of what you write, as whitespace, current values, and literals will be preserved.
            
               @param text The data we are writing out to file.
               
               @tsexample
               // Create a file object for writing
               %fileWrite = new FileObject();
               // Open a file to write to, if it does not exist it will be created
               %fileWrite.OpenForWrite(\"./test.txt\");
               // Write a line to the text files
               %fileWrite.writeLine(\"READ. READ CODE. CODE\");
               @endtsexample
            
               @return True if file was successfully opened, false otherwise)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnFileStreamObject_close(System.String)">
            <summary>
            @brief Close the file. You can no longer read or write to it unless you open it again.
               
               @tsexample
               // Create a file stream object for reading
               %fsObject = new FileStreamObject();
               // Open a file for reading
               %fsObject.open(\"./test.txt\", \"read\");
               // Always remember to close a file stream when finished
               %fsObject.close();
               @endtsexample
               
               @see open())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnFileStreamObject_open(System.String,System.String,System.String)">
            <summary>
            @brief Open a file for reading, writing, reading and writing, or appending
               
               Using \"Read\" for the open mode allows you to parse the contents of file, but not making modifications. \"Write\" will create a new 
               file if it does not exist, or erase the contents of an existing file when opened. Write also allows you to modify the contents of the file.
            
               \"ReadWrite\" will provide the ability to parse data (read it in) and manipulate data (write it out) interchangeably. Keep in mind the stream can 
               move during each operation. Finally, \"WriteAppend\" will open a file if it exists, but will not clear the contents. You can write new data starting 
                at the end of the files existing contents.
            
               @param filename Name of file to open
               @param openMode One of \"Read\", \"Write\", \"ReadWrite\" or \"WriteAppend\"
            
               @tsexample
               // Create a file stream object for reading
               %fsObject = new FileStreamObject();
               // Open a file for reading
               %fsObject.open(\"./test.txt\", \"read\");
               // Get the status and print it
               %status = %fsObject.getStatus();
               echo(%status);
               // Always remember to close a file stream when finished
               %fsObject.close();
               @endtsexample
            
               @return True if the file was successfully opened, false if something went wrong
               
               @see close())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnFlyingVehicle_useCreateHeight(System.String,System.Boolean)">
            <summary>
            @brief Set whether the vehicle should temporarily use the createHoverHeight 
               specified in the datablock.This can help avoid problems with spawning.
               @param enabled true to use the datablock createHoverHeight, false otherwise )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnForest_addItem(System.String,System.String,System.String,System.Single,System.Single)">
            <summary>
            .)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnForest_addItemWithTransform(System.String,System.String,System.String,System.Single)">
            <summary>
            .)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnForestWindEmitter_attachToObject(System.String,System.UInt32)">
            <summary>
            @brief Mounts the wind emitter to another scene object
            
               @param objectID Unique ID of the object wind emitter should attach to
               
               @tsexample
               // Wind emitter previously created and named %windEmitter
               // Going to attach it to the player, making him a walking wind storm
               %windEmitter.attachToObject(%player);
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameBase_applyImpulse(System.String,System.String,System.String)">
            <summary>
            @brief Apply an impulse to this object as defined by a world position and velocity vector.
            
               @param pos impulse world position
               @param vel impulse velocity (impulse force F = m * v)
               @return Always true
            
               @note Not all objects that derrive from GameBase have this defined.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameBase_applyRadialImpulse(System.String,System.String,System.Single,System.Single)">
            <summary>
            @brief Applies a radial impulse to the object using the given origin and force.
            
               @param origin World point of origin of the radial impulse.
               @param radius The radius of the impulse area.
               @param magnitude The strength of the impulse.
               
               @note Not all objects that derrive from GameBase have this defined.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameBase_getDataBlock(System.String)">
            <summary>
            @brief Get the datablock used by this object.
               @return the datablock this GameBase is using.
               @see setDataBlock())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameBase_setDataBlock(System.String,System.String)">
            <summary>
            @brief Assign this GameBase to use the specified datablock.
               @param data new datablock to use
               @return true if successful, false if failed.
               @see getDataBlock())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_activateGhosting(System.String)">
            <summary>
            @brief Called by the server during phase 2 of the mission download to start sending ghosts to the client.
               
               Ghosts represent objects on the server that are in scope for the client.  These need 
               to be synchronized with the client in order for the client to see and interact with them.  
               This is typically done during the standard mission start phase 2 when following Torque's 
               example mission startup sequence.
            
               @tsexample
               function serverCmdMissionStartPhase2Ack(%client, %seq, %playerDB)
               {
                  // Make sure to ignore calls from a previous mission load
                  if (%seq != $missionSequence || !$MissionRunning)
                     return;
                  if (%client.currentPhase != 1.5)
                     return;
                  %client.currentPhase = 2;
               
                  // Set the player datablock choice
                  %client.playerDB = %playerDB;
               
                  // Update mod paths, this needs to get there before the objects.
                  %client.transmitPaths();
               
                  // Start ghosting objects to the client
                  %client.activateGhosting();
               }
               @endtsexample
            
               @see @ref ghosting_scoping for a description of the ghosting system.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_chaseCam(System.String,System.Int32)">
            <summary>
            @brief Sets the size of the chase camera's matrix queue.
               @note This sets the queue size across all GameConnections.
               @note This is not currently hooked up.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_clearCameraObject(System.String)">
            <summary>
            @brief Clear the connection's camera object reference.
               
               @see GameConnection::setCameraObject() and GameConnection::getCameraObject())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_clearDisplayDevice(System.String)">
            <summary>
            @brief Clear any display device.
               A display device may define a number of properties that are used during rendering.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_delete(System.String,System.String)">
            <summary>
            ),
               @brief On the server, disconnect a client and pass along an optional reason why.
            
               This method performs two operations: it disconnects a client connection from the server, 
               and it deletes the connection object.  The optional reason is sent in the disconnect packet 
               and is often displayed to the user so they know why they've been disconnected.
               
               @param reason [optional] The reason why the user has been disconnected from the server.
               
               @tsexample
               function kick(%client)
               {
                  messageAll( 'MsgAdminForce', '\\c2The Admin has kicked %1.', %client.playerName);
               
                  if (!%client.isAIControlled())
                     BanList::add(%client.guid, %client.getAddress(), $Pref::Server::KickBanTime);
                  %client.delete(\"You have been kicked from this server\");
               }
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_getCameraObject(System.String)">
            <summary>
            @brief Returns the connection's camera object used when not viewing through the control object.
               
               @see GameConnection::setCameraObject() and GameConnection::clearCameraObject())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_getControlCameraDefaultFov(System.String)">
            <summary>
            @brief Returns the default field of view as used by the control object's camera.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_getControlCameraFov(System.String)">
            <summary>
            @brief Returns the field of view as used by the control object's camera.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_getControlObject(System.String)">
            <summary>
            @brief On the server, returns the object that the client is controlling.
               By default the control object is an instance of the Player class, but can also be an instance 
               of Camera (when editing the mission, for example), or any other ShapeBase derived class as 
               appropriate for the game.
               @see GameConnection::setControlObject())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_getControlSchemeAbsoluteRotation(System.String)">
            <summary>
            @brief Get the connection's control scheme absolute rotation property.
               
               @return True if the connection's control object should use an absolute rotation control scheme.
               @see GameConnection::setControlSchemeParameters())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_getDamageFlash(System.String)">
            <summary>
            @brief On the client, get the control object's damage flash level.
               @return flash level)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_getWhiteOut(System.String)">
            <summary>
            @brief On the client, get the control object's white-out level.
               @return white-out level)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_isAIControlled(System.String)">
            <summary>
            @brief Returns true if this connection is AI controlled.
               @see AIConnection)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_isControlObjectRotDampedCamera(System.String)">
            <summary>
            @brief Returns true if the object being controlled by the client is making use 
               of a rotation damped camera.
               @see Camera)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_isDemoPlaying(System.String)">
            <summary>
            @brief Returns true if a previously recorded demo file is now playing.
               
               @see GameConnection::playDemo())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_isDemoRecording(System.String)">
            <summary>
            @brief Returns true if a demo file is now being recorded.
               
               @see GameConnection::startRecording(), GameConnection::stopRecording())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_isFirstPerson(System.String)">
            <summary>
            @brief Returns true if this connection is in first person mode.
            
               @note Transition to first person occurs over time via mCameraPos, so this 
               won't immediately return true after a set.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_listClassIDs(System.String)">
            <summary>
            @brief List all of the classes that this connection knows about, and what their IDs are. Useful for debugging network problems.
               @note The list is sent to the console.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_LoadDatablocksFromFile(System.String,System.UInt32)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_play2D(System.String,System.String)">
            <summary>
            @brief Used on the server to play a 2D sound that is not attached to any object.
            
               @param profile The SFXProfile that defines the sound to play.
            
               @tsexample
               function ServerPlay2D(%profile)
               {
                  // Play the given sound profile on every client.
                  // The sounds will be transmitted as an event, not attached to any object.
                  for(%idx = 0; %idx  ClientGroup.getCount(); %idx++)
                     ClientGroup.getObject(%idx).play2D(%profile);
               }
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_play3D(System.String,System.String,System.String)">
            <summary>
            @brief Used on the server to play a 3D sound that is not attached to any object.
               
               @param profile The SFXProfile that defines the sound to play.
               @param location The position and orientation of the 3D sound given in the form of \"x y z ax ay az aa\".
            
               @tsexample
               function ServerPlay3D(%profile,%transform)
               {
                  // Play the given sound profile at the given position on every client
                  // The sound will be transmitted as an event, not attached to any object.
                  for(%idx = 0; %idx  ClientGroup.getCount(); %idx++)
                     ClientGroup.getObject(%idx).play3D(%profile,%transform);
               }
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_playDemo(System.String,System.String)">
            <summary>
            @brief On the client, play back a previously recorded game session.
               
               It is often useful to play back a game session.  This could be for producing a 
               demo of the game that will be shown at a later time, or for debugging a game.  
               By recording the entire network stream it is possible to later play game the game 
               exactly as it unfolded during the actual play session.  This is because all user 
               control and server results pass through the connection.
            
               @returns True if the playback was successful.  False if there was an issue, such as 
               not being able to open the demo file for playback.
               
               @see GameConnection::startRecording(), GameConnection::stopRecording())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_resetGhosting(System.String)">
            <summary>
            @brief On the server, resets the connection to indicate that ghosting has been disabled.
            
               Typically when a mission has ended on the server, all connected clients are informed of this change 
               and their connections are reset back to a starting state.  This method resets a connection on the 
               server to indicate that ghosts are no longer being transmitted.  On the client end, all ghost 
               information will be deleted.
            
               @tsexample
                  // Inform the clients
                  for (%clientIndex = 0; %clientIndex  ClientGroup.getCount(); %clientIndex++)
                  {
                     // clear ghosts and paths from all clients
                     %cl = ClientGroup.getObject(%clientIndex);
                     %cl.endMission();
                     %cl.resetGhosting();
                     %cl.clearPaths();
                  }
               @endtsexample
            
               @see @ref ghosting_scoping for a description of the ghosting system.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_setBlackOut(System.String,System.Boolean,System.Int32)">
            <summary>
            @brief On the server, sets the client's 3D display to fade to black.
               @param doFade Set to true to fade to black, and false to fade from black.
               @param timeMS Time it takes to perform the fade as measured in ms.
               @note Not currently hooked up, and is not synchronized over the network.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_setCameraObject(System.String,System.String)">
            <summary>
            @brief On the server, set the connection's camera object used when not viewing 
               through the control object.
               
               @see GameConnection::getCameraObject() and GameConnection::clearCameraObject())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_setConnectArgs(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            (GameConnection, setConnectArgs, void, 3, 17,
               (const char* args) @brief On the client, pass along a variable set of parameters to the server.
               
               Once the connection is established with the server, the server calls its onConnect() method 
               with the client's passed in parameters as aruments.
               
               @see GameConnection::onConnect())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_setControlCameraFov(System.String,System.Single)">
            <summary>
            @brief On the server, sets the control object's camera's field of view.
               @param newFOV New field of view (in degrees) to force the control object's camera to use.  This value 
               is clamped to be within the range of 1 to 179 degrees.
               @note When transmitted over the network to the client, the resolution is limited to 
               one degree.  Any fraction is dropped.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_setControlObject(System.String,System.String)">
            <summary>
            @brief On the server, sets the object that the client will control.
               By default the control object is an instance of the Player class, but can also be an instance 
               of Camera (when editing the mission, for example), or any other ShapeBase derived class as 
               appropriate for the game.
               @param ctrlObj The GameBase object on the server to control.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_setControlSchemeParameters(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            @brief Set the control scheme that may be used by a connection's control object.
               
               @param absoluteRotation Use absolute rotation values from client, likely through ExtendedMove.
               @param addYawToAbsRot Add relative yaw control to the absolute rotation calculation.  Only useful when absoluteRotation is true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_setFirstPerson(System.String,System.Boolean)">
            <summary>
            @brief On the server, sets this connection into or out of first person mode.
               
               @param firstPerson Set to true to put the connection into first person mode.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_setJoinPassword(System.String,System.String)">
            <summary>
            @brief On the client, set the password that will be passed to the server.
                          
                          On the server, this password is compared with what is stored in $pref::Server::Password.  
                          If $pref::Server::Password is empty then the client's sent password is ignored.  Otherwise, 
                          if the passed in client password and the server password do not match, the CHR_PASSWORD 
                          error string is sent back to the client and the connection is immediately terminated.
                          
                          This password checking is performed quite early on in the connection request process so as 
                          to minimize the impact of multiple failed attempts -- also known as hacking.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_setMissionCRC(System.String,System.Int32)">
            <summary>
            @brief On the server, transmits the mission file's CRC value to the client.
            
               Typically, during the standard mission start phase 1, the mission file's CRC value 
               on the server is send to the client.  This allows the client to determine if the mission 
               has changed since the last time it downloaded this mission and act appropriately, such as 
               rebuilt cached lightmaps.
            
               @param CRC The mission file's CRC value on the server.
            
               @tsexample
               function serverCmdMissionStartPhase1Ack(%client, %seq)
               {
                  // Make sure to ignore calls from a previous mission load
                  if (%seq != $missionSequence || !$MissionRunning)
                     return;
                  if (%client.currentPhase != 0)
                     return;
                  %client.currentPhase = 1;
               
                  // Start with the CRC
                  %client.setMissionCRC( $missionCRC );
               
                  // Send over the datablocks...
                  // OnDataBlocksDone will get called when have confirmation
                  // that they've all been received.
                  %client.transmitDataBlocks($missionSequence);
               }
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_startRecording(System.String,System.String)">
            <summary>
            @brief On the client, starts recording the network connection's traffic to a demo file.
               
               It is often useful to play back a game session.  This could be for producing a 
               demo of the game that will be shown at a later time, or for debugging a game.  
               By recording the entire network stream it is possible to later play game the game 
               exactly as it unfolded during the actual play session.  This is because all user 
               control and server results pass through the connection.
               
               @param fileName The file name to use for the demo recording.
               
               @see GameConnection::stopRecording(), GameConnection::playDemo())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_stopRecording(System.String)">
            <summary>
            @brief On the client, stops the recording of a connection's network traffic to a file.
               
               @see GameConnection::startRecording(), GameConnection::playDemo())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGameConnection_transmitDataBlocks(System.String,System.Int32)">
            <summary>
            @brief Sent by the server during phase 1 of the mission download to send the datablocks to the client.
               
               SimDataBlocks, also known as just datablocks, need to be transmitted to the client 
               prior to the client entering the game world.  These represent the static data that 
               most objects in the world reference.  This is typically done during the standard 
               mission start phase 1 when following Torque's example mission startup sequence.
            
               When the datablocks have all been transmitted, onDataBlocksDone() is called to move 
               the mission start process to the next phase.
            
               @param sequence The sequence is common between the server and client and ensures 
               that the client is acting on the most recent mission start process.  If an errant 
               network packet (one that was lost but has now been found) is received by the client 
               with an incorrect sequence, it is just ignored.  This sequence number is updated on 
               the server every time a mission is loaded.
            
               @tsexample
               function serverCmdMissionStartPhase1Ack(%client, %seq)
               {
                  // Make sure to ignore calls from a previous mission load
                  if (%seq != $missionSequence || !$MissionRunning)
                     return;
                  if (%client.currentPhase != 0)
                     return;
                  %client.currentPhase = 1;
               
                  // Start with the CRC
                  %client.setMissionCRC( $missionCRC );
               
                  // Send over the datablocks...
                  // OnDataBlocksDone will get called when have confirmation
                  // that they've all been received.
                  %client.transmitDataBlocks($missionSequence);
               }
               @endtsexample
               
               @see GameConnection::onDataBlocksDone())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGroundPlane_postApply(System.String)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               Force trigger an inspectPostApply. This will transmit 
                               material and other fields to client objects.
                               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiAutoCompleteCtrl_add(System.String,System.String,System.String,System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, add, void, 3, 5, (string name, int idNum, int scheme=0))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiAutoCompleteCtrl_addScheme(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, addScheme, void, 6, 6, (int id, ColorI fontColor, ColorI fontColorHL, ColorI fontColorSEL))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiAutoCompleteCtrl_changeTextById(System.String,System.String,System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, changeTextById, void, 4, 4, ( int id, string text ) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiAutoCompleteCtrl_clear(System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, clear, void, 2, 2, Clear the popup list.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiAutoCompleteCtrl_clearEntry(System.String,System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, clearEntry, void, 3, 3, (S32 entry))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiAutoCompleteCtrl_findText(System.String,System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, findText, S32, 3, 3, (string text)
                          Returns the position of the first entry containing the specified text.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiAutoCompleteCtrl_forceClose(System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, forceClose, void, 2, 2, )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiAutoCompleteCtrl_forceOnAction(System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, forceOnAction, void, 2, 2, )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiAutoCompleteCtrl_getSelected(System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, getSelected, S32, 2, 2, )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiAutoCompleteCtrl_getText(System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, getText, void, 2, 2, )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiAutoCompleteCtrl_getTextById(System.String,System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, getTextById, const char*, 3, 3,  (int id))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiAutoCompleteCtrl_replaceText(System.String,System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, replaceText, void, 3, 3, (bool doReplaceText))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiAutoCompleteCtrl_setEnumContent(System.String,System.String,System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, setEnumContent, void, 4, 4, (string class, string enum)
                          This fills the popup with a classrep's field enumeration type info.
                          More of a helper function than anything.   If console access to the field list is added, 
                          at least for the enumerated types, then this should go away..)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiAutoCompleteCtrl_setFirstSelected(System.String,System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, setFirstSelected, void, 2, 3, ([scriptCallback=true]))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiAutoCompleteCtrl_setNoneSelected(System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, setNoneSelected, void, 2, 2, )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiAutoCompleteCtrl_setSelected(System.String,System.String,System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, setSelected, void, 3, 4, (int id, [scriptCallback=true]))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiAutoCompleteCtrl_size(System.String)">
            <summary>
            ( GuiAutoCompleteCtrl, size, S32, 2, 2, Get the size of the menu - the number of entries in it.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiAutoCompleteCtrl_sort(System.String)">
            <summary>
            (GuiAutoCompleteCtrl, sort, void, 2, 2, Sort the list alphabetically.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiAutoCompleteCtrl_sortID(System.String)">
            <summary>
            (GuiAutoCompleteCtrl, sortID, void, 2, 2, Sort the list by ID.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiAutoScrollCtrl_reset(System.String)">
            <summary>
            Reset scrolling. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiBitmapButtonCtrl_setBitmap(System.String,System.String)">
            <summary>
            Set the bitmap to show on the button.
               @param path Path to the texture file in any of the supported formats. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiBitmapCtrl_setValue(System.String,System.Int32,System.Int32)">
            <summary>
            Set the offset of the bitmap within the control.
               @param x The x-axis offset of the image.
               @param y The y-axis offset of the image.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiButtonBaseCtrl_getText(System.String)">
            <summary>
            Get the text display on the button's label (if any).
               @return The button's label. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiButtonBaseCtrl_performClick(System.String)">
            <summary>
            Simulate a click on the button.
               This method will trigger the button's action just as if the button had been pressed by the 
               user. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiButtonBaseCtrl_resetState(System.String)">
            <summary>
            Reset the mousing state of the button.
               This method should not generally be called. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiButtonBaseCtrl_setStateOn(System.String,System.Boolean)">
            <summary>
            For toggle or radio buttons, set whether the button is currently activated or not.  For radio buttons, 
               toggling a button on will toggle all other radio buttons in its group to off.
               @param isOn If true, the button will be toggled on (if not already); if false, it will be toggled off.
               @note Toggling the state of a button with this method will em>not/em> not trigger the action associated with the 
                  button.  To do that, use performClick(). )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiButtonBaseCtrl_setText(System.String,System.String)">
            <summary>
            Set the text displayed on the button's label.
               @param text The text to display as the button's text label.
               @note Not all buttons render text labels.
               @see getText
               @see setTextID )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiButtonBaseCtrl_setTextID(System.String,System.String)">
            <summary>
            Set the text displayed on the button's label using a string from the string table 
               assigned to the control.
               @param id Name of the variable that contains the integer string ID.  Used to look up 
                  string in table.
               @note Not all buttons render text labels.
               @see setText
               @see getText
               @see GuiControl::langTableMod
               @see LangTable
               @ref Gui_i18n )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_clientToScreen(System.String,System.String)">
            <summary>
            Translate a coordinate from canvas window-space to screen-space.
               @param coordinate The coordinate in window-space.
               @return The given coordinate translated to screen-space. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_cursorOff(System.String)">
            <summary>
            @brief Turns on the mouse off.
            				   @tsexample
            				   Canvas.cursorOff();
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_cursorOn(System.String)">
            <summary>
            @brief Turns on the mouse cursor.
            				   @tsexample
            				   Canvas.cursorOn();
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_findFirstMatchingMonitor(System.String,System.String)">
            <summary>
            @brief Find the first monitor index that matches the given name.
                           The actual match algorithm depends on the implementation.
                           @param name The name to search for.
            				   @return The number of monitors attached to the system, including the default monoitor.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_getContent(System.String)">
            <summary>
            @brief Get the GuiControl which is being used as the content.
            
            				   @tsexample
            				   Canvas.getContent();
            				   @endtsexample
            
            				   @return ID of current content control)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_getCursorPos(System.String)">
            <summary>
            @brief Get the current position of the cursor.
            				   @param param Description
            				   @tsexample
            				   %cursorPos = Canvas.getCursorPos();
            				   @endtsexample
            				   @return Screen coordinates of mouse cursor, in format \"X Y\")
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_getExtent(System.String)">
            <summary>
            @brief Returns the dimensions of the canvas
            
            				   @tsexample
            				   %extent = Canvas.getExtent();
            				   @endtsexample
            
            				   @return Width and height of canvas. Formatted as numerical values in a single string \"# #\")
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_getMode(System.String,System.Int32)">
            <summary>
            @brief Gets information on the specified mode of this device.
            				   @param modeId Index of the mode to get data from.
            				   @return A video mode string given an adapter and mode index.
            				   @see GuiCanvas::getVideoMode())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_getModeCount(System.String)">
            <summary>
            @brief Gets the number of modes available on this device.
            
            				   @param param Description
            
            				   @tsexample
            				   %modeCount = Canvas.getModeCount()
            				   @endtsexample
            
            				   @return The number of video modes supported by the device)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_getMonitorCount(System.String)">
            <summary>
            @brief Gets the number of monitors attached to the system.
            
            				   @return The number of monitors attached to the system, including the default monoitor.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_getMonitorName(System.String,System.Int32)">
            <summary>
            @brief Gets the name of the requested monitor.
                           @param index The monitor index.
            				   @return The name of the requested monitor.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_getMonitorRect(System.String,System.Int32)">
            <summary>
            @brief Gets the region of the requested monitor.
                           @param index The monitor index.
            				   @return The rectangular region of the requested monitor.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_getMouseControl(System.String)">
            <summary>
            @brief Gets the gui control under the mouse.
            				   @tsexample
            				   %underMouse = Canvas.getMouseControl();
            				   @endtsexample
            
            				   @return ID of the gui control, if one was found. NULL otherwise)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_getVideoMode(System.String)">
            <summary>
            @brief Gets the current screen mode as a string.
            
            				   The return string will contain 5 values (width, height, fullscreen, bitdepth, refreshRate). 
            				   You will need to parse out each one for individual use.
            
            				   @tsexample
            				   %screenWidth = getWord(Canvas.getVideoMode(), 0);
            				   %screenHeight = getWord(Canvas.getVideoMode(), 1);
            				   %isFullscreen = getWord(Canvas.getVideoMode(), 2);
            				   %bitdepth = getWord(Canvas.getVideoMode(), 3);
            				   %refreshRate = getWord(Canvas.getVideoMode(), 4);
            				   @endtsexample
            
            				   @return String formatted with screen width, screen height, screen mode, bit depth, and refresh rate.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_getWindowPosition(System.String)">
            <summary>
            Get the current position of the platform window associated with the canvas.
               @return The window position of the canvas in screen-space. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_hideCursor(System.String)">
            <summary>
            @brief Disable rendering of the cursor.
            
            				   @tsexample
            				   Canvas.hideCursor();
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_hideWindow(System.String)">
            <summary>
            ( GuiCanvas, hideWindow, void, 2, 2,  )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_isCursorOn(System.String)">
            <summary>
            @brief Determines if mouse cursor is enabled.
            
            				   @tsexample
            				   // Is cursor on?
            				   if(Canvas.isCursorOn())
            				   	echo(\"Canvas cursor is on\");
            				   @endtsexample
            				   @return Returns true if the cursor is on.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_isCursorShown(System.String)">
            <summary>
            @brief Determines if mouse cursor is rendering.
            
            				   @tsexample
            				   // Is cursor rendering?
            				   if(Canvas.isCursorShown())
            				   	echo(\"Canvas cursor is rendering\");
            				   @endtsexample
            				   @return Returns true if the cursor is rendering.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_renderFront(System.String,System.Boolean)">
            <summary>
            @brief This turns on/off front-buffer rendering.
            
            				   @param enable True if all rendering should be done to the front buffer
            
            				   @tsexample
            				   Canvas.renderFront(false);
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_repaint(System.String,System.Int32)">
            <summary>
            @brief Force canvas to redraw.
                           If the elapsed time is greater than the time since the last paint 
                           then the repaint will be skipped.
                           @param elapsedMS The optional elapsed time in milliseconds.
            
            				   @tsexample
            				   Canvas.repaint();
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_reset(System.String)">
            <summary>
            @brief Reset the update regions for the canvas.
            
            				   @tsexample
            				   Canvas.reset();
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_screenToClient(System.String,System.String)">
            <summary>
            Translate a coordinate from screen-space to canvas window-space.
               @param coordinate The coordinate in screen-space.
               @return The given coordinate translated to window-space. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_setContent(System.String,System.String)">
            <summary>
            @brief Set the content of the canvas to a specified control.
            
            				   @param ctrl ID or name of GuiControl to set content to
            
            				   @tsexample
            				   Canvas.setContent(PlayGui);
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_setCursor(System.String,System.String)">
            <summary>
            @brief Sets the cursor for the canvas.
            
            				   @param cursor Name of the GuiCursor to use
            
            				   @tsexample
            				   Canvas.setCursor(\"DefaultCursor\");
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_setPopupShown(System.String,System.Boolean)">
            <summary>
            (bool shown) - Enabled when a context menu/popup menu is shown.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_setWindowPosition(System.String,System.String)">
            <summary>
            Set the position of the platform window associated with the canvas.
               @param position The new position of the window in screen-space. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_setWindowTitle(System.String,System.String)">
            <summary>
            @brief Change the title of the OS window.
            
            				   @param newTitle String containing the new name
            
            				   @tsexample
            				   Canvas.setWindowTitle(\"Documentation Rocks!\");
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_showCursor(System.String)">
            <summary>
            @brief Enable rendering of the cursor.
            
            				   @tsexample
            				   Canvas.showCursor();
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_showWindow(System.String)">
            <summary>
            ( GuiCanvas, showWindow, void, 2, 2,  )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCanvas_toggleFullscreen(System.String)">
            <summary>
            @brief toggle canvas from fullscreen to windowed mode or back.
            
            				   @tsexample
            				   // If we are in windowed mode, the following will put is in fullscreen
            				   Canvas.toggleFullscreen();
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCheckBoxCtrl_isStateOn(System.String)">
            <summary>
            Test whether the checkbox is currently checked.
               @return True if the checkbox is currently ticked, false otherwise. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiCheckBoxCtrl_setStateOn(System.String,System.Boolean)">
            <summary>
            Set whether the checkbox is ticked or not.
               @param newState If true the box will be checked, if false, it will be unchecked.
               @note This method will @b not trigger the command associated with the control.  To toggle the 
                  checkbox state as if the user had clicked the control, use performClick(). )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiChunkedBitmapCtrl_setBitmap(System.String,System.String)">
            <summary>
            @brief Set the image rendered in this control.
               @param filename The image name you want to set
               @tsexample
               ChunkedBitmap.setBitmap(\"images/background.png\");
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiClockHud_getTime(System.String)">
            <summary>
            Returns the current time, in seconds.
            													@return timeInseconds Current time, in seconds
            													@tsexample
            														// Get the current time from the GuiClockHud control
            														%timeInSeconds = %guiClockHud.getTime();
            													@endtsexample
            				  )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiClockHud_setReverseTime(System.String,System.Single)">
            <summary>
            @brief Sets a time for a countdown clock.
               												Setting the time like this will cause the clock to count backwards from the specified time.
            													@param timeInSeconds Time to set the clock, in seconds (IE: 00:02 would be 120)
            													@see setTime
            				  )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiClockHud_setTime(System.String,System.Single)">
            <summary>
            Sets the current base time for the clock.
            													@param timeInSeconds Time to set the clock, in seconds (IE: 00:02 would be 120)
            													@tsexample
            														// Define the time, in seconds
            														%timeInSeconds = 120;
            														// Change the time on the GuiClockHud control
            														%guiClockHud.setTime(%timeInSeconds);
            													@endtsexample
            				  )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_addGuiControl(System.String,System.String)">
            <summary>
            Add the given control as a child to this control.
               This is synonymous to calling SimGroup::addObject.
               @param control The control to add as a child.
               @note The control will retain its current position and size.
               @see SimGroup::addObject
               @ref GuiControl_Hierarchy )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_canChangeContextBackColor(System.String)">
            <summary>
            Returns if the control's background color can be changed in the game or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_canChangeContextFillColor(System.String)">
            <summary>
            Returns if the control's fill color can be changed in the game or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_canChangeContextFontColor(System.String)">
            <summary>
            Returns if the control's font color can be changed in the game or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_canChangeContextFontSize(System.String)">
            <summary>
            Returns if the control's font size can be changed in the game or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_canShowContextWindowSettings(System.String)">
            <summary>
            Returns if the control's window settings can be changed in the game or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_clearFirstResponder(System.String,System.Boolean)">
            <summary>
            Clear this control from being the first responder in its hierarchy chain.
               @param ignored Ignored.  Supported for backwards-compatibility. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_controlIsChild(System.String,System.String)">
            <summary>
            Test whether the given control is a direct or indirect child to this control.
               @param control The potential child control.
               @return True if the given control is a direct or indirect child to this control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_controlIsSibling(System.String,System.String)">
            <summary>
            Test whether the given control is a sibling of this control.
               @param control The potential sibling control.
               @return True if the given control is a sibling of this control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_findHitControl(System.String,System.Int32,System.Int32)">
            <summary>
            Find the topmost child control located at the given coordinates.
               @note Only children that are both visible and have the 'modal' flag set in their profile will be considered in the search.
               @param x The X coordinate in the control's own coordinate space.
               @param y The Y coordinate in the control's own coordinate space.
               @return The topmost child control at the given coordintes or the control on which the method was called if no matching child could be found.
               @see GuiControlProfile::modal
               @see findHitControls )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_findHitControls(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Find all visible child controls that intersect with the given rectangle.
               @note Invisible child controls will not be included in the search.
               @param x The X coordinate of the rectangle's upper left corner in the control's own coordinate space.
               @param y The Y coordinate of the rectangle's upper left corner in the control's own coordinate space.
               @param width The width of the search rectangle in pixels.
               @param height The height of the search rectangle in pixels.
               @return A space-separated list of the IDs of all visible control objects intersecting the given rectangle.
               @tsexample
               // Lock all controls in the rectangle at x=10 and y=10 and the extent width=100 and height=100.
               foreach$( %ctrl in %this.findHitControls( 10, 10, 100, 100 ) )
                  %ctrl.setLocked( true );
               @endtsexample
               @see findHitControl )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_getAlphaFadeTime(System.String)">
            <summary>
            Get the alpha fade time for the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_getAlphaValue(System.String)">
            <summary>
            Get the alpha for the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_getAspect(System.String)">
            <summary>
            Get the aspect ratio of the control's extents.
               @return The width of the control divided by its height.
               @see getExtent )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_getCenter(System.String)">
            <summary>
            Get the coordinate of the control's center point relative to its parent.
               @return The coordinate of the control's center point in parent-relative coordinates. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_getControlFontSize(System.String)">
            <summary>
            Sets the font size of a control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_getControlLock(System.String)">
            <summary>
            Returns if the control is locked or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_getControlTextureFile(System.String)">
            <summary>
            Returns the filename of the texture of the control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_getExtent(System.String)">
            <summary>
            Get the width and height of the control.
               @return A point structure containing the width of the control in x and the height in y. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_getFirstResponder(System.String)">
            <summary>
            Get the first responder set on this GuiControl tree.
               @return The first responder set on the control's subtree.
               @see isFirstResponder
               @see makeFirstResponder
               @see setFirstResponder
               @ref GuiControl_FirstResponders )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_getGlobalCenter(System.String)">
            <summary>
            Get the coordinate of the control's center point in coordinates relative to the root control in its control hierarchy.
               @Return the center coordinate of the control in root-relative coordinates. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_getGlobalPosition(System.String)">
            <summary>
            Get the position of the control relative to the root of the GuiControl hierarchy it is contained in.
               @return The control's current position in root-relative coordinates. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_getMaxExtent(System.String)">
            <summary>
            Get the maximum allowed size of the control.
               @return The maximum size to which the control can be shrunk.
               @see maxExtent )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_getMinExtent(System.String)">
            <summary>
            Get the minimum allowed size of the control.
               @return The minimum size to which the control can be shrunk.
               @see minExtent )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_getMouseOverAlphaValue(System.String)">
            <summary>
            Get the mouse over alpha for the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_getParent(System.String)">
            <summary>
            Get the immediate parent control of the control.
               @return The immediate parent GuiControl or 0 if the control is not parented to a GuiControl. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_getPosition(System.String)">
            <summary>
            Get the control's current position relative to its parent.
               @return The coordinate of the control in its parent's coordinate space. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_getRoot(System.String)">
            <summary>
            Get the canvas on which the control is placed.
               @return The canvas on which the control's hierarchy is currently placed or 0 if the control is not currently placed on a GuiCanvas.
               @see GuiControl_Hierarchy )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_getRootControl(System.String)">
            <summary>
            Get root control )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_isAwake(System.String)">
            <summary>
            Test whether the control is currently awake.
               If a control is awake it means that it is part of the GuiControl hierarchy of a GuiCanvas.
               @return True if the control is awake.
               @ref GuiControl_Waking )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_isContextAlphaEnabled(System.String)">
            <summary>
            Returns if the control's alpha value can be changed in the game or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_isContextAlphaFadeEnabled(System.String)">
            <summary>
            Returns if the control's alpha fade value can be changed in the game or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_isContextLockable(System.String)">
            <summary>
            Returns if the control can be locked in the game or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_isContextMouseOverAlphaEnabled(System.String)">
            <summary>
            Returns if the control's mouse-over alpha value can be changed in the game or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_isContextMovable(System.String)">
            <summary>
            Returns if the control can be moved in the game or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_isFirstResponder(System.String)">
            <summary>
            Test whether the control is the current first responder.
               @return True if the control is the current first responder.
               @see makeFirstResponder
               @see setFirstResponder
               @ref GuiControl_FirstResponders )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_isMouseLocked(System.String)">
            <summary>
            Indicates if the mouse is locked in this control.
               @return True if the mouse is currently locked. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_isVisible(System.String)">
            <summary>
            Test whether the control is currently set to be visible.
               @return True if the control is currently set to be visible.
               @note This method does not tell anything about whether the control is actually visible to 
                  the user at the moment.
               @ref GuiControl_VisibleActive )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_pointInControl(System.String,System.Int32,System.Int32)">
            <summary>
            Test whether the given point lies within the rectangle of the control.
               @param x X coordinate of the point in parent-relative coordinates.
               @param y Y coordinate of the point in parent-relative coordinates.
               @return True if the point is within the control, false if not.
               @see getExtent
               @see getPosition )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_refresh(System.String)">
            <summary>
            Recalculates the position and size of this control and all its children. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_resetCur(System.String)">
            <summary>
            Removes the plus cursor.
               @param ignored Ignored.  Supported for backwards-compatibility. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_resize(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resize and reposition the control using the give coordinates and dimensions.  Child controls 
               will resize according to their layout behaviors.
               @param x The new X coordinate of the control in its parent's coordinate space.
               @param y The new Y coordinate of the control in its parent's coordinate space.
               @param width The new width to which the control should be resized.
               @param height The new height to which the control should be resized. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setActive(System.String,System.Boolean)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setAlphaFadeTime(System.String,System.Int32)">
            <summary>
            Set the alpha for the object.
               @param value Range 0, 1 for the transparency. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setAlphaValue(System.String,System.Single)">
            <summary>
            Set the alpha for the object.
               @param value Range 0, 1 for the transparency. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setCenter(System.String,System.Int32,System.Int32)">
            <summary>
            Set the control's position by its center point.
               @param x The X coordinate of the new center point of the control relative to the control's parent.
               @param y The Y coordinate of the new center point of the control relative to the control's parent. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setContextAlpha(System.String,System.Boolean)">
            <summary>
            Displays the option to set the alpha of the control in the game when true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setContextAlphaFade(System.String,System.Boolean)">
            <summary>
            Displays the option to set the alpha fade value of the control in the game when true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setContextBackColor(System.String,System.Boolean)">
            <summary>
            Displays the option to set the background color of the control in the game when true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setContextFillColor(System.String,System.Boolean)">
            <summary>
            Displays the option to set the fill color of the control in the game when true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setContextFontColor(System.String,System.Boolean)">
            <summary>
            Displays the option to set the font color of the control in the game when true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setContextFontSize(System.String,System.Boolean)">
            <summary>
            Displays the option to set the font size of the control in the game when true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setContextLockControl(System.String,System.Boolean)">
            <summary>
            Displays the option to lock the control in the game when true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setContextMouseOverAlpha(System.String,System.Boolean)">
            <summary>
            Displays the option to set the mouse-over alpha of the control in the game when true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setContextMoveControl(System.String,System.Boolean)">
            <summary>
            Displays the option to move the control in the game when true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setControlBackgroundColor(System.String,System.String)">
            <summary>
            Set control background color. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setControlFillColor(System.String,System.String)">
            <summary>
            Set control fill color. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setControlFontColor(System.String,System.String)">
            <summary>
            Set control font color. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setControlFontSize(System.String,System.Int32)">
            <summary>
            Sets the font size of a control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setControlLock(System.String,System.Boolean)">
            <summary>
            Lock the control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setControlTexture(System.String,System.String)">
            <summary>
            Set control texture. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setCur(System.String)">
            <summary>
            Sets the cursor as a plus.
               @param ignored Ignored.  Supported for backwards-compatibility. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setFirstResponder(System.String)">
            <summary>
            Make this control the current first responder.
               @note Only controls with a profile that has canKeyFocus enabled are able to become first responders.
               @see GuiControlProfile::canKeyFocus
               @see isFirstResponder
               @ref GuiControl_FirstResponders )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setMouseOverAlphaValue(System.String,System.Single)">
            <summary>
            Set the alpha for the object.
               @param value Range 0, 1 for the transparency. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setPosition(System.String,System.Int32,System.Int32)">
            <summary>
            Position the control in the local space of the parent control.
               @param x The new X coordinate of the control relative to its parent's upper left corner.
               @param y The new Y coordinate of the control relative to its parent's upper left corner. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setPositionGlobal(System.String,System.Int32,System.Int32)">
            <summary>
            Set position of the control relative to the root of the GuiControl hierarchy it is contained in.
               @param x The new X coordinate of the control relative to the root's upper left corner.
               @param y The new Y coordinate of the control relative to the root's upper left corner. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setProfile(System.String,System.String)">
            <summary>
            Set the control profile for the control to use.
               The profile used by a control determines a great part of its behavior and appearance.
               @param profile The new profile the control should use.
               @ref GuiControl_Profiles )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setShowContextWindowSettings(System.String,System.Boolean)">
            <summary>
            Displays the option to set the window settings of the control in the game when true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setValue(System.String,System.String)">
            <summary>
            Set the value associated with the control.
               @param value The new value for the control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_setVisible(System.String,System.Boolean)">
            <summary>
            Set whether the control is visible or not.
               @param state The new visiblity flag state for the control.
               @ref GuiControl_VisibleActive )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiControl_transparentControlCheck(System.String)">
            <summary>
            Returns true if the control is transparent. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiDirectoryFileListCtrl_getSelectedFile(System.String)">
            <summary>
            Get the currently selected filename.
               @return The filename of the currently selected file )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiDirectoryFileListCtrl_getSelectedFiles(System.String)">
            <summary>
            Get the list of selected files.
               @return A space separated list of selected files )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiDirectoryFileListCtrl_reload(System.String)">
            <summary>
            Update the file list. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiDirectoryFileListCtrl_setFilter(System.String,System.String)">
            <summary>
            Set the file filter.
               @param filter Tab-delimited list of file name patterns. Only matched files will be displayed. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiDirectoryFileListCtrl_setPath(System.String,System.String,System.String)">
            <summary>
            Set the search path and file filter.
               @param path   Path in game directory from which to list files.
               @param filter Tab-delimited list of file name patterns. Only matched files will be displayed. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiDragAndDropControl_startDragging(System.String,System.Int32,System.Int32)">
            <summary>
            Start the drag operation.
               @param x X coordinate for the mouse pointer offset which the drag control should position itself.
               @param y Y coordinate for the mouse pointer offset which the drag control should position itself.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiDynamicCtrlArrayControl_refresh(System.String)">
            <summary>
            Recalculates the position and size of this control and all its children. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiEditCtrl_getSelection(System.String)">
            <summary>
            Gets the set of GUI controls currently selected in the editor. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiEditCtrl_getTrash(System.String)">
            <summary>
            Gets the GUI controls(s) that are currently in the trash.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiFilterCtrl_setValue(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( GuiFilterCtrl, setValue, void, 3, 20, (f1, f2, ...)
                          Reset the filter to use the specified points, spread equidistantly across the domain.
            			  @internal)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiFormCtrl_getMenuID(System.String)">
            <summary>
            Get the ID of this form's menu.
               @return The ID of the form menu )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiFormCtrl_setCaption(System.String,System.String)">
            <summary>
            Sets the title of the form.
               @param caption Form caption )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiFrameSetCtrl_addColumn(System.String)">
            <summary>
            Add a new column. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiFrameSetCtrl_addRow(System.String)">
            <summary>
            Add a new row. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiFrameSetCtrl_frameBorder(System.String,System.Int32,System.String)">
            <summary>
            dynamic ),
               Override the i>borderEnable/i> setting for this frame.
               @param index  Index of the frame to modify
               @param state  New borderEnable state: \"on\", \"off\" or \"dynamic\" )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiFrameSetCtrl_frameMinExtent(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the minimum width and height for the frame. It will not be possible 
               for the user to resize the frame smaller than this.
               @param index  Index of the frame to modify
               @param width  Minimum width in pixels
               @param height Minimum height in pixels )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiFrameSetCtrl_frameMovable(System.String,System.Int32,System.String)">
            <summary>
            dynamic ),
               Override the i>borderMovable/i> setting for this frame.
               @param index  Index of the frame to modify
               @param state  New borderEnable state: \"on\", \"off\" or \"dynamic\" )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiFrameSetCtrl_framePadding(System.String,System.Int32,System.String)">
            <summary>
            Set the padding for this frame. Padding introduces blank space on the inside 
               edge of the frame.
               @param index     Index of the frame to modify
               @param padding   Frame top, bottom, left, and right padding )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiFrameSetCtrl_getColumnCount(System.String)">
            <summary>
            Get the number of columns.
               @return The number of columns )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiFrameSetCtrl_getColumnOffset(System.String,System.Int32)">
            <summary>
            Get the horizontal offset of a column.
               @param index Index of the column to query
               @return Column offset in pixels )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiFrameSetCtrl_getFramePadding(System.String,System.Int32)">
            <summary>
            Get the padding for this frame.
               @param index     Index of the frame to query )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiFrameSetCtrl_getRowCount(System.String)">
            <summary>
            Get the number of rows.
               @return The number of rows )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiFrameSetCtrl_getRowOffset(System.String,System.Int32)">
            <summary>
            Get the vertical offset of a row.
               @param index Index of the row to query
               @return Row offset in pixels )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiFrameSetCtrl_removeColumn(System.String)">
            <summary>
            Remove the last (rightmost) column. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiFrameSetCtrl_removeRow(System.String)">
            <summary>
            Remove the last (bottom) row. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiFrameSetCtrl_setColumnOffset(System.String,System.Int32,System.Int32)">
            <summary>
            Set the horizontal offset of a column.
               Note that column offsets must always be in increasing order, and therefore 
               this offset must be between the offsets of the colunns either side.
               @param index  Index of the column to modify
               @param offset New column offset )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiFrameSetCtrl_setRowOffset(System.String,System.Int32,System.Int32)">
            <summary>
            Set the vertical offset of a row.
               Note that row offsets must always be in increasing order, and therefore 
               this offset must be between the offsets of the rows either side.
               @param index  Index of the row to modify
               @param offset New row offset )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiFrameSetCtrl_updateSizes(System.String)">
            <summary>
            Recalculates child control sizes. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiGameListMenuCtrl_activateRow(System.String)">
            <summary>
            Activates the current row. The script callback of  the current row will be called (if it has one). )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiGameListMenuCtrl_addRow(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Add a row to the list control.
               @param label The text to display on the row as a label.
               @param callback Name of a script function to use as a callback when this row is activated.
               @param icon [optional] Index of the icon to use as a marker.
               @param yPad [optional] An extra amount of height padding before the row. Does nothing on the first row.
               @param useHighlightIcon [optional] Does this row use the highlight icon?.
               @param enabled [optional] If this row is initially enabled. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiGameListMenuCtrl_getRowCount(System.String)">
            <summary>
            Gets the number of rows on the control.
               @return (int) The number of rows on the control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiGameListMenuCtrl_getRowLabel(System.String,System.Int32)">
            <summary>
            Gets the label displayed on the specified row.
               @param row Index of the row to get the label of.
               @return The label for the row. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiGameListMenuCtrl_getSelectedRow(System.String)">
            <summary>
            Gets the index of the currently selected row.
               @return Index of the selected row. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiGameListMenuCtrl_isRowEnabled(System.String,System.Int32)">
            <summary>
            Determines if the specified row is enabled or disabled.
               @param row The row to set the enabled status of.
               @return True if the specified row is enabled. False if the row is not enabled or the given index was not valid. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiGameListMenuCtrl_setRowEnabled(System.String,System.Int32,System.Boolean)">
            <summary>
            Sets a row's enabled status according to the given parameters.
               @param row The index to check for validity.
               @param enabled Indicate true to enable the row or false to disable it. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiGameListMenuCtrl_setRowLabel(System.String,System.Int32,System.String)">
            <summary>
            Sets the label on the given row.
               @param row Index of the row to set the label on.
               @param label Text to set as the label of the row. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiGameListMenuCtrl_setSelected(System.String,System.Int32)">
            <summary>
            Sets the selected row. Only rows that are enabled can be selected.
               @param row Index of the row to set as selected. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiGameListOptionsCtrl_addRow(System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Add a row to the list control.
               @param label The text to display on the row as a label.
               @param options A tab separated list of options.
               @param wrapOptions Specify true to allow options to wrap at each end or false to prevent wrapping.
               @param callback Name of a script function to use as a callback when this row is activated.
               @param icon [optional] Index of the icon to use as a marker.
               @param yPad [optional] An extra amount of height padding before the row. Does nothing on the first row.
               @param enabled [optional] If this row is initially enabled. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiGameListOptionsCtrl_getCurrentOption(System.String,System.Int32)">
            <summary>
            Gets the text for the currently selected option of the given row.
               @param row Index of the row to get the option from.
               @return A string representing the text currently displayed as the selected option on the given row. If there is no such displayed text then the empty string is returned. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiGameListOptionsCtrl_selectOption(System.String,System.Int32,System.String)">
            <summary>
            Set the row's current option to the one specified
               @param row Index of the row to set an option on.
               @param option The option to be made active.
               @return True if the row contained the option and was set, false otherwise. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiGameListOptionsCtrl_setOptions(System.String,System.Int32,System.String)">
            <summary>
            Sets the list of options on the given row.
               @param row Index of the row to set options on.
               @param optionsList A tab separated list of options for the control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiGraphCtrl_addAutoPlot(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Sets up the given plotting curve to automatically plot the value of the @a variable with a 
               frequency of @a updateFrequency.
               @param plotId Index of the plotting curve.  Must be 0=plotId6.
               @param variable Name of the global variable.
               @param updateFrequency Frequency with which to add new data points to the plotting curve (in milliseconds).
               @tsexample
               // Plot FPS counter at 1 second intervals.
               %graph.addAutoPlot( 0, \"fps::real\", 1000 );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiGraphCtrl_addDatum(System.String,System.Int32,System.Single)">
            <summary>
            Add a data point to the plot's curve.
               @param plotId Index of the plotting curve to which to add the data point.  Must be 0=plotId6.
               @param value Value of the data point to add to the curve.
               @note Data values are added to the @b left end of the plotting curve.
               @note A maximum number of 200 data points can be added to any single plotting curve at any one time.  If 
                  this limit is exceeded, data points on the right end of the curve are culled. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiGraphCtrl_getDatum(System.String,System.Int32,System.Int32)">
            <summary>
            Get a data point on the given plotting curve.
               @param plotId Index of the plotting curve from which to fetch the data point.  Must be 0=plotId6.
               @param index Index of the data point on the curve.
               @return The value of the data point or -1 if @a plotId or @a index are out of range. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiGraphCtrl_removeAutoPlot(System.String,System.Int32)">
            <summary>
            Stop automatic variable plotting for the given curve.
               @param plotId Index of the plotting curve.  Must be 0=plotId6. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiGraphCtrl_setGraphType(System.String,System.Int32,System.Int32)">
            <summary>
            Change the charting type of the given plotting curve.
               @param plotId Index of the plotting curve.  Must be 0=plotId6.
               @param graphType Charting type to use for the curve.
               @note Instead of calling this method, you can directly assign to #plotType. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiIconButtonCtrl_setBitmap(System.String,System.String)">
            <summary>
            @brief Set the bitmap to use for the button portion of this control.
               @param buttonFilename Filename for the image
               @tsexample
               // Define the button filename
               %buttonFilename = \"pearlButton\";
               // Inform the GuiIconButtonCtrl control to update its main button graphic to the defined bitmap
               %thisGuiIconButtonCtrl.setBitmap(%buttonFilename);
               @endtsexample
               @see GuiControl
               @see GuiButtonCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiImageList_clear(System.String)">
            <summary>
            @brief Clears the imagelist
               @tsexample
               // Inform the GuiImageList control to clear itself.
               %isFinished = %thisGuiImageList.clear();
               @endtsexample
               @return Returns true when finished.
               @see SimObject)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiImageList_count(System.String)">
            <summary>
            @brief Gets the number of images in the list.
               @tsexample
               // Request the number of images from the GuiImageList control.
               %imageCount = %thisGuiImageList.count();
               @endtsexample
               @return Number of images in the control.
               @see SimObject)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiImageList_getImage(System.String,System.Int32)">
            <summary>
            @brief Get a path to the texture at the specified index.
               @param index Index of the image in the list.
               @tsexample
               // Define the image index/n
               %index = \"5\";
               // Request the image path location from the control.
               %imagePath = %thisGuiImageList.getImage(%index);
               @endtsexample
               @return File path to the image map for the specified index.
               @see SimObject)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiImageList_getIndex(System.String,System.String)">
            <summary>
            @brief Retrieves the imageindex of a specified texture in the list.
               @param imagePath Imagemap including filepath of image to search for
               @tsexample
               // Define the imagemap to search for
               %imagePath = \"./game/client/data/images/thisImage\";
               // Request the index entry for the defined imagemap
               %imageIndex = %thisGuiImageList.getIndex(%imagePath);
               @endtsexample
               @return Index of the imagemap matching the defined image path.
               @see SimObject)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiImageList_insert(System.String,System.String)">
            <summary>
            @brief Insert an image into imagelist- returns the image index or -1 for failure.
               @param imagePath Imagemap, with path, to add to the list.
               @tsexample
               // Define the imagemap to add to the list
               %imagePath = \"./game/client/data/images/thisImage\";
               // Request the GuiImageList control to add the defined image to its list.
               %imageIndex = %thisGuiImageList.insert(%imagePath);
               @endtsexample
               @return The index of the newly inserted imagemap, or -1 if the insertion failed.
               @see SimObject)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiImageList_remove(System.String,System.Int32)">
            <summary>
            @brief Removes an image from the list by index.
               @param index Image index to remove.
               @tsexample
               // Define the image index.
               %imageIndex = \"4\";
               // Inform the GuiImageList control to remove the image at the defined index.
               %wasSuccessful = %thisGuiImageList.remove(%imageIndex);
               @endtsexample
               @return True if the operation was successful, false if it was not.
               @see SimObject)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiInspectorTypeBitMask32_applyBit(System.String)">
            <summary>
            ( GuiInspectorTypeBitMask32, applyBit, void, 2,2, apply(); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiInspectorTypeFileName_apply(System.String,System.String)">
            <summary>
            ( GuiInspectorTypeFileName, apply, void, 3,3, apply(newValue); )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_addFilteredItem(System.String,System.String)">
            <summary>
            @brief Checks if there is an item with the exact text of what is passed in, and if so
               the item is removed from the list and adds that item's data to the filtered list.
               @param itemName Name of the item that we wish to add to the filtered item list of the GuiListBoxCtrl.
               @tsexample
               // Define the itemName that we wish to add to the filtered item list.
               %itemName = \"This Item Name\";
               // Add the item name to the filtered item list.
               %thisGuiListBoxCtrl.addFilteredItem(%filteredItemName);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_addItem(System.String,System.String,System.String)">
            <summary>
             ),
               @brief Adds an item to the end of the list with an optional color.
               @param newItem New item to add to the list.
               @param color Optional color parameter to add to the new item.
               @tsexample
               // Define the item to add to the list.
               %newItem = \"Gideon's Blue Coat\";
               // Define the optional color for the new list item.
               %color = \"0.0 0.0 1.0\";
               // Inform the GuiListBoxCtrl object to add the item to the end of the list with the defined color.
               %thisGuiListBoxCtrl.addItem(%newItem,%color);
               @endtsexample
               @return If not void, return value and description
               @see GuiControl
               @hide)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_clearItemColor(System.String,System.Int32)">
            <summary>
            @brief Removes any custom coloring from an item at the defined index id in the list.
               @param index Index id for the item to clear any custom color from.
               @tsexample
               // Define the index id
               %index = \"4\";
               // Request the GuiListBoxCtrl object to remove any custom coloring from the defined index entry
               %thisGuiListBoxCtrl.clearItemColor(%index);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_clearItems(System.String)">
            <summary>
            @brief Clears all the items in the listbox.
               @tsexample
               // Inform the GuiListBoxCtrl object to clear all items from its list.
               %thisGuiListBoxCtrl.clearItems();
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_clearSelection(System.String)">
            <summary>
            @brief Sets all currently selected items to unselected.
               Detailed description
               @tsexample
               // Inform the GuiListBoxCtrl object to set all of its items to unselected./n
               %thisGuiListBoxCtrl.clearSelection();
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_deleteItem(System.String,System.Int32)">
            <summary>
            @brief Removes the list entry at the requested index id from the control and clears the memory associated with it.
               @param itemIndex Index id location to remove the item from.
               @tsexample
               // Define the index id we want to remove from the list
               %itemIndex = \"8\";
               // Inform the GuiListBoxCtrl object to remove the item at the defined index id.
               %thisGuiListBoxCtrl.deleteItem(%itemIndex);
               @endtsexample
               @see References)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_doMirror(System.String)">
            <summary>
            @brief Informs the GuiListBoxCtrl object to mirror the contents of the GuiListBoxCtrl stored in the mirrorSet field.
               @tsexample
               \\ Inform the object to mirror the object located at %thisGuiListBox.mirrorSet
               %thisGuiListBox.doMirror();
               @endtsexample
               @see GuiCore)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_findItemText(System.String,System.String,System.Boolean)">
            <summary>
            @brief Returns index of item with matching text or -1 if none found.
               @param findText Text in the list to find.
               @param isCaseSensitive If true, the search will be case sensitive.
               @tsexample
               // Define the text we wish to find in the list.
               %findText = \"Hickory Smoked Gideon\"/n/n
               // Define if this is a case sensitive search or not.
               %isCaseSensitive = \"false\";
               // Ask the GuiListBoxCtrl object what item id in the list matches the requested text.
               %matchingId = %thisGuiListBoxCtrl.findItemText(%findText,%isCaseSensitive);
               @endtsexample
               @return Index id of item with matching text or -1 if none found.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_getItemCount(System.String)">
            <summary>
            @brief Returns the number of items in the list.
               @tsexample
               // Request the number of items in the list of the GuiListBoxCtrl object.
               %listItemCount = %thisGuiListBoxCtrl.getItemCount();
               @endtsexample
               @return The number of items in the list.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_getItemObject(System.String,System.Int32)">
            <summary>
            @brief Returns the object associated with an item. This only makes sense if you are mirroring a simset.
               @param index Index id to request the associated item from.
               @tsexample
               // Define the index id
               %index = \"12\";
               // Request the item from the GuiListBoxCtrl object
               %object = %thisGuiListBoxCtrl.getItemObject(%index);
               @endtsexample
               @return The object associated with the item in the list.
               @see References)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_getItemText(System.String,System.Int32)">
            <summary>
            @brief Returns the text of the item at the specified index.
               @param index Index id to return the item text from.
               @tsexample
               // Define the index id entry to request the text from
               %index = \"12\";
               // Request the item id text from the GuiListBoxCtrl object.
               %text = %thisGuiListBoxCtrl.getItemText(%index);
               @endtsexample
               @return The text of the requested index id.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_getLastClickItem(System.String)">
            <summary>
            @brief Request the item index for the item that was last clicked.
               @tsexample
               // Request the item index for the last clicked item in the list
               %lastClickedIndex = %thisGuiListBoxCtrl.getLastClickItem();
               @endtsexample
               @return Index id for the last clicked item in the list.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_getSelCount(System.String)">
            <summary>
            @brief Returns the number of items currently selected.
               @tsexample
               // Request the number of currently selected items
               %selectedItemCount = %thisGuiListBoxCtrl.getSelCount();
               @endtsexample
               @return Number of currently selected items.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_getSelectedItem(System.String)">
            <summary>
            @brief Returns the selected items index or -1 if none selected. If multiple selections exist it returns the first selected item. 
               @tsexample
               // Request the index id of the currently selected item
               %selectedItemId = %thisGuiListBoxCtrl.getSelectedItem();
               @endtsexample
               @return The selected items index or -1 if none selected.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_getSelectedItems(System.String)">
            <summary>
            @brief Returns a space delimited list of the selected items indexes in the list.
               @tsexample
               // Request a space delimited list of the items in the GuiListBoxCtrl object.
               %selectionList = %thisGuiListBoxCtrl.getSelectedItems();
               @endtsexample
               @return Space delimited list of the selected items indexes in the list
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_insertItem(System.String,System.String,System.Int32)">
            <summary>
            @brief Inserts an item into the list at the specified index and returns the index assigned or -1 on error.
               @param text Text item to add.
               @param index Index id to insert the list item text at.
               @tsexample
               // Define the text to insert
               %text = \"Secret Agent Gideon\";
               // Define the index entry to insert the text at
               %index = \"14\";
               // In form the GuiListBoxCtrl object to insert the text at the defined index.
               %assignedId = %thisGuiListBoxCtrl.insertItem(%text,%index);
               @endtsexample
               @return If successful will return the index id assigned. If unsuccessful, will return -1.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_removeFilteredItem(System.String,System.String)">
            <summary>
            @brief Removes an item of the entered name from the filtered items list.
               @param itemName Name of the item to remove from the filtered list.
               @tsexample
               // Define the itemName that you wish to remove.
               %itemName = \"This Item Name\";
               // Remove the itemName from the GuiListBoxCtrl
               %thisGuiListBoxCtrl.removeFilteredItem(%itemName);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_setCurSel(System.String,System.Int32)">
            <summary>
            @brief Sets the currently selected item at the specified index.
               @param indexId Index Id to set selected.
               @tsexample
               // Define the index id that we wish to select.
               %selectId = \"4\";
               // Inform the GuiListBoxCtrl object to set the requested index as selected.
               %thisGuiListBoxCtrl.setCurSel(%selectId);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_setCurSelRange(System.String,System.Int32,System.Int32)">
            <summary>
            @brief Sets the current selection range from index start to stop. If no stop is specified it sets from start index to the end of the list
               @param indexStart Index Id to start selection.
               @param indexStop Index Id to end selection.
               @tsexample
               // Set start id
               %indexStart = \"3\";
               // Set end id
               %indexEnd = \"6\";
               // Request the GuiListBoxCtrl object to select the defined range.
               %thisGuiListBoxCtrl.setCurSelRange(%indexStart,%indexEnd);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_setItemColor(System.String,System.Int32,System.String)">
            <summary>
            @brief Sets the color of a single list entry at the specified index id.
               @param index Index id to modify the color of in the list.
               @param color Color value to set the list entry to.
               @tsexample
               // Define the index id value
               %index = \"5\";
               // Define the color value
               %color = \"1.0 0.0 0.0\";
               // Inform the GuiListBoxCtrl object to change the color of the requested index
               %thisGuiListBoxCtrl.setItemColor(%index,%color);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_setItemText(System.String,System.Int32,System.String)">
            <summary>
            @brief Sets the items text at the specified index.
               @param index Index id to set the item text at.
               @param newtext Text to change the list item at index id to.
               @tsexample
               // Define the index id/n
               %index = \"12\";
               // Define the text to set the list item to
               %newtext = \"Gideon's Fancy Goggles\";
               // Inform the GuiListBoxCtrl object to change the text at the requested index
               %thisGuiListBoxCtrl.setItemText(%index,%newText);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_setItemTooltip(System.String,System.Int32,System.String)">
            <summary>
            @brief Set the tooltip text to display for the given list item.
               @param index Index id to change the tooltip text
               @param text Text for the tooltip.
               @tsexample
               // Define the index id
               %index = \"12\";
               // Define the tooltip text
               %tooltip = \"Gideon's goggles can see through space and time.\"
               // Inform the GuiListBoxCtrl object to set the tooltop for the item at the defined index id
               %thisGuiListBoxCtrl.setItemToolTip(%index,%tooltip);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_setMultipleSelection(System.String,System.Boolean)">
            <summary>
            @brief Enable or disable multiple selections for this GuiListBoxCtrl object.
               @param allowMultSelections Boolean variable to set the use of multiple selections or not.
               @tsexample
               // Define the multiple selection use state.
               %allowMultSelections = \"true\";
               // Set the allow  multiple selection state on the GuiListBoxCtrl object.
               %thisGuiListBoxCtrl.setMultipleSelection(%allowMultSelections);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiListBoxCtrl_setSelected(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Sets the item at the index specified to selected or not.
               Detailed description
               @param index Item index to set selected or unselected.
               @param setSelected Boolean selection state to set the requested item index.
               @tsexample
               // Define the index
               %index = \"5\";
               // Define the selection state
               %selected = \"true\"
               // Inform the GuiListBoxCtrl object of the new selection state for the requested index entry.
               %thisGuiListBoxCtrl.setSelected(%index,%selected);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMaterialPreview_deleteModel(System.String)">
            <summary>
            Deletes the preview model.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMaterialPreview_reset(System.String)">
            <summary>
            Resets the viewport to default zoom, pan, rotate and lighting.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMaterialPreview_setAmbientLightColor(System.String,System.String)">
            <summary>
            Sets the color of the ambient light in the scene.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMaterialPreview_setLightColor(System.String,System.String)">
            <summary>
            Sets the color of the light in the scene.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMaterialPreview_setModel(System.String,System.String)">
            <summary>
            Sets the model to be displayed in this control
               @param shapeName Name of the model to display.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMaterialPreview_setOrbitDistance(System.String,System.Single)">
            <summary>
            Sets the distance at which the camera orbits the object. Clamped to the 
               acceptable range defined in the class by min and max orbit distances.
               @param distance The distance to set the orbit to (will be clamped).)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMenuBar_addMenu(System.String,System.String,System.Int32)">
            <summary>
            @brief Adds a new menu to the menu bar.
               @param menuText Text to display for the new menu item.
               @param menuId ID for the new menu item.
               @tsexample
               // Define the menu text
               %menuText = \"New Menu\";
               // Define the menu ID.
               %menuId = \"2\";
               // Inform the GuiMenuBar control to add the new menu
               %thisGuiMenuBar.addMenu(%menuText,%menuId);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMenuBar_addMenuItem(System.String,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            ,,0,,-1),
               @brief Adds a menu item to the specified menu.  The menu argument can be either the text of a menu or its id.
               @param menu Menu name or menu Id to add the new item to.
               @param menuItemText Text for the new menu item.
               @param menuItemId Id for the new menu item.
               @param accelerator Accelerator key for the new menu item.
               @param checkGroup Check group to include this menu item in.
               @tsexample
               // Define the menu we wish to add the item to
               %targetMenu = \"New Menu\";  or  %menu = \"4\";
               // Define the text for the new menu item
               %menuItemText = \"Menu Item\";
               // Define the id for the new menu item
               %menuItemId = \"3\";
               // Set the accelerator key to toggle this menu item with
               %accelerator = \"n\";
               // Define the Check Group that this menu item will be in, if we want it to be in a check group. -1 sets it in no check group.
               %checkGroup = \"4\";
               // Inform the GuiMenuBar control to add the new menu item with the defined fields
               %thisGuiMenuBar.addMenuItem(%menu,%menuItemText,%menuItemId,%accelerator,%checkGroup);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMenuBar_addSubmenuItem(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            @brief Adds a menu item to the specified menu.  The menu argument can be either the text of a menu or its id.
               @param menuTarget Menu to affect a submenu in
               @param menuItem Menu item to affect
               @param submenuItemText Text to show for the new submenu
               @param submenuItemId Id for the new submenu
               @param accelerator Accelerator key for the new submenu
               @param checkGroup Which check group the new submenu should be in, or -1 for none.
               @tsexample
               // Define the menuTarget
               %menuTarget = \"New Menu\";  or  %menuTarget = \"3\";
               // Define the menuItem
               %menuItem = \"New Menu Item\";  or  %menuItem = \"5\";
               // Define the text for the new submenu
               %submenuItemText = \"New Submenu Item\";
               // Define the id for the new submenu
               %submenuItemId = \"4\";
               // Define the accelerator key for the new submenu
               %accelerator = \"n\";
               // Define the checkgroup for the new submenu
               %checkgroup = \"7\";
               // Request the GuiMenuBar control to add the new submenu with the defined information
               %thisGuiMenuBar.addSubmenuItem(%menuTarget,%menuItem,%submenuItemText,%submenuItemId,%accelerator,%checkgroup);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMenuBar_clearMenuItems(System.String,System.String)">
            <summary>
            @brief Removes all the menu items from the specified menu.
               @param menuTarget Menu to remove all items from  
               @tsexample
               // Define the menuTarget
               %menuTarget = \"New Menu\";  or %menuTarget = \"3\";
               // Inform the GuiMenuBar control to clear all menu items from the defined menu
               %thisGuiMenuBar.clearMenuItems(%menuTarget);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMenuBar_clearMenus(System.String,System.Int32,System.Int32)">
            <summary>
            @brief Clears all the menus from the menu bar.
               @tsexample
               // Inform the GuiMenuBar control to clear all menus from itself.
               %thisGuiMenuBar.clearMenus();
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMenuBar_clearSubmenuItems(System.String,System.String,System.String)">
            <summary>
            @brief Removes all the menu items from the specified submenu.
               @param menuTarget Menu to affect a submenu in
               @param menuItem Menu item to affect
               @tsexample
               // Define the menuTarget
               %menuTarget = \"New Menu\";  or %menuTarget = \"3\";
               // Define the menuItem
               %menuItem = \"New Menu Item\";  or  %menuItem = \"5\";
               // Inform the GuiMenuBar to remove all submenu items from the defined menu item
               %thisGuiMenuBar.clearSubmenuItems(%menuTarget,%menuItem);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMenuBar_removeMenu(System.String,System.String)">
            <summary>
            @brief Removes the specified menu from the menu bar.
               @param menuTarget Menu to remove from the menu bar  
               @tsexample
               // Define the menuTarget
               %menuTarget = \"New Menu\";  or %menuTarget = \"3\";
               // Inform the GuiMenuBar to remove the defined menu from the menu bar
               %thisGuiMenuBar.removeMenu(%menuTarget);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMenuBar_removeMenuItem(System.String,System.String,System.String)">
            <summary>
            @brief Removes the specified menu item from the menu.
               @param menuTarget Menu to affect the menu item in
               @param menuItem Menu item to affect
               @tsexample
               // Define the menuTarget
               %menuTarget = \"New Menu\";  or %menuTarget = \"3\";
               // Define the menuItem
               %menuItem = \"New Menu Item\";  or  %menuItem = \"5\";
               // Request the GuiMenuBar control to remove the define menu item
               %thisGuiMenuBar.removeMenuItem(%menuTarget,%menuItem);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMenuBar_setCheckmarkBitmapIndex(System.String,System.Int32)">
            <summary>
            @brief Sets the menu bitmap index for the check mark image.
               @param bitmapIndex Bitmap index for the check mark image.
               @tsexample
               // Define the bitmap index
               %bitmapIndex = \"2\";
               // Inform the GuiMenuBar control of the proper bitmap index for the check mark image
               %thisGuiMenuBar.setCheckmarkBitmapIndex(%bitmapIndex);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMenuBar_setMenuBitmapIndex(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            @brief Sets the bitmap index for the menu and toggles rendering only the bitmap.
               @param menuTarget Menu to affect
               @param bitmapindex Bitmap index to set for the menu
               @param bitmaponly If true, only the bitmap will be rendered
               @param drawborder If true, a border will be drawn around the menu.
               @tsexample
               // Define the menuTarget to affect
               %menuTarget = \"New Menu\";  or %menuTarget = \"3\";
               // Set the bitmap index
               %bitmapIndex = \"5\";
               // Set if we are only to render the bitmap or not
               %bitmaponly = \"true\";
               // Set if we are rendering a border or not
               %drawborder = \"true\";
               // Inform the GuiMenuBar of the bitmap and rendering changes
               %thisGuiMenuBar.setMenuBitmapIndex(%menuTarget,%bitmapIndex,%bitmapOnly,%drawBorder);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMenuBar_setMenuItemBitmap(System.String,System.String,System.String,System.Int32)">
            <summary>
            @brief Sets the specified menu item bitmap index in the bitmap array.  Setting the item's index to -1 will remove any bitmap.
               @param menuTarget Menu to affect the menuItem in
               @param menuItem Menu item to affect
               @param bitmapIndex Bitmap index to set the menu item to
               @tsexample
               // Define the menuTarget
               %menuTarget = \"New Menu\";  or  %menuTarget = \"3\";
               // Define the menuItem\"
               %menuItem = \"New Menu Item\";  or %menuItem = \"2\";
               // Define the bitmapIndex
               %bitmapIndex = \"6\";
               // Inform the GuiMenuBar control to set the menu item to the defined bitmap
               %thisGuiMenuBar.setMenuItemBitmap(%menuTarget,%menuItem,%bitmapIndex);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMenuBar_setMenuItemChecked(System.String,System.String,System.String,System.Boolean)">
            <summary>
            @brief Sets the menu item bitmap to a check mark, which by default is the first element in
               the bitmap array (although this may be changed with setCheckmarkBitmapIndex()).
               Any other menu items in the menu with the same check group become unchecked if they are checked.
               @param menuTarget Menu to work in
               @param menuItem Menu item to affect
               @param checked Whether we are setting it to checked or not
               @tsexample
               
               @endtsexample
               @return If not void, return value and description
               @see References)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMenuBar_setMenuItemEnable(System.String,System.String,System.String,System.Boolean)">
            <summary>
            @brief sets the menu item to enabled or disabled based on the enable parameter.
               The specified menu and menu item can either be text or ids.
               Detailed description
               @param menuTarget Menu to work in
               @param menuItemTarget The menu item inside of the menu to enable or disable
               @param enabled Boolean enable / disable value.
               @tsexample
               // Define the menu
               %menu = \"New Menu\";  or  %menu = \"4\";
               // Define the menu item
               %menuItem = \"New Menu Item\";  or %menuItem = \"2\";
               // Define the enabled state
               %enabled = \"true\";
               // Inform the GuiMenuBar control to set the enabled state of the requested menu item
               %thisGuiMenuBar.setMenuItemEnable(%menu,%menuItme,%enabled);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMenuBar_setMenuItemSubmenuState(System.String,System.String,System.String,System.Boolean)">
            <summary>
            @brief Sets the given menu item to be a submenu.
               @param menuTarget Menu to affect a submenu in
               @param menuItem Menu item to affect
               @param isSubmenu Whether or not the menuItem will become a subMenu or not
               @tsexample
               // Define the menuTarget
               %menuTarget = \"New Menu\";  or %menuTarget = \"3\";
               // Define the menuItem
               %menuItem = \"New Menu Item\";  or  %menuItem = \"5\";
               // Define whether or not the Menu Item is a sub menu or not
               %isSubmenu = \"true\";
               // Inform the GuiMenuBar control to set the defined menu item to be a submenu or not.
               %thisGuiMenuBar.setMenuItemSubmenuState(%menuTarget,%menuItem,%isSubmenu);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMenuBar_setMenuItemText(System.String,System.String,System.String,System.String)">
            <summary>
            @brief Sets the text of the specified menu item to the new string.
               @param menuTarget Menu to affect
               @param menuItem Menu item in the menu to change the text at
               @param newMenuItemText New menu text
               @tsexample
               // Define the menuTarget
               %menuTarget = \"New Menu\";  or  %menuTarget = \"4\";
               // Define the menuItem
               %menuItem = \"New Menu Item\";  or  %menuItem = \"2\";
               // Define the new text for the menu item
               %newMenuItemText = \"Very New Menu Item\";
               // Inform the GuiMenuBar control to change the defined menu item with the new text
               %thisGuiMenuBar.setMenuItemText(%menuTarget,%menuItem,%newMenuItemText);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMenuBar_setMenuItemVisible(System.String,System.String,System.String,System.Boolean)">
            <summary>
            @brief Brief Description.
               Detailed description
               @param menuTarget Menu to affect the menu item in
               @param menuItem Menu item to affect
               @param isVisible Visible state to set the menu item to.
               @tsexample
               // Define the menuTarget
               %menuTarget = \"New Menu\";  or  %menuTarget = \"3\";
               // Define the menuItem
               %menuItem = \"New Menu Item\";  or  %menuItem = \"2\";
               // Define the visibility state
               %isVisible = \"true\";
               // Inform the GuiMenuBarControl of the visibility state of the defined menu item
               %thisGuiMenuBar.setMenuItemVisible(%menuTarget,%menuItem,%isVisible);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMenuBar_setMenuMargins(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            @brief Sets the menu rendering margins: horizontal, vertical, bitmap spacing.
               Detailed description
               @param horizontalMargin Number of pixels on the left and right side of a menu's text.
               @param verticalMargin Number of pixels on the top and bottom of a menu's text.
               @param bitmapToTextSpacing Number of pixels between a menu's bitmap and text.
               @tsexample
               // Define the horizontalMargin
               %horizontalMargin = \"5\";
               // Define the verticalMargin
               %verticalMargin = \"5\";
               // Define the bitmapToTextSpacing
               %bitmapToTextSpacing = \"12\";
               // Inform the GuiMenuBar control to set its margins based on the defined values.
               %thisGuiMenuBar.setMenuMargins(%horizontalMargin,%verticalMargin,%bitmapToTextSpacing);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMenuBar_setMenuText(System.String,System.String,System.String)">
            <summary>
            @brief Sets the text of the specified menu to the new string.
               @param menuTarget Menu to affect
               @param newMenuText New menu text
               @tsexample
               // Define the menu to affect
               %menu = \"New Menu\";  or %menu = \"3\";
               // Define the text to change the menu to
               %newMenuText = \"Still a New Menu\";
               // Inform the GuiMenuBar control to change the defined menu to the defined text
               %thisGuiMenuBar.setMenuText(%menu,%newMenuText);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMenuBar_setMenuVisible(System.String,System.String,System.Boolean)">
            <summary>
            @brief Sets the whether or not to display the specified menu.
               @param menuTarget Menu item to affect
               @param visible Whether the menu item will be visible or not
               @tsexample
               // Define the menu to work with
               %menuTarget = \"New Menu\";  or  %menuTarget = \"4\";
               // Define if the menu should be visible or not
               %visible = \"true\";
               // Inform the GuiMenuBar control of the new visibility state for the defined menu
               %thisGuiMenuBar.setMenuVisible(%menuTarget,%visible);
               @endtsexample
               @see GuiTickCtrl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMenuBar_setSubmenuItemChecked(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            @brief Sets the menu item bitmap to a check mark, which by default is the first element in the
               bitmap array (although this may be changed with setCheckmarkBitmapIndex()).
               Any other menu items in the menu with the same check group become unchecked if they are checked.
               @param menuTarget Menu to affect a submenu in
               @param menuItem Menu item to affect
               @param submenuItemText Text to show for submenu
               @param checked Whether or not this submenu item will be checked.
               @tsexample
               // Define the menuTarget
               %menuTarget = \"New Menu\";  or %menuTarget = \"3\";
               // Define the menuItem
               %menuItem = \"New Menu Item\";  or  %menuItem = \"5\";
               // Define the text for the new submenu
               %submenuItemText = \"Submenu Item\";
               // Define if this submenu item should be checked or not
               %checked = \"true\";
               // Inform the GuiMenuBar control to set the checked state of the defined submenu item
               %thisGuiMenuBar.setSubmenuItemChecked(%menuTarget,%menuItem,%submenuItemText,%checked);
               @endtsexample
               @return If not void, return value and description
               @see References)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMessageVectorCtrl_attach(System.String,System.String)">
            <summary>
            @brief Push a line onto the back of the list.
            
            	   @param item The GUI element being pushed into the control
            
            	   @tsexample
            	   // All messages are stored in this HudMessageVector, the actual
            	   // MainChatHud only displays the contents of this vector.
            	   new MessageVector(HudMessageVector);
            	   // Attach the MessageVector to the chat control
            	   chatHud.attach(HudMessageVector);
            	   @endtsexample
            
            	   @return Value)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMessageVectorCtrl_detach(System.String)">
            <summary>
            @brief Stop listing messages from the MessageVector previously attached to, if any.
            
            				   Detailed description
            
            				   @param param Description
            
            				   @tsexample
            				   // Deatch the MessageVector from HudMessageVector
            				   // HudMessageVector will no longer render the text
            				   chatHud.detach();
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMissionAreaCtrl_setMissionArea(System.String,System.String)">
            <summary>
            @brief Set the MissionArea to edit.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMissionAreaCtrl_updateTerrain(System.String)">
            <summary>
            @brief Update the terrain bitmap.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMLTextCtrl_addText(System.String,System.String,System.Boolean)">
            <summary>
            @brief Appends the text in the control with additional text. Also .
               @param text New text to append to the existing text.
               @param reformat If true, the control will also be visually reset (defaults to true).
               @tsexample
               // Define new text to add
               %text = \"New Text to Add\";
               // Set reformat boolean
               %reformat = \"true\";
               // Inform the control to add the new text
               %thisGuiMLTextCtrl.addText(%text,%reformat);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMLTextCtrl_forceReflow(System.String)">
            <summary>
            @brief Forces the text control to reflow the text after new text is added, possibly resizing the control.
               @tsexample
               // Define new text to add
               %newText = \"BACON!\";
               // Add the new text to the control
               %thisGuiMLTextCtrl.addText(%newText);
               // Inform the GuiMLTextCtrl object to force a reflow to ensure the added text fits properly.
               %thisGuiMLTextCtrl.forceReflow();
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMLTextCtrl_getText(System.String)">
            <summary>
            @brief Returns the text from the control, including TorqueML characters.
               @tsexample
               // Get the text displayed in the control
               %controlText = %thisGuiMLTextCtrl.getText();
               @endtsexample
               @return Text string displayed in the control, including any TorqueML characters.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMLTextCtrl_scrollToBottom(System.String)">
            <summary>
            @brief Scroll to the bottom of the text.
               @tsexample
               // Inform GuiMLTextCtrl object to scroll to its bottom
               %thisGuiMLTextCtrl.scrollToBottom();
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMLTextCtrl_scrollToTag(System.String,System.Int32)">
            <summary>
            @brief Scroll down to a specified tag.
               Detailed description
               @param tagID TagID to scroll the control to
               @tsexample
               // Define the TagID we want to scroll the control to
               %tagId = \"4\";
               // Inform the GuiMLTextCtrl to scroll to the defined TagID
               %thisGuiMLTextCtrl.scrollToTag(%tagId);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMLTextCtrl_scrollToTop(System.String,System.Int32,System.Int32)">
            <summary>
            @brief Scroll to the top of the text.
               @tsexample
               // Inform GuiMLTextCtrl object to scroll to its top
               %thisGuiMLTextCtrl.scrollToTop();
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMLTextCtrl_setAlpha(System.String,System.Single)">
            <summary>
            @brief Sets the alpha value of the control.
               @param alphaVal n - 1.0 floating value for the alpha
               @tsexample
               // Define the alphe value
               %alphaVal = \"0.5\";
               // Inform the control to update its alpha value.
               %thisGuiMLTextCtrl.setAlpha(%alphaVal);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMLTextCtrl_setCursorPosition(System.String,System.Int32)">
            <summary>
            @brief Change the text cursor's position to a new defined offset within the text in the control.
               @param newPos Offset to place cursor.
               @tsexample
               // Define cursor offset position
               %position = \"23\";
               // Inform the GuiMLTextCtrl object to move the cursor to the new position.
               %thisGuiMLTextCtrl.setCursorPosition(%position);
               @endtsexample
               @return Returns true if the cursor position moved, or false if the position was not changed.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiMLTextCtrl_setText(System.String,System.String)">
            <summary>
            @brief Set the text contained in the control.
               @param text The text to display in the control.
               @tsexample
               // Define the text to display
               %text = \"Nifty Control Text\";
               // Set the text displayed within the control
               %thisGuiMLTextCtrl.setText(%text);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiNavEditorCtrl_buildTile(System.String)">
            <summary>
            @brief Build the currently selected tile.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiNavEditorCtrl_deleteLink(System.String)">
            <summary>
            @brief Delete the currently selected link.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiNavEditorCtrl_deselect(System.String)">
            <summary>
            @brief Deselect whatever is currently selected in the editor.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiNavEditorCtrl_getMesh(System.String)">
            <summary>
            @brief Select a NavMesh object.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiNavEditorCtrl_getPlayer(System.String)">
            <summary>
            @brief Select a NavMesh object.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiNavEditorCtrl_selectMesh(System.String,System.Int32)">
            <summary>
            @brief Select a NavMesh object.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiNavEditorCtrl_setLinkFlags(System.String,System.UInt32)">
            <summary>
            @Brief Set jump and drop properties of the selected link.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiNavEditorCtrl_spawnPlayer(System.String)">
            <summary>
            @brief Spawn an AIPlayer at the centre of the screen.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiObjectView_getCameraSpeed(System.String)">
            <summary>
            @brief Return the current multiplier for camera zooming and rotation.
               @tsexample
               // Request the current camera zooming and rotation multiplier value
               %multiplier = %thisGuiObjectView.getCameraSpeed();
               @endtsexample
               @return Camera zooming / rotation multiplier value.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiObjectView_getModel(System.String)">
            <summary>
            @brief Return the model displayed in this view.
               @tsexample
               // Request the displayed model name from the GuiObjectView object.
               %modelName = %thisGuiObjectView.getModel();
               @endtsexample
               @return Name of the displayed model.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiObjectView_getMountedModel(System.String)">
            <summary>
            @brief Return the name of the mounted model.
               @tsexample
               // Request the name of the mounted model from the GuiObjectView object
               %mountedModelName = %thisGuiObjectView.getMountedModel();
               @endtsexample
               @return Name of the mounted model.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiObjectView_getMountSkin(System.String,System.Int32,System.Int32)">
            <summary>
            @brief Return the name of skin used on the mounted model.
               @tsexample
               // Request the skin name from the model mounted on to the main model in the control
               %mountModelSkin = %thisGuiObjectView.getMountSkin();
               @endtsexample
               @return Name of the skin used on the mounted model.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiObjectView_getOrbitDistance(System.String)">
            <summary>
            @brief Return the current distance at which the camera orbits the object.
               @tsexample
               // Request the current orbit distance
               %orbitDistance = %thisGuiObjectView.getOrbitDistance();
               @endtsexample
               @return The distance at which the camera orbits the object.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiObjectView_getSkin(System.String)">
            <summary>
            @brief Return the name of skin used on the primary model.
               @tsexample
               // Request the name of the skin used on the primary model in the control
               %skinName = %thisGuiObjectView.getSkin();
               @endtsexample
               @return Name of the skin used on the primary model.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiObjectView_setCameraSpeed(System.String,System.Single)">
            <summary>
            @brief Sets the multiplier for the camera rotation and zoom speed.
               @param factor Multiplier for camera rotation and zoom speed.
               @tsexample
               // Set the factor value
               %factor = \"0.75\";
               // Inform the GuiObjectView object to set the camera speed.
               %thisGuiObjectView.setCameraSpeed(%factor);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiObjectView_setLightAmbient(System.String,System.String)">
            <summary>
            @brief Set the light ambient color on the sun object used to render the model.
               @param color Ambient color of sunlight.
               @tsexample
               // Define the sun ambient color value
               %color = \"1.0 0.4 0.6\";
               // Inform the GuiObjectView object to set the sun ambient color to the requested value
               %thisGuiObjectView.setLightAmbient(%color);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiObjectView_setLightColor(System.String,System.String)">
            <summary>
            @brief Set the light color on the sun object used to render the model.
               @param color Color of sunlight.
               @tsexample
               // Set the color value for the sun
               %color = \"1.0 0.4 0.5\";
               // Inform the GuiObjectView object to change the sun color to the defined value
               %thisGuiObjectView.setLightColor(%color);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiObjectView_setLightDirection(System.String,System.String)">
            <summary>
            @brief Set the light direction from which to light the model.
               @param direction XYZ direction from which the light will shine on the model
               @tsexample
               // Set the light direction
               %direction = \"1.0 0.2 0.4\"
               // Inform the GuiObjectView object to change the light direction to the defined value
               %thisGuiObjectView.setLightDirection(%direction);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiObjectView_setModel(System.String,System.String)">
            <summary>
            @brief Sets the model to be displayed in this control.
               @param shapeName Name of the model to display.
               @tsexample
               // Define the model we want to display
               %shapeName = \"gideon.dts\";
               // Tell the GuiObjectView object to display the defined model
               %thisGuiObjectView.setModel(%shapeName);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiObjectView_setMount(System.String,System.String,System.String)">
            <summary>
            @brief Mounts the given model to the specified mount point of the primary model displayed in this control.
               Detailed description
               @param shapeName Name of the model to mount.
               @param mountNodeIndexOrName Index or name of the mount point to be mounted to. If index, corresponds to \"mountN\" in your shape where N is the number passed here.
               @tsexample
               // Set the shapeName to mount
               %shapeName = \"GideonGlasses.dts\"
               // Set the mount node of the primary model in the control to mount the new shape at
               %mountNodeIndexOrName = \"3\";
               //OR:
               %mountNodeIndexOrName = \"Face\";
               // Inform the GuiObjectView object to mount the shape at the specified node.
               %thisGuiObjectView.setMount(%shapeName,%mountNodeIndexOrName);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiObjectView_setMountedModel(System.String,System.String)">
            <summary>
            @brief Sets the model to be mounted on the primary model.
               @param shapeName Name of the model to mount.
               @tsexample
               // Define the model name to mount
               %modelToMount = \"GideonGlasses.dts\";
               // Inform the GuiObjectView object to mount the defined model to the existing model in the control
               %thisGuiObjectView.setMountedModel(%modelToMount);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiObjectView_setMountSkin(System.String,System.String)">
            <summary>
            @brief Sets the skin to use on the mounted model.
               @param skinName Name of the skin to set on the model mounted to the main model in the control
               @tsexample
               // Define the name of the skin
               %skinName = \"BronzeGlasses\";
               // Inform the GuiObjectView Control of the skin to use on the mounted model
               %thisGuiObjectViewCtrl.setMountSkin(%skinName);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiObjectView_setOrbitDistance(System.String,System.Single)">
            <summary>
            @brief Sets the distance at which the camera orbits the object. Clamped to the acceptable range defined in the class by min and max orbit distances.
               Detailed description
               @param distance The distance to set the orbit to (will be clamped).
               @tsexample
               // Define the orbit distance value
               %orbitDistance = \"1.5\";
               // Inform the GuiObjectView object to set the orbit distance to the defined value
               %thisGuiObjectView.setOrbitDistance(%orbitDistance);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiObjectView_setSeq(System.String,System.String)">
            <summary>
            @brief Sets the animation to play for the viewed object.
               @param indexOrName The index or name of the animation to play.
               @tsexample
               // Set the animation index value, or animation sequence name.
               %indexVal = \"3\";
               //OR:
               %indexVal = \"idle\";
               // Inform the GuiObjectView object to set the animation sequence of the object in the control.
               %thisGuiObjectVew.setSeq(%indexVal);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiObjectView_setSkin(System.String,System.String)">
            <summary>
            @brief Sets the skin to use on the model being displayed.
               @param skinName Name of the skin to use.
               @tsexample
               // Define the skin we want to apply to the main model in the control
               %skinName = \"disco_gideon\";
               // Inform the GuiObjectView control to update the skin the to defined skin
               %thisGuiObjectView.setSkin(%skinName);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiPaneControl_setCollapsed(System.String,System.Boolean)">
            <summary>
            Collapse or un-collapse the control.
               @param collapse True to collapse the control, false to un-collapse it )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiPopUpMenuCtrlEx_addCategory(System.String,System.String)">
            <summary>
            @brief Add a category to the list.
            
            				   Acts as a separator between entries, allowing for sub-lists
            
            				   @param text Name of the new category)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiPopUpMenuCtrlEx_addScheme(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            @brief Create a new scheme and add it to the list of choices for when a new text entry is added.
            				   @param id Numerical id associated with this scheme
            				   @param fontColor The base text font color. Formatted as \"Red Green Blue\", each a numerical between 0 and 255.
            				   @param fontColorHL Color of text when being highlighted. Formatted as \"Red Green Blue\", each a numerical between 0 and 255.
            				   @param fontColorSel Color of text when being selected. Formatted as \"Red Green Blue\", each a numerical between 0 and 255.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiPopUpMenuCtrlEx_clear(System.String)">
            <summary>
            @brief Clear the popup list.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiPopUpMenuCtrlEx_forceClose(System.String)">
            <summary>
            @brief Manually force this control to collapse and close.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiPopUpMenuCtrlEx_forceOnAction(System.String)">
            <summary>
            @brief Manually for the onAction function, which updates everything in this control.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiPopUpMenuCtrlEx_getSelected(System.String)">
            <summary>
            @brief Get the current selection of the menu.
            				   @return Returns the ID of the currently selected entry)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiPopUpMenuCtrlEx_getText(System.String)">
            <summary>
            @brief Get the.
            
            				   Detailed description
            
            				   @param param Description
            
            				   @tsexample
            				   // Comment
            				   code();
            				   @endtsexample
            
            				   @return Returns current text in string format)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiPopUpMenuCtrlEx_getTextById(System.String,System.Int32)">
            <summary>
            @brief Get the text of an entry based on an ID.
            				   @param id The ID assigned to the entry being queried
            				   @return String contained by the specified entry, NULL if empty or bad ID)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiPopUpMenuCtrlEx_setNoneSelected(System.String,System.Int32)">
            <summary>
            @brief Clears selection in the menu.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiPopUpMenuCtrlEx_setText(System.String,System.String)">
            <summary>
            @brief Set the current text to a specified value.
            				   @param text String containing new text to set)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiPopUpMenuCtrlEx_sort(System.String)">
            <summary>
            @brief Sort the list alphabetically.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiPopUpMenuCtrlEx_sortID(System.String)">
            <summary>
            @brief Sort the list by ID.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiProgressBitmapCtrl_setBitmap(System.String,System.String)">
            <summary>
            Set the bitmap to use for rendering the progress bar.
               @param filename ~Path to the bitmap file.
               @note Directly assign to #bitmap rather than using this method.
               @see GuiProgressBitmapCtrl::setBitmap )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiRolloutCtrl_collapse(System.String)">
            <summary>
            Collapse the rollout if it is currently expanded.  This will make the rollout's child control invisible.
               @note The rollout will animate to collapsed state.  To instantly collapse without animation, use instantCollapse(). )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiRolloutCtrl_expand(System.String)">
            <summary>
            Expand the rollout if it is currently collapsed.  This will make the rollout's child control visible.
               @note The rollout will animate to expanded state.  To instantly expand without animation, use instantExpand(). )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiRolloutCtrl_instantCollapse(System.String)">
            <summary>
            Instantly collapse the rollout without animation.  To smoothly slide the rollout to collapsed state, use collapse(). )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiRolloutCtrl_instantExpand(System.String)">
            <summary>
            Instantly expand the rollout without animation.  To smoothly slide the rollout to expanded state, use expand(). )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiRolloutCtrl_isExpanded(System.String)">
            <summary>
            Determine whether the rollout is currently expanded, i.e. whether the child control is visible.
               @return True if the rollout is expanded, false if not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiRolloutCtrl_sizeToContents(System.String)">
            <summary>
            Resize the rollout to exactly fit around its child control.  This can be used to manually trigger a recomputation of 
               the rollout size. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiRolloutCtrl_toggleCollapse(System.String)">
            <summary>
            Toggle the current collapse state of the rollout.  If it is currently expanded, then collapse it.  If it 
               is currently collapsed, then expand it. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiRolloutCtrl_toggleExpanded(System.String,System.Boolean)">
            <summary>
            Toggle the current expansion state of the rollout  If it is currently expanded, then collapse it.  If it 
               is currently collapsed, then expand it.
               @param instant If true, the rollout will toggle its state without animation.  Otherwise, the rollout will 
                  smoothly slide into the opposite state. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiScrollCtrl_computeSizes(System.String)">
            <summary>
            Refresh sizing and positioning of child controls. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiScrollCtrl_getScrollPosition(System.String)">
            <summary>
            Get the current coordinates of the scrolled content.
               @return The current position of the scrolled content. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiScrollCtrl_getScrollPositionX(System.String)">
            <summary>
            Get the current X coordinate of the scrolled content.
               @return The current X coordinate of the scrolled content. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiScrollCtrl_getScrollPositionY(System.String)">
            <summary>
            Get the current Y coordinate of the scrolled content.
               @return The current Y coordinate of the scrolled content. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiScrollCtrl_scrollToBottom(System.String)">
            <summary>
            Scroll all the way to the bottom of the vertical scrollbar and the left of the horizontal bar. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiScrollCtrl_scrollToObject(System.String,System.String)">
            <summary>
            Scroll the control so that the given child @a control is visible.
               @param control A child control. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiScrollCtrl_scrollToTop(System.String)">
            <summary>
            Scroll all the way to the top of the vertical and left of the horizontal scrollbar. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiScrollCtrl_setScrollPosition(System.String,System.Int32,System.Int32)">
            <summary>
            Set the position of the scrolled content.
               @param x Position on X axis.
               @param y Position on y axis. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_addThread(System.String)">
            <summary>
            Add a new thread (initially without any sequence set) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_computeShapeBounds(System.String)">
            <summary>
            Compute the bounding box of the shape using the current detail and node transforms
               @return the bounding box \"min.x min.y min.z max.x max.y max.z\" )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_exportToCollada(System.String,System.String)">
            <summary>
            Export the current shape and all mounted objects to COLLADA (.dae).
               Note that animation is not exported, and all geometry is combined into a 
               single mesh.
               @param path Destination filename )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_fitToShape(System.String)">
            <summary>
            Adjust the camera position and zoom to fit the shape within the view. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_getMeshHidden(System.String,System.String)">
            <summary>
            Return whether the named object is currently hidden )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_getMountThreadDir(System.String,System.Int32)">
            <summary>
            Get the playback direction of the sequence playing on this mounted shape
               @param slot mounted shape slot
               @return direction of the sequence (-1=reverse, 0=paused, 1=forward) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_getMountThreadPos(System.String,System.Int32)">
            <summary>
            Get the playback position of the sequence playing on this mounted shape
               @param slot mounted shape slot
               @return playback position of the sequence (0-1) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_getMountThreadSequence(System.String,System.Int32)">
            <summary>
            Get the name of the sequence playing on this mounted shape
               @param slot mounted shape slot
               @return name of the sequence (if any) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_getThreadCount(System.String)">
            <summary>
            Get the number of threads
               @return the number of threads )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_getThreadSequence(System.String)">
            <summary>
            Get the name of the sequence assigned to the active thread )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_mountShape(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Mount a shape onto the main shape at the specified node
               @param shapePath path to the shape to mount
               @param nodeName name of the node on the main shape to mount to
               @param type type of mounting to use (Object, Image or Wheel)
               @param slot mount slot )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_refreshShape(System.String)">
            <summary>
            Refresh the shape (used when the shape meshes or nodes have been added or removed) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_refreshThreadSequences(System.String)">
            <summary>
            Refreshes thread sequences (in case of removed/renamed sequences )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_removeThread(System.String,System.Int32)">
            <summary>
            Removes the specifed thread
               @param slot index of the thread to remove )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_setAllMeshesHidden(System.String,System.Boolean)">
            <summary>
            Show or hide all objects in the shape )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_setMeshHidden(System.String,System.String,System.Boolean)">
            <summary>
            Show or hide the named object in the shape )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_setModel(System.String,System.String)">
            <summary>
            Sets the model to be displayed in this control
               @param shapeName Name of the model to display.
               @return True if the model was loaded successfully, false otherwise. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_setMountNode(System.String,System.Int32,System.String)">
            <summary>
            Set the node a shape is mounted to.
               @param slot mounted shape slot
               @param nodename name of the node to mount to )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_setMountThreadDir(System.String,System.Int32,System.Single)">
            <summary>
            Set the playback direction of the shape mounted in the specified slot
               @param slot mounted shape slot
               @param dir playback direction (-1=backwards, 0=paused, 1=forwards) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_setMountThreadPos(System.String,System.Int32,System.Single)">
            <summary>
            Set the sequence position of the shape mounted in the specified slot
               @param slot mounted shape slot
               @param pos sequence position (0-1) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_setMountThreadSequence(System.String,System.Int32,System.String)">
            <summary>
            Set the sequence to play for the shape mounted in the specified slot
               @param slot mounted shape slot
               @param name name of the sequence to play )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_setOrbitPos(System.String,System.String)">
            <summary>
            Set the camera orbit position
               @param pos Position in the form \"x y z\" )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_setThreadSequence(System.String,System.String,System.Single,System.Single,System.Boolean)">
            <summary>
            Sets the sequence to play for the active thread.
               @param name name of the sequence to play
               @param duration transition duration (0 for no transition)
               @param pos position in the new sequence to transition to
               @param play if true, the new sequence will play during the transition )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_setTimeScale(System.String,System.Single)">
            <summary>
            Set the time scale of all threads
               @param scale new time scale value )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_unmountAll(System.String)">
            <summary>
            Unmount all shapes )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_unmountShape(System.String,System.Int32)">
            <summary>
            Unmount the shape in the specified slot
               @param slot mounted shape slot )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiShapeEdPreview_updateNodeTransforms(System.String)">
            <summary>
            Refresh the shape node transforms (used when a node transform has been modified externally) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiSliderCtrl_getValue(System.String)">
            <summary>
            Get the current value of the slider based on the position of the thumb.
               @return Slider position (from range.x to range.y). )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiSliderCtrl_isThumbBeingDragged(System.String)">
            <summary>
            Returns true if the thumb is currently being dragged by the user.  This method is mainly useful 
               for scrubbing type sliders where the slider position is sync'd to a changing value.  When the 
               user is dragging the thumb, however, the sync'ing should pause and not get in the way of the user. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiSliderCtrl_setValue(System.String,System.Single,System.Boolean)">
            <summary>
            Set position of the thumb on the slider.
               @param pos New slider position (from range.x to range.y)
               @param doCallback If true, the altCommand callback will be invoked )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiStackControl_freeze(System.String,System.Boolean)">
            <summary>
            Prevents control from restacking - useful when adding or removing child controls
               @param freeze True to freeze the control, false to unfreeze it
               @tsexample
               %stackCtrl.freeze(true);
               // add controls to stack
               %stackCtrl.freeze(false);
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiStackControl_isFrozen(System.String)">
            <summary>
            Return whether or not this control is frozen )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiStackControl_updateStack(System.String)">
            <summary>
            Restack the child controls. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiSwatchButtonCtrl_setColor(System.String,System.String)">
            <summary>
            Set the color of the swatch control.
               @param newColor The new color string given to the swatch control in float format \"r g b a\".
               @note It's also important to note that when setColor is called causes
               the control's altCommand field to be executed. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTabBookCtrl_addPage(System.String,System.String)">
            <summary>
             ),
               Add a new tab page to the control.
               @param title Title text for the tab page header. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTabBookCtrl_getSelectedPage(System.String)">
            <summary>
            Get the index of the currently selected tab page.
               @return Index of the selected tab page or -1 if no tab page is selected. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTabBookCtrl_selectPage(System.String,System.Int32)">
            <summary>
            Set the selected tab page.
               @param index Index of the tab page. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTableControl_addChildRow(System.String,System.String,System.Int32)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTableControl_addHeading(System.String,System.String,System.Int32)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTableControl_clearChildren(System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTableControl_findColumnTextIndex(System.String,System.Int32,System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTableControl_getSelectedRow(System.String)">
            <summary>
            @brief Returns the selected row index (not the row ID).
               @tsexample
               // Acquire the selected row index
               %rowIndex = %thisGuiTextListCtrl.getSelectedRow();
               @endtsexample
               @return Index of the selected row
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTableControl_setColumnSort(System.String,System.Int32,System.Boolean)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTableControl_setSelectedRow(System.String,System.Int32)">
            <summary>
            @briefSelects the specified row.
               @param rowNum Row number to set selected.
               @tsexample
               // Define the row number to set selected
               %rowNum = \"4\";
               %guiTextListCtrl.setSelectedRow(%rowNum);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTabPageCtrl_select(System.String)">
            <summary>
            Select this page in its tab book. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextCtrl_setText(System.String,System.String)">
            <summary>
            @brief Sets the text in the control.
               @param text Text to display in the control.
               @tsexample
               // Set the text to show in the control
               %text = \"Gideon - Destroyer of World\";
               // Inform the GuiTextCtrl control to change its text to the defined value
               %thisGuiTextCtrl.setText(%text);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextCtrl_setTextID(System.String,System.String)">
            <summary>
            @brief Maps the text ctrl to a variable used in localization, rather than raw text.
               @param textID Name of variable text should be mapped to
               @tsexample
               // Inform the GuiTextCtrl control of the textID to use
               %thisGuiTextCtrl.setTextID(\"STR_QUIT\");
               @endtsexample
               @see GuiControl
               @see Localization)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextEditCtrl_clearSelectedText(System.String)">
            <summary>
            @brief Unselects all selected text in the control.
               @tsexample
               // Inform the control to unselect all of its selected text
               %thisGuiTextEditCtrl.clearSelectedText();
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextEditCtrl_forceValidateText(System.String)">
            <summary>
            @brief Force a validation to occur.
               @tsexample
               // Inform the control to force a validation of its text.
               %thisGuiTextEditCtrl.forceValidateText();
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextEditCtrl_getCursorPos(System.String)">
            <summary>
            @brief Returns the current position of the text cursor in the control.
               @tsexample
               // Acquire the cursor position in the control
               %position = %thisGuiTextEditCtrl.getCursorPost();
               @endtsexample
               @return Text cursor position within the control.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextEditCtrl_getText(System.String)">
            <summary>
            @brief Acquires the current text displayed in this control.
               @tsexample
               // Acquire the value of the text control.
               %text = %thisGuiTextEditCtrl.getText();
               @endtsexample
               @return The current text within the control.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextEditCtrl_isAllTextSelected(System.String)">
            <summary>
            @brief Checks to see if all text in the control has been selected.
               @tsexample
               // Check to see if all text has been selected or not.
               %allSelected = %thisGuiTextEditCtrl.isAllTextSelected();
               @endtsexample
               @return True if all text in the control is selected, otherwise false.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextEditCtrl_selectAllText(System.String)">
            <summary>
            @brief Selects all text within the control.
               @tsexample
               // Inform the control to select all of its text.
               %thisGuiTextEditCtrl.selectAllText();
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextEditCtrl_setCursorPos(System.String,System.Int32)">
            <summary>
            @brief Sets the text cursor at the defined position within the control.
               @param position Text position to set the text cursor.
               @tsexample
               // Define the cursor position
               %position = \"12\";
               // Inform the GuiTextEditCtrl control to place the text cursor at the defined position
               %thisGuiTextEditCtrl.setCursorPos(%position);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextEditCtrl_setText(System.String,System.String)">
            <summary>
            @brief Sets the text in the control.
               @param text Text to place in the control.
               @tsexample
               // Define the text to display
               %text = \"Text!\"
               // Inform the GuiTextEditCtrl to display the defined text
               %thisGuiTextEditCtrl.setText(%text);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextListCtrl_addRow(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            ,-1),
               @brief Adds a new row at end of the list with the defined id and text.
               If index is used, then the new row is inserted at the row location of 'index'.
               @param id Id of the new row.
               @param text Text to display at the new row.
               @param index Index to insert the new row at. If not used, new row will be placed at the end of the list.
               @tsexample
               // Define the id
               %id = \"4\";
               // Define the text to display
               %text = \"Display Text\"
               // Define the index (optional)
               %index = \"2\"
               // Inform the GuiTextListCtrl control to add the new row with the defined information.
               %rowIndex = %thisGuiTextListCtrl.addRow(%id,%text,%index);
               @endtsexample
               @return Returns the row index of the new row. If 'index' was defined, then this just returns the number of rows in the list.
               @see References)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextListCtrl_clear(System.String)">
            <summary>
            @brief Clear the list.
               @tsexample
               // Inform the GuiTextListCtrl control to clear its contents
               %thisGuiTextListCtrl.clear();
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextListCtrl_clearSelection(System.String)">
            <summary>
            @brief Set the selection to nothing.
               @tsexample
               // Deselect anything that is currently selected
               %thisGuiTextListCtrl.clearSelection();
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextListCtrl_findColumnTextIndex(System.String,System.Int32,System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextListCtrl_findTextIndex(System.String,System.String)">
            <summary>
            @brief Find needle in the list, and return the row number it was found in.
               @param needle Text to find in the list.
               @tsexample
               // Define the text to find in the list
               %needle = \"Text To Find\";
               // Request the row number that contains the defined text to find
               %rowNumber = %thisGuiTextListCtrl.findTextIndex(%needle);
               @endtsexample
               @return Row number that the defined text was found in,
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextListCtrl_getRowId(System.String,System.Int32)">
            <summary>
            @brief Get the row ID for an index.
               @param index Index to get the RowID at
               @tsexample
               // Define the index
               %index = \"3\";
               // Request the row ID at the defined index
               %rowId = %thisGuiTextListCtrl.getRowId(%index);
               @endtsexample
               @return RowId at the defined index.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextListCtrl_getRowNumById(System.String,System.Int32)">
            <summary>
            @brief Get the row number for a specified id.
               @param id Id to get the row number at
               @tsexample
               // Define the id
               %id = \"4\";
               // Request the row number from the GuiTextListCtrl control at the defined id.
               %rowNumber = %thisGuiTextListCtrl.getRowNumById(%id);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextListCtrl_getRowText(System.String,System.Int32)">
            <summary>
            @brief Get the text of the row with the specified index.
               @param index Row index to acquire the text at.
               @tsexample
               // Define the row index
               %index = \"5\";
               // Request the text from the row at the defined index
               %rowText = %thisGuiTextListCtrl.getRowText(%index);
               @endtsexample
               @return Text at the defined row index.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextListCtrl_getRowTextById(System.String,System.Int32)">
            <summary>
            @brief Get the text of a row with the specified id.
               @tsexample
               // Define the id
               %id = \"4\";
               // Inform the GuiTextListCtrl control to return the text at the defined row id
               %rowText = %thisGuiTextListCtrl.getRowTextById(%id);
               @endtsexample
               @return Row text at the requested row id.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextListCtrl_getSelectedId(System.String)">
            <summary>
            @brief Get the ID of the currently selected item.
               @tsexample
               // Acquire the ID of the selected item in the list.
               %id = %thisGuiTextListCtrl.getSelectedId();
               @endtsexample
               @return The id of the selected item in the list.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextListCtrl_getSelectedRow(System.String)">
            <summary>
            @brief Returns the selected row index (not the row ID).
               @tsexample
               // Acquire the selected row index
               %rowIndex = %thisGuiTextListCtrl.getSelectedRow();
               @endtsexample
               @return Index of the selected row
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextListCtrl_isRowActive(System.String,System.Int32)">
            <summary>
            @brief Check if the specified row is currently active or not.
               @param rowNum Row number to check the active state.
               @tsexample
               // Define the row number
               %rowNum = \"5\";
               // Request the active state of the defined row number from the GuiTextListCtrl control.
               %rowActiveState = %thisGuiTextListCtrl.isRowActive(%rowNum);
               @endtsexample
               @return Active state of the defined row number.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextListCtrl_removeRow(System.String,System.Int32)">
            <summary>
            @brief Remove a row from the table, based on its index.
               @param index Row index to remove from the list.
               @tsexample
               // Define the row index
               %index = \"4\";
               // Inform the GuiTextListCtrl control to remove the row at the defined row index
               %thisGuiTextListCtrl.removeRow(%index);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextListCtrl_removeRowById(System.String,System.Int32)">
            <summary>
            @brief Remove row with the specified id.
               @param id Id to remove the row entry at
               @tsexample
               // Define the id
               %id = \"4\";
               // Inform the GuiTextListCtrl control to remove the row at the defined id
               %thisGuiTextListCtrl.removeRowById(%id);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextListCtrl_rowCount(System.String)">
            <summary>
            @brief Get the number of rows.
               @tsexample
               // Get the number of rows in the list
               %rowCount = %thisGuiTextListCtrl.rowCount();
               @endtsexample
               @return Number of rows in the list.
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextListCtrl_scrollVisible(System.String,System.Int32)">
            <summary>
            @brief Scroll so the specified row is visible
               @param rowNum Row number to make visible
               @tsexample
               // Define the row number to make visible
               %rowNum = \"4\";
               // Inform the GuiTextListCtrl control to scroll the list so the defined rowNum is visible.
               %thisGuiTextListCtrl.scrollVisible(%rowNum);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextListCtrl_setRowActive(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Mark a specified row as active/not.
               @param rowNum Row number to change the active state.
               @param active Boolean active state to set the row number.
               @tsexample
               // Define the row number
               %rowNum = \"4\";
               // Define the boolean active state
               %active = \"true\";
               // Informthe GuiTextListCtrl control to set the defined active state at the defined row number.
               %thisGuiTextListCtrl.setRowActive(%rowNum,%active);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextListCtrl_setRowById(System.String,System.Int32,System.String)">
            <summary>
            @brief Sets the text at the defined id.
               @param id Id to change.
               @param text Text to use at the Id.
               @tsexample
               // Define the id
               %id = \"4\";
               // Define the text
               %text = \"Text To Display\";
               // Inform the GuiTextListCtrl control to display the defined text at the defined id
               %thisGuiTextListCtrl.setRowById(%id,%text);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextListCtrl_setSelectedById(System.String,System.Int32)">
            <summary>
            @brief Finds the specified entry by id, then marks its row as selected.
               @param id Entry within the text list to make selected.
               @tsexample
               // Define the id
               %id = \"5\";
               // Inform the GuiTextListCtrl control to set the defined id entry as selected
               %thisGuiTextListCtrl.setSelectedById(%id);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextListCtrl_setSelectedRow(System.String,System.Int32)">
            <summary>
            @briefSelects the specified row.
               @param rowNum Row number to set selected.
               @tsexample
               // Define the row number to set selected
               %rowNum = \"4\";
               %guiTextListCtrl.setSelectedRow(%rowNum);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextListCtrl_sort(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Performs a standard (alphabetical) sort on the values in the specified column.
               @param columnId Column ID to perform the sort on.
               @param increasing If false, sort will be performed in reverse.
               @tsexample
               // Define the columnId
               %id = \"1\";
               // Define if we are increasing or not
               %increasing = \"false\";
               // Inform the GuiTextListCtrl to perform the sort operation
               %thisGuiTextListCtrl.sort(%id,%increasing);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTextListCtrl_sortNumerical(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Perform a numerical sort on the values in the specified column.
               Detailed description
               @param columnId Column ID to perform the sort on.
               @param increasing If false, sort will be performed in reverse.
               @tsexample
               // Define the columnId
               %id = \"1\";
               // Define if we are increasing or not
               %increasing = \"false\";
               // Inform the GuiTextListCtrl to perform the sort operation
               %thisGuiTextListCtrl.sortNumerical(%id,%increasing);
               @endtsexample
               @see GuiControl)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTheoraCtrl_getCurrentTime(System.String)">
            <summary>
            Get the current playback time.
               @return The elapsed playback time in seconds. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTheoraCtrl_isPlaybackDone(System.String)">
            <summary>
            Test whether the video has finished playing.
               @return True if the video has finished playing, false otherwise. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTheoraCtrl_pause(System.String)">
            <summary>
            Pause playback of the video.  If the video is not currently playing, the call is ignored.
               While stopped, the control displays the last frame. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTheoraCtrl_play(System.String)">
            <summary>
            Start playing the video.  If the video is already playing, the call is ignored. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTheoraCtrl_setFile(System.String,System.String)">
            <summary>
            Set the video file to play.  If a video is already playing, playback is stopped and 
               the new video file is loaded.
               @param filename The video file to load. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTheoraCtrl_stop(System.String)">
            <summary>
            Stop playback of the video.  The next call to play() will then start playback from the beginning of the video.
               While stopped, the control renders empty with just the background color. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTreeViewCtrl_addSelection(System.String,System.Int32,System.Boolean)">
            <summary>
            Add an item/object to the current selection.
               @param id ID of item/object to add to the selection.
               @param isLastSelection Whether there are more pending items/objects to be added to the selection.  If false, 
                  the control will defer refreshing the tree and wait until addSelection() is called with this parameter set 
                  to true. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTreeViewCtrl_clearFilterText(System.String)">
            <summary>
            Clear the current item filtering pattern.
               @see setFilterText
               @see getFilterText )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTreeViewCtrl_clearSelection(System.String)">
            <summary>
            Unselect all currently selected items. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTreeViewCtrl_deleteSelection(System.String)">
            <summary>
            Delete all items/objects in the current selection. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTreeViewCtrl_findChildItemByName(System.String,System.Int32,System.String)">
            <summary>
            Get the child item of the given parent item whose text matches @a childName.
               @param parentId Item ID of the parent in which to look for the child.
               @param childName Text of the child item to find.
               @return ID of the child item or -1 if no child in @a parentId has the given text @a childName.
               @note This method does not recurse, i.e. it only looks for direct children. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTreeViewCtrl_findItemByName(System.String,System.String)">
            <summary>
            Get the ID of the item whose text matches the given @a text.
               @param text Item text to match.
               @return ID of the item or -1 if no item matches the given text. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTreeViewCtrl_findItemByValue(System.String,System.String)">
            <summary>
            Get the ID of the item whose value matches @a value.
               @param value Value text to match.
               @return ID of the item or -1 if no item has the given value. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTreeViewCtrl_getFilterText(System.String)">
            <summary>
            Get the current filter expression.  Only tree items whose text matches this expression 
               are displayed.  By default, the expression is empty and all items are shown.
               @return The current filter pattern or an empty string if no filter pattern is currently active.
               @see setFilterText
               @see clearFilterText )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTreeViewCtrl_hideSelection(System.String,System.Boolean)">
            <summary>
            Call SimObject::setHidden( @a state ) on all objects in the current selection.
               @param state Visibility state to set objects in selection to. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTreeViewCtrl_insertItem(System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            , , 0, 0 ),
               Add a new item to the tree.
               @param parentId Item ID of parent to which to add the item as a child.  0 is root item.
               @param text Text to display on the item in the tree.
               @param value Behind-the-scenes value of the item.
               @param icon
               @param normalImage
               @param expandedImage
               @return The ID of the newly added item. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTreeViewCtrl_insertObject(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Inserts object as a child to the given parent. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTreeViewCtrl_isItemSelected(System.String,System.Int32)">
            <summary>
            Check whether the given item is currently selected in the tree.
               @param id Item/object ID.
               @return True if the given item/object is currently selected in the tree. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTreeViewCtrl_lockSelection(System.String,System.Boolean)">
            <summary>
            Set whether the current selection can be changed by the user or not.
               @param lock If true, the current selection is frozen and cannot be changed.  If false, 
                  the selection may be modified. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTreeViewCtrl_setFilterText(System.String,System.String)">
            <summary>
            Set the pattern by which to filter items in the tree.  Only items in the tree whose text 
               matches this pattern are displayed.
               @param pattern New pattern based on which visible items in the tree should be filtered.  If empty, all items become visible.
               @see getFilterText
               @see clearFilterText )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTreeViewCtrl_toggleHideSelection(System.String)">
            <summary>
            Toggle the hidden state of all objects in the current selection. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTreeViewCtrl_toggleLockSelection(System.String)">
            <summary>
            Toggle the locked state of all objects in the current selection. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTSCtrl_calculateViewDistance(System.String,System.Single)">
            <summary>
            Given the camera's current FOV, get the distance from the camera's viewpoint at which the given radius will fit in the render area.
               @param radius Radius in world-space units which should fit in the view.
               @return The distance from the viewpoint at which the given radius would be fully visible. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTSCtrl_getClickVector(System.String,System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTSCtrl_getWorldPosition(System.String,System.String)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTSCtrl_getWorldToScreenScale(System.String)">
            <summary>
            Get the ratio between world-space units and pixels.
               @return The amount of world-space units covered by the extent of a single pixel. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTSCtrl_project(System.String,System.String)">
            <summary>
            Transform world-space coordinates to screen-space (x, y, depth) coordinates.
               @param worldPosition The world-space position to transform to screen-space.
               @return The  )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiTSCtrl_unproject(System.String,System.String)">
            <summary>
            Transform 3D screen-space coordinates (x, y, depth) to world space.
               This method can be, for example, used to find the world-space position relating to the current mouse cursor position.
               @param screenPosition The x/y position on the screen plus the depth from the screen-plane outwards.
               @return The world-space position corresponding to the given screen-space coordinates. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiWindowCtrl_attachTo(System.String,System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiWindowCtrl_ClosePopOut(System.String)">
            <summary>
            Puts the guiwindow back on the main canvas. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiWindowCtrl_getWindowTitle(System.String)">
            <summary>
            Returns the title of the window. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiWindowCtrl_isTitleSet(System.String)">
            <summary>
            Returns if the title can be set or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiWindowCtrl_OpenPopOut(System.String)">
            <summary>
            Puts the guiwindow on a new canvas. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiWindowCtrl_selectWindow(System.String)">
            <summary>
            Bring the window to the front. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiWindowCtrl_setCollapseGroup(System.String,System.Boolean)">
            <summary>
            Set the window's collapsing state. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiWindowCtrl_setContextTitle(System.String,System.Boolean)">
            <summary>
            Displays the option to set the title of the window. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiWindowCtrl_setWindowTitle(System.String,System.String)">
            <summary>
            Sets the title of the window. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnGuiWindowCtrl_toggleCollapseGroup(System.String)">
            <summary>
            Toggle the window collapsing. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnHTTPObject_get(System.String,System.String,System.String,System.String)">
            <summary>
             ),
               @brief Send a GET command to a server to send or retrieve data.
            
               @param Address HTTP web address to send this get call to. Be sure to include the port at the end (IE: \"www.garagegames.com:80\").
               @param requirstURI Specific location on the server to access (IE: \"index.php\".)
               @param query Optional. Actual data to transmit to the server. Can be anything required providing it sticks with limitations of the HTTP protocol. 
               If you were building the URL manually, this is the text that follows the question mark.  For example: http://www.google.com/ig/api?b>weather=Las-Vegas,US/b>
               
               @tsexample
            	   // Create an HTTP object for communications
            	   %httpObj = new HTTPObject();
            	   // Specify a URL to transmit to
                  %url = \"www.garagegames.com:80\";
            	   // Specify a URI to communicate with
            	   %URI = \"/index.php\";
            	   // Specify a query to send.
            	   %query = \"\";
            	   // Send the GET command to the server
            	   %httpObj.get(%url,%URI,%query);
               @endtsexample
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnHTTPObject_post(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            @brief Send POST command to a server to send or retrieve data.
            
               @param Address HTTP web address to send this get call to. Be sure to include the port at the end (IE: \"www.garagegames.com:80\").
               @param requirstURI Specific location on the server to access (IE: \"index.php\".)
               @param query Actual data to transmit to the server. Can be anything required providing it sticks with limitations of the HTTP protocol. 
               @param post Submission data to be processed.
               
               @note The post() method is currently non-functional.
            
               @tsexample
            	   // Create an HTTP object for communications
            	   %httpObj = new HTTPObject();
            	   // Specify a URL to transmit to
                  %url = \"www.garagegames.com:80\";
            	   // Specify a URI to communicate with
            	   %URI = \"/index.php\";
            	   // Specify a query to send.
            	   %query = \"\";
            	   // Specify the submission data.
            	   %post = \"\";
            	   // Send the POST command to the server
            	   %httpObj.POST(%url,%URI,%query,%post);
               @endtsexample
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnItem_getLastStickyNormal(System.String)">
            <summary>
            @brief Get the normal of the surface on which the object is stuck.   
               @return Returns The XYZ normal from where this Item is stuck.
               @tsexample
            	   // Acquire the position where this Item is currently stuck
            	   %stuckPosition = %item.getLastStickPos();
               @endtsexample
               @note Server side only.
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnItem_getLastStickyPos(System.String)">
            <summary>
            @brief Get the position on the surface on which this Item is stuck.   
               @return Returns The XYZ position of where this Item is stuck.
               @tsexample
            	   // Acquire the position where this Item is currently stuck
            	   %stuckPosition = %item.getLastStickPos();
               @endtsexample
               @note Server side only.
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnItem_isAtRest(System.String)">
            <summary>
            @brief Is the object at rest (ie, no longer moving)?   
               @return True if the object is at rest, false if it is not.
               @tsexample
            	   // Query the item on if it is or is not at rest.
            	   %isAtRest = %item.isAtRest();
               @endtsexample
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnItem_isRotating(System.String)">
            <summary>
            @brief Is the object still rotating?   
               @return True if the object is still rotating, false if it is not.
               @tsexample
            	   // Query the item on if it is or is not rotating.
            	   %isRotating = %itemData.isRotating();
               @endtsexample
               @see rotate
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnItem_isStatic(System.String)">
            <summary>
            @brief Is the object static (ie, non-movable)?   
               @return True if the object is static, false if it is not.
               @tsexample
            	   // Query the item on if it is or is not static.
            	   %isStatic = %itemData.isStatic();
               @endtsexample
               @see static
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnItem_setCollisionTimeout(System.String,System.Int32)">
            <summary>
            @brief Temporarily disable collisions against a specific ShapeBase object.
            
               This is useful to prevent a player from immediately picking up an Item they have 
               just thrown.  Only one object may be on the timeout list at a time.  The timeout is 
               defined as 15 ticks.
            
               @param objectID ShapeBase object ID to disable collisions against.
               @return Returns true if the ShapeBase object requested could be found, false if it could not.
            
               @tsexample
            	   // Set the ShapeBase Object ID to disable collisions against
            	   %ignoreColObj = %player.getID();
            	   // Inform this Item object to ignore collisions temproarily against the %ignoreColObj.
            	   %item.setCollisionTimeout(%ignoreColObj);
               @endtsexample
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnLevelInfo_setNearClip(System.String,System.String)">
            <summary>
            ( LevelInfo, setNearClip, void, 3, 3, ( F32 nearClip ))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnLightBase_setLightEnabled(System.String,System.Boolean)">
            <summary>
            @brief Toggles the light on and off
               
               @param state Turns the light on (true) or off (false)
            
               @tsexample
               // Disable the light
               CrystalLight.setLightEnabled(false);
               // Renable the light
               CrystalLight.setLightEnabled(true);
               
               @endtsexample
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnLightDescription_apply(System.String)">
            <summary>
            @brief Force an inspectPostApply call for the benefit of tweaking via the console
               
               Normally this functionality is only exposed to objects via the World Editor, once changes have been made. 
               Exposing apply to script allows you to make changes to it on the fly without the World Editor.
            
               @note This is intended for debugging and tweaking, not for game play
            
               @tsexample
               // Change a property of the light description
               RocketLauncherLightDesc.brightness = 10;
               // Make it so
               RocketLauncherLightDesc.apply();
               
               @endtsexample
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnLightFlareData_apply(System.String)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               Force trigger an inspectPostApply
                               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnLightning_strikeObject(System.String,System.String)">
            <summary>
            Creates a LightningStrikeEvent which strikes a specific object.
               @note This method is currently unimplemented. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnLightning_strikeRandomPoint(System.String)">
            <summary>
            Creates a LightningStrikeEvent which attempts to strike and damage a random 
               object in range of the Lightning object.
               @tsexample
               // Generate a damaging lightning strike effect on all clients
               %lightning.strikeRandomPoint();
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnLightning_warningFlashes(System.String)">
            <summary>
            @brief Creates a LightningStrikeEvent that triggers harmless lightning 
               bolts on all clients.
               No objects will be damaged by these bolts.
               @tsexample
               // Generate a harmless lightning strike effect on all clients
               %lightning.warningFlashes();
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnMeshRoad_postApply(System.String)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               Force trigger an inspectPostApply. This will transmit 
                               material and other fields ( not including nodes ) to client objects.
                               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnMeshRoad_regenerate(System.String)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               Force MeshRoad to recreate its geometry.
                               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnMeshRoad_setNodeDepth(System.String,System.Int32,System.Single)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               Sets the depth in meters of a particular node.
                               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnMessageVector_clear(System.String)">
            <summary>
            Clear all messages in the vector
               @tsexample
               HudMessageVector.clear();
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnMessageVector_deleteLine(System.String,System.Int32)">
            <summary>
            Delete the line at the specified position.
               @param deletePos Position in the vector containing the line to be deleted
               @tsexample
               // Delete the first line (index 0) in the vector...
               HudMessageVector.deleteLine(0);
               @endtsexample
               @return False if deletePos is greater than the number of lines in the current vector)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnMessageVector_getLineIndexByTag(System.String,System.Int32)">
            <summary>
            Scan through the vector, returning the line number of the first line that matches the specified tag; else returns -1 if no match was found.
               @param tag Numerical value assigned to a message when it was added or inserted
               @tsexample
               // Locate a line of text tagged with the value \"1\", then delete it.
               %taggedLine = HudMessageVector.getLineIndexByTag(1);
               HudMessageVector.deleteLine(%taggedLine);
               @endtsexample
               @return Line with matching tag, other wise -1)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnMessageVector_getLineTag(System.String,System.Int32)">
            <summary>
            Get the tag of a specified line.
               @param pos Position in vector to grab tag from
               @tsexample
               // Remove all lines that do not have a tag value of 1.
               while( HudMessageVector.getNumLines())
               {
                  %tag = HudMessageVector.getLineTag(1);
                  if(%tag != 1)
                     %tag.delete();
                  HudMessageVector.popFrontLine();
               }
               @endtsexample
               @return Tag value of a given line, if the position is greater than the number of lines return 0)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnMessageVector_getLineText(System.String,System.Int32)">
            <summary>
            Get the text at a specified line.
               @param pos Position in vector to grab text from
               @tsexample
               // Print a line of text at position 1.
               %text = HudMessageVector.getLineText(1);
               echo(%text);
               @endtsexample
               @return Text at specified line, if the position is greater than the number of lines return \"\")
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnMessageVector_getLineTextByTag(System.String,System.Int32)">
            <summary>
            Scan through the lines in the vector, returning the first line that has a matching tag.
               @param tag Numerical value assigned to a message when it was added or inserted
               @tsexample
               // Locate text in the vector tagged with the value \"1\", then print it
               %taggedText = HudMessageVector.getLineTextByTag(1);
               echo(%taggedText);
               @endtsexample
               @return Text from a line with matching tag, other wise \"\")
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnMessageVector_getNumLines(System.String)">
            <summary>
            Get the number of lines in the vector.
               @tsexample
               // Find out how many lines have been stored in HudMessageVector
               %chatLines = HudMessageVector.getNumLines();
               echo(%chatLines);
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnMessageVector_insertLine(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Push a line onto the back of the list.
               @param msg Text that makes up the message
               @param tag Numerical value associated with this message, useful for searching.
               @tsexample
               // Add the message...
               HudMessageVector.insertLine(1, \"Hello World\", 0);
               @endtsexample
               @return False if insertPos is greater than the number of lines in the current vector)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnMessageVector_popBackLine(System.String)">
            <summary>
            Pop a line from the back of the list; destroys the line.
               @tsexample
               HudMessageVector.popBackLine();
               @endtsexample
               @return False if there are no lines to pop (underflow), true otherwise)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnMessageVector_popFrontLine(System.String)">
            <summary>
            Pop a line from the front of the vector, destroying the line.
               @tsexample
               HudMessageVector.popFrontLine();
               @endtsexample
               @return False if there are no lines to pop (underflow), true otherwise)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnMessageVector_pushBackLine(System.String,System.String,System.Int32)">
            <summary>
            Push a line onto the back of the list.
               @param msg Text that makes up the message
               @param tag Numerical value associated with this message, useful for searching.
               @tsexample
               // Add the message...
               HudMessageVector.pushBackLine(\"Hello World\", 0);
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnMessageVector_pushFrontLine(System.String,System.String,System.Int32)">
            <summary>
            Push a line onto the front of the vector.
               @param msg Text that makes up the message
               @param tag Numerical value associated with this message, useful for searching.
               @tsexample
               // Add the message...
               HudMessageVector.pushFrontLine(\"Hello World\", 0);
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnMissionArea_getArea(System.String)">
            <summary>
            Returns 4 fields: starting x, starting y, extents x, extents y.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnMissionArea_postApply(System.String)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               Force trigger an inspectPostApply. This will transmit 
                               material and other fields ( not including nodes ) to client objects.
                               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnMissionArea_setArea(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            @brief - Defines the size of the MissionArea
            			  param x Starting X coordinate position for MissionArea
            			  param y Starting Y coordinate position for MissionArea
            			  param width New width of the MissionArea
            			  param height New height of the MissionArea
                       @note Only the server object may be set.
            			  )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavMesh_addLink(System.String,System.String,System.String,System.UInt32)">
            <summary>
            Add a link to this NavMesh between two points.
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavMesh_build(System.String,System.Boolean,System.Boolean)">
            <summary>
            @brief Create a Recast nav mesh.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavMesh_buildLinks(System.String)">
            <summary>
            @brief Build tiles of this mesh where there are unsynchronised links.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavMesh_buildTiles(System.String,System.String)">
            <summary>
            @brief Rebuild the tiles overlapped by the input box.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavMesh_cancelBuild(System.String)">
            <summary>
            @brief Cancel the current NavMesh build.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavMesh_createCoverPoints(System.String)">
            <summary>
            @brief Create cover points for this NavMesh.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavMesh_deleteCoverPoints(System.String)">
            <summary>
            @brief Remove all cover points for this NavMesh.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavMesh_deleteLink(System.String,System.UInt32)">
            <summary>
            Delete a given off-mesh link.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavMesh_deleteLinks(System.String)">
            <summary>
            Deletes all off-mesh links on this NavMesh.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavMesh_getLink(System.String,System.String)">
            <summary>
            Get the off-mesh link closest to a given world point.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavMesh_getLinkCount(System.String)">
            <summary>
            Return the number of links this mesh has.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavMesh_getLinkEnd(System.String,System.UInt32)">
            <summary>
            Get the ending point of an off-mesh link.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavMesh_getLinkFlags(System.String,System.UInt32)">
            <summary>
            Get the flags set for a particular off-mesh link.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavMesh_getLinkStart(System.String,System.UInt32)">
            <summary>
            Get the starting point of an off-mesh link.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavMesh_load(System.String)">
            <summary>
            @brief Load this NavMesh from its file.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavMesh_save(System.String)">
            <summary>
            @brief Save this NavMesh to its file.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavMesh_setLinkFlags(System.String,System.UInt32,System.UInt32)">
            <summary>
            Set the flags of a particular off-mesh link.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavPath_getFlags(System.String,System.Int32)">
            <summary>
            @brief Get a specified node along the path.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavPath_getLength(System.String)">
            <summary>
            @brief Get the length of this path.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavPath_getNode(System.String,System.Int32)">
            <summary>
            @brief Get a specified node along the path.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavPath_onNavMeshUpdate(System.String,System.String)">
            <summary>
            @brief Callback when this path's NavMesh is loaded or rebuilt.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavPath_onNavMeshUpdateBox(System.String,System.String)">
            <summary>
            @brief Callback when a particular area in this path's NavMesh is rebuilt.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavPath_plan(System.String)">
            <summary>
            @brief Find a path using the already-specified path properties.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNavPath_size(System.String)">
            <summary>
            @brief Return the number of nodes in this path.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNetConnection_checkMaxRate(System.String)">
            <summary>
            @brief Ensures that all configured packet rates and sizes meet minimum requirements.
            
               This method is normally only called when a NetConnection class is first constructed.  It need 
               only be manually called if the global variables that set the packet rate or size have changed.
            
               @note If @$pref::Net::PacketRateToServer, @$pref::Net::PacketRateToClient or @$pref::Net::PacketSize 
               have been changed since a NetConnection has been created, this method must be called on 
               all connections for them to follow the new rates or size.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNetConnection_clearPaths(System.String)">
            <summary>
            @brief On the server, resets the connection to indicate that motion spline paths have not been transmitted.
            
               Typically when a mission has ended on the server, all connected clients are informed of this change 
               and their connections are reset back to a starting state.  This method resets a connection on the 
               server to indicate that motion spline paths have not been transmitted.
            
               @tsexample
                  // Inform the clients
                  for (%clientIndex = 0; %clientIndex  ClientGroup.getCount(); %clientIndex++)
                  {
                     // clear ghosts and paths from all clients
                     %cl = ClientGroup.getObject(%clientIndex);
                     %cl.endMission();
                     %cl.resetGhosting();
                     %cl.clearPaths();
                  }
               @endtsexample
               
               @see transmitPaths()
               @see Path)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNetConnection_connect(System.String,System.String)">
            <summary>
            @brief Connects to the remote address.
            
               Attempts to connect with another NetConnection on the given address.  Typically once 
               connected, a game's information is passed along from the server to the client, followed 
               by the player entering the game world.  The actual procedure is dependent on 
               the NetConnection subclass that is used.  i.e. GameConnection.
            
               @param remoteAddress The address to connect to in the form of IP:address>:port 
               although the i>IP:/i> portion is optional.  The i>address/i> portion may be in the form 
               of w.x.y.z or as a host name, in which case a DNS lookup will be performed.  You may also 
               substitue the word i>broadcast/i> for the address to broadcast the connect request over 
               the local subnet.
            
               @see NetConnection::connectLocal() to connect to a server running within the same process 
               as the client.
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNetConnection_connectLocal(System.String)">
            <summary>
            @brief Connects with the server that is running within the same process as the client.
            
               @returns An error text message upon failure, or an empty string when successful.
            
               @see See @ref local_connections for a description of local connections and their use.  See 
               NetConnection::connect() to connect to a server running in another process (on the same machine or not).)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNetConnection_getAddress(System.String)">
            <summary>
            @brief Returns the far end network address for the connection.
            
               The address will be in one of the following forms:
               - b>IP:Broadcast:port>/b> for broadcast type addresses
               - b>IP:address>:port>/b> for IP addresses
               - b>local/b> when connected locally (server and client running in same process)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNetConnection_getGhostID(System.String,System.Int32)">
            <summary>
            @brief On server or client, convert a real id to the ghost id for this connection.
            
               Torque's network ghosting system only exchanges ghost ID's between the server and client.  Use 
               this method on the server or client to discover an object's ghost ID based on its real SimObject ID.
            
               @param realID The real SimObject ID of the object.
               @returns The ghost ID of the object for this connection, or -1 if it could not be resolved.
            
               @see @ref ghosting_scoping for a description of the ghosting system.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNetConnection_GetGhostIndex(System.String,System.String)">
            <summary>
            Returns the ghost-index for an object.
            	@ingroup AFX)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNetConnection_getGhostsActive(System.String)">
            <summary>
            @brief Provides the number of active ghosts on the connection.
               @returns The number of active ghosts.
               @see @ref ghosting_scoping for a description of the ghosting system.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNetConnection_getPacketLoss(System.String)">
            <summary>
            @brief Returns the percentage of packets lost per tick.
            
               @note This method is not yet hooked up.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNetConnection_getPing(System.String)">
            <summary>
            @brief Returns the average round trip time (in ms) for the connection.
            
               The round trip time is recalculated every time a notify packet is received.  Notify 
               packets are used to information the connection that the far end successfully received 
               the sent packet.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNetConnection_ResolveGhost(System.String,System.Int32)">
            <summary>
            Resolves a ghost-index into an object ID.
            	@ingroup AFX)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNetConnection_resolveGhostID(System.String,System.Int32)">
            <summary>
            @brief On the client, convert a ghost ID from this connection to a real SimObject ID.
            
               Torque's network ghosting system only exchanges ghost ID's between the server and client.  Use 
               this method on the client to discover an object's local SimObject ID when you only have a 
               ghost ID.
            
               @param ghostID The ghost ID of the object as sent by the server.
               @returns The SimObject ID of the object, or 0 if it could not be resolved.
            
               @tsexample
                  %object = ServerConnection.resolveGhostID( %ghostId );
               @endtsexample
            
               @see @ref ghosting_scoping for a description of the ghosting system.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNetConnection_resolveObjectFromGhostIndex(System.String,System.Int32)">
            <summary>
            @brief On the server, convert a ghost ID from this connection to a real SimObject ID.
            
               Torque's network ghosting system only exchanges ghost ID's between the server and client.  Use 
               this method on the server to discover an object's local SimObject ID when you only have a 
               ghost ID.
            
               @param ghostID The ghost ID of the object as sent by the server.
               @returns The SimObject ID of the object, or 0 if it could not be resolved.
            
               @tsexample
                  %object = %client.resolveObjectFromGhostIndex( %ghostId );
               @endtsexample
            
               @see @ref ghosting_scoping for a description of the ghosting system.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNetConnection_setSimulatedNetParams(System.String,System.Single,System.Int32)">
            <summary>
            @brief Simulate network issues on the connection for testing.
            
               @param packetLoss The fraction of packets that will be lost.  Ranges from 0.0 (no loss) to 1.0 (complete loss)
               @param delay Delays packets being transmitted by simulating a particular ping.  This is an absolute 
               integer, measured in ms.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNetConnection_transmitPaths(System.String)">
            <summary>
            @brief Sent by the server during phase 2 of the mission download to update motion spline paths.
            
               The server transmits all spline motion paths that are within the mission (Path) separate from 
               other objects.  This is due to the potentially large number of nodes within each path, which may 
               saturate a packet sent to the client.  By managing this step separately, Torque has finer control 
               over how packets are organised vs. doing it during the ghosting stage.
            
               Internally a PathManager is used to track all paths defined within a mission on the server, and each 
               one is transmitted using a PathManagerEvent.  The client side collects these events and builds the 
               given paths within its own PathManager.  This is typically done during the standard mission start 
               phase 2 when following Torque's example mission startup sequence.
            
               When a mission is ended, all paths need to be cleared from their respective path managers.
            
               @tsexample
               function serverCmdMissionStartPhase2Ack(%client, %seq, %playerDB)
               {
                  // Make sure to ignore calls from a previous mission load
                  if (%seq != $missionSequence || !$MissionRunning)
                     return;
                  if (%client.currentPhase != 1.5)
                     return;
                  %client.currentPhase = 2;
               
                  // Set the player datablock choice
                  %client.playerDB = %playerDB;
               
                  // Update mission paths (SimPath), this needs to get there before the objects.
                  %client.transmitPaths();
               
                  // Start ghosting objects to the client
                  %client.activateGhosting();
               }
               @endtsexample
               
               @see clearPaths()
               @see Path)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNetObject_clearScopeToClient(System.String,System.String)">
            <summary>
            @brief Undo the effects of a scopeToClient() call.
            
               @param client The connection to remove this object's scoping from 
               
               @see scopeToClient())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNetObject_getClientObject(System.String)">
            <summary>
            @brief Returns a pointer to the client object when on a local connection.
            
               Short-Circuit-Networking: this is only valid for a local-client / singleplayer situation.
            
               @returns the SimObject ID of the client object.
            
               @tsexample
                  // Psuedo-code, some values left out for this example
                  %node = new ParticleEmitterNode(){};
                  %clientObject = %node.getClientObject();
                  if(isObject(%clientObject)
                  	%clientObject.setTransform(\"0 0 0\");
               @endtsexample
               
               @see @ref local_connections)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNetObject_getGhostID(System.String)">
            <summary>
            @brief Get the ghost index of this object from the server.
            
               @returns The ghost ID of this NetObject on the server
            
               @tsexample
                  %ghostID = LocalClientConnection.getGhostId( %serverObject );
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNetObject_getServerObject(System.String)">
            <summary>
            @brief Returns a pointer to the client object when on a local connection.
            
               Short-Circuit-Netorking: this is only valid for a local-client / singleplayer situation.
               
               @returns The SimObject ID of the server object.
               @tsexample
                  // Psuedo-code, some values left out for this example
                  %node = new ParticleEmitterNode(){};
                  %serverObject = %node.getServerObject();
                  if(isObject(%serverObject)
                  	%serverObject.setTransform(\"0 0 0\");
               @endtsexample
               
               @see @ref local_connections)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNetObject_isClientObject(System.String)">
            <summary>
            @brief Called to check if an object resides on the clientside.
               @return True if the object resides on the client, false otherwise.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNetObject_isServerObject(System.String)">
            <summary>
            @brief Checks if an object resides on the server.
               @return True if the object resides on the server, false otherwise.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNetObject_scopeToClient(System.String,System.String)">
            <summary>
            @brief Cause the NetObject to be forced as scoped on the specified NetConnection.
            
               @param client The connection this object will always be scoped to
            
               @tsexample
                  // Called to create new cameras in TorqueScript
                  // %this - The active GameConnection
                  // %spawnPoint - The spawn point location where we creat the camera
                  function GameConnection::spawnCamera(%this, %spawnPoint)
                  {
                  	// If this connection's camera exists
                  	if(isObject(%this.camera))
                  	{
                  		// Add it to the mission group to be cleaned up later
                  		MissionCleanup.add( %this.camera );
                  		// Force it to scope to the client side
                  		%this.camera.scopeToClient(%this);
                  	}
                  }
               @endtsexample
               
               @see clearScopeToClient())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnNetObject_setScopeAlways(System.String)">
            <summary>
            @brief Always scope this object on all connections.
            
               The object is marked as ScopeAlways and is immediately ghosted to 
               all active connections.  This function has no effect if the object 
               is not marked as Ghostable.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnParticleData_reload(System.String)">
            <summary>
            Reloads this particle.
               @tsexample
               // Get the editor's current particle
               %particle = PE_ParticleEditor.currParticle
               // Change a particle value
               %particle.setFieldValue( %propertyField, %value );
               // Reload it
               %particle.reload();
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnParticleEmitterData_reload(System.String)">
            <summary>
            Reloads the ParticleData datablocks and other fields used by this emitter.
               @tsexample
               // Get the editor's current particle emitter
               %emitter = PE_EmitterEditor.currEmitter
               // Change a field value
               %emitter.setFieldValue( %propertyField, %value );
               // Reload this emitter
               %emitter.reload();
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnParticleEmitterNode_setActive(System.String,System.Boolean)">
            <summary>
            Turns the emitter on or off.
               @param active New emitter state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnParticleEmitterNode_setEmitterDataBlock(System.String,System.String)">
            <summary>
            Assigns the datablock for this emitter node.
               @param emitterDatablock ParticleEmitterData datablock to assign
               @tsexample
               // Assign a new emitter datablock
               %emitter.setEmitterDatablock( %emitterDatablock );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPathCamera_popFront(System.String)">
            <summary>
            Removes the knot at the front of the camera's path.
            													@tsexample
            														// Remove the first knot in the camera's path.
            														%pathCamera.popFront();
            													@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPathCamera_pushBack(System.String,System.String,System.Single,System.String,System.String)">
            <summary>
            Normal, Linear), 
            											      @brief Adds a new knot to the back of a path camera's path.
            													@param transform Transform for the new knot.  In the form of \"x y z ax ay az aa\" such as returned by SceneObject::getTransform()
            													@param speed Speed setting for this knot.
            													@param type Knot type (Normal, Position Only, Kink).
            													@param path %Path type (Linear, Spline).
            													@tsexample
            														// Transform vector for new knot. (Pos_X Pos_Y Pos_Z Rot_X Rot_Y Rot_Z Angle)
            														%transform = \"15.0 5.0 5.0 1.4 1.0 0.2 1.0\"
            														// Speed setting for knot.
            														%speed = \"1.0\"
            														// Knot type. (Normal, Position Only, Kink)
            														%type = \"Normal\";
            														// Path Type. (Linear, Spline)
            														%path = \"Linear\";
            														// Inform the path camera to add a new knot to the back of its path
            														%pathCamera.pushBack(%transform,%speed,%type,%path);
            													@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPathCamera_pushFront(System.String,System.String,System.Single,System.String,System.String)">
            <summary>
            Normal, Linear), 
            											      @brief Adds a new knot to the front of a path camera's path.
            													@param transform Transform for the new knot. In the form of \"x y z ax ay az aa\" such as returned by SceneObject::getTransform()
            													@param speed Speed setting for this knot.
            													@param type Knot type (Normal, Position Only, Kink).
            													@param path %Path type (Linear, Spline).
            													@tsexample
            														// Transform vector for new knot. (Pos_X,Pos_Y,Pos_Z,Rot_X,Rot_Y,Rot_Z,Angle)
            														%transform = \"15.0 5.0 5.0 1.4 1.0 0.2 1.0\"
            														// Speed setting for knot.
            														%speed = \"1.0\";
            														// Knot type. (Normal, Position Only, Kink)
            														%type = \"Normal\";
            														// Path Type. (Linear, Spline)
            														%path = \"Linear\";
            														// Inform the path camera to add a new knot to the front of its path
            														%pathCamera.pushFront(%transform, %speed, %type, %path);
            													@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPathCamera_reset(System.String,System.Single)">
            <summary>
            @brief Clear the camera's path and set the camera's current transform as the start of the new path.
                                                   What specifically occurs is a new knot is created from the camera's current transform.  Then the current path 
                                                   is cleared and the new knot is pushed onto the path.  Any previous target is cleared and the camera's movement 
                                                   state is set to Forward.  The camera is now ready for a new path to be defined.
            													@param speed Speed for the camera to move along its path after being reset.
            													@tsexample
            														//Determine the new movement speed of this camera. If not set, the speed will default to 1.0.
            														%speed = \"0.50\";
            														// Inform the path camera to start a new path at
                                                      // the camera's current position, and set the new 
                                                      // path's speed value.
            														%pathCamera.reset(%speed);
                                                   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPathCamera_setPosition(System.String,System.Single)">
            <summary>
            Set the current position of the camera along the path.
            													@param position Position along the path, from 0.0 (path start) - 1.0 (path end), to place the camera.
            													@tsexample
                                                      // Set the camera on a position along its path from 0.0 - 1.0.
            														%position = \"0.35\";
            														// Force the pathCamera to its new position along the path.
            														%pathCamera.setPosition(%position);
            													@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPathCamera_setState(System.String,System.String)">
            <summary>
            forward), Set the movement state for this path camera.
            													@param newState New movement state type for this camera. Forward, Backward or Stop.
            													@tsexample
            														// Set the state type (forward, backward, stop).
                                                      // In this example, the camera will travel from the first node
                                                      // to the last node (or target if given with setTarget())
            														%state = \"forward\";
            														// Inform the pathCamera to change its movement state to the defined value.
            														%pathCamera.setState(%state);
            													@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPathCamera_setTarget(System.String,System.Single)">
            <summary>
            @brief Set the movement target for this camera along its path.
                                                   The camera will attempt to move along the path to the given target in the direction provided 
                                                   by setState() (the default is forwards).  Once the camera moves past this target it will come 
                                                   to a stop, and the target state will be cleared.
            													@param position Target position, between 0.0 (path start) and 1.0 (path end), for the camera to move to along its path.
            													@tsexample
                                                      // Set the position target, between 0.0 (path start) and 1.0 (path end), for this camera to move to.
            														%position = \"0.50\";
            														// Inform the pathCamera of the new target position it will move to.
            														%pathCamera.setTarget(%position);
            													@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPhysicalZone_activate(System.String)">
            <summary>
            Activate the physical zone's effects.
            													@tsexample
            														// Activate effects for a specific physical zone.
            														%thisPhysicalZone.activate();
            													@endtsexample
            													@ingroup Datablocks
            				  )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPhysicalZone_deactivate(System.String)">
            <summary>
            Deactivate the physical zone's effects.
            													@tsexample
            														// Deactivate effects for a specific physical zone.
            														%thisPhysicalZone.deactivate();
            													@endtsexample
            													@ingroup Datablocks
            				  )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPhysicsForce_attach(System.String,System.String,System.String,System.Single)">
            <summary>
            @brief Attempts to associate the PhysicsForce with a PhysicsBody.
               Performs a physics ray cast of the provided length and direction. The %PhysicsForce  
               will attach itself to the first dynamic PhysicsBody the ray collides with. 
               On every tick, the attached body will be attracted towards the position of the %PhysicsForce.
               A %PhysicsForce can only be attached to one body at a time.
               @note To determine if an %attach was successful, check isAttached() immediately after 
               calling this function.n)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPhysicsForce_detach(System.String,System.String)">
            <summary>
            @brief Disassociates the PhysicsForce from any attached PhysicsBody.
               @param force Optional force to apply to the attached PhysicsBody 
               before detaching.
               @note Has no effect if the %PhysicsForce is not attached to anything.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPhysicsForce_isAttached(System.String)">
            <summary>
            @brief Returns true if the %PhysicsForce is currently attached to an object.
               @see PhysicsForce::attach())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPhysicsShape_destroy(System.String)">
            <summary>
            @brief Disables rendering and physical simulation.
               Calling destroy() will also spawn any explosions, debris, and/or destroyedShape 
               defined for it, as well as remove it from the scene graph.
               Destroyed objects are only created on the server. Ghosting will later update the client.
               @note This does not actually delete the PhysicsShape. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPhysicsShape_isDestroyed(System.String)">
            <summary>
            @brief Returns if a PhysicsShape has been destroyed or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPhysicsShape_restore(System.String)">
            <summary>
            @brief Restores the shape to its state before being destroyed.
               Re-enables rendering and physical simulation on the object and 
               adds it to the client's scene graph. 
               Has no effect if the shape is not destroyed.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPlayer_allowAllPoses(System.String)">
            <summary>
            @brief Allow all poses a chance to occur.
               This method resets any poses that have manually been blocked from occuring.  
               This includes the regular pose states such as sprinting, crouch, being prone 
               and swimming.  It also includes being able to jump and jet jump.  While this 
               is allowing these poses to occur it doesn't mean that they all can due to other 
               conditions.  We're just not manually blocking them from being allowed.
               @see allowJumping()
               @see allowJetJumping()
               @see allowSprinting()
               @see allowCrouching()
               @see allowProne()
               @see allowSwimming() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPlayer_allowCrouching(System.String,System.Boolean)">
            <summary>
            @brief Set if the Player is allowed to crouch.
               The default is to allow crouching unless there are other environmental concerns 
               that prevent it.  This method is mainly used to explicitly disallow crouching 
               at any time.
               @param state Set to true to allow crouching, false to disable it.
               @see allowAllPoses() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPlayer_allowJetJumping(System.String,System.Boolean)">
            <summary>
            @brief Set if the Player is allowed to jet jump.
               The default is to allow jet jumping unless there are other environmental concerns 
               that prevent it.  This method is mainly used to explicitly disallow jet jumping 
               at any time.
               @param state Set to true to allow jet jumping, false to disable it.
               @see allowAllPoses() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPlayer_allowJumping(System.String,System.Boolean)">
            <summary>
            @brief Set if the Player is allowed to jump.
               The default is to allow jumping unless there are other environmental concerns 
               that prevent it.  This method is mainly used to explicitly disallow jumping 
               at any time.
               @param state Set to true to allow jumping, false to disable it.
               @see allowAllPoses() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPlayer_allowProne(System.String,System.Boolean)">
            <summary>
            @brief Set if the Player is allowed to go prone.
               The default is to allow being prone unless there are other environmental concerns 
               that prevent it.  This method is mainly used to explicitly disallow going prone 
               at any time.
               @param state Set to true to allow being prone, false to disable it.
               @see allowAllPoses() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPlayer_allowSprinting(System.String,System.Boolean)">
            <summary>
            @brief Set if the Player is allowed to sprint.
               The default is to allow sprinting unless there are other environmental concerns 
               that prevent it.  This method is mainly used to explicitly disallow sprinting 
               at any time.
               @param state Set to true to allow sprinting, false to disable it.
               @see allowAllPoses() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPlayer_allowSwimming(System.String,System.Boolean)">
            <summary>
            @brief Set if the Player is allowed to swim.
               The default is to allow swimming unless there are other environmental concerns 
               that prevent it.  This method is mainly used to explicitly disallow swimming 
               at any time.
               @param state Set to true to allow swimming, false to disable it.
               @see allowAllPoses() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPlayer_checkDismountPoint(System.String,System.String,System.String)">
            <summary>
            @brief Check if it is safe to dismount at this position.
            
               Internally this method casts a ray from oldPos to pos to determine if it hits the 
               terrain, an interior object, a water object, another player, a static shape, 
               a vehicle (exluding the one currently mounted), or physical zone.  If this ray 
               is in the clear, then the player's bounding box is also checked for a collision at 
               the pos position.  If this displaced bounding box is also in the clear, then 
               checkDismountPoint() returns true.
            
               @param oldPos The player's current position
               @param pos The dismount position to check
               @return True if the dismount position is clear, false if not
               
               @note The player must be already mounted for this method to not assert.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPlayer_clearControlObject(System.String)">
            <summary>
            @brief Clears the player's current control object.
               Returns control to the player. This internally calls 
               Player::setControlObject(0).
               @tsexample
            		%player.clearControlObject();
                  echo(%player.getControlObject()); //-- Returns 0, player assumes control
                  %player.setControlObject(%vehicle);
                  echo(%player.getControlObject()); //-- Returns %vehicle, player controls the vehicle now.
            	@endtsexample
               @note If the player does not have a control object, the player will receive all moves 
               from its GameConnection.  If you're looking to remove control from the player itself 
               (i.e. stop sending moves to the player) use GameConnection::setControlObject() to transfer 
               control to another object, such as a camera.
               @see setControlObject()
               @see getControlObject()
               @see GameConnection::setControlObject())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPlayer_getControlObject(System.String)">
            <summary>
            @brief Get the current object we are controlling.
               @return ID of the ShapeBase object we control, or 0 if not controlling an 
               object.
               @see setControlObject()
               @see clearControlObject())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPlayer_getDamageLocation(System.String,System.String)">
            <summary>
            @brief Get the named damage location and modifier for a given world position.
            
               the Player object can simulate different hit locations based on a pre-defined set 
               of PlayerData defined percentages.  These hit percentages divide up the Player's 
               bounding box into different regions.  The diagram below demonstrates how the various 
               PlayerData properties split up the bounding volume:
            
               img src=\"images/player_damageloc.png\">
            
               While you may pass in any world position and getDamageLocation() will provide a best-fit 
               location, you should be aware that this can produce some interesting results.  For example, 
               any position that is above PlayerData::boxHeadPercentage will be considered a 'head' hit, even 
               if the world position is high in the sky.  Therefore it may be wise to keep the passed in point 
               to somewhere on the surface of, or within, the Player's bounding volume.
            
               @note This method will not return an accurate location when the player is 
               prone or swimming.
            
               @param pos A world position for which to retrieve a body region on this player.
            
               @return a string containing two words (space separated strings), where the 
               first is a location and the second is a modifier.
            
               Posible locations:ul>
               li>head/li>
               li>torso/li>
               li>legs/li>/ul>
            
               Head modifiers:ul>
               li>left_back/li>
               li>middle_back/li>
               li>right_back/li>
               li>left_middle/li>
               li>middle_middle/li>
               li>right_middle/li>
               li>left_front/li>
               li>middle_front/li>
               li>right_front/li>/ul>
            
               Legs/Torso modifiers:ul>
               li>front_left/li>
               li>front_right/li>
               li>back_left/li>
               li>back_right/li>/ul>
            
               @see PlayerData::boxHeadPercentage
               @see PlayerData::boxHeadFrontPercentage
               @see PlayerData::boxHeadBackPercentage
               @see PlayerData::boxHeadLeftPercentage
               @see PlayerData::boxHeadRightPercentage
               @see PlayerData::boxTorsoPercentage
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPlayer_getNumDeathAnimations(System.String)">
            <summary>
            @brief Get the number of death animations available to this player.
               Death animations are assumed to be named death1-N using consecutive indices. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPlayer_getPose(System.String)">
            <summary>
            @brief Get the name of the player's current pose.
            
               The pose is one of the following:ul>
               li>Stand - Standard movement pose./li>
               li>Sprint - Sprinting pose./li>
               li>Crouch - Crouch pose./li>
               li>Prone - Prone pose./li>
               li>Swim - Swimming pose./li>/ul>
            
               @return The current pose; one of: \"Stand\", \"Sprint\", \"Crouch\", \"Prone\", \"Swim\" )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPlayer_getState(System.String)">
            <summary>
            @brief Get the name of the player's current state.
            
               The state is one of the following:ul>
               li>Dead - The Player is dead./li>
               li>Mounted - The Player is mounted to an object such as a vehicle./li>
               li>Move - The Player is free to move.  The usual state./li>
               li>Recover - The Player is recovering from a fall.  See PlayerData::recoverDelay./li>/ul>
            
               @return The current state; one of: \"Dead\", \"Mounted\", \"Move\", \"Recover\" )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPlayer_setActionThread(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            @brief Set the main action sequence to play for this player.
               @param name Name of the action sequence to set
               @param hold Set to false to get a callback on the datablock when the sequence ends (PlayerData::animationDone()).  
               When set to true no callback is made.
               @param fsp True if first person and none of the spine nodes in the shape should animate.  False will allow the shape's 
               spine nodes to animate.
               @return True if succesful, false if failed
               
               @note The spine nodes for the Player's shape are named as follows:ul>
               li>Bip01 Pelvis/li>
               li>Bip01 Spine/li>
               li>Bip01 Spine1/li>
               li>Bip01 Spine2/li>
               li>Bip01 Neck/li>
               li>Bip01 Head/li>/ul>
               
               You cannot use setActionThread() to have the Player play one of the motion 
               determined action animation sequences.  These sequences are chosen based on how 
               the Player moves and the Player's current pose.  The names of these sequences are:ul>
               li>root/li>
               li>run/li>
               li>side/li>
               li>side_right/li>
               li>crouch_root/li>
               li>crouch_forward/li>
               li>crouch_backward/li>
               li>crouch_side/li>
               li>crouch_right/li>
               li>prone_root/li>
               li>prone_forward/li>
               li>prone_backward/li>
               li>swim_root/li>
               li>swim_forward/li>
               li>swim_backward/li>
               li>swim_left/li>
               li>swim_right/li>
               li>fall/li>
               li>jump/li>
               li>standjump/li>
               li>land/li>
               li>jet/li>/ul>
               
               If the player moves in any direction then the animation sequence set using this 
               method will be cancelled and the chosen mation-based sequence will take over.  This makes 
               great for times when the Player cannot move, such as when mounted, or when it doesn't matter 
               if the action sequence changes, such as waving and saluting.
               
               @tsexample
                  // Place the player in a sitting position after being mounted
                  %player.setActionThread( \"sitting\", true, true );
            	@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPlayer_setArmThread(System.String,System.String)">
            <summary>
            @brief Set the sequence that controls the player's arms (dynamically adjusted 
               to match look direction).
               @param name Name of the sequence to play on the player's arms.
               @return true if successful, false if failed.
               @note By default the 'look' sequence is used, if available.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPlayer_setControlObject(System.String,System.String)">
            <summary>
            @brief Set the object to be controlled by this player
            
               It is possible to have the moves sent to the Player object from the 
               GameConnection to be passed along to another object.  This happens, for example 
               when a player is mounted to a vehicle.  The move commands pass through the Player 
               and on to the vehicle (while the player remains stationary within the vehicle).  
               With setControlObject() you can have the Player pass along its moves to any object.  
               One possible use is for a player to move a remote controlled vehicle.  In this case 
               the player does not mount the vehicle directly, but still wants to be able to control it.
            
               @param obj Object to control with this player
               @return True if the object is valid, false if not
            
               @see getControlObject()
               @see clearControlObject()
               @see GameConnection::setControlObject())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPortal_isExteriorPortal(System.String)">
            <summary>
            Test whether the portal connects interior zones to the outdoor zone.
               @return True if the portal is an exterior portal. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPortal_isInteriorPortal(System.String)">
            <summary>
            Test whether the portal connects interior zones only.
               @return True if the portal is an interior portal. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPostEffect_clearShaderMacros(System.String)">
            <summary>
            Remove all shader macros. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPostEffect_disable(System.String)">
            <summary>
            Disables the effect. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPostEffect_dumpShaderDisassembly(System.String)">
            <summary>
            Dumps this PostEffect shader's disassembly to a temporary text file.
               @return Full path to the dumped file or an empty string if failed. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPostEffect_enable(System.String)">
            <summary>
            Enables the effect. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPostEffect_getAspectRatio(System.String)">
            <summary>
            @return Width over height of the backbuffer. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPostEffect_isEnabled(System.String)">
            <summary>
            @return True if the effect is enabled. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPostEffect_reload(System.String)">
            <summary>
            Reloads the effect shader and textures. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPostEffect_removeShaderMacro(System.String,System.String)">
            <summary>
            Remove a shader macro. This will usually be called within the preProcess callback.
               @param key Macro to remove. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPostEffect_setShaderConst(System.String,System.String,System.String)">
            <summary>
            Sets the value of a uniform defined in the shader. This will usually 
               be called within the setShaderConsts callback. Array type constants are 
               not supported.    
               @param name Name of the constanst, prefixed with '$'. 
               @param value Value to set, space seperate values with more than one element.
               @tsexample
               function MyPfx::setShaderConsts( %this )
               {
                  // example float4 uniform
                  %this.setShaderConst( \"$colorMod\", \"1.0 0.9 1.0 1.0\" );
                  // example float1 uniform
                  %this.setShaderConst( \"$strength\", \"3.0\" );
                  // example integer uniform
                  %this.setShaderConst( \"$loops\", \"5\" );
               }
               @endtsexample )   
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPostEffect_setShaderMacro(System.String,System.String,System.String)">
            <summary>
             ),
               Adds a macro to the effect's shader or sets an existing one's value. 
               This will usually be called within the onAdd or preProcess callback.
               @param key lval of the macro.
               @param value rval of the macro, or may be empty.
               @tsexample
               function MyPfx::onAdd( %this )
               {
                  %this.setShaderMacro( \"NUM_SAMPLES\", \"10\" );
                  %this.setShaderMacro( \"HIGH_QUALITY_MODE\" );
                  
                  // In the shader looks like... 
                  // #define NUM_SAMPLES 10
                  // #define HIGH_QUALITY_MODE
               }
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPostEffect_setTexture(System.String,System.Int32,System.String)">
            <summary>
            This is used to set the texture file and load the texture on a running effect. 
               If the texture file is not different from the current file nothing is changed.  If 
               the texture cannot be found a null texture is assigned.    
               @param index The texture stage index. 
               @param filePath The file name of the texture to set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPostEffect_toggle(System.String)">
            <summary>
            Toggles the effect between enabled / disabled.
               @return True if effect is enabled. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPrecipitation_modifyStorm(System.String,System.Single,System.Single)">
            <summary>
            Smoothly change the maximum number of drops in the effect (from current 
               value to #numDrops * @a percentage).
               This method can be used to simulate a storm building or fading in intensity 
               as the number of drops in the Precipitation box changes.
               @param percentage New maximum number of drops value (as a percentage of 
               #numDrops). Valid range is 0-1.
               @param seconds Length of time (in seconds) over which to increase the drops 
               percentage value. Set to 0 to change instantly.
               @tsexample
               %percentage = 0.5;  // The percentage, from 0 to 1, of the maximum drops to display
               %seconds = 5.0;     // The length of time over which to make the change.
               %precipitation.modifyStorm( %percentage, %seconds );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPrecipitation_setPercentage(System.String,System.Single)">
            <summary>
            Sets the maximum number of drops in the effect, as a percentage of #numDrops.
               The change occurs instantly (use modifyStorm() to change the number of drops 
               over a period of time.
               @param percentage New maximum number of drops value (as a percentage of 
               #numDrops). Valid range is 0-1.
               @tsexample
               %percentage = 0.5;  // The percentage, from 0 to 1, of the maximum drops to display
               %precipitation.setPercentage( %percentage );
               @endtsexample
               @see modifyStorm )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnPrecipitation_setTurbulence(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Smoothly change the turbulence parameters over a period of time.
               @param max New #maxTurbulence value. Set to 0 to disable turbulence.
               @param speed New #turbulenceSpeed value.
               @param seconds Length of time (in seconds) over which to interpolate the 
               turbulence settings. Set to 0 to change instantly.
               @tsexample
               %turbulence = 0.5;     // Set the new turbulence value. Set to 0 to disable turbulence.
               %speed = 5.0;          // The new speed of the turbulance effect.
               %seconds = 5.0;        // The length of time over which to make the change.
               %precipitation.setTurbulence( %turbulence, %speed, %seconds );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnProjectile_presimulate(System.String,System.Single)">
            <summary>
            @brief Updates the projectile's positional and collision information.
                                                   This function will first delete the projectile if it is a server object and is outside it's ProjectileData::lifetime. 
                                                   Also responsible for applying gravity, determining collisions, triggering explosions, 
                                                   emitting trail particles, and calculating bounces if necessary.
            									            @param seconds Amount of time, in seconds since the simulation's start, to advance.
            									            @tsexample
            									               // Tell the projectile to process a simulation event, and provide the amount of time
            										            // that has passed since the simulation began.
            										            %seconds = 2.0;
            										            %projectile.presimulate(%seconds);
            									            @endtsexample
                                                   @note This function is not called if the SimObject::hidden is true.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnProximityMine_explode(System.String)">
            <summary>
            @brief Manually cause the mine to explode.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnRenderBinManager_getBinType(System.String)">
            <summary>
            Returns the bin type string. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnRenderMeshExample_postApply(System.String)">
            <summary>
            A utility method for forcing a network update.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnRenderPassManager_addManager(System.String,System.String)">
            <summary>
            Add as a render bin manager to the pass. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnRenderPassManager_getManager(System.String,System.Int32)">
            <summary>
            Returns the render bin manager at the index or null if the index is out of range. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnRenderPassManager_getManagerCount(System.String)">
            <summary>
            Returns the total number of bin managers. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnRenderPassManager_removeManager(System.String,System.String)">
            <summary>
            Removes a render bin manager. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnRenderPassStateToken_disable(System.String)">
            <summary>
            @brief Disables the token.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnRenderPassStateToken_enable(System.String)">
            <summary>
            @brief Enables the token. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnRenderPassStateToken_toggle(System.String)">
            <summary>
            @brief Toggles the token from enabled to disabled or vice versa. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnRigidShape_forceClientTransform(System.String)">
            <summary>
            @brief Forces the client to jump to the RigidShape's transform rather then warp to it.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnRigidShape_freezeSim(System.String,System.Boolean)">
            <summary>
            @brief Enables or disables the physics simulation on the RigidShape object.
               @param isFrozen Boolean frozen state to set the object.
               @tsexample
               // Define the frozen state.
               %isFrozen = \"true\";
               // Inform the object of the defined frozen state
               %thisRigidShape.freezeSim(%isFrozen);
               @endtsexample
               @see ShapeBaseData)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnRigidShape_reset(System.String)">
            <summary>
            @brief Clears physic forces from the shape and sets it at rest.
               @tsexample
               // Inform the RigidShape object to reset.
               %thisRigidShape.reset();
               @endtsexample
               @see ShapeBaseData)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnRiver_regenerate(System.String)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               Force River to recreate its geometry.
                               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnRiver_setBatchSize(System.String,System.Single)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               BatchSize is not currently used.
                               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnRiver_setMaxDivisionSize(System.String,System.Single)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               @see SubdivideLength field.
                               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnRiver_setMetersPerSegment(System.String,System.Single)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               @see SegmentLength field.
                               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnRiver_setNodeDepth(System.String,System.Int32,System.Single)">
            <summary>
            Intended as a helper to developers and editor scripts.
                               Sets the depth in meters of a particular node.
                               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnScatterSky_applyChanges(System.String)">
            <summary>
            Apply a full network update of all fields to all clients.
                              )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_getEulerRotation(System.String)">
            <summary>
            Get Euler rotation of this object.
               @return the orientation of the object in the form of rotations around the 
               X, Y and Z axes in degrees. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_getForwardVector(System.String)">
            <summary>
            Get the direction this object is facing.
               @return a vector indicating the direction this object is facing.
               @note This is the object's y axis. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_getInverseTransform(System.String)">
            <summary>
            Get the object's inverse transform.
               @return the inverse transform of the object )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_getMountedObject(System.String,System.Int32)">
            <summary>
            Get the object mounted at a particular slot.
               @param slot mount slot index to query
               @return ID of the object mounted in the slot, or 0 if no object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_getMountedObjectCount(System.String)">
            <summary>
            Get the number of objects mounted to us.
               @return the number of mounted objects. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_getMountedObjectNode(System.String,System.Int32)">
            <summary>
            @brief Get the mount node index of the object mounted at our given slot.
               @param slot mount slot index to query
               @return index of the mount node used by the object mounted in this slot. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_getMountNodeObject(System.String,System.Int32)">
            <summary>
            @brief Get the object mounted at our given node index.
               @param node mount node index to query
               @return ID of the first object mounted at the node, or 0 if none found. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_getObjectBox(System.String)">
            <summary>
            Get the object's bounding box (relative to the object's origin).
               @return six fields, two Point3Fs, containing the min and max points of the 
               objectbox. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_getObjectMount(System.String)">
            <summary>
            @brief Get the object we are mounted to.
               @return the SimObjectID of the object we're mounted to, or 0 if not mounted. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_getPosition(System.String)">
            <summary>
            Get the object's world position.
               @return the current world position of the object )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_getRightVector(System.String)">
            <summary>
            Get the right vector of the object.
               @return a vector indicating the right direction of this object.
               @note This is the object's x axis. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_getScale(System.String)">
            <summary>
            Get the object's scale.
               @return object scale as a Point3F )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_getTransform(System.String)">
            <summary>
            Get the object's transform.
               @return the current transform of the object )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_getType(System.String)">
            <summary>
            Return the type mask for this object.
               @return The numeric type mask for the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_getUpVector(System.String)">
            <summary>
            Get the up vector of the object.
               @return a vector indicating the up direction of this object.
               @note This is the object's z axis. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_getWorldBox(System.String)">
            <summary>
            Get the object's world bounding box.
               @return six fields, two Point3Fs, containing the min and max points of the 
               worldbox. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_getWorldBoxCenter(System.String)">
            <summary>
            Get the center of the object's world bounding box.
               @return the center of the world bounding box for this object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_isGlobalBounds(System.String)">
            <summary>
            Check if this object has a global bounds set.
               If global bounds are set to be true, then the object is assumed to have an 
               infinitely large bounding box for collision and rendering purposes.
               @return true if the object has a global bounds. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_isMounted(System.String)">
            <summary>
            @brief Check if we are mounted to another object.
               @return true if mounted to another object, false if not mounted. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_mountObject(System.String,System.String,System.Int32,System.String)">
            <summary>
            @brief Mount objB to this object at the desired slot with optional transform.
            
               @param objB  Object to mount onto us
               @param slot  Mount slot ID
               @param txfm (optional) mount offset transform
               @return true if successful, false if failed (objB is not valid) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_setScale(System.String,System.String)">
            <summary>
            Set the object's scale.
               @param scale object scale to set )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_setTransform(System.String,System.String)">
            <summary>
            Set the object's transform (orientation and position).
               @param txfm object transform to set )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_TickCounterAdd(System.String,System.String,System.UInt32)">
            <summary>
            @brief Adds a new counter or updates an existing counter to be tracked via ticks.
               @return true if successful, false if failed )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_TickCounterGetInterval(System.String,System.String)">
            <summary>
            @brief returns the interval for a counter.
               @return true if successful, false if failed )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_TickCounterHas(System.String,System.String)">
            <summary>
            @brief Checks to see if the counter exists.
               @return true if successful, false if failed )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_TickCounterRemove(System.String,System.String)">
            <summary>
            @brief Removes a counter to be tracked via ticks.
               @return true if successful, false if failed )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_TickCounterReset(System.String,System.String)">
            <summary>
            @brief resets the current count for a counter.
               @return true if successful, false if failed )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_TickCountersClear(System.String)">
            <summary>
            @brief Clears all counters from the object.)
               
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_TickCounterSuspend(System.String,System.String,System.Boolean)">
            <summary>
            @brief Adds a new counter to be tracked via ticks.
                )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_unmount(System.String)">
            <summary>
            Unmount us from the currently mounted object if any. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSceneObject_unmountObject(System.String,System.String)">
            <summary>
            @brief Unmount an object from ourselves.
            
               @param target object to unmount
               @return true if successful, false if failed )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnScriptTickObject_isProcessingTicks(System.String)">
            <summary>
            @brief Is this object wanting to receive tick notifications.
            
               If this object is set to receive tick notifications then its onInterpolateTick() and 
               onProcessTick() callbacks are called.
               @return True if object wants tick notifications )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnScriptTickObject_setProcessTicks(System.String,System.Boolean)">
            <summary>
            @brief Sets this object as either tick processing or not.
            
               @param tick This object's onInterpolateTick() and onProcessTick() callbacks are called if set to true.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSettings_write(System.String)">
            <summary>
            (Settings, write, bool, 2, 2, %success = settingObj.write();)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXController_getCurrentSlot(System.String)">
            <summary>
            Get the index of the playlist slot currently processed by the controller.
               @return The slot index currently being played.
               @see SFXPlayList )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXController_setCurrentSlot(System.String,System.Int32)">
            <summary>
            Set the index of the playlist slot to play by the controller.  This can be used to seek in the playlist.
               @param index Index of the playlist slot. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXEmitter_getSource(System.String)">
            <summary>
            Get the sound source object from the emitter.
               @return The sound source used by the emitter or null.
               @note This method will return null when called on the server-side SFXEmitter object.  Only client-side ghosts 
                  actually hold on to %SFXSources. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXEmitter_play(System.String)">
            <summary>
            Manually start playback of the emitter's sound.
               If this is called on the server-side object, the play command will be related to all client-side ghosts. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXEmitter_stop(System.String)">
            <summary>
            Manually stop playback of the emitter's sound.
               If this is called on the server-side object, the stop command will be related to all client-side ghosts. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXParameter_getParameterName(System.String)">
            <summary>
            Get the name of the parameter.
               @return The paramete name. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXParameter_reset(System.String)">
            <summary>
            Reset the parameter's value to its default.
               @see SFXParameter::defaultValue )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXProfile_getSoundDuration(System.String)">
            <summary>
            Return the length of the sound data in seconds.
               @return The length of the sound data in seconds or 0 if the sound referenced by the profile could not be found. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSound_getDuration(System.String)">
            <summary>
            Get the total play time (in seconds) of the sound data attached to the sound.
               @return 
               @note Be aware that for looped sounds, this will not return the total playback time of the sound. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSound_getPosition(System.String)">
            <summary>
            Get the current playback position in seconds.
               @return The current play cursor offset. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSound_isReady(System.String)">
            <summary>
            Test whether the sound data associated with the sound has been fully loaded and is ready for playback.
               For streamed sounds, this will be false during playback when the stream queue for the sound is starved and 
               waiting for data.  For buffered sounds, only an initial loading phase will potentially cause isReady to 
               return false.
               @return True if the sound is ready for playback. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSound_setPosition(System.String,System.Single)">
            <summary>
            Set the current playback position in seconds.
               If the source is currently playing, playback will jump to the new position.  If playback is stopped or paused, 
               playback will resume at the given position when play() is called.
               @param position The new position of the play cursor (in seconds). )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSource_addMarker(System.String,System.String,System.Single)">
            <summary>
            Add a notification marker called @a name at @a pos seconds of playback.
               @param name Symbolic name for the marker that will be passed to the onMarkerPassed() callback.
               @param pos Playback position in seconds when the notification should trigger.  Note that this is a soft limit and there 
                  may be a delay between the play cursor actually passing the position and the callback being triggered.
               @note For looped sounds, the marker will trigger on each iteration.
               @tsexample
               // Create a new source.
               $source = sfxCreateSource( AudioMusicLoop2D, \"art/sound/backgroundMusic\" );
               
               // Assign a class to the source.
               $source.class = \"BackgroundMusic\";
               
               // Add a playback marker at one minute into playback.
               $source.addMarker( \"first\", 60 );
               
               // Define the callback function.  This function will be called when the playback position passes the one minute mark.
               function BackgroundMusic::onMarkerPassed( %this, %markerName )
               {
                  if( %markerName $= \"first\" )
                     echo( \"Playback has passed the 60 seconds mark.\" );
               }
               
               // Play the sound.
               $source.play();
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSource_addParameter(System.String,System.String)">
            <summary>
            Attach @a parameter to the source,
               Once attached, the source will react to value changes of the given @a parameter.  Attaching a parameter 
               will also trigger an initial read-out of the parameter's current value.
               @param parameter The parameter to attach to the source. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSource_getAttenuatedVolume(System.String)">
            <summary>
            Get the final effective volume level of the source.
               This method returns the volume level as it is after source group volume modulation, fades, and distance-based 
               volume attenuation have been applied to the base volume level.
               @return The effective volume of the source.
               @ref SFXSource_volume )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSource_getFadeInTime(System.String)">
            <summary>
            Get the fade-in time set on the source.
               This will initially be SFXDescription::fadeInTime.
               @return The fade-in time set on the source in seconds.
               @see SFXDescription::fadeInTime
               @ref SFXSource_fades )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSource_getFadeOutTime(System.String)">
            <summary>
            Get the fade-out time set on the source.
               This will initially be SFXDescription::fadeOutTime.
               @return The fade-out time set on the source in seconds.
               @see SFXDescription::fadeOutTime
               @ref SFXSource_fades )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSource_getParameter(System.String,System.Int32)">
            <summary>
            Get the parameter at the given index.
               @param index Index of the parameter to fetch.  Must be 0=index=getParameterCount().
               @return The parameter at the given @a index or null if @a index is out of range.
               @tsexample
                  // Print the name ofo each parameter attached to %source.
                  %numParams = %source.getParameterCount();
                  for( %i = 0; %i  %numParams; %i ++ )
                     echo( %source.getParameter( %i ).getParameterName() );
               @endtsexample
               @see getParameterCount )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSource_getParameterCount(System.String)">
            <summary>
            Get the number of SFXParameters that are attached to the source.
               @return The number of parameters attached to the source.
               @tsexample
                  // Print the name ofo each parameter attached to %source.
                  %numParams = %source.getParameterCount();
                  for( %i = 0; %i  %numParams; %i ++ )
                     echo( %source.getParameter( %i ).getParameterName() );
               @endtsexample
               @see getParameter
               @see addParameter )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSource_getPitch(System.String)">
            <summary>
            Get the pitch scale of the source.
               Pitch determines the playback speed of the source (default: 1).
               @return The current pitch scale factor of the source.
               @see setPitch
               @see SFXDescription::pitch )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSource_getStatus(System.String)">
            <summary>
            Get the current playback status.
               @return Te current playback status )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSource_getVolume(System.String)">
            <summary>
            Get the current base volume level of the source.
               This is not the final effective volume that the source is playing at but rather the starting 
               volume level before source group modulation, fades, or distance-based volume attenuation are applied.
               @return The current base volume level.
               @see setVolume
               @see SFXDescription::volume
               @ref SFXSource_volume )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSource_isPaused(System.String)">
            <summary>
            Test whether the source is currently paused.
               @return True if the source is in paused state, false otherwise.
               @see pause
               @see getStatus
               @see SFXStatus )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSource_isPlaying(System.String)">
            <summary>
            Test whether the source is currently playing.
               @return True if the source is in playing state, false otherwise.
               @see play
               @see getStatus
               @see SFXStatus )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSource_isStopped(System.String)">
            <summary>
            Test whether the source is currently stopped.
               @return True if the source is in stopped state, false otherwise.
               @see stop
               @see getStatus
               @see SFXStatus )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSource_pause(System.String,System.Single)">
            <summary>
            Pause playback of the source.
               @param fadeOutTime Seconds for the sound to fade down to zero volume.  If -1, the SFXDescription::fadeOutTime 
                  set in the source's associated description is used.  Pass 0 to disable a fade-out effect that may be 
                  configured on the description.
                  Be aware that if a fade-out effect is used, the source will not immediately to paused state but will 
                  rather remain in playing state until the fade-out time has expired.. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSource_play(System.String,System.Single)">
            <summary>
            Start playback of the source.
               If the sound data for the source has not yet been fully loaded, there will be a delay after calling 
               play and playback will start after the data has become available.
               @param fadeInTime Seconds for the sound to reach full volume.  If -1, the SFXDescription::fadeInTime 
                  set in the source's associated description is used.  Pass 0 to disable a fade-in effect that may 
                  be configured on the description. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSource_removeParameter(System.String,System.String)">
            <summary>
            Detach @a parameter from the source.
               Once detached, the source will no longer react to value changes of the given @a parameter.
               If the parameter is not attached to the source, the method will do nothing.
               @param parameter The parameter to detach from the source. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSource_setCone(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Set up the 3D volume cone for the source.
               @param innerAngle Angle of the inner sound cone in degrees (@ref SFXDescription::coneInsideAngle).  Must be 0=innerAngle=360.
               @param outerAngle Angle of the outer sound cone in degrees (@ref SFXDescription::coneOutsideAngle).  Must be 0=outerAngle=360.
               @param outsideVolume Volume scale factor outside of outer cone (@ref SFXDescription::coneOutsideVolume).  Must be 0=outsideVolume=1.
               @note This method has no effect on the source if the source is not 3D. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSource_setFadeTimes(System.String,System.Single,System.Single)">
            <summary>
            Set the fade time parameters of the source.
               @param fadeInTime The new fade-in time in seconds.
               @param fadeOutTime The new fade-out time in seconds.
               @see SFXDescription::fadeInTime
               @see SFXDescription::fadeOutTime
               @ref SFXSource_fades )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSource_setPitch(System.String,System.Single)">
            <summary>
            Set the pitch scale of the source.
               Pitch determines the playback speed of the source (default: 1).
               @param pitch The new pitch scale factor.
               @see getPitch
               @see SFXDescription::pitch )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSource_setVolume(System.String,System.Single)">
            <summary>
            Set the base volume level for the source.
               This volume will be the starting point for source group volume modulation, fades, and distance-based 
               volume attenuation.
               @param volume The new base volume level for the source.  Must be 0>=volume=1.
               @see getVolume
               @ref SFXSource_volume )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXSource_stop(System.String,System.Single)">
            <summary>
            Stop playback of the source.
               @param fadeOutTime Seconds for the sound to fade down to zero volume.  If -1, the SFXDescription::fadeOutTime 
                  set in the source's associated description is used.  Pass 0 to disable a fade-out effect that may be 
                  configured on the description.
                  Be aware that if a fade-out effect is used, the source will not immediately transtion to stopped state but 
                  will rather remain in playing state until the fade-out time has expired. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXState_activate(System.String)">
            <summary>
            Increase the activation count on the state.
               If the state isn't already active and it is not disabled, the state will be activated.
               @see isActive
               @see deactivate )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXState_deactivate(System.String)">
            <summary>
            Decrease the activation count on the state.
               If the count reaches zero and the state was not disabled, the state will be deactivated.
               @see isActive
               @see activate )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXState_disable(System.String)">
            <summary>
            Increase the disabling count of the state.
               If the state is currently active, it will be deactivated.
               @see isDisabled )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXState_enable(System.String)">
            <summary>
            Decrease the disabling count of the state.
               If the disabling count reaches zero while the activation count is still non-zero, 
                  the state will be reactivated again.
               @see isDisabled )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXState_isActive(System.String)">
            <summary>
            Test whether the state is currently active.
               This is true when the activation count is >0 and the disabling count is =0.
               @return True if the state is currently active.
               @see activate )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSFXState_isDisabled(System.String)">
            <summary>
            Test whether the state is currently disabled.
               This is true when the disabling count of the state is non-zero.
               @return True if the state is disabled.
               @see disable )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShaderData_reload(System.String)">
            <summary>
            @brief Rebuilds all the vertex and pixel shader instances created from this ShaderData.
            
            				   @tsexample
            				   // Rebuild the shader instances from ShaderData CloudLayerShader
            				   CloudLayerShader.reload();
            				   @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_applyDamage(System.String,System.Single)">
            <summary>
            @brief Increment the current damage level by the specified amount.
            
               @param amount value to add to current damage level )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_applyImpulse(System.String,System.String,System.String)">
            <summary>
            @brief Apply an impulse to the object.
            
               @param pos world position of the impulse
               @param vec impulse momentum (velocity * mass)
               @return true )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_applyRepair(System.String,System.Single)">
            <summary>
            @brief Repair damage by the specified amount.
            
               Note that the damage level is only reduced by repairRate per tick, so it may 
               take several ticks for the total repair to complete.
            
               @param amount total repair value (subtracted from damage level over time) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_blowUp(System.String)">
            <summary>
            @brief Explodes an object into pieces.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_canCloak(System.String)">
            <summary>
            @brief Check if this object can cloak.
               @return true
               
               @note Not implemented as it always returns true.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_changeMaterial(System.String,System.String,System.String,System.String)">
            <summary>
            @brief Change one of the materials on the shape.
            
               This method changes materials per mapTo with others. The material that 
               is being replaced is mapped to unmapped_mat as a part of this transition.
            
               @note Warning, right now this only sort of works. It doesn't do a live 
               update like it should.
            
               @param mapTo the name of the material target to remap (from getTargetName)
               @param oldMat the old Material that was mapped 
               @param newMat the new Material to map
            
               @tsexample
               // remap the first material in the shape
               %mapTo = %obj.getTargetName( 0 );
               %obj.changeMaterial( %mapTo, 0, MyMaterial );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_destroyThread(System.String,System.Int32)">
            <summary>
            @brief Destroy an animation thread, which prevents it from playing.
            
               @param slot thread slot to destroy
               @return true if successful, false if failed
               
               @see playThread )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_dumpMeshVisibility(System.String)">
            <summary>
            @brief Print a list of visible and hidden meshes in the shape to the console 
               for debugging purposes.
               @note Only in a SHIPPING build.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getAIRepairPoint(System.String)">
            <summary>
            @brief Get the position at which the AI should stand to repair things.
            
               If the shape defines a node called \"AIRepairNode\", this method will 
               return the current world position of that node, otherwise \"0 0 0\".
               @return the AI repair position )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getCameraFov(System.String)">
            <summary>
            @brief Returns the vertical field of view in degrees for this object if used as a camera.
            
               @return current FOV as defined in ShapeBaseData::cameraDefaultFov )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getControllingClient(System.String)">
            <summary>
            @brief Get the client (if any) that controls this object.
            
               The controlling client is the one that will send moves to us to act on.
            
               @return the ID of the controlling GameConnection, or 0 if this object is not 
               controlled by any client.
               
               @see GameConnection)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getControllingObject(System.String)">
            <summary>
            @brief Get the object (if any) that controls this object.
            
               @return the ID of the controlling ShapeBase object, or 0 if this object is 
               not controlled by another object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getDamageFlash(System.String)">
            <summary>
            @brief Get the damage flash level.
            
               @return flash level
            
               @see setDamageFlash )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getDamageLevel(System.String)">
            <summary>
            @brief Get the object's current damage level.
            
               @return damage level
               
               @see setDamageLevel())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getDamagePercent(System.String)">
            <summary>
            @brief Get the object's current damage level as a percentage of maxDamage.
            
               @return damageLevel / datablock.maxDamage
               
               @see setDamageLevel())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getDamageState(System.String)">
            <summary>
            @brief Get the object's damage state.
            
               @return the damage state; one of \"Enabled\", \"Disabled\", \"Destroyed\"
               
               @see setDamageState())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getDefaultCameraFov(System.String)">
            <summary>
            @brief Returns the default vertical field of view in degrees for this object if used as a camera.
            
               @return Default FOV )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getEnergyLevel(System.String)">
            <summary>
            @brief Get the object's current energy level.
            
               @return energy level
               
               @see setEnergyLevel())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getEnergyPercent(System.String)">
            <summary>
            @brief Get the object's current energy level as a percentage of maxEnergy.
               @return energyLevel / datablock.maxEnergy
            
               @see setEnergyLevel())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getEyePoint(System.String)">
            <summary>
            @brief Get the position of the 'eye' for this object.
            
               If the object model has a node called 'eye', this method will return that 
               node's current world position, otherwise it will return the object's current 
               world position.
            
               @return the eye position for this object
            
               @see getEyeVector
               @see getEyeTransform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getEyeTransform(System.String)">
            <summary>
            @brief Get the 'eye' transform for this object.
            
               If the object model has a node called 'eye', this method will return that 
               node's current transform, otherwise it will return the object's current 
               transform.
            
               @return the eye transform for this object
            
               @see getEyeVector
               @see getEyePoint )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getEyeVector(System.String)">
            <summary>
            @brief Get the forward direction of the 'eye' for this object.
            
               If the object model has a node called 'eye', this method will return that 
               node's current forward direction vector, otherwise it will return the 
               object's current forward direction vector.
            
               @return the eye vector for this object
            
               @see getEyePoint
               @see getEyeTransform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getImageAltTrigger(System.String,System.Int32)">
            <summary>
            @brief Get the alt trigger state of the Image mounted in the specified slot.
            
               @param slot Image slot to query
               @return the Image's current alt trigger state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getImageAmmo(System.String,System.Int32)">
            <summary>
            @brief Get the ammo state of the Image mounted in the specified slot.
            
               @param slot Image slot to query
               @return the Image's current ammo state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getImageGenericTrigger(System.String,System.Int32,System.Int32)">
            <summary>
            @brief Get the generic trigger state of the Image mounted in the specified slot.
            
               @param slot Image slot to query
               @param trigger Generic trigger number
               @return the Image's current generic trigger state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getImageLoaded(System.String,System.Int32)">
            <summary>
            @brief Get the loaded state of the Image mounted in the specified slot.
            
               @param slot Image slot to query
               @return the Image's current loaded state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getImageScriptAnimPrefix(System.String,System.Int32)">
            <summary>
            @brief Get the script animation prefix of the Image mounted in the specified slot.
            
               @param slot Image slot to query
               @return the Image's current script animation prefix )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getImageSkinTag(System.String,System.Int32)">
            <summary>
            @brief Get the skin tag ID for the Image mounted in the specified slot.
            
               @param slot Image slot to query
               @return the skinTag value passed to mountImage when the image was 
               mounted )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getImageState(System.String,System.Int32)">
            <summary>
            @brief Get the name of the current state of the Image in the specified slot.
            
               @param slot Image slot to query
               @return name of the current Image state, or \"Error\" if slot is invalid )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getImageTarget(System.String,System.Int32)">
            <summary>
            @brief Get the target state of the Image mounted in the specified slot.
            
               @param slot Image slot to query
               @return the Image's current target state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getImageTrigger(System.String,System.Int32)">
            <summary>
            @brief Get the trigger state of the Image mounted in the specified slot.
            
               @param slot Image slot to query
               @return the Image's current trigger state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getLookAtPoint(System.String,System.Single,System.UInt32)">
            <summary>
            @brief Get the world position this object is looking at.
            
               Casts a ray from the eye and returns information about what the ray hits.
            
               @param distance maximum distance of the raycast
               @param typeMask typeMask of objects to include for raycast collision testing
               @return look-at information as \"Object HitX HitY HitZ [Material]\" or empty string for no hit
            
               @tsexample
               %lookat = %obj.getLookAtPoint();
               echo( \"Looking at: \" @ getWords( %lookat, 1, 3 ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getMaxDamage(System.String)">
            <summary>
            Get the object's maxDamage level.  
               @return datablock.maxDamage)    
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getModelFile(System.String)">
            <summary>
            @brief Get the model filename used by this shape.
            
               @return the shape filename )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getMountedImage(System.String,System.Int32)">
            <summary>
            @brief Get the Image mounted in the specified slot.
            
               @param slot Image slot to query
               @return ID of the ShapeBaseImageData datablock mounted in the slot, or 0 
               if no Image is mounted there. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getMountSlot(System.String,System.String)">
            <summary>
            @brief Get the first slot the given datablock is mounted to on this object.
            
               @param image ShapeBaseImageData datablock to query
               @return index of the first slot the Image is mounted in, or -1 if the Image 
               is not mounted in any slot on this object. )
            
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getMuzzlePoint(System.String,System.Int32)">
            <summary>
            @brief Get the muzzle position of the Image mounted in the specified slot.
            
               If the Image shape contains a node called 'muzzlePoint', then the muzzle 
               position is the position of that node in world space. If no such node 
               is specified, the slot's mount node is used instead.
            
               @param slot Image slot to query
               @return the muzzle position, or \"0 0 0\" if the slot is invalid )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getMuzzleVector(System.String,System.Int32)">
            <summary>
            @brief Get the muzzle vector of the Image mounted in the specified slot.
            
               If the Image shape contains a node called 'muzzlePoint', then the muzzle 
               vector is the forward direction vector of that node's transform in world 
               space. If no such node is specified, the slot's mount node is used 
               instead.
            
               If the correctMuzzleVector flag (correctMuzzleVectorTP in 3rd person) 
               is set in the Image, the muzzle vector is computed to point at whatever 
               object is right in front of the object's 'eye' node.
            
               @param slot Image slot to query
               @return the muzzle vector, or \"0 1 0\" if the slot is invalid )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getPendingImage(System.String,System.Int32)">
            <summary>
            @brief Get the Image that will be mounted next in the specified slot.
            
               Calling mountImage when an Image is already mounted does one of two things: 
               ol>li>Mount the new Image immediately, the old Image is discarded and 
               whatever state it was in is ignored./li>
               li>If the current Image state does not allow Image changes, the new 
               Image is marked as pending, and will not be mounted until the current 
               state completes. eg. if the user changes weapons, you may wish to ensure 
               that the current weapon firing state plays to completion first./li>/ol>
               This command retrieves the ID of the pending Image (2nd case above).
               
               @param slot Image slot to query
               @return ID of the pending ShapeBaseImageData datablock, or 0 if none. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getRechargeRate(System.String)">
            <summary>
            @brief Get the current recharge rate.
            
               @return the recharge rate (per tick)
               
               @see setRechargeRate())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getRepairRate(System.String)">
            <summary>
            @brief Get the per-tick repair amount.
            
               @return the current value to be subtracted from damage level each tick
            
               @see setRepairRate )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getShapeName(System.String)">
            <summary>
            @brief Get the name of the shape.
            
               @note This is the name of the shape object that is sent to the client, 
               not the DTS or DAE model filename.
            
               @return the name of the shape 
               
               @see setShapeName())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getSkinName(System.String)">
            <summary>
            @brief Get the name of the skin applied to this shape.
            
               @return the name of the skin 
            
               @see skin
               @see setSkinName())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getSlotTransform(System.String,System.Int32)">
            <summary>
            @brief Get the world transform of the specified mount slot.
            
               @param slot Image slot to query
               @return the mount transform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getTargetCount(System.String)">
            <summary>
            @brief Get the number of materials in the shape.
            
               @return the number of materials in the shape. 
               
               @see getTargetName())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getTargetName(System.String,System.Int32)">
            <summary>
            @brief Get the name of the indexed shape material.
            
               @param index index of the material to get (valid range is 0 - getTargetCount()-1).
               @return the name of the indexed material.
               
               @see getTargetCount())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getVelocity(System.String)">
            <summary>
            @brief Get the object's current velocity.
            
               @return the current velocity )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_getWhiteOut(System.String)">
            <summary>
            @brief Get the white-out level.
            
               @return white-out level
            
               @see setWhiteOut )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_hasImageState(System.String,System.Int32,System.String)">
            <summary>
            @brief Check if the given state exists on the mounted Image.
            
               @param slot Image slot to query
               @param state Image state to check for
               @return true if the Image has the requested state defined. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_isCloaked(System.String)">
            <summary>
            @brief Check if this object is cloaked.
            
               @return true if cloaked, false if not 
               
               @see setCloaked())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_isDestroyed(System.String)">
            <summary>
            @brief Check if the object is in the Destroyed damage state.
            
               @return true if damage state is \"Destroyed\", false if not 
               
               @see isDisabled()
               @see isEnabled())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_isDisabled(System.String)">
            <summary>
            @brief Check if the object is in the Disabled or Destroyed damage state.
            
               @return true if damage state is not \"Enabled\", false if it is
               
               @see isDestroyed()
               @see isEnabled())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_isEnabled(System.String)">
            <summary>
            @brief Check if the object is in the Enabled damage state.
            
               @return true if damage state is \"Enabled\", false if not
               
               @see isDestroyed()
               @see isDisabled())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_isHidden(System.String)">
            <summary>
            Check if the object is hidden.
               @return true if the object is hidden, false if visible. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_isImageFiring(System.String,System.Int32)">
            <summary>
            @brief Check if the current Image state is firing.
            
               @param slot Image slot to query
               @return true if the current Image state in this slot has the 'stateFire' flag set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_isImageMounted(System.String,System.String)">
            <summary>
            @brief Check if the given datablock is mounted to any slot on this object.
            
               @param image ShapeBaseImageData datablock to query
               @return true if the Image is mounted to any slot, false otherwise. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_mountImage(System.String,System.String,System.Int32,System.Boolean,System.String)">
            <summary>
             ),
               @brief Mount a new Image.
            
               @param image the Image to mount
               @param slot Image slot to mount into (valid range is 0 - 3)
               @param loaded initial loaded state for the Image
               @param skinTag tagged string to reskin the mounted Image
               @return true if successful, false if failed
            
               @tsexample
               %player.mountImage( PistolImage, 1 );
               %player.mountImage( CrossbowImage, 0, false );
               %player.mountImage( RocketLauncherImage, 0, true, 'blue' );
               @endtsexample
               
               @see unmountImage()
               @see getMountedImage()
               @see getPendingImage()
               @see isImageMounted())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_pauseThread(System.String,System.Int32)">
            <summary>
            @brief Pause an animation thread.
               
               If restarted using playThread, the animation 
               will resume from the paused position.
               @param slot thread slot to stop
               @return true if successful, false if failed
               
               @see playThread )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_playAudio(System.String,System.Int32,System.String)">
            <summary>
            @brief Attach a sound to this shape and start playing it.
            
               @param slot Audio slot index for the sound (valid range is 0 - 3)    @param track SFXTrack to play
               @return true if the sound was attached successfully, false if failed
               
               @see stopAudio())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_playThread(System.String,System.Int32,System.String)">
            <summary>
             ),
               @brief Start a new animation thread, or restart one that has been paused or 
               stopped.
            
               @param slot thread slot to play. Valid range is 0 - 3)     @param name name of the animation sequence to play in this slot. If not 
               specified, the paused or stopped thread in this slot will be resumed.
               @return true if successful, false if failed
            
               @tsexample
               %obj.playThread( 0, \"ambient\" );      // Play the ambient sequence in slot 0
               %obj.setThreadTimeScale( 0, 0.5 );    // Play at half-speed
               %obj.pauseThread( 0 );                // Pause the sequence
               %obj.playThread( 0 );                 // Resume playback
               %obj.playThread( 0, \"spin\" );         // Replace the sequence in slot 0
               @endtsexample
               
               @see pauseThread()
               @see stopThread()
               @see setThreadDir()
               @see setThreadTimeScale()
               @see destroyThread())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setAllMeshesHidden(System.String,System.Boolean)">
            <summary>
            @brief Set the hidden state on all the shape meshes.
            
               This allows you to hide all meshes in the shape, for example, and then only 
               enable a few.
            
               @param hide new hidden state for all meshes )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setCameraFov(System.String,System.Single)">
            <summary>
            @brief Set the vertical field of view in degrees for this object if used as a camera.
            
               @param fov new FOV value )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setCloaked(System.String,System.Boolean)">
            <summary>
            @brief Set the cloaked state of this object.
            
               When an object is cloaked it is not rendered.
            
               @param cloak true to cloak the object, false to uncloak
               
               @see isCloaked())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setDamageFlash(System.String,System.Single)">
            <summary>
            @brief Set the damage flash level.
            
               Damage flash may be used as a postfx effect to flash the screen when the 
               client is damaged.
            
               @note Relies on the flash postFx.
            
               @param level flash level (0-1)
               
               @see getDamageFlash())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setDamageLevel(System.String,System.Single)">
            <summary>
            @brief Set the object's current damage level.
            
               @param level new damage level
               
               @see getDamageLevel()
               @see getDamagePercent())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setDamageState(System.String,System.String)">
            <summary>
            @brief Set the object's damage state.
            
               @param state should be one of \"Enabled\", \"Disabled\", \"Destroyed\"
               @return true if successful, false if failed
               
               @see getDamageState())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setDamageVector(System.String,System.String)">
            <summary>
            @brief Set the damage direction vector.
            
               Currently this is only used to initialise the explosion if this object 
               is blown up.
            
               @param vec damage direction vector
            
               @tsexample
               %obj.setDamageVector( \"0 0 1\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setEnergyLevel(System.String,System.Single)">
            <summary>
            @brief Set this object's current energy level.
            
               @param level new energy level
               
               @see getEnergyLevel()
               @see getEnergyPercent())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setHidden(System.String,System.Boolean)">
            <summary>
            @brief Add or remove this object from the scene.
               When removed from the scene, the object will not be processed or rendered.
               @param show False to hide the object, true to re-show it )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setImageAltTrigger(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Set the alt trigger state of the Image mounted in the specified slot.
            
               @param slot Image slot to modify
               @param state new alt trigger state for the Image
               @return the Image's new alt trigger state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setImageAmmo(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Set the ammo state of the Image mounted in the specified slot.
            
               @param slot Image slot to modify
               @param state new ammo state for the Image
               @return the Image's new ammo state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setImageGenericTrigger(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            @brief Set the generic trigger state of the Image mounted in the specified slot.
            
               @param slot Image slot to modify
               @param trigger Generic trigger number
               @param state new generic trigger state for the Image
               @return the Image's new generic trigger state or -1 if there was a problem. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setImageLoaded(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Set the loaded state of the Image mounted in the specified slot.
            
               @param slot Image slot to modify
               @param state new loaded state for the Image
               @return the Image's new loaded state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setImageScriptAnimPrefix(System.String,System.Int32,System.String)">
            <summary>
            @brief Set the script animation prefix for the Image mounted in the specified slot.
               This is used to further modify the prefix used when deciding which animation sequence to 
               play while this image is mounted.
            
               @param slot Image slot to modify
               @param prefix The prefix applied to the image )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setImageTarget(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Set the target state of the Image mounted in the specified slot.
            
               @param slot Image slot to modify
               @param state new target state for the Image
               @return the Image's new target state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setImageTrigger(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Set the trigger state of the Image mounted in the specified slot.
            
               @param slot Image slot to modify
               @param state new trigger state for the Image
               @return the Image's new trigger state )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setMeshHidden(System.String,System.String,System.Boolean)">
            <summary>
            @brief Set the hidden state on the named shape mesh.
            
               @param name name of the mesh to hide/show
               @param hide new hidden state for the mesh )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setRechargeRate(System.String,System.Single)">
            <summary>
            @brief Set the recharge rate.
            
               The recharge rate is added to the object's current energy level each tick, 
               up to the maxEnergy level set in the ShapeBaseData datablock.
               
               @param rate the recharge rate (per tick)
               
               @see getRechargeRate())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setRepairRate(System.String,System.Single)">
            <summary>
            @brief Set amount to repair damage by each tick.
            
               Note that this value is separate to the repairRate field in ShapeBaseData. 
               This value will be subtracted from the damage level each tick, whereas the 
               ShapeBaseData field limits how much of the applyRepair value is subtracted 
               each tick. Both repair types can be active at the same time.
               
               @param rate value to subtract from damage level each tick (must be > 0)
               
               @see getRepairRate())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setShapeName(System.String,System.String)">
            <summary>
            @brief Set the name of this shape.
            
               @note This is the name of the shape object that is sent to the client, 
               not the DTS or DAE model filename.
            
               @param name new name for the shape
               
               @see getShapeName())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setSkinName(System.String,System.String)">
            <summary>
            @brief Apply a new skin to this shape.
            
               'Skinning' the shape effectively renames the material targets, allowing 
               different materials to be used on different instances of the same model.
            
               @param name name of the skin to apply
            
               @see skin
               @see getSkinName())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setThreadDir(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Set the playback direction of an animation thread.
            
               @param slot thread slot to modify
               @param fwd true to play the animation forwards, false to play backwards
               @return true if successful, false if failed
               
               @see playThread() )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setThreadPosition(System.String,System.Int32,System.Single)">
            <summary>
            @brief Set the position within an animation thread.
            
               @param slot thread slot to modify
               @param pos position within thread
               @return true if successful, false if failed
               
               @see playThread )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setThreadTimeScale(System.String,System.Int32,System.Single)">
            <summary>
            @brief Set the playback time scale of an animation thread.
            
               @param slot thread slot to modify
               @param scale new thread time scale (1=normal speed, 0.5=half speed etc)
               @return true if successful, false if failed
               
               @see playThread )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setVelocity(System.String,System.String)">
            <summary>
            @brief Set the object's velocity.
            
               @param vel new velocity for the object
               @return true )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_setWhiteOut(System.String,System.Single)">
            <summary>
            @brief Set the white-out level.
            
               White-out may be used as a postfx effect to brighten the screen in response 
               to a game event.
            
               @note Relies on the flash postFx.
            
               @param level flash level (0-1)
               
               @see getWhiteOut())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_startFade(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            @brief Fade the object in or out without removing it from the scene.
            
               A faded out object is still in the scene and can still be collided with, 
               so if you want to disable collisions for this shape after it fades out 
               use setHidden to temporarily remove this shape from the scene.
              
               @note Items have the ability to light their surroundings. When an Item with 
               an active light is fading out, the light it emits is correspondingly 
               reduced until it goes out. Likewise, when the item fades in, the light is 
               turned-up till it reaches it's normal brightntess.
            
               @param time duration of the fade effect in ms
               @param delay delay in ms before the fade effect begins
               @param fadeOut true to fade-out to invisible, false to fade-in to full visibility )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_stopAudio(System.String,System.Int32)">
            <summary>
            @brief Stop a sound started with playAudio.
            
               @param slot audio slot index (started with playAudio)
               @return true if the sound was stopped successfully, false if failed
               
               @see playAudio())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_stopThread(System.String,System.Int32)">
            <summary>
            @brief Stop an animation thread.
            
               If restarted using playThread, the animation 
               will start from the beginning again.
               @param slot thread slot to stop
               @return true if successful, false if failed
               
               @see playThread )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBase_unmountImage(System.String,System.Int32)">
            <summary>
            @brief Unmount the mounted Image in the specified slot.
            
               @param slot Image slot to unmount
               @return true if successful, false if failed
               
               @see mountImage())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBaseData_checkDeployPos(System.String,System.String)">
            <summary>
            @brief Check if there is the space at the given transform is free to spawn into.
            
               The shape's bounding box volume is used to check for collisions at the given world 
               transform.  Only interior and static objects are checked for collision.
            
               @param txfm Deploy transform to check
               @return True if the space is free, false if there is already something in 
               the way.
            
               @note This is a server side only check, and is not actually limited to spawning.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnShapeBaseData_getDeployTransform(System.String,System.String,System.String)">
            <summary>
            @brief Helper method to get a transform from a position and vector (suitable for use with setTransform).
               @param pos Desired transform position
               @param normal Vector of desired direction
               @return The deploy transform )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimComponent_addComponents(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( SimComponent, addComponents, bool, 3, 64, %obj.addComponents( %compObjName, %compObjName2, ... );
            			  Adds additional components to current list.
            			  @param Up to 62 component names
            			  @return Returns true on success, false otherwise.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimComponent_removeComponents(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( SimComponent, removeComponents, bool, 3, 64, %obj.removeComponents( %compObjName, %compObjName2, ... );
            			  Removes components by name from current list.
            			  @param objNamex Up to 62 component names
            			  @return Returns true on success, false otherwise.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_assignPersistentId(System.String)">
            <summary>
            Assign a persistent ID to the object if it does not already have one. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_call(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( SimObject, call, const char*, 3, 0, ( string method, string args... ) Dynamically call a method on an object.
               @param method Name of method to call.
               @param args Zero or more arguments for the method.
               @return The result of the method call. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_clone(System.String)">
            <summary>
            Create a copy of this object.
               @return An exact duplicate of this object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_deepClone(System.String)">
            <summary>
            Create a copy of this object and all its subobjects.
               @return An exact duplicate of this object and all objects it references. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_dump(System.String,System.Boolean)">
            <summary>
            Dump a description of all fields and methods defined on this object to the console.
               @param detailed Whether to print detailed information about members. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_dumpGroupHierarchy(System.String)">
            <summary>
            Dump the hierarchy of this object up to RootGroup to the console. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_getDebugInfo(System.String)">
            <summary>
            Return some behind-the-scenes information on the object.
               @return An ArrayObject filled with internal information about the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_getGroup(System.String)">
            <summary>
            Get the group that this object is contained in.
               @note If not assigned to particular SimGroup, an object belongs to RootGroup.
               @return The SimGroup object to which the object belongs. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_getId(System.String)">
            <summary>
            Get the underlying unique numeric ID of the object.
               @note Object IDs are unique only during single engine runs.
               @return The unique numeric ID of the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_getInternalName(System.String)">
            <summary>
            Get the internal name of the object.
               @return The internal name of the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_getName(System.String)">
            <summary>
            Get the global name of the object.
               @return The global name assigned to the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_isChildOfGroup(System.String,System.String)">
            <summary>
            Test whether the object belongs directly or indirectly to the given group.
               @param group The SimGroup object.
               @return True if the object is a child of the given group or a child of a group that the given group is directly or indirectly a child to. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_isEditable(System.String)">
            <summary>
            Editable/Non-editable object in the game.
               @return If the object is editable or not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_isEditorOnly(System.String)">
            <summary>
            Return true if the object is only used by the editor.
               @return True if this object exists only for the sake of editing. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_isNameChangeAllowed(System.String)">
            <summary>
            Get whether this object may be renamed.
               @return True if this object can be renamed; false otherwise. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_isSelected(System.String)">
            <summary>
            Get whether the object has been marked as selected. (in editor)
               @return True if the object is currently selected. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_schedule(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( SimObject,schedule, S32, 4, 0, ( float time, string method, string args... ) Delay an invocation of a method.
               @param time The number of milliseconds after which to invoke the method.  This is a soft limit.
               @param method The method to call.
               @param args The arguments with which to call the method.
               @return The numeric ID of the created schedule.  Can be used to cancel the call. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_setEditable(System.String,System.Boolean)">
            <summary>
            Editable/Non-editable object in the game.
               @param value If true, the object will be editable; if false, the object will not be editable. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_setEditorOnly(System.String,System.Boolean)">
            <summary>
            Set/clear the editor-only flag on this object.
               @param value If true, the object is marked as existing only for the editor. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_setHidden(System.String,System.Boolean)">
            <summary>
            Hide/unhide the object.
               @param value If true, the object will be hidden; if false, the object will be unhidden. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_setInternalName(System.String,System.String)">
            <summary>
            Set the internal name of the object.
               @param newInternalName The new internal name for the object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_setIsSelected(System.String,System.Boolean)">
            <summary>
            Set whether the object has been marked as selected. (in editor)
               @param state True if object is to be marked selected; false if not. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_setLocked(System.String,System.Boolean)">
            <summary>
            Lock/unlock the object in the editor.
               @param value If true, the object will be locked; if false, the object will be unlocked. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_setName(System.String,System.String)">
            <summary>
            Set the global name of the object.
               @param newName The new global name to assign to the object.
               @note If name changing is disallowed on the object, the method will fail with a console error. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_setNameChangeAllowed(System.String,System.Boolean)">
            <summary>
            Set whether this object can be renamed from its first name.
               @param value If true, renaming is allowed for this object; if false, trying to change the name of the object will generate a console error. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimObject_signal(System.String,System.String,System.String)">
            <summary>
            (SimObject, signal, void, 3, 4, evaluates strings stored in dynamic fields take a string as parameter)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimSet_acceptsAsChild(System.String,System.String)">
            <summary>
            Test whether the given object may be added to the set.
               @param obj The object to test for potential membership.
               @return True if the object may be added to the set, false otherwise. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimSet_add(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( SimSet, add, void, 3, 0,
               ( SimObject objects... ) Add the given objects to the set.
               @param objects The objects to add to the set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimSet_bringToFront(System.String,System.String)">
            <summary>
            Make the given object the first object in the set.
               @param obj The object to bring to the frontmost position.  Must be contained in the set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimSet_callOnChildren(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( SimSet, callOnChildren, void, 3, 0,
               ( string method, string args... ) Call a method on all objects contained in the set.
               @param method The name of the method to call.
               @param args The arguments to the method.
               @note This method recurses into all SimSets that are children to the set.
               @see callOnChildrenNoRecurse )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimSet_callOnChildrenNoRecurse(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( SimSet, callOnChildrenNoRecurse, void, 3, 0,
               ( string method, string args... ) Call a method on all objects contained in the set.
               @param method The name of the method to call.
               @param args The arguments to the method.
               @note This method does not recurse into child SimSets.
               @see callOnChildren )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimSet_clear(System.String)">
            <summary>
            Remove all objects from the set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimSet_findObjectByInternalName(System.String,System.String,System.Boolean)">
            <summary>
            Find an object in the set by its internal name.
               @param internalName The internal name of the object to look for.
               @param searchChildren If true, SimSets contained in the set will be recursively searched for the object.
               @return The object with the given internal name or 0 if no match was found. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimSet_getCount(System.String)">
            <summary>
            Get the number of objects contained in the set.
               @return The number of objects contained in the set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimSet_getObject(System.String,System.UInt32)">
            <summary>
            Get the object at the given index.
               @param index The object index.
               @return The object at the given index or -1 if index is out of range. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimSet_getObjectIndex(System.String,System.String)">
            <summary>
            Return the index of the given object in this set.
               @param obj The object for which to return the index.  Must be contained in the set.
               @return The index of the object or -1 if the object is not contained in the set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimSet_getRandom(System.String)">
            <summary>
            Return a random object from the set.
               @return A randomly selected object from the set or -1 if the set is empty. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimSet_isMember(System.String,System.String)">
            <summary>
            Test whether the given object belongs to the set.
               @param obj The object.
               @return True if the object is contained in the set; false otherwise. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimSet_listObjects(System.String)">
            <summary>
            Dump a list of all objects contained in the set to the console. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimSet_pushToBack(System.String,System.String)">
            <summary>
            Make the given object the last object in the set.
               @param obj The object to bring to the last position.  Must be contained in the set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimSet_remove(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( SimSet, remove, void, 3, 0,
               ( SimObject objects... ) Remove the given objects from the set.
               @param objects The objects to remove from the set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimSet_reorderChild(System.String,System.String,System.String)">
            <summary>
            Make sure child1 is ordered right before child2 in the set.
               @param child1 The first child.  The object must already be contained in the set.
               @param child2 The second child.  The object must already be contained in the set. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_addComment(System.String,System.String)">
            <summary>
            @brief Add the given comment as a child of the document.
              @param comment String containing the comment.
            
               @tsexample
               // Create a new XML document with a header, a comment and single element.
               %x = new SimXMLDocument();
               %x.addHeader();
               %x.addComment(\"This is a test comment\");
               %x.addNewElement(\"NewElement\");
               %x.saveFile(\"test.xml\");
               // Produces the following file:
               // ?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
               // !--This is a test comment-->
               // NewElement />
               @endtsexample
               
               @see readComment())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_addData(System.String,System.String)">
            <summary>
            @brief Add the given text as a child of current Element.
            
               Use getData() to retrieve any text from the current Element.
            
               addData() and addText() may be used interchangeably.  As there is no 
               difference between data and text, you may also use removeText() to clear 
               any data from the current Element.
            
               @param text String containing the text.
            
               @tsexample
               // Create a new XML document with a header and single element
               // with some added data.
               %x = new SimXMLDocument();
               %x.addHeader();
               %x.addNewElement(\"NewElement\");
               %x.addData(\"Some text\");
               %x.saveFile(\"test.xml\");
               // Produces the following file:
               // ?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
               // NewElement>Some text/NewElement>
               @endtsexample
            
               @see getData()
               @see addText()
               @see getText()
               @see removeText())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_addHeader(System.String)">
            <summary>
            @brief Add a XML header to a document.
            
               Sometimes called a declaration, you typically add a standard header to 
               the document before adding any elements.  SimXMLDocument always produces 
               the following header:
               ?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
              
               @tsexample
               // Create a new XML document with just a header and single element.
               %x = new SimXMLDocument();
               %x.addHeader();
               %x.addNewElement(\"NewElement\");
               %x.saveFile(\"test.xml\");
               // Produces the following file:
               // ?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
               // NewElement />
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_addNewElement(System.String,System.String)">
            <summary>
            @brief Create a new element with the given name as child of current Element's 
               parent and push it onto the Element stack making it the current one.
            
               @note This differs from pushNewElement() in that it adds the new Element to the 
               current Element's parent (or document if there is no parent Element).  This makes 
               the new Element a sibling of the current one.
            
               @param name XML tag for the new Element.
               
               @see pushNewElement())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_addText(System.String,System.String)">
            <summary>
            @brief Add the given text as a child of current Element.
            
               Use getText() to retrieve any text from the current Element and removeText() 
               to clear any text.
            
               addText() and addData() may be used interchangeably.
            
               @param text String containing the text.
            
               @tsexample
               // Create a new XML document with a header and single element
               // with some added text.
               %x = new SimXMLDocument();
               %x.addHeader();
               %x.addNewElement(\"NewElement\");
               %x.addText(\"Some text\");
               %x.saveFile(\"test.xml\");
               // Produces the following file:
               // ?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
               // NewElement>Some text/NewElement>
               @endtsexample
            
               @see getText()
               @see removeText()
               @see addData()
               @see getData())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_attribute(System.String,System.String)">
            <summary>
            @brief Get a string attribute from the current Element on the stack.
               @param attributeName Name of attribute to retrieve.
               @return The attribute string if found.  Otherwise returns an empty string.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_attributeExists(System.String,System.String)">
            <summary>
            @brief Tests if the requested attribute exists.
               @param attributeName Name of attribute being queried for.
               @return True if the attribute exists.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_clear(System.String)">
            <summary>
            @brief Set this document to its default state.
               
               Clears all Elements from the documents.  Equivalent to using reset()
               
               @see reset())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_clearError(System.String)">
            <summary>
            @brief Clear the last error description.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_elementValue(System.String)">
            <summary>
            @brief Get the Element's value if it exists.
               Usually returns the text from the Element.
               @return The value from the Element, or an empty string if none is found.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_firstAttribute(System.String)">
            <summary>
            @brief Obtain the name of the current Element's first attribute.
               @return String containing the first attribute's name, or an empty string if none is found.
               @see nextAttribute()
               @see lastAttribute()
               @see prevAttribute())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_getData(System.String)">
            <summary>
            @brief Gets the text from the current Element.
            
               Use addData() to add text to the current Element.
            
               getData() and getText() may be used interchangeably.  As there is no 
               difference between data and text, you may also use removeText() to clear 
               any data from the current Element.
            
               @return String containing the text in the current Element.
            
               @tsexample
               // Using the following test.xml file as an example:
               // ?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
               // NewElement>Some data/NewElement>
            
               // Load in the file
               %x = new SimXMLDocument();
               %x.loadFile(\"test.xml\");
            
               // Make the first Element the current one
               %x.pushFirstChildElement(\"NewElement\");
            
               // Store the current Element's data ('Some data' in this example)
               // into 'result'
               %result = %x.getData();
               echo( %result );
               @endtsexample
               
               @see addData()
               @see addText()
               @see getText()
               @see removeText())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_getErrorDesc(System.String)">
            <summary>
            @brief Get last error description.
               @return A string of the last error message.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_getText(System.String)">
            <summary>
            @brief Gets the text from the current Element.
            
               Use addText() to add text to the current Element and removeText() 
               to clear any text.
            
               getText() and getData() may be used interchangeably.
            
               @return String containing the text in the current Element.
            
               @tsexample
               // Using the following test.xml file as an example:
               // ?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
               // NewElement>Some text/NewElement>
            
               // Load in the file
               %x = new SimXMLDocument();
               %x.loadFile(\"test.xml\");
            
               // Make the first Element the current one
               %x.pushFirstChildElement(\"NewElement\");
            
               // Store the current Element's text ('Some text' in this example)
               // into 'result'
               %result = %x.getText();
               echo( %result );
               @endtsexample
               
               @see addText()
               @see removeText()
               @see addData()
               @see getData())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_lastAttribute(System.String)">
            <summary>
            @brief Obtain the name of the current Element's last attribute.
               @return String containing the last attribute's name, or an empty string if none is found.
               @see prevAttribute()
               @see firstAttribute()
               @see lastAttribute())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_loadFile(System.String,System.String)">
            <summary>
            @brief Load in given filename and prepare it for use.
               @note Clears the current document's contents.
               @param fileName Name and path of XML document
               @return True if the file was loaded successfully.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_nextAttribute(System.String)">
            <summary>
            @brief Get the name of the next attribute for the current Element after a call to firstAttribute().
               @return String containing the next attribute's name, or an empty string if none is found.
               @see firstAttribute()
               @see lastAttribute()
               @see prevAttribute())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_nextSiblingElement(System.String,System.String)">
            <summary>
            @brief Put the next sibling Element with the given name on the stack, making it the current one.
               @param name String containing name of the next sibling.
               @return True if the Element was found and made the current one.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_parse(System.String,System.String)">
            <summary>
            @brief Create a document from a XML string.
               @note Clears the current document's contents.
               @param xmlString Valid XML to parse and store as a document.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_popElement(System.String)">
            <summary>
            @brief Pop the last Element off the stack.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_prevAttribute(System.String)">
            <summary>
            @brief Get the name of the previous attribute for the current Element after a call to lastAttribute().
               @return String containing the previous attribute's name, or an empty string if none is found.
               @see lastAttribute()
               @see firstAttribute()
               @see nextAttribute())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_pushChildElement(System.String,System.Int32)">
            <summary>
            @brief Push the child Element at the given index onto the stack, making it the current one.
               @param index Numerical index of Element being pushed.
               @return True if the Element was found and made the current one.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_pushFirstChildElement(System.String,System.String)">
            <summary>
            @brief Push the first child Element with the given name onto the stack, making it the current Element.
            
               @param name String containing name of the child Element.
               @return True if the Element was found and made the current one.
            
               @tsexample
               // Using the following test.xml file as an example:
               // ?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
               // NewElement>Some text/NewElement>
            
               // Load in the file
               %x = new SimXMLDocument();
               %x.loadFile(\"test.xml\");
            
               // Make the first Element the current one
               %x.pushFirstChildElement(\"NewElement\");
            
               // Store the current Element's text ('Some text' in this example)
               // into 'result'
               %result = %x.getText();
               echo( %result );
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_pushNewElement(System.String,System.String)">
            <summary>
            @brief Create a new element with the given name as child of current Element 
               and push it onto the Element stack making it the current one.
            
               @note This differs from addNewElement() in that it adds the new Element as a 
               child of the current Element (or a child of the document if no Element exists).
            
               @param name XML tag for the new Element.
            
               @see addNewElement())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_readComment(System.String,System.Int32)">
            <summary>
            Gives the comment at the specified index, if any.
            
               Unlike addComment() that only works at the document level, readComment() may read 
               comments from the document or any child Element.  The current Element (or document 
               if no Elements have been pushed to the stack) is the parent for any comments, and the 
               provided index is the number of comments in to read back.
            
               @param index Comment index number to query from the current Element stack
               @return String containing the comment, or an empty string if no comment is found.
            
               @see addComment())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_removeText(System.String)">
            <summary>
            @brief Remove any text on the current Element.
            
               Use getText() to retrieve any text from the current Element and addText() 
               to add text to the current Element.  As getData() and addData() are equivalent 
               to getText() and addText(), removeText() will also remove any data from the 
               current Element.
               
               @see addText()
               @see getText()
               @see addData()
               @see getData())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_reset(System.String)">
            <summary>
            @brief Set this document to its default state.
               
               Clears all Elements from the documents.  Equivalent to using clear()
               
               @see clear())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_saveFile(System.String,System.String)">
            <summary>
            @brief Save document to the given file name.
               @param fileName Path and name of XML file to save to.
               @return True if the file was successfully saved.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_setAttribute(System.String,System.String,System.String)">
            <summary>
            @brief Set the attribute of the current Element on the stack to the given value.
               @param attributeName Name of attribute being changed
               @param value New value to assign to the attribute)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnSimXMLDocument_setObjectAttributes(System.String,System.String)">
            <summary>
            @brief Add the given SimObject's fields as attributes of the current Element on the stack.
               @param objectID ID of SimObject being copied.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnStreamObject_copyFrom(System.String,System.String)">
            <summary>
            @brief Copy from another StreamObject into this StreamObject
               @param other The StreamObject to copy from.
               @return True if the copy was successful.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnStreamObject_getPosition(System.String)">
            <summary>
            @brief Gets the position in the stream
               
               The easiest way to visualize this is to think of a cursor in a text file. If you have moved the cursor by 
               five characters, the current position is 5. If you move ahead 10 more characters, the position is now 15. 
               For StreamObject, when you read in the line the position is increased by the number of characters parsed, 
               the null terminator, and a newline.
               
               @tsexample
               // Create a file stream object for reading
               %fsObject = new FileStreamObject();
               // Open a file for reading
               // This file contains two lines of text repeated:
               // Hello World
               // Hello World
               %fsObject.open(\"./test.txt\", \"read\");
               // Read in the first line
               %line = %fsObject.readLine();
               // Get the position of the stream
               %position = %fsObject.getPosition();
               // Print the current position
               // Should be 13, 10 for the words, 1 for the space, 1 for the null terminator, and 1 for the newline
               echo(%position);
               // Always remember to close a file stream when finished
               %fsObject.close();
               @endtsexample
            
               @return Number of bytes which stream has parsed so far, null terminators and newlines are included
               
               @see setPosition())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnStreamObject_getStatus(System.String)">
            <summary>
            @brief Gets a printable string form of the stream's status
               
               @tsexample
               // Create a file stream object for reading
               %fsObject = new FileStreamObject();
               // Open a file for reading
               %fsObject.open(\"./test.txt\", \"read\");
               // Get the status and print it
               %status = %fsObject.getStatus();
               echo(%status);
               // Always remember to close a file stream when finished
               %fsObject.close();
               @endtsexample
            
               @return String containing status constant, one of the following:
            
               	OK - Stream is active and no file errors
            
               	IOError - Something went wrong during read or writing the stream
            
               	EOS - End of Stream reached (mostly for reads)
            
               	IllegalCall - An unsupported operation used.  Always w/ accompanied by AssertWarn
            
                 Closed - Tried to operate on a closed stream (or detached filter)
            
               	UnknownError - Catch all for an error of some kind
            
               	Invalid - Entire stream is invalid)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnStreamObject_getStreamSize(System.String)">
            <summary>
            @brief Gets the size of the stream
               
               The size is dependent on the type of stream being used. If it is a file stream, returned value will 
               be the size of the file. If it is a memory stream, it will be the size of the allocated buffer.
                  
               @tsexample
               // Create a file stream object for reading
               %fsObject = new FileStreamObject();
               // Open a file for reading
               // This file contains the following two lines:
               // HelloWorld
               // HelloWorld
               %fsObject.open(\"./test.txt\", \"read\");
               // Found out how large the file stream is
               // Then print it to the console
               // Should be 22
               %streamSize = %fsObject.getStreamSize();
               echo(%streamSize);
               // Always remember to close a file stream when finished
               %fsObject.close();
               @endtsexample
            
               @return Size of stream, in bytes)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnStreamObject_isEOF(System.String)">
            <summary>
            @brief Tests if the stream has reached the end of the file
               
               This is an alternative name for isEOS. Both functions are interchangeable. This simply exists 
               for those familiar with some C++ file I/O standards.
               
               @tsexample
               // Create a file stream object for reading
               %fsObject = new FileStreamObject();
               // Open a file for reading
               %fsObject.open(\"./test.txt\", \"read\");
               // Keep reading until we reach the end of the file
               while( !%fsObject.isEOF() )
               {
                  %line = %fsObject.readLine();
                  echo(%line);
               }
               // Made it to the end
               echo(\"Finished reading file\");
               // Always remember to close a file stream when finished
               %fsObject.close();
               @endtsexample
            
               @return True if the parser has reached the end of the file, false otherwise
               
               @see isEOS())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnStreamObject_isEOS(System.String)">
            <summary>
            @brief Tests if the stream has reached the end of the file
               
               This is an alternative name for isEOF. Both functions are interchangeable. This simply exists 
               for those familiar with some C++ file I/O standards.
            
               @tsexample
               // Create a file stream object for reading
               %fsObject = new FileStreamObject();
               // Open a file for reading
               %fsObject.open(\"./test.txt\", \"read\");
               // Keep reading until we reach the end of the file
               while( !%fsObject.isEOS() )
               {
                  %line = %fsObject.readLine();
                  echo(%line);
               }
               // Made it to the end
               echo(\"Finished reading file\");
               // Always remember to close a file stream when finished
               %fsObject.close();
               @endtsexample
            
               @return True if the parser has reached the end of the file, false otherwise
            
               @see isEOF())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnStreamObject_readLine(System.String)">
            <summary>
            @brief Read a line from the stream.
               
               Emphasis on *line*, as in you cannot parse individual characters or chunks of data. 
               There is no limitation as to what kind of data you can read.
               
               @tsexample
               // Create a file stream object for reading
               // This file contains the following two lines:
               // HelloWorld
               // HelloWorld
               %fsObject = new FileStreamObject();
               %fsObject.open(\"./test.txt\", \"read\");
               // Read in the first line
               %line = %fsObject.readLine();
               // Print the line we just read
               echo(%line);
               // Always remember to close a file stream when finished
               %fsObject.close();
               @endtsexample
            
               @return String containing the line of data that was just read
               
               @see writeLine())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnStreamObject_readLongString(System.String,System.Int32)">
            <summary>
            @brief Read in a string up to the given maximum number of characters.
               @param maxLength The maximum number of characters to read in.
               @return The string that was read from the stream.
               @see writeLongString()
               
               @note When working with these particular string reading and writing methods, the stream 
               begins with the length of the string followed by the string itself, and does not include 
               a NULL terminator.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnStreamObject_readString(System.String)">
            <summary>
            @brief Read a string up to a maximum of 256 characters
               @return The string that was read from the stream.
               @see writeString()
               
               @note When working with these particular string reading and writing methods, the stream 
               begins with the length of the string followed by the string itself, and does not include 
               a NULL terminator.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnStreamObject_readSTString(System.String,System.Boolean)">
            <summary>
            @brief Read in a string and place it on the string table.
               @param caseSensitive If false then case will not be taken into account when attempting 
               to match the read in string with what is already in the string table.
               @return The string that was read from the stream.
               @see writeString()
               
               @note When working with these particular string reading and writing methods, the stream 
               begins with the length of the string followed by the string itself, and does not include 
               a NULL terminator.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnStreamObject_setPosition(System.String,System.Int32)">
            <summary>
            @brief Gets the position in the stream
               
               The easiest way to visualize this is to think of a cursor in a text file. If you have moved the cursor by 
               five characters, the current position is 5. If you move ahead 10 more characters, the position is now 15. 
               For StreamObject, when you read in the line the position is increased by the number of characters parsed, 
               the null terminator, and a newline. Using setPosition allows you to skip to specific points of the file.
               
               @tsexample
               // Create a file stream object for reading
               %fsObject = new FileStreamObject();
               // Open a file for reading
               // This file contains the following two lines:
               // 11111111111
               // Hello World
               %fsObject.open(\"./test.txt\", \"read\");
               // Skip ahead by 12, which will bypass the first line entirely
               %fsObject.setPosition(12);
               // Read in the next line
               %line = %fsObject.readLine();
               // Print the line just read in, should be \"Hello World\"
               echo(%line);
               // Always remember to close a file stream when finished
               %fsObject.close();
               @endtsexample
            
               @return Number of bytes which stream has parsed so far, null terminators and newlines are included
               
               @see getPosition())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnStreamObject_writeLine(System.String,System.String)">
            <summary>
            @brief Write a line to the stream, if it was opened for writing.
               
               There is no limit as to what kind of data you can write. Any format and data is allowable, not just text. 
               Be careful of what you write, as whitespace, current values, and literals will be preserved.
            
               @param line The data we are writing out to file.
               
               @tsexample
               // Create a file stream
               %fsObject = new FileStreamObject();
               // Open the file for writing
               // If it does not exist, it is created. If it does exist, the file is cleared
               %fsObject.open(\"./test.txt\", \"write\");
               // Write a line to the file
               %fsObject.writeLine(\"Hello World\");
               // Write another line to the file
               %fsObject.writeLine(\"Documentation Rocks!\");
               // Always remember to close a file stream when finished
               %fsObject.close();
               @endtsexample
               
               @see readLine())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnStreamObject_writeLongString(System.String,System.Int32,System.String)">
            <summary>
            @brief Write out a string up to the maximum number of characters.
               @param maxLength The maximum number of characters that will be written.
               @param string The string to write out to the stream.
               @see readLongString()
               
               @note When working with these particular string reading and writing methods, the stream 
               begins with the length of the string followed by the string itself, and does not include 
               a NULL terminator.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnStreamObject_writeString(System.String,System.String,System.Int32)">
            <summary>
            @brief Write out a string with a default maximum length of 256 characters.
               @param string The string to write out to the stream
               @param maxLength The maximum string length to write out with a default of 256 characters.  This 
               value should not be larger than 256 as it is written to the stream as a single byte.
               @see readString()
               
               @note When working with these particular string reading and writing methods, the stream 
               begins with the length of the string followed by the string itself, and does not include 
               a NULL terminator.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTCPObject_connect(System.String,System.String)">
            <summary>
            @brief Connect to the given address.
            
               @param address Server address (including port) to connect to.
            
               @tsexample
                  // Set the address.
                  %address = \"www.garagegames.com:80\";
            
                  // Inform this TCPObject to connect to the specified address.
                  %thisTCPObj.connect(%address);
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTCPObject_disconnect(System.String)">
            <summary>
            @brief Disconnect from whatever this TCPObject is currently connected to, if anything.
            
               @tsexample
                  // Inform this TCPObject to disconnect from anything it is currently connected to.
                  %thisTCPObj.disconnect();
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTCPObject_listen(System.String,System.UInt32)">
            <summary>
            @brief Start listening on the specified port for connections.
            
               This method starts a listener which looks for incoming TCP connections to a port.  
               You must overload the onConnectionRequest callback to create a new TCPObject to 
               read, write, or reject the new connection.
            
               @param port Port for this TCPObject to start listening for connections on.
            
               @tsexample
            
                // Create a listener on port 8080.
                new TCPObject( TCPListener );
                TCPListener.listen( 8080 );
            
                function TCPListener::onConnectionRequest( %this, %address, %id )
                {
                   // Create a new object to manage the connection.
                   new TCPObject( TCPClient, %id );
                }
            
                function TCPClient::onLine( %this, %line )
                {
                   // Print the line of text from client.
                   echo( %line );
                }
            
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTCPObject_send(System.String,System.String)">
            <summary>
            @brief Transmits the data string to the connected computer.
            
               This method is used to send text data to the connected computer regardless if we initiated the 
               connection using connect(), or listening to a port using listen().
            
               @param data The data string to send.
            
               @tsexample
                  // Set the command data
                  %data = \"GET \" @ $RSSFeed::serverURL @ \" HTTP/1.0\\r\\";
                  %data = %data @ \"Host: \" @ $RSSFeed::serverName @ \"\\r\\";
                  %data = %data @ \"User-Agent: \" @ $RSSFeed::userAgent @ \"\\r\\\r\\"
            
                  // Send the command to the connected server.
                  %thisTCPObj.send(%data);
               @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTerrainBlock_save(System.String,System.String)">
            <summary>
            @brief Saves the terrain block's terrain file to the specified file name.
            
            				   @param fileName Name and path of file to save terrain data to.
            
            				   @return True if file save was successful, false otherwise)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTimeOfDay_addTimeOfDayEvent(System.String,System.Single,System.String)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTimeOfDay_animate(System.String,System.Single,System.Single)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTimeOfDay_setDayLength(System.String,System.Single)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTimeOfDay_setPlay(System.String,System.Boolean)">
            <summary>
            )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTimeOfDay_setTimeOfDay(System.String,System.Single)">
            <summary>
             )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTrigger_getNumObjects(System.String)">
            <summary>
            @brief Get the number of objects that are within the Trigger's bounds.
               @see getObject())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTrigger_getObject(System.String,System.Int32)">
            <summary>
            @brief Retrieve the requested object that is within the Trigger's bounds.
               @param index Index of the object to get (range is 0 to getNumObjects()-1)
               @returns The SimObjectID of the object, or -1 if the requested index is invalid.
               @see getNumObjects())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSAttachable_attachObject(System.String,System.String)">
            <summary>
            Attaches an object to this one.
                  @param obj The scene object to attach to us
                  @return true if successful, false if failed. This function will fail if the object passed 
                  is invalid or is not located directly above and within RayLength of this shape.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSAttachable_detachAll(System.String)">
            <summary>
            Detaches all attached objects. Note: if UseAutoAttach is true when this is called, all of
                   the objects may be re-attached on the next tick.
                  @tsexample
                     // Dump all riders
                     %attachableObj.UseAutoAttach = false
                     %attachableObj.detachAll(); = false
                  @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSAttachable_detachObject(System.String,System.String)">
            <summary>
            Detaches an object from this one.
                  @param obj The scene object to be detached
                  @return true if successful, false if failed. This function will fail if the object passed 
                  is invalid or is not currently attached to this shape.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSAttachable_getAttachment(System.String,System.Int32)">
            <summary>
            Returns the attachment at the passed index value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSAttachable_getNumAttachments(System.String)">
            <summary>
            Returns the number of objects that are currently attached.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSDynamic_changeMaterial(System.String,System.String,System.String,System.String)">
            <summary>
            ,NULL,NULL),
               @brief Change one of the materials on the shape.
            
               This method changes materials per mapTo with others. The material that 
               is being replaced is mapped to unmapped_mat as a part of this transition.
            
               @note Warning, right now this only sort of works. It doesn't do a live 
               update like it should.
            
               @param mapTo the name of the material target to remap (from getTargetName)
               @param oldMat the old Material that was mapped 
               @param newMat the new Material to map
            
               @tsexample
                  // remap the first material in the shape
                  %mapTo = %obj.getTargetName( 0 );
                  %obj.changeMaterial( %mapTo, 0, MyMaterial );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSDynamic_getModelFile(System.String)">
            <summary>
            @brief Get the model filename used by this shape.
            
               @return the shape filename
               @tsexample
            		// Acquire the model filename used on this shape.
            		%modelFilename = %obj.getModelFile();
               @endtsexample
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSDynamic_getTargetCount(System.String)">
            <summary>
            Get the number of materials in the shape.
               @return the number of materials in the shape.
               @see getTargetName())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSDynamic_getTargetName(System.String,System.Int32)">
            <summary>
            Get the name of the indexed shape material.
               @param index index of the material to get (valid range is 0 - getTargetCount()-1).
               @return the name of the indexed material.
               @see getTargetCount())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSPathShape_getLooping(System.String)">
            <summary>
            Returns the looping state for the shape.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSPathShape_getNodeCount(System.String)">
            <summary>
            Returns the number of nodes on the shape's path.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSPathShape_getPathPosition(System.String)">
            <summary>
            Get the current position of the shape along the path (0.0 - lastNode - 1).)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSPathShape_popFront(System.String)">
            <summary>
            Removes the knot at the front of the shape's path.
            													@tsexample
            														// Remove the first knot in the shape's path.
            														%pathShape.popFront();
            													@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSPathShape_pushBack(System.String,System.String,System.Single,System.String,System.String)">
            <summary>
            Normal, Linear), 
            											      @brief Adds a new knot to the back of a shape's path.
            													@param transform Transform for the new knot.  In the form of \"x y z ax ay az aa\" such as returned by SceneObject::getTransform()
            													@param speed Speed setting for this knot.
            													@param type Knot type (Normal, Position Only, Kink).
            													@param path %Path type (Linear, Spline).
            													@tsexample
            														// Transform vector for new knot. (Pos_X Pos_Y Pos_Z Rot_X Rot_Y Rot_Z Angle)
            														%transform = \"15.0 5.0 5.0 1.4 1.0 0.2 1.0\"
            														// Speed setting for knot.
            														%speed = \"1.0\"
            														// Knot type. (Normal, Position Only, Kink)
            														%type = \"Normal\";
            														// Path Type. (Linear, Spline)
            														%path = \"Linear\";
            														// Inform the shape to add a new knot to the back of its path
            														%pathShape.pushBack(%transform,%speed,%type,%path);
            													@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSPathShape_pushFront(System.String,System.String,System.Single,System.String,System.String)">
            <summary>
            Normal, Linear), 
            											      @brief Adds a new knot to the front of a path shape's path.
            													@param transform Transform for the new knot. In the form of \"x y z ax ay az aa\" such as returned by SceneObject::getTransform()
            													@param speed Speed setting for this knot.
            													@param type Knot type (Normal, Position Only, Kink).
            													@param path %Path type (Linear, Spline).
            													@tsexample
            														// Transform vector for new knot. (Pos_X,Pos_Y,Pos_Z,Rot_X,Rot_Y,Rot_Z,Angle)
            														%transform = \"15.0 5.0 5.0 1.4 1.0 0.2 1.0\"
            														// Speed setting for knot.
            														%speed = \"1.0\";
            														// Knot type. (Normal, Position Only, Kink)
            														%type = \"Normal\";
            														// Path Type. (Linear, Spline)
            														%path = \"Linear\";
            														// Inform the shape to add a new knot to the front of its path
            														%pathShape.pushFront(%transform, %speed, %type, %path);
            													@endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSPathShape_reset(System.String,System.Single,System.Boolean,System.Boolean)">
            <summary>
            @brief Clear the shapes's path and optionally initializes the first node with the shapes current transform and speed.
                     The shapes movement is stopped and any current path is cleared. The target and position values are both reset to 0. 
                     When makeFirstKnot is true a new knot is created and pushed onto the path.
                     @param speed Speed for the first knot if created.
                     @param makeFirstKnot Initialize a new path with the current shape transform.
                     @param initFromPath Initialize the knot type and smoothing values from the current path.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSPathShape_setLooping(System.String,System.Boolean)">
            <summary>
            Sets whether the path should loop or stop at the last node.
            													@param isLooping New loop flag true/false.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSPathShape_setMoveState(System.String,System.Int32)">
            <summary>
            Set the movement state for this shape.
            													@param newState New movement state type for this shape. Forward, Backward or Stop.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSPathShape_setPathPosition(System.String,System.Single)">
            <summary>
            Set the current position of the shape along the path.
            													@param position Position along the path, from 0.0 (path start) - 1.0 (path end), to place the shape.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSPathShape_setTarget(System.String,System.Single)">
            <summary>
            @brief Set the movement target for this shape along its path.
                                                   The shape will attempt to move along the path to the given target without going past the loop node. 
                                                   Once the shape arrives at the target,the onTargetReached() callback will be triggered and the target 
                                                   state will be cleared.
            													@param position Target position, between 0.0 (path start) and nodeCount - 1 (path end), for the 
                                                   shape to move to along its path.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_addCollisionDetail(System.String,System.Int32,System.String,System.String,System.Int32,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Autofit a mesh primitive or set of convex hulls to the shape geometry. Hulls 
               may optionally be converted to boxes, spheres and/or capsules based on their 
               volume.
               @param size size for this detail level
               @param type one of: box, sphere, capsule, 10-dop x, 10-dop y, 10-dop z, 18-dop, 
                  26-dop, convex hulls. See the Shape Editor documentation for more details 
                  about these types.
               @param target geometry to fit collision mesh(es) to; either \"bounds\" (for the 
                  whole shape), or the name of an object in the shape
               @param depth maximum split recursion depth (hulls only)
               @param merge volume % threshold used to merge hulls together (hulls only)
               @param concavity volume % threshold used to detect concavity (hulls only)
               @param maxVerts maximum number of vertices per hull (hulls only)
               @param boxMaxError max % volume difference for a hull to be converted to a 
                  box (hulls only)
               @param sphereMaxError max % volume difference for a hull to be converted to 
                  a sphere (hulls only)
               @param capsuleMaxError max % volume difference for a hull to be converted to 
                  a capsule (hulls only)
               @return true if successful, false otherwise
               @tsexample
               %this.addCollisionDetail( -1, \"box\", \"bounds\" );
               %this.addCollisionDetail( -1, \"convex hulls\", \"bounds\", 4, 30, 30, 32, 0, 0, 0 );
               %this.addCollisionDetail( -1, \"convex hulls\", \"bounds\", 4, 30, 30, 32, 50, 50, 50 );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_addImposter(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Single)">
            <summary>
            Add (or edit) an imposter detail level to the shape.
               If the shape already contains an imposter detail level, this command will 
               simply change the imposter settings
               @param size size of the imposter detail level
               @param equatorSteps defines the number of snapshots to take around the 
               equator. Imagine the object being rotated around the vertical axis, then 
               a snapshot taken at regularly spaced intervals.
               @param polarSteps defines the number of snapshots taken between the poles 
               (top and bottom), at each equator step. eg. At each equator snapshot, 
               snapshots are taken at regular intervals between the poles.
               @param dl the detail level to use when generating the snapshots. Note that 
               this is an array index rather than a detail size. So if an object has detail 
               sizes of: 200, 150, and 40, then setting @a dl to 1 will generate the snapshots 
               using detail size 150.
               @param dim defines the size of the imposter images in pixels. The larger the 
               number, the more detailed the billboard will be.
               @param includePoles flag indicating whether to include the \"pole\" snapshots. 
               ie. the views from the top and bottom of the object.
               @param polar_angle if pole snapshots are active (@a includePoles is true), this 
               parameter defines the camera angle (in degrees) within which to render the 
               pole snapshot. eg. if polar_angle is set to 25 degrees, then the snapshot 
               taken at the pole (looking directly down or up at the object) will be rendered 
               when the camera is within 25 degrees of the pole.
               @return true if successful, false otherwise
               @tsexample
               %this.addImposter( 2, 4, 0, 0, 64, false, 0 );
               %this.addImposter( 2, 4, 2, 0, 64, true, 10 );   // this command would edit the existing imposter detail level
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_addMesh(System.String,System.String,System.String,System.String)">
            <summary>
            Add geometry from another DTS or DAE shape file into this shape.
               Any materials required by the source mesh are also copied into this shape.br>
               @param meshName full name (object name + detail size) of the new mesh. If 
                  no detail size is present at the end of the name, a value of 2 is used.br>
                  An underscore before the number at the end of the name will be interpreted as 
                  a negative sign. eg. \"MyMesh_4\" will be interpreted as \"MyMesh-4\".
               @param srcShape name of a shape file (DTS or DAE) that contains the mesh
               @param srcMesh the full name (object name + detail size) of the mesh to 
                  copy from the DTS/DAE file into this shape/li>
               @return true if successful, false otherwise
               @tsexample
               %this.addMesh( \"ColMesh-1\", \"./collision.dts\", \"ColMesh\", \"Col-1\" );
               %this.addMesh( \"SimpleShape10\", \"./testShape.dae\", \"MyMesh2\",  );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_addNode(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Add a new node.
               @param name name for the new node (must not already exist)
               @param parentName name of an existing node to be the parent of the new node. 
               If empty (\"\"), the new node will be at the root level of the node hierarchy.
               @param txfm (optional) transform string of the form: \"pos.x pos.y pos.z rot.x rot.y rot.z rot.angle\"
               @param isworld (optional) flag to set the local-to-parent or the global 
               transform. If false, or not specified, the position and orientation are 
               treated as relative to the node's parent.
               @return true if successful, false otherwise
               @tsexample
               %this.addNode( \"Nose\", \"Bip01 Head\", \"0 2 2 0 0 1 0\" );
               %this.addNode( \"myRoot\", \"\", \"0 0 4 0 0 1 1.57\" );
               %this.addNode( \"Nodes\", \"Bip01 Head\", \"0 2 0 0 0 1 0\", true );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_addPrimitive(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Add a new mesh primitive to the shape.
               @param meshName full name (object name + detail size) of the new mesh. If 
                  no detail size is present at the end of the name, a value of 2 is used.br>
                  An underscore before the number at the end of the name will be interpreted as 
                  a negative sign. eg. \"MyMesh_4\" will be interpreted as \"MyMesh-4\".
               @param type one of: \"box\", \"sphere\", \"capsule\"
               @param params mesh primitive parameters:
                  ul>
                     li>for box: \"size_x size_y size_z\"/li>
                     li>for sphere: \"radius\"/li>
                     li>for capsule: \"height radius\"/li>
                  /ul>
               /ul>
               @param txfm local transform offset from the node for this mesh
               @param nodeName name of the node to attach the new mesh to (will change the 
               object's node if adding a new mesh to an existing object)
               @return true if successful, false otherwise
               @tsexample
               %this.addMesh( \"Box4\", \"box\", \"2 4 2\", \"0 2 0 0 0 1 0\", \"eye\" );
               %this.addMesh( \"Sphere256\", \"sphere\", \"2\", \"0 0 0 0 0 1 0\", \"root\" );
               %this.addMesh( \"MyCapsule-1\", \"capsule\", \"2 5\", \"0 0 2 0 0 1 0\", \"base01\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_addSequence(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Add a new sequence to the shape.
               @param source the name of an existing sequence, or the name of a DTS or DAE 
               shape or DSQ sequence file. When the shape file contains more than one 
               sequence, the desired sequence can be specified by appending the name to the 
               end of the shape file. eg. \"myShape.dts run\" would select the \"run\" 
               sequence from the \"myShape.dts\" file.
               @param name name of the new sequence
               @param start (optional) first frame to copy. Defaults to 0, the first frame in the sequence.
               @param end (optional) last frame to copy. Defaults to -1, the last frame in the sequence.
               @param padRot (optional) copy root-pose rotation keys for non-animated nodes. This is useful if 
               the source sequence data has a different root-pose to the target shape, such as if one character was 
               in the T pose, and the other had arms at the side. Normally only nodes that are actually rotated by 
               the source sequence have keyframes added, but setting this flag will also add keyframes for nodes 
               that are not animated, but have a different root-pose rotation to the target shape root pose.
               @param padTrans (optional) copy root-pose translation keys for non-animated nodes.  This is useful if 
               the source sequence data has a different root-pose to the target shape, such as if one character was 
               in the T pose, and the other had arms at the side. Normally only nodes that are actually moved by 
               the source sequence have keyframes added, but setting this flag will also add keyframes for nodes 
               that are not animated, but have a different root-pose position to the target shape root pose.
               @return true if successful, false otherwise
               @tsexample
               %this.addSequence( \"./testShape.dts ambient\", \"ambient\" );
               %this.addSequence( \"./myPlayer.dae run\", \"run\" );
               %this.addSequence( \"./player_look.dsq\", \"look\", 0, -1 );     // start to end
               %this.addSequence( \"walk\", \"walk_shortA\", 0, 4 );            // start to frame 4
               %this.addSequence( \"walk\", \"walk_shortB\", 4, -1 );           // frame 4 to end
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_addTrigger(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Add a new trigger to the sequence.
               @param name name of the sequence to modify
               @param keyframe keyframe of the new trigger
               @param state of the new trigger
               @return true if successful, false otherwise
               @tsexample
               %this.addTrigger( \"walk\", 3, 1 );
               %this.addTrigger( \"walk\", 5, -1 );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_dumpShape(System.String,System.String)">
            <summary>
            Dump the shape hierarchy to the console or to a file. Useful for reviewing 
               the result of a series of construction commands.
               @param filename Destination filename. If not specified, dump to console.
               @tsexample
               %this.dumpShape();               // dump to console
               %this.dumpShape( \"./dump.txt\" ); // dump to file
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getBounds(System.String)">
            <summary>
            Get the bounding box for the shape.
               @return Bounding box \"minX minY minZ maxX maxY maxZ\" )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getDetailLevelCount(System.String)">
            <summary>
            Get the total number of detail levels in the shape.
               @return the number of detail levels in the shape )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getDetailLevelIndex(System.String,System.Int32)">
            <summary>
            Get the index of the detail level with a given size.
               @param size size of the detail level to lookup
               @return index of the detail level with the desired size, or -1 if no such 
               detail exists
               @tsexample
               if ( %this.getDetailLevelSize( 32 ) == -1 )
                  echo( \"Error: This shape does not have a detail level at size 32\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getDetailLevelName(System.String,System.Int32)">
            <summary>
            Get the name of the indexed detail level.
               @param index detail level index (valid range is 0 - getDetailLevelCount()-1)
               @return the detail level name
               @tsexample
               // print the names of all detail levels in the shape
               %count = %this.getDetailLevelCount();
               for ( %i = 0; %i  %count; %i++ )
                  echo( %i SPC %this.getDetailLevelName( %i ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getDetailLevelSize(System.String,System.Int32)">
            <summary>
            Get the size of the indexed detail level.
               @param index detail level index (valid range is 0 - getDetailLevelCount()-1)
               @return the detail level size
               @tsexample
               // print the sizes of all detail levels in the shape
               %count = %this.getDetailLevelCount();
               for ( %i = 0; %i  %count; %i++ )
                  echo( \"Detail\" @ %i @ \" has size \" @ %this.getDetailLevelSize( %i ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getImposterDetailLevel(System.String)">
            <summary>
            Get the index of the imposter (auto-billboard) detail level (if any).
               @return imposter detail level index, or -1 if the shape does not use 
               imposters. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getImposterSettings(System.String,System.Int32)">
            <summary>
            Get the settings used to generate imposters for the indexed detail level.
               @param index index of the detail level to query (does not need to be an 
               imposter detail level
               @return string of the form: \"valid eqSteps pSteps dl dim poles angle\", where:
               dl>
                  dt>valid/dt>dd>1 if this detail level generates imposters, 0 otherwise/dd>
                  dt>eqSteps/dt>dd>number of steps around the equator/dd>
                  dt>pSteps/dt>dd>number of steps between the poles/dd>
                  dt>dl/dt>dd>index of the detail level used to generate imposters/dd>
                  dt>dim/dt>dd>size (in pixels) of each imposter image/dd>
                  dt>poles/dt>dd>1 to include pole images, 0 otherwise/dd>
                  dt>angle/dt>dd>angle at which to display pole images/dd>
               /dl>
               @tsexample
               // print the imposter detail level settings
               %index = %this.getImposterDetailLevel();
               if ( %index != -1 )
                  echo( \"Imposter settings: \" @ %this.getImposterSettings( %index ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getMeshCount(System.String,System.String)">
            <summary>
            Get the number of meshes (detail levels) for the specified object.
               @param name name of the object to query
               @return the number of meshes for this object.
               @tsexample
               %count = %this.getMeshCount( \"SimpleShape\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getMeshMaterial(System.String,System.String)">
            <summary>
            Get the name of the material attached to a mesh. Note that only the first 
               material used by the mesh is returned.
               @param name full name (object name + detail size) of the mesh to query
               @return name of the material attached to the mesh (suitable for use with the Material mapTo field)
               @tsexample
               echo( \"Mesh material is \" @ %this.sgetMeshMaterial( \"SimpleShape128\" ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getMeshName(System.String,System.String,System.Int32)">
            <summary>
            Get the name of the indexed mesh (detail level) for the specified object.
               @param name name of the object to query
               @param index index of the mesh (valid range is 0 - getMeshCount()-1)
               @return the mesh name.
               @tsexample
               // print the names of all meshes in the shape
               %objCount = %this.getObjectCount();
               for ( %i = 0; %i  %objCount; %i++ )
               {
                  %objName = %this.getObjectName( %i );
                  %meshCount = %this.getMeshCount( %objName );
                  for ( %j = 0; %j  %meshCount; %j++ )
                     echo( %this.getMeshName( %objName, %j ) );
               }
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getMeshSize(System.String,System.String,System.Int32)">
            <summary>
            Get the detail level size of the indexed mesh for the specified object.
               @param name name of the object to query
               @param index index of the mesh (valid range is 0 - getMeshCount()-1)
               @return the mesh detail level size.
               @tsexample
               // print sizes for all detail levels of this object
               %objName = \"trunk\";
               %count = %this.getMeshCount( %objName );
               for ( %i = 0; %i  %count; %i++ )
                  echo( %this.getMeshSize( %objName, %i ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getMeshType(System.String,System.String)">
            <summary>
            Get the display type of the mesh.
               @param name name of the mesh to query
               @return the string returned is one of:
               dl>dt>normal/dt>dd>a normal 3D mesh/dd>
               dt>billboard/dt>dd>a mesh that always faces the camera/dd>
               dt>billboardzaxis/dt>dd>a mesh that always faces the camera in the Z-axis/dd>/dl>
               @tsexample
               echo( \"Mesh type is \" @ %this.getMeshType( \"SimpleShape128\" ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getNodeChildCount(System.String,System.String)">
            <summary>
            Get the number of children of this node.
               @param name name of the node to query.
               @return the number of child nodes.
               @tsexample
               %count = %this.getNodeChildCount( \"Bip01 Pelvis\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getNodeChildName(System.String,System.String,System.Int32)">
            <summary>
            Get the name of the indexed child node.
               @param name name of the parent node to query.
               @param index index of the child node (valid range is 0 - getNodeChildName()-1).
               @return the name of the indexed child node.
               @tsexample
               function dumpNode( %shape, %name, %indent )
               {
                  echo( %indent @ %name );
                  %count = %shape.getNodeChildCount( %name );
                  for ( %i = 0; %i  %count; %i++ )
                     dumpNode( %shape, %shape.getNodeChildName( %name, %i ), %indent @ \"   \" );
               }
               function dumpShape( %shape )
               {
                  // recursively dump node hierarchy
                  %count = %shape.getNodeCount();
                  for ( %i = 0; %i  %count; %i++ )
                  {
                     // dump top level nodes
                     %name = %shape.getNodeName( %i );
                     if ( %shape.getNodeParentName( %name ) $=  )
                        dumpNode( %shape, %name, \"\" );
                  }
               }
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getNodeCount(System.String)">
            <summary>
            Get the total number of nodes in the shape.
               @return the number of nodes in the shape.
               @tsexample
               %count = %this.getNodeCount();
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getNodeIndex(System.String,System.String)">
            <summary>
            Get the index of the node.
               @param name name of the node to lookup.
               @return the index of the named node, or -1 if no such node exists.
               @tsexample
               // get the index of Bip01 Pelvis node in the shape
               %index = %this.getNodeIndex( \"Bip01 Pelvis\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getNodeName(System.String,System.Int32)">
            <summary>
            Get the name of the indexed node.
               @param index index of the node to lookup (valid range is 0 - getNodeCount()-1).
               @return the name of the indexed node, or \"\" if no such node exists.
               @tsexample
               // print the names of all the nodes in the shape
               %count = %this.getNodeCount();
               for (%i = 0; %i  %count; %i++)
                  echo(%i SPC %this.getNodeName(%i));
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getNodeObjectCount(System.String,System.String)">
            <summary>
            Get the number of geometry objects attached to this node.
               @param name name of the node to query.
               @return the number of attached objects.
               @tsexample
               %count = %this.getNodeObjectCount( \"Bip01 Head\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getNodeObjectName(System.String,System.String,System.Int32)">
            <summary>
            Get the name of the indexed object.
               @param name name of the node to query.
               @param index index of the object (valid range is 0 - getNodeObjectCount()-1).
               @return the name of the indexed object.
               @tsexample
               // print the names of all objects attached to the node
               %count = %this.getNodeObjectCount( \"Bip01 Head\" );
               for ( %i = 0; %i  %count; %i++ )
                  echo( %this.getNodeObjectName( \"Bip01 Head\", %i ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getNodeParentName(System.String,System.String)">
            <summary>
            Get the name of the node's parent. If the node has no parent (ie. it is at 
               the root level), return an empty string.
               @param name name of the node to query.
               @return the name of the node's parent, or \"\" if the node is at the root level
               @tsexample
               echo( \"Bip01 Pelvis parent = \" @ %this.getNodeParentName( \"Bip01 Pelvis \") );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getNodeTransform(System.String,System.String,System.Boolean)">
            <summary>
            Get the base (ie. not animated) transform of a node.
               @param name name of the node to query.
               @param isWorld true to get the global transform, false (or omitted) to get 
               the local-to-parent transform.
               @return the node transform in the form \"pos.x pos.y pos.z rot.x rot.y rot.z rot.angle\".
               @tsexample
               %ret = %this.getNodeTransform( \"mount0\" );
               %this.setNodeTransform( \"mount4\", %ret );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getObjectCount(System.String)">
            <summary>
            Get the total number of objects in the shape.
               @return the number of objects in the shape.
               @tsexample
               %count = %this.getObjectCount();
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getObjectIndex(System.String,System.String)">
            <summary>
            Get the index of the first object with the given name.
               @param name name of the object to get.
               @return the index of the named object.
               @tsexample
               %index = %this.getObjectIndex( \"Head\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getObjectName(System.String,System.Int32)">
            <summary>
            Get the name of the indexed object.
               @param index index of the object to get (valid range is 0 - getObjectCount()-1).
               @return the name of the indexed object.
               @tsexample
               // print the names of all objects in the shape
               %count = %this.getObjectCount();
               for ( %i = 0; %i  %count; %i++ )
                  echo( %i SPC %this.getObjectName( %i ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getObjectNode(System.String,System.String)">
            <summary>
            Get the name of the node this object is attached to.
               @param name name of the object to get.
               @return the name of the attached node, or an empty string if this 
               object is not attached to a node (usually the case for skinned meshes).
               @tsexample
               echo( \"Hand is attached to \" @ %this.getObjectNode( \"Hand\" ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getSequenceBlend(System.String,System.String)">
            <summary>
            Get information about blended sequences.
               @param name name of the sequence to query
               @return TAB delimited string of the form: \"isBlend blendSeq blendFrame\", where:
               dl>
               dt>blend_flag/dt>dd>a boolean flag indicating whether this sequence is a blend/dd>
               dt>blend_seq_name/dt>dd>the name of the sequence that contains the reference 
               frame (empty for blend sequences embedded in DTS files)/dd>
               dt>blend_seq_frame/dt>dd>the blend reference frame (empty for blend sequences 
               embedded in DTS files)/dd>
               /dl>
               @note Note that only sequences set to be blends using the setSequenceBlend 
               command will contain the blendSeq and blendFrame information.
               @tsexample
               %blendData = %this.getSequenceBlend( \"look\" );
               if ( getField( %blendData, 0 ) )
                  echo( \"look is a blend, reference: \" @ getField( %blendData, 1 ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getSequenceCount(System.String)">
            <summary>
            Get the total number of sequences in the shape.
               @return the number of sequences in the shape )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getSequenceCyclic(System.String,System.String)">
            <summary>
            Check if this sequence is cyclic (looping).
               @param name name of the sequence to query
               @return true if this sequence is cyclic, false if not
               @tsexample
               if ( !%this.getSequenceCyclic( \"ambient\" ) )
                  error( \"ambient sequence is not cyclic!\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getSequenceFrameCount(System.String,System.String)">
            <summary>
            Get the number of keyframes in the sequence.
               @param name name of the sequence to query
               @return number of keyframes in the sequence
               @tsexample
               echo( \"Run has \" @ %this.getSequenceFrameCount( \"run\" ) @ \" keyframes\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getSequenceGroundSpeed(System.String,System.String)">
            <summary>
            Get the ground speed of the sequence.
               @note Note that only the first 2 ground frames of the sequence are 
               examined; the speed is assumed to be constant throughout the sequence.
               @param name name of the sequence to query
               @return string of the form: \"trans.x trans.y trans.z rot.x rot.y rot.z\"
               @tsexample
               %speed = VectorLen( getWords( %this.getSequenceGroundSpeed( \"run\" ), 0, 2 ) );
                  echo( \"Run moves at \" @ %speed @ \" units per frame\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getSequenceIndex(System.String,System.String)">
            <summary>
            Find the index of the sequence with the given name.
               @param name name of the sequence to lookup
               @return index of the sequence with matching name, or -1 if not found
               @tsexample
               // Check if a given sequence exists in the shape
               if ( %this.getSequenceIndex( \"walk\" ) == -1 )
                  echo( \"Could not find 'walk' sequence\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getSequenceName(System.String,System.Int32)">
            <summary>
            Get the name of the indexed sequence.
               @param index index of the sequence to query (valid range is 0 - getSequenceCount()-1)
               @return the name of the sequence
               @tsexample
               // print the name of all sequences in the shape
               %count = %this.getSequenceCount();
               for ( %i = 0; %i  %count; %i++ )
                  echo( %i SPC %this.getSequenceName( %i ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getSequencePriority(System.String,System.String)">
            <summary>
            Get the priority setting of the sequence.
               @param name name of the sequence to query
               @return priority value of the sequence )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getSequenceSource(System.String,System.String)">
            <summary>
            Get information about where the sequence data came from.
               For example, whether it was loaded from an external DSQ file.
               @param name name of the sequence to query
               @return TAB delimited string of the form: \"from reserved start end total\", where:
               dl>
                  dt>from/dt>dd>the source of the animation data, such as the path to 
                  a DSQ file, or the name of an existing sequence in the shape. This field 
                  will be empty for sequences already embedded in the DTS or DAE file./dd>
                  dt>reserved/dt>dd>reserved value/dd>
                  dt>start/dt>dd>the first frame in the source sequence used to create this sequence/dd>
                  dt>end/dt>dd>the last frame in the source sequence used to create this sequence/dd>
                  dt>total/dt>dd>the total number of frames in the source sequence/dd>
               /dl>
               @tsexample
               // print the source for the walk animation
               echo( \"walk source:\" SPC getField( %this.getSequenceSource( \"walk\" ), 0 ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getTargetCount(System.String)">
            <summary>
            Get the number of materials in the shape.
               @return the number of materials in the shape.
               @tsexample
               %count = %this.getTargetCount();
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getTargetName(System.String,System.Int32)">
            <summary>
            Get the name of the indexed shape material.
               @param index index of the material to get (valid range is 0 - getTargetCount()-1).
               @return the name of the indexed material.
               @tsexample
               %count = %this.getTargetCount();
               for ( %i = 0; %i  %count; %i++ )
                  echo( \"Target \" @ %i @ \": \" @ %this.getTargetName( %i ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getTrigger(System.String,System.String,System.Int32)">
            <summary>
            Get information about the indexed trigger
               @param name name of the sequence to query
               @param index index of the trigger (valid range is 0 - getTriggerCount()-1)
               @return string of the form \"frame state\"
               @tsexample
               // print all triggers in the sequence
               %count = %this.getTriggerCount( \"back\" );
               for ( %i = 0; %i  %count; %i++ )
                  echo( %i SPC %this.getTrigger( \"back\", %i ) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_getTriggerCount(System.String,System.String)">
            <summary>
            Get the number of triggers in the specified sequence.
               @param name name of the sequence to query
               @return number of triggers in the sequence )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_notifyShapeChanged(System.String)">
            <summary>
            Notify game objects that this shape file has changed, allowing them to update 
               internal data if needed. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_removeDetailLevel(System.String,System.Int32)">
            <summary>
            Remove the detail level (including all meshes in the detail level)
               @param size size of the detail level to remove
               @return true if successful, false otherwise
               @tsexample
               %this.removeDetailLevel( 2 );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_removeImposter(System.String)">
            <summary>
            () Remove the imposter detail level (if any) from the shape.
               @return true if successful, false otherwise )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_removeMesh(System.String,System.String)">
            <summary>
            Remove a mesh from the shape.
               If all geometry is removed from an object, the object is also removed.
               @param name full name (object name + detail size) of the mesh to remove
               @return true if successful, false otherwise
               @tsexample
               %this.removeMesh( \"SimpleShape128\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_removeNode(System.String,System.String)">
            <summary>
            Remove a node from the shape.
               The named node is removed from the shape, including from any sequences that 
               use the node. Child nodes and objects attached to the node are re-assigned 
               to the node's parent.
               @param name name of the node to remove.
               @return true if successful, false otherwise.
               @tsexample
               %this.removeNode( \"Nose\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_removeObject(System.String,System.String)">
            <summary>
            Remove an object (including all meshes for that object) from the shape.
               @param name name of the object to remove.
               @return true if successful, false otherwise.
               @tsexample
               // clear all objects in the shape
               %count = %this.getObjectCount();
               for ( %i = %count-1; %i >= 0; %i-- )
                  %this.removeObject( %this.getObjectName(%i) );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_removeSequence(System.String,System.String)">
            <summary>
            Remove the sequence from the shape.
               @param name name of the sequence to remove
               @return true if successful, false otherwise )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_removeTrigger(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Remove a trigger from the sequence.
               @param name name of the sequence to modify
               @param keyframe keyframe of the trigger to remove
               @param state of the trigger to remove
               @return true if successful, false otherwise
               @tsexample
               %this.removeTrigger( \"walk\", 3, 1 );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_renameDetailLevel(System.String,System.String,System.String)">
            <summary>
            Rename a detail level.
               @note Note that detail level names must be unique, so this command will 
               fail if there is already a detail level with the desired name
               @param oldName current name of the detail level
               @param newName new name of the detail level
               @return true if successful, false otherwise
               @tsexample
               %this.renameDetailLevel( \"detail-1\", \"collision-1\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_renameNode(System.String,System.String,System.String)">
            <summary>
            Rename a node.
               @note Note that node names must be unique, so this command will fail if 
               there is already a node with the desired name
               @param oldName current name of the node
               @param newName new name of the node
               @return true if successful, false otherwise
               @tsexample
               %this.renameNode( \"Bip01 L Hand\", \"mount5\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_renameObject(System.String,System.String,System.String)">
            <summary>
            Rename an object.
               @note Note that object names must be unique, so this command will fail if 
               there is already an object with the desired name
               @param oldName current name of the object
               @param newName new name of the object
               @return true if successful, false otherwise
               @tsexample
               %this.renameObject( \"MyBox\", \"Box\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_renameSequence(System.String,System.String,System.String)">
            <summary>
            Rename a sequence.
               @note Note that sequence names must be unique, so this command will fail 
               if there is already a sequence with the desired name
               @param oldName current name of the sequence
               @param newName new name of the sequence
               @return true if successful, false otherwise
               @tsexample
               %this.renameSequence( \"walking\", \"walk\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_saveShape(System.String,System.String)">
            <summary>
            Save the shape (with all current changes) to a new DTS file.
               @param filename Destination filename.
               @tsexample
               %this.saveShape( \"./myShape.dts\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_setBounds(System.String,System.String)">
            <summary>
            Set the shape bounds to the given bounding box.
               @param Bounding box \"minX minY minZ maxX maxY maxZ\"
               @return true if successful, false otherwise )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_setDetailLevelSize(System.String,System.Int32,System.Int32)">
            <summary>
            Change the size of a detail level.
               @note Note that detail levels are always sorted in decreasing size order, 
               so this command may cause detail level indices to change.
               @param index index of the detail level to modify
               @param newSize new size for the detail level
               @return new index for this detail level
               @tsexample
               %this.setDetailLevelSize( 2, 256 );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_setMeshMaterial(System.String,System.String,System.String)">
            <summary>
            Set the name of the material attached to the mesh.
               @param meshName full name (object name + detail size) of the mesh to modify
               @param matName name of the material to attach. This could be the base name of 
               the diffuse texture (eg. \"test_mat\" for \"test_mat.jpg\"), or the name of a 
               Material object already defined in script.
               @return true if successful, false otherwise
               @tsexample
               // set the mesh material
               %this.setMeshMaterial( \"SimpleShape128\", \"test_mat\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_setMeshSize(System.String,System.String,System.Int32)">
            <summary>
            Change the detail level size of the named mesh.
               @param name full name (object name + current size ) of the mesh to modify
               @param size new detail level size
               @return true if successful, false otherwise.
               @tsexample
               %this.setMeshSize( \"SimpleShape128\", 64 );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_setMeshType(System.String,System.String,System.String)">
            <summary>
            Set the display type for the mesh.
               @param name full name (object name + detail size) of the mesh to modify
               @param type the new type for the mesh: \"normal\", \"billboard\" or \"billboardzaxis\"
               @return true if successful, false otherwise
               @tsexample
               // set the mesh to be a billboard
               %this.setMeshType( \"SimpleShape64\", \"billboard\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_setNodeParent(System.String,System.String,System.String)">
            <summary>
            Set the parent of a node.
              @param name name of the node to modify
              @param parentName name of the parent node to set (use \"\" to move the node to the root level)
              @return true if successful, false if failed
              @tsexample
              %this.setNodeParent( \"Bip01 Pelvis\", \"start01\" );
              @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_setNodeTransform(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Set the base transform of a node. That is, the transform of the node when 
               in the root (not-animated) pose.
               @param name name of the node to modify
               @param txfm transform string of the form: \"pos.x pos.y pos.z rot.x rot.y rot.z rot.angle\"
               @param isworld (optional) flag to set the local-to-parent or the global 
               transform. If false, or not specified, the position and orientation are 
               treated as relative to the node's parent.
               @return true if successful, false otherwise
               @tsexample
               %this.setNodeTransform( \"mount0\", \"0 0 1 0 0 1 0\" );
               %this.setNodeTransform( \"mount0\", \"0 0 0 0 0 1 1.57\" );
               %this.setNodeTransform( \"mount0\", \"1 0 0 0 0 1 0\", true );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_setObjectNode(System.String,System.String,System.String)">
            <summary>
            Set the node an object is attached to.
               When the shape is rendered, the object geometry is rendered at the node's 
               current transform.
               @param objName name of the object to modify
               @param nodeName name of the node to attach the object to
               @return true if successful, false otherwise
               @tsexample
               %this.setObjectNode( \"Hand\", \"Bip01 LeftHand\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_setSequenceBlend(System.String,System.String,System.Boolean,System.String,System.Int32)">
            <summary>
            Mark a sequence as a blend or non-blend.
               A blend sequence is one that will be added on top of any other playing 
               sequences. This is done by storing the animated node transforms relative 
               to a reference frame, rather than as absolute transforms.
               @param name name of the sequence to modify
               @param blend true to make the sequence a blend, false for a non-blend
               @param blendSeq the name of the sequence that contains the blend reference frame
               @param blendFrame the reference frame in the blendSeq sequence
               @return true if successful, false otherwise
               @tsexample
               %this.setSequenceBlend( \"look\", true, \"root\", 0 );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_setSequenceCyclic(System.String,System.String,System.Boolean)">
            <summary>
            Mark a sequence as cyclic or non-cyclic.
               @param name name of the sequence to modify
               @param cyclic true to make the sequence cyclic, false for non-cyclic
               @return true if successful, false otherwise
               @tsexample
               %this.setSequenceCyclic( \"ambient\", true );
               %this.setSequenceCyclic( \"shoot\", false );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_setSequenceGroundSpeed(System.String,System.String,System.String,System.String)">
            <summary>
            Set the translation and rotation ground speed of the sequence.
               The ground speed of the sequence is set by generating ground transform 
               keyframes. The ground translational and rotational speed is assumed to 
               be constant for the duration of the sequence. Existing ground frames for 
               the sequence (if any) will be replaced.
               @param name name of the sequence to modify
               @param transSpeed translational speed (trans.x trans.y trans.z) in 
               Torque units per frame
               @param rotSpeed (optional) rotational speed (rot.x rot.y rot.z) in 
               radians per frame. Default is \"0 0 0\"
               @return true if successful, false otherwise
               @tsexample
               %this.setSequenceGroundSpeed( \"run\", \"5 0 0\" );
               %this.setSequenceGroundSpeed( \"spin\", \"0 0 0\", \"4 0 0\" );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_setSequencePriority(System.String,System.String,System.Single)">
            <summary>
            Set the sequence priority.
               @param name name of the sequence to modify
               @param priority new priority value
               @return true if successful, false otherwise )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSShapeConstructor_writeChangeSet(System.String)">
            <summary>
            Write the current change set to a TSShapeConstructor script file. The 
               name of the script file is the same as the model, but with .cs extension. 
               eg. myShape.cs for myShape.dts or myShape.dae. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSStatic_changeMaterial(System.String,System.String,System.String,System.String)">
            <summary>
            ,NULL,NULL),
               @brief Change one of the materials on the shape.
            
               This method changes materials per mapTo with others. The material that 
               is being replaced is mapped to unmapped_mat as a part of this transition.
            
               @note Warning, right now this only sort of works. It doesn't do a live 
               update like it should.
            
               @param mapTo the name of the material target to remap (from getTargetName)
               @param oldMat the old Material that was mapped 
               @param newMat the new Material to map
            
               @tsexample
                  // remap the first material in the shape
                  %mapTo = %obj.getTargetName( 0 );
                  %obj.changeMaterial( %mapTo, 0, MyMaterial );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSStatic_getModelFile(System.String)">
            <summary>
            @brief Get the model filename used by this shape.
            
               @return the shape filename
               @tsexample
            		// Acquire the model filename used on this shape.
            		%modelFilename = %obj.getModelFile();
               @endtsexample
               )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSStatic_getTargetCount(System.String)">
            <summary>
            Get the number of materials in the shape.
               @return the number of materials in the shape.
               @see getTargetName())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTSStatic_getTargetName(System.String,System.Int32)">
            <summary>
            Get the name of the indexed shape material.
               @param index index of the material to get (valid range is 0 - getTargetCount()-1).
               @return the name of the indexed material.
               @see getTargetCount())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTurretShape_doRespawn(System.String)">
            <summary>
            @brief Does the turret respawn after it has been destroyed.
               @returns True if the turret respawns.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTurretShape_getAllowManualFire(System.String)">
            <summary>
            @brief Get if the turret is allowed to fire through moves.
               @return True if the turret is allowed to fire through moves. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTurretShape_getAllowManualRotation(System.String)">
            <summary>
            @brief Get if the turret is allowed to rotate through moves.
               @return True if the turret is allowed to rotate through moves. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTurretShape_getState(System.String)">
            <summary>
            @brief Get the name of the turret's current state.
            
               The state is one of the following:ul>
               li>Dead - The TurretShape is destroyed./li>
               li>Mounted - The TurretShape is mounted to an object such as a vehicle./li>
               li>Ready - The TurretShape is free to move.  The usual state./li>/ul>
            
               @return The current state; one of: \"Dead\", \"Mounted\", \"Ready\" )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTurretShape_getTurretEulerRotation(System.String)">
            <summary>
            @brief Get Euler rotation of this turret's heading and pitch nodes.
               @return the orientation of the turret's heading and pitch nodes in the 
               form of rotations around the X, Y and Z axes in degrees. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTurretShape_setAllowManualFire(System.String,System.Boolean)">
            <summary>
            @brief Set if the turret is allowed to fire through moves.
               @param allow If true then the turret may be fired through moves.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTurretShape_setAllowManualRotation(System.String,System.Boolean)">
            <summary>
            @brief Set if the turret is allowed to rotate through moves.
               @param allow If true then the turret may be rotated through moves.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnTurretShape_setTurretEulerRotation(System.String,System.String)">
            <summary>
            @brief Set Euler rotation of this turret's heading and pitch nodes in degrees.
               @param rot The rotation in degrees.  The pitch is the X component and the 
               heading is the Z component.  The Y component is ignored.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnVolumetricFog_SetFogColor(System.String,System.String)">
            <summary>
            @brief Changes the color of the fog.
            	@params new_color the new fog color (rgb 0-255, a is ignored.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnVolumetricFog_SetFogColorF(System.String,System.String)">
            <summary>
            @brief Changes the color of the fog.
            	@params new_color the new fog color (rgb 0.0 - 1.0, a is ignored.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnVolumetricFog_SetFogDensity(System.String,System.Single)">
            <summary>
            @brief Changes the density of the fog.
            	@params new_density the new fog density.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnVolumetricFog_SetFogModulation(System.String,System.Single,System.String,System.String)">
            <summary>
            @brief Changes the modulation of the fog.
            	@params new_strenght the new strength of the modulation.
            	@params new_speed1 the new speed (x y) of the modulation layer 1.
            	@params new_speed2 the new speed (x y) of the modulation layer 2.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnWalkableShape_attachObject(System.String,System.String)">
            <summary>
            Attaches an object to this one.
                  @param obj The scene object to attach to us
                  @return true if successful, false if failed. This function will fail if the object passed 
                  is invalid or is not located directly above and within RayLength of this shape.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnWalkableShape_detachAll(System.String)">
            <summary>
            Detaches all attached objects. Note: if UseAutoAttach is true when this is called, all of
                   the objects may be re-attached on the next tick.
                  @tsexample
                     // Dump all riders
                     %attachableObj.UseAutoAttach = false
                     %attachableObj.detachAll(); = false
                  @endtsexample)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnWalkableShape_detachObject(System.String,System.String)">
            <summary>
            Detaches an object from this one.
                  @param obj The scene object to be detached
                  @return true if successful, false if failed. This function will fail if the object passed 
                  is invalid or is not currently attached to this shape.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnWalkableShape_getAttachment(System.String,System.Int32)">
            <summary>
            Returns the attachment at the passed index value.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnWalkableShape_getNumAttachments(System.String)">
            <summary>
            Returns the number of objects that are currently attached.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnWheeledVehicle_getWheelCount(System.String)">
            <summary>
            @brief Get the number of wheels on this vehicle.
               @return the number of wheels (equal to the number of hub nodes defined in the model) )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnWheeledVehicle_setWheelPowered(System.String,System.Int32,System.Boolean)">
            <summary>
            @brief Set whether the wheel is powered (has torque applied from the engine).
               A rear wheel drive car for example would set the front wheels to false, 
               and the rear wheels to true.
               @param wheel index of the wheel to set (hub node #)
               @param powered flag indicating whether to power the wheel or not
               @return true if successful, false if failed )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnWheeledVehicle_setWheelSpring(System.String,System.Int32,System.String)">
            <summary>
            @brief Set the WheeledVehicleSpring datablock for this wheel.
               @param wheel index of the wheel to set (hub node #)
               @param spring WheeledVehicleSpring datablock
               @return true if successful, false if failed
               @tsexample
               %obj.setWheelSpring( 0, FrontSpring );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnWheeledVehicle_setWheelSteering(System.String,System.Int32,System.Single)">
            <summary>
            @brief Set how much the wheel is affected by steering.
               The steering factor controls how much the wheel is rotated by the vehicle 
               steering. For example, most cars would have their front wheels set to 1.0, 
               and their rear wheels set to 0 since only the front wheels should turn.
               Negative values will turn the wheel in the opposite direction to the steering 
               angle.
               @param wheel index of the wheel to set (hub node #)
               @param steering steering factor from -1 (full inverse) to 1 (full)
               @return true if successful, false if failed )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnWheeledVehicle_setWheelTire(System.String,System.Int32,System.String)">
            <summary>
            @brief Set the WheeledVehicleTire datablock for this wheel.
               @param wheel index of the wheel to set (hub node #)
               @param tire WheeledVehicleTire datablock
               @return true if successful, false if failed
               @tsexample
               %obj.setWheelTire( 0, FrontTire );
               @endtsexample )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnWorldEditor_createConvexShapeFrom(System.String,System.String)">
            <summary>
            Create a ConvexShape from the given polyhedral object. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnWorldEditor_createPolyhedralObject(System.String,System.String,System.String)">
            <summary>
            Grab the geometry from @a geometryProvider, create a @a className object, and assign it the extracted geometry. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnWorldEditor_getSoftSnapAlignment(System.String)">
            <summary>
            Get the soft snap alignment. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnWorldEditor_getTerrainSnapAlignment(System.String)">
            <summary>
            Get the terrain snap alignment.  )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnWorldEditor_ignoreObjClass(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            ( WorldEditor, ignoreObjClass, void, 3, 0, (string class_name, ...))
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnWorldEditor_setSoftSnapAlignment(System.String,System.Int32)">
            <summary>
            Set the soft snap alignment. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnWorldEditor_setTerrainSnapAlignment(System.String,System.Int32)">
            <summary>
            Set the terrain snap alignment. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnWorldEditorSelection_containsGlobalBounds(System.String)">
            <summary>
            ( WorldEditorSelection, containsGlobalBounds, bool, 2, 2, () - True if an object with global bounds is contained in the selection. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnWorldEditorSelection_getBoxCentroid(System.String)">
            <summary>
            ( WorldEditorSelection, getBoxCentroid, const char*, 2, 2, () - Return the center of the bounding box around the selection. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnWorldEditorSelection_getCentroid(System.String)">
            <summary>
            ( WorldEditorSelection, getCentroid, const char*, 2, 2, () - Return the median of all object positions in the selection. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnWorldEditorSelection_offset(System.String,System.String,System.String)">
            <summary>
            ( WorldEditorSelection, offset, void, 3, 4, ( vector delta, float gridSnap=0 ) - Move all objects in the selection by the given delta. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnWorldEditorSelection_subtract(System.String,System.String)">
            <summary>
            ( WorldEditorSelection, subtract, void, 3, 3, ( SimSet ) - Remove all objects in the given set from this selection. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnWorldEditorSelection_union(System.String,System.String)">
            <summary>
            ( WorldEditorSelection, union, void, 3, 3, ( SimSet set ) - Add all objects in the given set to this selection. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnZipObject_addFile(System.String,System.String,System.String,System.Boolean)">
            <summary>
            @brief Add a file to the zip archive
               
               @param filename The path and name of the file to add to the zip archive.
               @param pathInZip The path and name to be given to the file within the zip archive.
               @param replace If a file already exists within the zip archive at the same location as this 
               new file, this parameter indicates if it should be replaced.  By default, it will be replaced.
               @return True if the file was successfully added to the zip archive.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnZipObject_closeArchive(System.String)">
            <summary>
            @brief Close an already opened zip archive.
               @see openArchive())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnZipObject_closeFile(System.String,System.String)">
            <summary>
            @brief Close a previously opened file within the zip archive.
               @param stream The StreamObject of a previously opened file within the zip archive.
               @see openFileForRead()
               @see openFileForWrite())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnZipObject_deleteFile(System.String,System.String)">
            <summary>
            @brief Deleted the given file from the zip archive
               @param pathInZip The path and name of the file to be deleted from the zip archive.
               @return True of the file was successfully deleted.
            
               @note Files that have been deleted from the archive will still show up with a 
               getFileEntryCount() until you close the archive.  If you need to have the file 
               count up to date with only valid files within the archive, you could close and then 
               open the archive again.
            
               @see getFileEntryCount()
               @see closeArchive()
               @see openArchive())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnZipObject_extractFile(System.String,System.String,System.String)">
            <summary>
            @brief Extact a file from the zip archive and save it to the requested location.
               @param pathInZip The path and name of the file to be extracted within the zip archive.
               @param filename The path and name to give the extracted file.
               @return True if the file was successfully extracted.)
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnZipObject_getFileEntry(System.String,System.Int32)">
            <summary>
            @brief Get information on the requested file within the zip archive.
            
               This methods provides five different pieces of information for the requested file:
               ul>li>filename - The path and name of the file within the zip archive/li>
               li>uncompressed size/li>
               li>compressed size/li>
               li>compression method/li>
               li>CRC32/li>/ul>
            
               Use getFileEntryCount() to obtain the total number of files within the archive.
            
               @param index The index of the file within the zip archive.  Use getFileEntryCount() to determine the number of files.
               @return A tab delimited list of information on the requested file, or an empty string if the file could not be found.
            
               @see getFileEntryCount())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnZipObject_getFileEntryCount(System.String)">
            <summary>
            @brief Get the number of files within the zip archive.
            
               Use getFileEntry() to retrive information on each file within the archive.
            
               @return The number of files within the zip archive.
            
               @note The returned count will include any files that have been deleted from 
               the archive using deleteFile().  To clear out all deleted files, you could 
               close and then open the archive again.
            
               @see getFileEntry()
               @see closeArchive()
               @see openArchive())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnZipObject_openArchive(System.String,System.String,System.String)">
            <summary>
            read ),
               @brief Open a zip archive for manipulation.
            
               Once a zip archive is opened use the various ZipObject methods for 
               working with the files within the archive.  Be sure to close the archive when 
               you are done with it.
            
               @param filename The path and file name of the zip archive to open.
               @param accessMode One of read, write or readwrite
            
               @return True is the archive was successfully opened.
               
               @note If you wish to make any changes to the archive, be sure to open it 
               with a write or readwrite access mode.
            
               @see closeArchive())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnZipObject_openFileForRead(System.String,System.String)">
            <summary>
            @brief Open a file within the zip archive for reading.
            
               Be sure to close the file when you are done with it.
            
               @param filename The path and name of the file to open within the zip archive.
            
               @return A standard StreamObject is returned for working with the file.
               @note You must first open the zip archive before working with files within it.
            
               @see closeFile()
               @see openArchive())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnZipObject_openFileForWrite(System.String,System.String)">
            <summary>
            @brief Open a file within the zip archive for writing to.
               
               Be sure to close the file when you are done with it.
            
               @param filename The path and name of the file to open within the zip archive.
            
               @return A standard StreamObject is returned for working with the file.
               @note You must first open the zip archive before working with files within it.
            
               @see closeFile()
               @see openArchive())
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnZone_dumpZoneState(System.String,System.Boolean)">
            <summary>
            Dump a list of all objects assigned to the zone to the console as well as a list 
               of all connected zone spaces.
               @param updateFirst Whether to update the contents of the zone before dumping.  Since zoning states of 
                  objects are updated on demand, the zone contents can be outdated. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.fnZone_getZoneId(System.String)">
            <summary>
            Get the unique numeric ID of the zone in its scene.
               @return The ID of the zone. )
            
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni._removeTaggedString(System.String)">
            <summary>
              Removes the tagged string from Torque.
            </summary>
            <param name="tag"> </param>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.Evaluate(System.String,System.Boolean)">
            <summary>
              This function evaluates a script block and returns the value, It is a carry over and now the Util.eval should be used.
            </summary>
            <param name="script"> </param>
            <param name="returnmeaval"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.GetTaggedString(System.String)">
            <summary>
              Gets a tagged string object from torque.
            </summary>
            <param name="tag"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.AddTaggedString(System.String)">
            <summary>
              Adds the passed string to the Torques Tagged String list.
            </summary>
            <param name="mystring"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.Warn(System.String)">
            <summary>
              Posts a message inside of the Torque console as a warning.
            </summary>
            <param name="message"> </param>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.Print(System.String)">
            <summary>
              Posts a message inside of the Troque console as a Print.
            </summary>
            <param name="message"> </param>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.Error(System.String)">
            <summary>
              Posts a message inside of the Torque console as a Error.
            </summary>
            <param name="message"> </param>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.DeleteVariables(System.String)">
            <summary>
              Deletes the variable from Torques Memory.
            </summary>
            <param name="global_variable"> </param>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.ObjectHasMethod(System.String,System.String)">
            <summary>
              Returns true or false if the object passed has the function.
            </summary>
            <param name="simobject"> </param>
            <param name="method"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.IsFunction(System.String)">
            <summary>
              Returns true or false if the function exists inside of Torque.
            </summary>
            <param name="function_name"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.GetObjectID(System.String)">
            <summary>
              Gets the ID (UINT32) of the object passed.
            </summary>
            <param name="simobj_id"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.PathOnMissionLoadDone">
            <summary>
              Calls PathOnMissionLoadDone inside of Torque
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.ClearServerPaths">
            <summary>
              Calls ClearServerPaths inside of Torque
            </summary>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.GetDatablock(System.String)">
            <summary>
              Returns the datablock id to the passed simobject.
            </summary>
            <param name="simobject"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.GetName(System.String)">
            <summary>
              Gets the name of the object passed, usually the ID of an object.
            Note this function accepts compound simobjects... 
            
            i.e. 
            player.client
            1233.client.3
            123.3.3
             
            </summary>
            <param name="simobject"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.NameToId(System.String)">
            <summary>
              Gets the ID of the name passed.
            </summary>
            <param name="name"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.IsMemberOfClass(System.String,System.String)">
            <summary>
              Determines if the classname is a member of the superclassname
            </summary>
            <param name="classname"> </param>
            <param name="superclassname"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.SpawnObject(System.String,System.String,System.String,System.String,System.String)">
            <summary>
              Calls Torque's spawn object code.
            </summary>
            <param name="spawnClass"> </param>
            <param name="spawnDataBlock"> </param>
            <param name="spawnName"> </param>
            <param name="spawnProperties"> </param>
            <param name="spawnScript"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.GetClassName(System.String)">
            <summary>
              Gets the classname of the simobject.
            </summary>
            <param name="simobject"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.ConsoleCallParent(System.String,System.String,System.Int32,System.String[],System.Boolean)">
            <summary>
              Calls a function on a object in a parent package for the object. So.. function AIPlayer::something(%this) { Parent::SomeThing(%this); }
            </summary>
            <param name="simobject"> </param>
            <param name="function"> </param>
            <param name="namespacedepth"> How many parents to go up. </param>
            <param name="parameters"> </param>
            <param name="donotpassdepth"> Use this flag, when the parent being called is a C++ function. </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.ConsoleCallParent(System.String,System.Int32,System.String[],System.Boolean)">
            <summary>
              Calls a parent function to a global function.
            </summary>
            <param name="function"> </param>
            <param name="namespacedepth"> </param>
            <param name="parameters"> </param>
            <param name="DoNotPassDepth"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.ConsoleCallCn(System.String,System.String,System.String[])">
            <summary>
              This function is a generic handler for the Object::Function() syntax. The classname is really a misnomer since it can be a classname, package or simobject.
            </summary>
            <param name="classname"> </param>
            <param name="function"> </param>
            <param name="parameters"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.CommandToClient(System.String,System.String,System.String[])">
            <summary>
              Sends the command to client just like TorqueScript's function.
            </summary>
            <param name="client"> </param>
            <param name="function"> </param>
            <param name="parameters"> </param>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.CommandToServer(System.String,System.String[])">
            <summary>
              Sends a command to the server just like the TorqueScript function.
            </summary>
            <param name="function"> </param>
            <param name="parameters"> </param>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.ConsoleGetSimTime">
            <summary>
              Returns the simtime from Torque.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.IsObject(System.String)">
            <summary>
              Determines if the id or name passed is an object. Note: handles player.client
            </summary>
            <param name="simobjectid"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.SimObjectIsField(System.String,System.String)">
            <summary>
              Determines if the simobject has the field passed.
            </summary>
            <param name="simobjectId"> </param>
            <param name="fieldname"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.NameSpaceIsMethod(System.String,System.String)">
            <summary>
              Determines if the namespace passed has the function.
            </summary>
            <param name="namespaceorObject"> </param>
            <param name="method"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.ContainerRadiusSearch(WinterLeaf.Engine.Containers.Point3F,System.Double,System.UInt32,System.Boolean)">
            <summary>
              Customized container radius search which returns a list of simobject ID's in the radius.
            </summary>
            <param name="p"> </param>
            <param name="searchradius"> </param>
            <param name="searchmask"> </param>
            <param name="useclientcontainer"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.GetVar(System.String)">
            <summary>
            
            </summary>
            <param name="variable"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni._GetVar(System.String)">
            <summary>
            
            </summary>
            <param name="variable"></param>
            <returns></returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.SceneObjectGetTypeMask(System.String)">
            <summary>
              Get's the mask type of the object.
            </summary>
            <param name="sceneObject"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.SceneObjectInitContainerRadiusSearch(WinterLeaf.Engine.Containers.Point3F,System.Single,System.UInt32,System.Boolean)">
            <summary>
              Does a raidus search for a specified simobject type.
            </summary>
            <param name="pos"> </param>
            <param name="radius"> </param>
            <param name="mask"> </param>
            <param name="useclientcontainer"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.ClientGroupGetCount">
            <summary>
              Gets the number of objects in the client group.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.ClientGroupGetObject(System.UInt32)">
            <summary>
              Gets the specified object back from the client group.
            </summary>
            <param name="index"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.Execute(System.String,System.String[])">
            <summary>
              Executes the function with the passed parameters.
            </summary>
            <param name="function"> </param>
            <param name="parameters"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.SimObjectCall(System.String,System.String,System.String[])">
            <summary>
              Calls the member function on the simobject with the passed parameters.
            </summary>
            <param name="simobject"> </param>
            <param name="function"> </param>
            <param name="parameters"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.SimObjectCallScript(System.String,System.String,System.String[])">
            <summary>
              Calls the member function on the simobject with the passed parameters.
            </summary>
            <param name="simobject"> </param>
            <param name="function"> </param>
            <param name="parameters"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.GetEulerRotation(System.String)">
            <summary>
              Gets Eular Rotation.
            </summary>
            <param name="simobject"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.MathMatrixCreateFromEuler(WinterLeaf.Engine.Containers.TransformF)">
            <summary>
              Create Matrix from Euler.
            </summary>
            <param name="transform"> </param>
            <returns> </returns>
        </member>
        <member name="M:WinterLeaf.Engine.Omni.MathMatrixMulVector(WinterLeaf.Engine.Containers.TransformF,WinterLeaf.Engine.Containers.Point3F)">
            <summary>
              Creates Matrix from vector.
            </summary>
            <param name="transform"> </param>
            <param name="vector"> </param>
            <returns> </returns>
        </member>
        <member name="P:WinterLeaf.Engine.Omni.self">
            <summary>
                Reference to the dnTorque Instance
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Omni.IsRunning">
            <summary>
                Whether the engine is running or not.
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Omni.Debugging">
            <summary>
                Turns on/off debugging information
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Omni.DebuggingShowScriptCalls">
            <summary>
            When set to true, all TorqueScript calls will be echoed to the console.
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Omni.WindowIcon">
            <summary>
                The icon for the window
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Omni.tick">
            <summary>
                Locks the T3D mtorque_enginetick
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Omni.torque_hwnd">
            <summary>
                Handle to the window.
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Omni.ScriptExtensions_Allow">
            <summary>
            When true, CSharp files in LiveScripts will be evaluated.
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Omni.ScriptExtensions_HandleExceptions">
            <summary>
            When true, all scripts in LiveScripts will be called with a wrapping Try/Catch clause.
            </summary>
        </member>
        <member name="E:WinterLeaf.Engine.Omni.onShutDown">
            <summary>
                Event raised when T3D is shutting down.
            </summary>
        </member>
        <member name="T:WinterLeaf.Engine.Omni.ShutDownEventHandler">
            <summary>
                Used to signal the application hosting the dnTorque Object that T3D is
                shutting down.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:WinterLeaf.Engine.Omni.ObjectActivator">
            <summary>
                Used by the new object creator.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WinterLeaf.Engine.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WinterLeaf.Engine.Properties.Resources.Point3F_Point3F_Point3F___Error_Invalid_Transform_">
            <summary>
              Looks up a localized string similar to Point3F - Error Invalid Transform .
            </summary>
        </member>
    </members>
</doc>
